
DeltaTPlus_STM32WB55RG_090525.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c8b8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a34  0801c9f8  0801c9f8  0001d9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e42c  0801e42c  0001f42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801e434  0801e434  0001f434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000008  0801e43c  0801e43c  0001f43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  0801e444  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200002ec  0801e728  000202ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000324  0801e75d  00020324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000338  0801e76e  00020338  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001b0c  0801e76e  00020b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00022000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00022000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801e76e  000211e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0007ed20  00000000  00000000  00021a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000de72  00000000  00000000  000a07b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000043b0  00000000  00000000  000ae630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000341f  00000000  00000000  000b29e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003c5eb  00000000  00000000  000b5dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00060570  00000000  00000000  000f23ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001223f3  00000000  00000000  0015295a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00274d4d  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012f80  00000000  00000000  00274d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000008f  00000000  00000000  00287d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000338 	.word	0x20000338
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c9e0 	.word	0x0801c9e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000033c 	.word	0x2000033c
 800017c:	0801c9e0 	.word	0x0801c9e0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b988 	b.w	8000f40 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	468e      	mov	lr, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	4688      	mov	r8, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	d962      	bls.n	8000d24 <__udivmoddi4+0xdc>
 8000c5e:	fab2 f682 	clz	r6, r2
 8000c62:	b14e      	cbz	r6, 8000c78 <__udivmoddi4+0x30>
 8000c64:	f1c6 0320 	rsb	r3, r6, #32
 8000c68:	fa01 f806 	lsl.w	r8, r1, r6
 8000c6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c70:	40b7      	lsls	r7, r6
 8000c72:	ea43 0808 	orr.w	r8, r3, r8
 8000c76:	40b4      	lsls	r4, r6
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	fa1f fc87 	uxth.w	ip, r7
 8000c80:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c84:	0c23      	lsrs	r3, r4, #16
 8000c86:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c9c:	f080 80ea 	bcs.w	8000e74 <__udivmoddi4+0x22c>
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	f240 80e7 	bls.w	8000e74 <__udivmoddi4+0x22c>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	443b      	add	r3, r7
 8000caa:	1a9a      	subs	r2, r3, r2
 8000cac:	b2a3      	uxth	r3, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cba:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cbe:	459c      	cmp	ip, r3
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0x8e>
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc8:	f080 80d6 	bcs.w	8000e78 <__udivmoddi4+0x230>
 8000ccc:	459c      	cmp	ip, r3
 8000cce:	f240 80d3 	bls.w	8000e78 <__udivmoddi4+0x230>
 8000cd2:	443b      	add	r3, r7
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cda:	eba3 030c 	sub.w	r3, r3, ip
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11d      	cbz	r5, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40f3      	lsrs	r3, r6
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d905      	bls.n	8000cfe <__udivmoddi4+0xb6>
 8000cf2:	b10d      	cbz	r5, 8000cf8 <__udivmoddi4+0xb0>
 8000cf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e7f5      	b.n	8000cea <__udivmoddi4+0xa2>
 8000cfe:	fab3 f183 	clz	r1, r3
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d146      	bne.n	8000d94 <__udivmoddi4+0x14c>
 8000d06:	4573      	cmp	r3, lr
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xc8>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 8105 	bhi.w	8000f1a <__udivmoddi4+0x2d2>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	4690      	mov	r8, r2
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e5      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d1e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d22:	e7e2      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f000 8090 	beq.w	8000e4a <__udivmoddi4+0x202>
 8000d2a:	fab2 f682 	clz	r6, r2
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	f040 80a4 	bne.w	8000e7c <__udivmoddi4+0x234>
 8000d34:	1a8a      	subs	r2, r1, r2
 8000d36:	0c03      	lsrs	r3, r0, #16
 8000d38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3c:	b280      	uxth	r0, r0
 8000d3e:	b2bc      	uxth	r4, r7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d46:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x11e>
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x11c>
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	f200 80e0 	bhi.w	8000f24 <__udivmoddi4+0x2dc>
 8000d64:	46c4      	mov	ip, r8
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d6c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d70:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d74:	fb02 f404 	mul.w	r4, r2, r4
 8000d78:	429c      	cmp	r4, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x144>
 8000d7c:	18fb      	adds	r3, r7, r3
 8000d7e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x142>
 8000d84:	429c      	cmp	r4, r3
 8000d86:	f200 80ca 	bhi.w	8000f1e <__udivmoddi4+0x2d6>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d92:	e7a5      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000d94:	f1c1 0620 	rsb	r6, r1, #32
 8000d98:	408b      	lsls	r3, r1
 8000d9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9e:	431f      	orrs	r7, r3
 8000da0:	fa0e f401 	lsl.w	r4, lr, r1
 8000da4:	fa20 f306 	lsr.w	r3, r0, r6
 8000da8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	fa00 f801 	lsl.w	r8, r0, r1
 8000db6:	fa1f fc87 	uxth.w	ip, r7
 8000dba:	fbbe f0f9 	udiv	r0, lr, r9
 8000dbe:	0c1c      	lsrs	r4, r3, #16
 8000dc0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000dc4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dc8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x1a0>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dda:	f080 809c 	bcs.w	8000f16 <__udivmoddi4+0x2ce>
 8000dde:	45a6      	cmp	lr, r4
 8000de0:	f240 8099 	bls.w	8000f16 <__udivmoddi4+0x2ce>
 8000de4:	3802      	subs	r0, #2
 8000de6:	443c      	add	r4, r7
 8000de8:	eba4 040e 	sub.w	r4, r4, lr
 8000dec:	fa1f fe83 	uxth.w	lr, r3
 8000df0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000df4:	fb09 4413 	mls	r4, r9, r3, r4
 8000df8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dfc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e00:	45a4      	cmp	ip, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x1ce>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e0a:	f080 8082 	bcs.w	8000f12 <__udivmoddi4+0x2ca>
 8000e0e:	45a4      	cmp	ip, r4
 8000e10:	d97f      	bls.n	8000f12 <__udivmoddi4+0x2ca>
 8000e12:	3b02      	subs	r3, #2
 8000e14:	443c      	add	r4, r7
 8000e16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e22:	4564      	cmp	r4, ip
 8000e24:	4673      	mov	r3, lr
 8000e26:	46e1      	mov	r9, ip
 8000e28:	d362      	bcc.n	8000ef0 <__udivmoddi4+0x2a8>
 8000e2a:	d05f      	beq.n	8000eec <__udivmoddi4+0x2a4>
 8000e2c:	b15d      	cbz	r5, 8000e46 <__udivmoddi4+0x1fe>
 8000e2e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e32:	eb64 0409 	sbc.w	r4, r4, r9
 8000e36:	fa04 f606 	lsl.w	r6, r4, r6
 8000e3a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e3e:	431e      	orrs	r6, r3
 8000e40:	40cc      	lsrs	r4, r1
 8000e42:	e9c5 6400 	strd	r6, r4, [r5]
 8000e46:	2100      	movs	r1, #0
 8000e48:	e74f      	b.n	8000cea <__udivmoddi4+0xa2>
 8000e4a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e4e:	0c01      	lsrs	r1, r0, #16
 8000e50:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e54:	b280      	uxth	r0, r0
 8000e56:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	463c      	mov	r4, r7
 8000e60:	46b8      	mov	r8, r7
 8000e62:	46be      	mov	lr, r7
 8000e64:	2620      	movs	r6, #32
 8000e66:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e6a:	eba2 0208 	sub.w	r2, r2, r8
 8000e6e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e72:	e766      	b.n	8000d42 <__udivmoddi4+0xfa>
 8000e74:	4601      	mov	r1, r0
 8000e76:	e718      	b.n	8000caa <__udivmoddi4+0x62>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	e72c      	b.n	8000cd6 <__udivmoddi4+0x8e>
 8000e7c:	f1c6 0220 	rsb	r2, r6, #32
 8000e80:	fa2e f302 	lsr.w	r3, lr, r2
 8000e84:	40b7      	lsls	r7, r6
 8000e86:	40b1      	lsls	r1, r6
 8000e88:	fa20 f202 	lsr.w	r2, r0, r2
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	430a      	orrs	r2, r1
 8000e92:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e96:	b2bc      	uxth	r4, r7
 8000e98:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb08 f904 	mul.w	r9, r8, r4
 8000ea6:	40b0      	lsls	r0, r6
 8000ea8:	4589      	cmp	r9, r1
 8000eaa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eae:	b280      	uxth	r0, r0
 8000eb0:	d93e      	bls.n	8000f30 <__udivmoddi4+0x2e8>
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000eb8:	d201      	bcs.n	8000ebe <__udivmoddi4+0x276>
 8000eba:	4589      	cmp	r9, r1
 8000ebc:	d81f      	bhi.n	8000efe <__udivmoddi4+0x2b6>
 8000ebe:	eba1 0109 	sub.w	r1, r1, r9
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fb09 f804 	mul.w	r8, r9, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	b292      	uxth	r2, r2
 8000ed0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed4:	4542      	cmp	r2, r8
 8000ed6:	d229      	bcs.n	8000f2c <__udivmoddi4+0x2e4>
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ede:	d2c4      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee0:	4542      	cmp	r2, r8
 8000ee2:	d2c2      	bcs.n	8000e6a <__udivmoddi4+0x222>
 8000ee4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ee8:	443a      	add	r2, r7
 8000eea:	e7be      	b.n	8000e6a <__udivmoddi4+0x222>
 8000eec:	45f0      	cmp	r8, lr
 8000eee:	d29d      	bcs.n	8000e2c <__udivmoddi4+0x1e4>
 8000ef0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ef4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ef8:	3801      	subs	r0, #1
 8000efa:	46e1      	mov	r9, ip
 8000efc:	e796      	b.n	8000e2c <__udivmoddi4+0x1e4>
 8000efe:	eba7 0909 	sub.w	r9, r7, r9
 8000f02:	4449      	add	r1, r9
 8000f04:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f08:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0c:	fb09 f804 	mul.w	r8, r9, r4
 8000f10:	e7db      	b.n	8000eca <__udivmoddi4+0x282>
 8000f12:	4673      	mov	r3, lr
 8000f14:	e77f      	b.n	8000e16 <__udivmoddi4+0x1ce>
 8000f16:	4650      	mov	r0, sl
 8000f18:	e766      	b.n	8000de8 <__udivmoddi4+0x1a0>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e6fd      	b.n	8000d1a <__udivmoddi4+0xd2>
 8000f1e:	443b      	add	r3, r7
 8000f20:	3a02      	subs	r2, #2
 8000f22:	e733      	b.n	8000d8c <__udivmoddi4+0x144>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	443b      	add	r3, r7
 8000f2a:	e71c      	b.n	8000d66 <__udivmoddi4+0x11e>
 8000f2c:	4649      	mov	r1, r9
 8000f2e:	e79c      	b.n	8000e6a <__udivmoddi4+0x222>
 8000f30:	eba1 0109 	sub.w	r1, r1, r9
 8000f34:	46c4      	mov	ip, r8
 8000f36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3a:	fb09 f804 	mul.w	r8, r9, r4
 8000f3e:	e7c4      	b.n	8000eca <__udivmoddi4+0x282>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_ZN23Adafruit_MAX17048_STM32C1Ev>:

#include "Adafruit_MAX1704X.h"

#include <math.h>

Adafruit_MAX17048_STM32::Adafruit_MAX17048_STM32()
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
{
  _hi2c = nullptr;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
  _i2c_addr = MAX17048_I2CADDR_DEFAULT << 1; // STM32 HAL uses 8-bit address
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	226c      	movs	r2, #108	@ 0x6c
 8000f56:	809a      	strh	r2, [r3, #4]
  _timeout = 1000;                           // 1 second timeout
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f5e:	609a      	str	r2, [r3, #8]
}
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>:

bool Adafruit_MAX17048_STM32::begin(I2C_HandleTypeDef *hi2c, uint16_t i2c_addr)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	60f8      	str	r0, [r7, #12]
 8000f76:	60b9      	str	r1, [r7, #8]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	80fb      	strh	r3, [r7, #6]
  _hi2c = hi2c;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	601a      	str	r2, [r3, #0]
  _i2c_addr = i2c_addr << 1; // Convert to 8-bit address for HAL
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	809a      	strh	r2, [r3, #4]

  if (!isDeviceReady())
 8000f8c:	68f8      	ldr	r0, [r7, #12]
 8000f8e:	f000 f92d 	bl	80011ec <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8000f92:	4603      	mov	r3, r0
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x34>
  {
    return false;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e013      	b.n	8000fca <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  if (!reset())
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f937 	bl	8001216 <_ZN23Adafruit_MAX17048_STM325resetEv>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x4a>
  {
    return false;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e008      	b.n	8000fca <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft+0x5c>
  }

  enableSleep(false);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f000 f9f1 	bl	80013a2 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>
  sleep(false);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f9d6 	bl	8001374 <_ZN23Adafruit_MAX17048_STM325sleepEb>

  return true;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>:

bool Adafruit_MAX17048_STM32::writeRegister8(uint8_t reg, uint8_t value)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af02      	add	r7, sp, #8
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2] = {reg, value};
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	733b      	strb	r3, [r7, #12]
 8000fe6:	78bb      	ldrb	r3, [r7, #2]
 8000fe8:	737b      	strb	r3, [r7, #13]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 2, _timeout);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	8899      	ldrh	r1, [r3, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	f007 fc15 	bl	800882c <HAL_I2C_Master_Transmit>
 8001002:	4603      	mov	r3, r0
 8001004:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b00      	cmp	r3, #0
 800100a:	bf0c      	ite	eq
 800100c:	2301      	moveq	r3, #1
 800100e:	2300      	movne	r3, #0
 8001010:	b2db      	uxtb	r3, r3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>:

bool Adafruit_MAX17048_STM32::writeRegister16(uint8_t reg, uint16_t value)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af02      	add	r7, sp, #8
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	70fb      	strb	r3, [r7, #3]
 8001026:	4613      	mov	r3, r2
 8001028:	803b      	strh	r3, [r7, #0]
  uint8_t data[3] = {reg, (uint8_t)(value >> 8), (uint8_t)(value & 0xFF)};
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	733b      	strb	r3, [r7, #12]
 800102e:	883b      	ldrh	r3, [r7, #0]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	b29b      	uxth	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
 8001038:	883b      	ldrh	r3, [r7, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, data, 3, _timeout);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	8899      	ldrh	r1, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2303      	movs	r3, #3
 8001052:	f007 fbeb 	bl	800882c <HAL_I2C_Master_Transmit>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
  return (status == HAL_OK);
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	bf0c      	ite	eq
 8001060:	2301      	moveq	r3, #1
 8001062:	2300      	movne	r3, #0
 8001064:	b2db      	uxtb	r3, r3
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>:

uint8_t Adafruit_MAX17048_STM32::readRegister8(uint8_t reg)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af02      	add	r7, sp, #8
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
  uint8_t data = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	8899      	ldrh	r1, [r3, #4]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	1cfa      	adds	r2, r7, #3
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2301      	movs	r3, #1
 8001090:	f007 fbcc 	bl	800882c <HAL_I2C_Master_Transmit>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x3a>
  {
    return 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e00c      	b.n	80010c2 <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh+0x54>
  }

  // Read data
  HAL_I2C_Master_Receive(_hi2c, _i2c_addr, &data, 1, _timeout);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8899      	ldrh	r1, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f107 020f 	add.w	r2, r7, #15
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	f007 fcce 	bl	8008a5c <HAL_I2C_Master_Receive>

  return data;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>:

uint16_t Adafruit_MAX17048_STM32::readRegister16(uint8_t reg)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af02      	add	r7, sp, #8
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	460b      	mov	r3, r1
 80010d4:	70fb      	strb	r3, [r7, #3]
  uint8_t data[2] = {0, 0};
 80010d6:	2300      	movs	r3, #0
 80010d8:	81bb      	strh	r3, [r7, #12]

  // Write register address
  if (HAL_I2C_Master_Transmit(_hi2c, _i2c_addr, &reg, 1, _timeout) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	8899      	ldrh	r1, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	1cfa      	adds	r2, r7, #3
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	2301      	movs	r3, #1
 80010ec:	f007 fb9e 	bl	800882c <HAL_I2C_Master_Transmit>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x3a>
  {
    return 0;
 8001100:	2300      	movs	r3, #0
 8001102:	e01e      	b.n	8001142 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  // Read data
  if (HAL_I2C_Master_Receive(_hi2c, _i2c_addr, data, 2, _timeout) != HAL_OK)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	8899      	ldrh	r1, [r3, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f107 020c 	add.w	r2, r7, #12
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2302      	movs	r3, #2
 8001118:	f007 fca0 	bl	8008a5c <HAL_I2C_Master_Receive>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	bf14      	ite	ne
 8001122:	2301      	movne	r3, #1
 8001124:	2300      	moveq	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x66>
  {
    return 0;
 800112c:	2300      	movs	r3, #0
 800112e:	e008      	b.n	8001142 <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh+0x78>
  }

  return (data[0] << 8) | data[1]; // MSB first
 8001130:	7b3b      	ldrb	r3, [r7, #12]
 8001132:	b21b      	sxth	r3, r3
 8001134:	021b      	lsls	r3, r3, #8
 8001136:	b21a      	sxth	r2, r3
 8001138:	7b7b      	ldrb	r3, [r7, #13]
 800113a:	b21b      	sxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b21b      	sxth	r3, r3
 8001140:	b29b      	uxth	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>:

bool Adafruit_MAX17048_STM32::writeBits(uint8_t reg, uint8_t bitStart, uint8_t length, uint8_t data)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	4608      	mov	r0, r1
 8001154:	4611      	mov	r1, r2
 8001156:	461a      	mov	r2, r3
 8001158:	4603      	mov	r3, r0
 800115a:	70fb      	strb	r3, [r7, #3]
 800115c:	460b      	mov	r3, r1
 800115e:	70bb      	strb	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  uint8_t regValue = readRegister8(reg);
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ff80 	bl	800106e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 800116e:	4603      	mov	r3, r0
 8001170:	73fb      	strb	r3, [r7, #15]
  uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 8001172:	787b      	ldrb	r3, [r7, #1]
 8001174:	2201      	movs	r2, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	78b9      	ldrb	r1, [r7, #2]
 800117e:	787b      	ldrb	r3, [r7, #1]
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	3301      	adds	r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	73bb      	strb	r3, [r7, #14]
  data <<= (bitStart - length + 1);
 800118a:	7e3a      	ldrb	r2, [r7, #24]
 800118c:	78b9      	ldrb	r1, [r7, #2]
 800118e:	787b      	ldrb	r3, [r7, #1]
 8001190:	1acb      	subs	r3, r1, r3
 8001192:	3301      	adds	r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	763b      	strb	r3, [r7, #24]
  data &= mask;
 800119a:	7e3a      	ldrb	r2, [r7, #24]
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	4013      	ands	r3, r2
 80011a0:	763b      	strb	r3, [r7, #24]
  regValue &= ~mask;
 80011a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	b25a      	sxtb	r2, r3
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4013      	ands	r3, r2
 80011b0:	b25b      	sxtb	r3, r3
 80011b2:	73fb      	strb	r3, [r7, #15]
  regValue |= data;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	7e3b      	ldrb	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(reg, regValue);
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	78fb      	ldrb	r3, [r7, #3]
 80011c0:	4619      	mov	r1, r3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f7ff ff05 	bl	8000fd2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>:
  regValue >>= (bitStart - length + 1);
  return regValue;
}

uint16_t Adafruit_MAX17048_STM32::getICversion(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  return readRegister16(MAX1704X_VERSION_REG);
 80011da:	2108      	movs	r1, #8
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff74 	bl	80010ca <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>:
{
  return readRegister8(MAX1704X_CHIPID_REG);
}

bool Adafruit_MAX17048_STM32::isDeviceReady(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return (getICversion() & 0xFFF0) == 0x0010;
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ffec 	bl	80011d2 <_ZN23Adafruit_MAX17048_STM3212getICversionEv>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8001202:	4013      	ands	r3, r2
 8001204:	2b10      	cmp	r3, #16
 8001206:	bf0c      	ite	eq
 8001208:	2301      	moveq	r3, #1
 800120a:	2300      	movne	r3, #0
 800120c:	b2db      	uxtb	r3, r3
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZN23Adafruit_MAX17048_STM325resetEv>:

bool Adafruit_MAX17048_STM32::reset(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  // Send reset command - expect this to fail with NACK as chip resets
  writeRegister16(MAX1704X_CMD_REG, 0x5400);
 800121e:	f44f 42a8 	mov.w	r2, #21504	@ 0x5400
 8001222:	21fe      	movs	r1, #254	@ 0xfe
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff fef8 	bl	800101a <_ZN23Adafruit_MAX17048_STM3215writeRegister16Eht>

  // Wait for reset to complete
  HAL_Delay(100);
 800122a:	2064      	movs	r0, #100	@ 0x64
 800122c:	f004 f93f 	bl	80054ae <HAL_Delay>

  // Try to clear reset flag
  for (uint8_t retries = 0; retries < 3; retries++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e00e      	b.n	8001254 <_ZN23Adafruit_MAX17048_STM325resetEv+0x3e>
  {
    if (clearAlertFlag(MAX1704X_ALERTFLAG_RESET_INDICATOR))
 8001236:	2101      	movs	r1, #1
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f813 	bl	8001264 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <_ZN23Adafruit_MAX17048_STM325resetEv+0x32>
    {
      return true;
 8001244:	2301      	movs	r3, #1
 8001246:	e009      	b.n	800125c <_ZN23Adafruit_MAX17048_STM325resetEv+0x46>
    }
    HAL_Delay(50);
 8001248:	2032      	movs	r0, #50	@ 0x32
 800124a:	f004 f930 	bl	80054ae <HAL_Delay>
  for (uint8_t retries = 0; retries < 3; retries++)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d9ed      	bls.n	8001236 <_ZN23Adafruit_MAX17048_STM325resetEv+0x20>
  }

  return false;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_ZN23Adafruit_MAX17048_STM3214clearAlertFlagEh>:

bool Adafruit_MAX17048_STM32::clearAlertFlag(uint8_t flags)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	70fb      	strb	r3, [r7, #3]
  uint8_t status = readRegister8(MAX1704X_STATUS_REG);
 8001270:	211a      	movs	r1, #26
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fefb 	bl	800106e <_ZN23Adafruit_MAX17048_STM3213readRegister8Eh>
 8001278:	4603      	mov	r3, r0
 800127a:	73fb      	strb	r3, [r7, #15]
  status &= ~flags;
 800127c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001280:	43db      	mvns	r3, r3
 8001282:	b25a      	sxtb	r2, r3
 8001284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001288:	4013      	ands	r3, r2
 800128a:	b25b      	sxtb	r3, r3
 800128c:	73fb      	strb	r3, [r7, #15]
  return writeRegister8(MAX1704X_STATUS_REG, status);
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	461a      	mov	r2, r3
 8001292:	211a      	movs	r1, #26
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fe9c 	bl	8000fd2 <_ZN23Adafruit_MAX17048_STM3214writeRegister8Ehh>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>:
  uint16_t voltage = readRegister16(MAX1704X_VCELL_REG);
  return voltage * 78.125 / 1000000.0; // Convert to volts
}

float Adafruit_MAX17048_STM32::cellPercent(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff9d 	bl	80011ec <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f083 0301 	eor.w	r3, r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x1e>
  {
    return NAN;
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x58>)
 80012c0:	e015      	b.n	80012ee <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x4a>
  }

  uint16_t percent = readRegister16(MAX1704X_SOC_REG);
 80012c2:	2104      	movs	r1, #4
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff00 	bl	80010ca <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 80012ca:	4603      	mov	r3, r0
 80012cc:	81fb      	strh	r3, [r7, #14]
  return percent / 256.0; // Convert to percentage
 80012ce:	89fb      	ldrh	r3, [r7, #14]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f90f 	bl	80004f4 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv+0x5c>)
 80012dc:	f7ff fa9e 	bl	800081c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc46 	bl	8000b78 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	7fc00000 	.word	0x7fc00000
 8001300:	40700000 	.word	0x40700000
 8001304:	00000000 	.word	0x00000000

08001308 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>:

float Adafruit_MAX17048_STM32::chargeRate(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if (!isDeviceReady())
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff6b 	bl	80011ec <_ZN23Adafruit_MAX17048_STM3213isDeviceReadyEv>
 8001316:	4603      	mov	r3, r0
 8001318:	f083 0301 	eor.w	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x1e>
  {
    return NAN;
 8001322:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x68>)
 8001324:	e016      	b.n	8001354 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x4c>
  }

  int16_t rate = (int16_t)readRegister16(MAX1704X_CRATE_REG);
 8001326:	2116      	movs	r1, #22
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fece 	bl	80010ca <_ZN23Adafruit_MAX17048_STM3214readRegister16Eh>
 800132e:	4603      	mov	r3, r0
 8001330:	81fb      	strh	r3, [r7, #14]
  return rate * 0.208; // Convert to %/hour
 8001332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f8dc 	bl	80004f4 <__aeabi_i2d>
 800133c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001368 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv+0x60>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f941 	bl	80005c8 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc13 	bl	8000b78 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
}
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	f3af 8000 	nop.w
 8001368:	76c8b439 	.word	0x76c8b439
 800136c:	3fca9fbe 	.word	0x3fca9fbe
 8001370:	7fc00000 	.word	0x7fc00000

08001374 <_ZN23Adafruit_MAX17048_STM325sleepEb>:
  writeRegister8(MAX1704X_HIBRT_REG, 0x00);
  writeRegister8(MAX1704X_HIBRT_REG + 1, 0x00);
}

void Adafruit_MAX17048_STM32::sleep(bool s)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af02      	add	r7, sp, #8
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_CONFIG_REG, 7, 1, s ? 1 : 0);
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZN23Adafruit_MAX17048_STM325sleepEb+0x16>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <_ZN23Adafruit_MAX17048_STM325sleepEb+0x18>
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	2207      	movs	r2, #7
 8001392:	210c      	movs	r1, #12
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff fed8 	bl	800114a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb>:

void Adafruit_MAX17048_STM32::enableSleep(bool en)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b084      	sub	sp, #16
 80013a6:	af02      	add	r7, sp, #8
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	70fb      	strb	r3, [r7, #3]
  writeBits(MAX1704X_MODE_REG, 5, 1, en ? 1 : 0);
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x16>
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <_ZN23Adafruit_MAX17048_STM3211enableSleepEb+0x18>
 80013b8:	2300      	movs	r3, #0
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	2205      	movs	r2, #5
 80013c0:	2106      	movs	r1, #6
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fec1 	bl	800114a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>:

void Adafruit_MAX17048_STM32::quickStart(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	6078      	str	r0, [r7, #4]
  writeBits(MAX1704X_MODE_REG, 6, 1, 1);
 80013d8:	2301      	movs	r3, #1
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	2206      	movs	r2, #6
 80013e0:	2106      	movs	r1, #6
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff feb1 	bl	800114a <_ZN23Adafruit_MAX17048_STM329writeBitsEhhhh>
  // Bit is automatically cleared by the chip
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4a06      	ldr	r2, [pc, #24]	@ (8001414 <_ZN5PrintC1Ev+0x24>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	0801d31c 	.word	0x0801d31c

08001418 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	2300      	movs	r3, #0
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <_ZN12Adafruit_GFX9setCursorEss>:
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	807b      	strh	r3, [r7, #2]
 800144e:	4613      	mov	r3, r2
 8001450:	803b      	strh	r3, [r7, #0]
    cursor_x = x;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	887a      	ldrh	r2, [r7, #2]
 8001456:	821a      	strh	r2, [r3, #16]
    cursor_y = y;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	883a      	ldrh	r2, [r7, #0]
 800145c:	825a      	strh	r2, [r3, #18]
  }
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <_ZN12Adafruit_GFX12setTextColorEt>:
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 800146a:	b480      	push	{r7}
 800146c:	b083      	sub	sp, #12
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	887a      	ldrh	r2, [r7, #2]
 800147a:	82da      	strh	r2, [r3, #22]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	8ada      	ldrh	r2, [r3, #22]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	829a      	strh	r2, [r3, #20]
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZNK12Adafruit_GFX5widthEv>:
  /*!
    @brief      Get width of the display, accounting for current rotation
    @returns    Width in pixels
  */
  /************************************************************************/
  int16_t width(void) const { return _width; };
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_ZNK12Adafruit_GFX6heightEv>:
  /*!
    @brief      Get height of the display, accounting for current rotation
    @returns    Height in pixels
  */
  /************************************************************************/
  int16_t height(void) const { return _height; }
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZNK12Adafruit_GFX11getRotationEv>:
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	7e9b      	ldrb	r3, [r3, #26]
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <_Z18pgm_read_glyph_ptrPK7GFXfonth>:
#define pgm_read_pointer(addr) ((void *)pgm_read_dword(addr))
#else
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
#else
  // expression in __AVR__ section may generate "dereferencing type-punned
  // pointer will break strict-aliasing rules" warning In fact, on other
  // platforms (such as STM32) there is no need to do this pointer magic as
  // program memory may be read in a usual way So expression may be simplified
  return gfxFont->glyph + c;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4413      	add	r3, r2
#endif //__AVR__
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_Z19pgm_read_bitmap_ptrPK7GFXfont>:

inline uint8_t *pgm_read_bitmap_ptr(const GFXfont *gfxFont) {
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
#else
  // expression in __AVR__ section generates "dereferencing type-punned pointer
  // will break strict-aliasing rules" warning In fact, on other platforms (such
  // as STM32) there is no need to do this pointer magic as program memory may
  // be read in a usual way So expression may be simplified
  return gfxFont->bitmap;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
#endif //__AVR__
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_ZN12Adafruit_GFXC1Ess>:
   superclass
   @param    w   Display width, in pixels
   @param    h   Display height, in pixels
*/
/**************************************************************************/
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h) : WIDTH(w), HEIGHT(h) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	803b      	strh	r3, [r7, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff60 	bl	80013f0 <_ZN5PrintC1Ev>
 8001530:	4a1d      	ldr	r2, [pc, #116]	@ (80015a8 <_ZN12Adafruit_GFXC1Ess+0x90>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	887a      	ldrh	r2, [r7, #2]
 800153a:	811a      	strh	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	883a      	ldrh	r2, [r7, #0]
 8001540:	815a      	strh	r2, [r3, #10]
  _width = WIDTH;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	819a      	strh	r2, [r3, #12]
  _height = HEIGHT;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	81da      	strh	r2, [r3, #14]
  rotation = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	769a      	strb	r2, [r3, #26]
  cursor_y = cursor_x = 0;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	821a      	strh	r2, [r3, #16]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	825a      	strh	r2, [r3, #18]
  textsize_x = textsize_y = 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	765a      	strb	r2, [r3, #25]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	7e5a      	ldrb	r2, [r3, #25]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	761a      	strb	r2, [r3, #24]
  textcolor = textbgcolor = 0xFFFF;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001580:	82da      	strh	r2, [r3, #22]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8ada      	ldrh	r2, [r3, #22]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	829a      	strh	r2, [r3, #20]
  wrap = true;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	76da      	strb	r2, [r3, #27]
  _cp437 = false;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	771a      	strb	r2, [r3, #28]
  gfxFont = NULL;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
}
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0801d2c4 	.word	0x0801d2c4

080015ac <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                             uint16_t color) {
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b08b      	sub	sp, #44	@ 0x2c
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	817b      	strh	r3, [r7, #10]
 80015be:	460b      	mov	r3, r1
 80015c0:	813b      	strh	r3, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
#if defined(ESP8266)
  yield();
#endif
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80015c6:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 80015ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80015d4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80015d8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80015dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80015e0:	1acb      	subs	r3, r1, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bfb8      	it	lt
 80015e6:	425b      	neglt	r3, r3
 80015e8:	429a      	cmp	r2, r3
 80015ea:	bfcc      	ite	gt
 80015ec:	2301      	movgt	r3, #1
 80015ee:	2300      	movle	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (steep) {
 80015f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <_ZN12Adafruit_GFX9writeLineEsssst+0x68>
    _swap_int16_t(x0, y0);
 80015fc:	897b      	ldrh	r3, [r7, #10]
 80015fe:	843b      	strh	r3, [r7, #32]
 8001600:	893b      	ldrh	r3, [r7, #8]
 8001602:	817b      	strh	r3, [r7, #10]
 8001604:	8c3b      	ldrh	r3, [r7, #32]
 8001606:	813b      	strh	r3, [r7, #8]
    _swap_int16_t(x1, y1);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	83fb      	strh	r3, [r7, #30]
 800160c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800160e:	80fb      	strh	r3, [r7, #6]
 8001610:	8bfb      	ldrh	r3, [r7, #30]
 8001612:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  if (x0 > x1) {
 8001614:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161c:	429a      	cmp	r2, r3
 800161e:	dd0b      	ble.n	8001638 <_ZN12Adafruit_GFX9writeLineEsssst+0x8c>
    _swap_int16_t(x0, x1);
 8001620:	897b      	ldrh	r3, [r7, #10]
 8001622:	83bb      	strh	r3, [r7, #28]
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	817b      	strh	r3, [r7, #10]
 8001628:	8bbb      	ldrh	r3, [r7, #28]
 800162a:	80fb      	strh	r3, [r7, #6]
    _swap_int16_t(y0, y1);
 800162c:	893b      	ldrh	r3, [r7, #8]
 800162e:	837b      	strh	r3, [r7, #26]
 8001630:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001632:	813b      	strh	r3, [r7, #8]
 8001634:	8b7b      	ldrh	r3, [r7, #26]
 8001636:	873b      	strh	r3, [r7, #56]	@ 0x38
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001638:	88fa      	ldrh	r2, [r7, #6]
 800163a:	897b      	ldrh	r3, [r7, #10]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	b29b      	uxth	r3, r3
 8001640:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8001642:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	@ 0x38
 8001646:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	bfb8      	it	lt
 8001650:	425b      	neglt	r3, r3
 8001652:	82fb      	strh	r3, [r7, #22]

  int16_t err = dx / 2;
 8001654:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001658:	0fda      	lsrs	r2, r3, #31
 800165a:	4413      	add	r3, r2
 800165c:	105b      	asrs	r3, r3, #1
 800165e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  int16_t ystep;

  if (y0 < y1) {
 8001660:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001664:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001668:	429a      	cmp	r2, r3
 800166a:	da02      	bge.n	8001672 <_ZN12Adafruit_GFX9writeLineEsssst+0xc6>
    ystep = 1;
 800166c:	2301      	movs	r3, #1
 800166e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001670:	e037      	b.n	80016e2 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
  } else {
    ystep = -1;
 8001672:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001676:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (; x0 <= x1; x0++) {
 8001678:	e033      	b.n	80016e2 <_ZN12Adafruit_GFX9writeLineEsssst+0x136>
    if (steep) {
 800167a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <_ZN12Adafruit_GFX9writeLineEsssst+0xee>
      writePixel(y0, x0, color);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3318      	adds	r3, #24
 8001688:	681c      	ldr	r4, [r3, #0]
 800168a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800168c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001690:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	47a0      	blx	r4
 8001698:	e00a      	b.n	80016b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x104>
    } else {
      writePixel(x0, y0, color);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3318      	adds	r3, #24
 80016a0:	681c      	ldr	r4, [r3, #0]
 80016a2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80016a4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80016a8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80016ac:	68f8      	ldr	r0, [r7, #12]
 80016ae:	47a0      	blx	r4
    }
    err -= dy;
 80016b0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016b2:	8afb      	ldrh	r3, [r7, #22]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (err < 0) {
 80016ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da09      	bge.n	80016d6 <_ZN12Adafruit_GFX9writeLineEsssst+0x12a>
      y0 += ystep;
 80016c2:	893a      	ldrh	r2, [r7, #8]
 80016c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016c6:	4413      	add	r3, r2
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	813b      	strh	r3, [r7, #8]
      err += dx;
 80016cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80016ce:	8b3b      	ldrh	r3, [r7, #24]
 80016d0:	4413      	add	r3, r2
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (; x0 <= x1; x0++) {
 80016d6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3301      	adds	r3, #1
 80016de:	b29b      	uxth	r3, r3
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	ddc5      	ble.n	800167a <_ZN12Adafruit_GFX9writeLineEsssst+0xce>
    }
  }
}
 80016ee:	bf00      	nop
 80016f0:	bf00      	nop
 80016f2:	372c      	adds	r7, #44	@ 0x2c
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <_ZN12Adafruit_GFX10startWriteEv>:
/**************************************************************************/
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite() {}
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color) {
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4603      	mov	r3, r0
 800171c:	817b      	strh	r3, [r7, #10]
 800171e:	460b      	mov	r3, r1
 8001720:	813b      	strh	r3, [r7, #8]
 8001722:	4613      	mov	r3, r2
 8001724:	80fb      	strh	r3, [r7, #6]
  drawPixel(x, y, color);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	3310      	adds	r3, #16
 800172c:	681c      	ldr	r4, [r3, #0]
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001734:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	47a0      	blx	r4
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                  uint16_t color) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b087      	sub	sp, #28
 8001748:	af02      	add	r7, sp, #8
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	4608      	mov	r0, r1
 800174e:	4611      	mov	r1, r2
 8001750:	461a      	mov	r2, r3
 8001752:	4603      	mov	r3, r0
 8001754:	817b      	strh	r3, [r7, #10]
 8001756:	460b      	mov	r3, r1
 8001758:	813b      	strh	r3, [r7, #8]
 800175a:	4613      	mov	r3, r2
 800175c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Can be just writeLine(x, y, x, y+h-1, color);
  // or writeFillRect(x, y, 1, h, color);
  drawFastVLine(x, y, h, color);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3338      	adds	r3, #56	@ 0x38
 8001764:	681c      	ldr	r4, [r3, #0]
 8001766:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800176a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800176e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001772:	8c3b      	ldrh	r3, [r7, #32]
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	4603      	mov	r3, r0
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	47a0      	blx	r4
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}

08001784 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                  uint16_t color) {
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b087      	sub	sp, #28
 8001788:	af02      	add	r7, sp, #8
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4603      	mov	r3, r0
 8001794:	817b      	strh	r3, [r7, #10]
 8001796:	460b      	mov	r3, r1
 8001798:	813b      	strh	r3, [r7, #8]
 800179a:	4613      	mov	r3, r2
 800179c:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if startWrite is defined!
  // Example: writeLine(x, y, x+w-1, y, color);
  // or writeFillRect(x, y, w, 1, color);
  drawFastHLine(x, y, w, color);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	333c      	adds	r3, #60	@ 0x3c
 80017a4:	681c      	ldr	r4, [r3, #0]
 80017a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ae:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	4603      	mov	r3, r0
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	47a0      	blx	r4
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd90      	pop	{r4, r7, pc}

080017c4 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 uint16_t color) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	4608      	mov	r0, r1
 80017ce:	4611      	mov	r1, r2
 80017d0:	461a      	mov	r2, r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	817b      	strh	r3, [r7, #10]
 80017d6:	460b      	mov	r3, r1
 80017d8:	813b      	strh	r3, [r7, #8]
 80017da:	4613      	mov	r3, r2
 80017dc:	80fb      	strh	r3, [r7, #6]
  // Overwrite in subclasses if desired!
  fillRect(x, y, w, h, color);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3340      	adds	r3, #64	@ 0x40
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80017ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80017f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	4603      	mov	r3, r0
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	47a0      	blx	r4
}
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bd90      	pop	{r4, r7, pc}

0800180a <_ZN12Adafruit_GFX8endWriteEv>:
/*!
   @brief    End a display-writing routine, overwrite in subclasses if
   startWrite is defined!
*/
/**************************************************************************/
void Adafruit_GFX::endWrite() {}
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                 uint16_t color) {
 800181e:	b5b0      	push	{r4, r5, r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af02      	add	r7, sp, #8
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	4608      	mov	r0, r1
 8001828:	4611      	mov	r1, r2
 800182a:	461a      	mov	r2, r3
 800182c:	4603      	mov	r3, r0
 800182e:	817b      	strh	r3, [r7, #10]
 8001830:	460b      	mov	r3, r1
 8001832:	813b      	strh	r3, [r7, #8]
 8001834:	4613      	mov	r3, r2
 8001836:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3314      	adds	r3, #20
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	4798      	blx	r3
  writeLine(x, y, x, y + h - 1, color);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3328      	adds	r3, #40	@ 0x28
 800184a:	681c      	ldr	r4, [r3, #0]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29b      	uxth	r3, r3
 8001858:	b21b      	sxth	r3, r3
 800185a:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 800185e:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001862:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001866:	8c3a      	ldrh	r2, [r7, #32]
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	462b      	mov	r3, r5
 800186e:	4602      	mov	r2, r0
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	47a0      	blx	r4
  endWrite();
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	332c      	adds	r3, #44	@ 0x2c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	4798      	blx	r3
}
 8001880:	bf00      	nop
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}

08001888 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                 uint16_t color) {
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b087      	sub	sp, #28
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	817b      	strh	r3, [r7, #10]
 800189a:	460b      	mov	r3, r1
 800189c:	813b      	strh	r3, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
  startWrite();
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3314      	adds	r3, #20
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	4798      	blx	r3
  writeLine(x, y, x + w - 1, y, color);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3328      	adds	r3, #40	@ 0x28
 80018b4:	681c      	ldr	r4, [r3, #0]
 80018b6:	897a      	ldrh	r2, [r7, #10]
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	4413      	add	r3, r2
 80018bc:	b29b      	uxth	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b218      	sxth	r0, r3
 80018c4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80018c8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80018cc:	8c3b      	ldrh	r3, [r7, #32]
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	4603      	mov	r3, r0
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	47a0      	blx	r4
  endWrite();
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	332c      	adds	r3, #44	@ 0x2c
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	4798      	blx	r3
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}

080018f0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af02      	add	r7, sp, #8
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	461a      	mov	r2, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	817b      	strh	r3, [r7, #10]
 8001902:	460b      	mov	r3, r1
 8001904:	813b      	strh	r3, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3314      	adds	r3, #20
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	4798      	blx	r3
  for (int16_t i = x; i < x + w; i++) {
 8001916:	897b      	ldrh	r3, [r7, #10]
 8001918:	82fb      	strh	r3, [r7, #22]
 800191a:	e014      	b.n	8001946 <_ZN12Adafruit_GFX8fillRectEsssst+0x56>
    writeFastVLine(i, y, h, color);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3320      	adds	r3, #32
 8001922:	681c      	ldr	r4, [r3, #0]
 8001924:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	@ 0x28
 8001928:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800192c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001930:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4603      	mov	r3, r0
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	47a0      	blx	r4
  for (int16_t i = x; i < x + w; i++) {
 800193a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800193e:	b29b      	uxth	r3, r3
 8001940:	3301      	adds	r3, #1
 8001942:	b29b      	uxth	r3, r3
 8001944:	82fb      	strh	r3, [r7, #22]
 8001946:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800194a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800194e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001952:	440b      	add	r3, r1
 8001954:	429a      	cmp	r2, r3
 8001956:	dbe1      	blt.n	800191c <_ZN12Adafruit_GFX8fillRectEsssst+0x2c>
  }
  endWrite();
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	332c      	adds	r3, #44	@ 0x2c
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	4798      	blx	r3
}
 8001964:	bf00      	nop
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}

0800196c <_ZN12Adafruit_GFX10fillScreenEt>:
   @brief    Fill the screen completely with one color. Update in subclasses if
   desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b085      	sub	sp, #20
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	3340      	adds	r3, #64	@ 0x40
 800197e:	681c      	ldr	r4, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	9201      	str	r2, [sp, #4]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	460b      	mov	r3, r1
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	47a0      	blx	r4
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd90      	pop	{r4, r7, pc}

080019a4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
                            uint16_t color) {
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	4608      	mov	r0, r1
 80019ae:	4611      	mov	r1, r2
 80019b0:	461a      	mov	r2, r3
 80019b2:	4603      	mov	r3, r0
 80019b4:	817b      	strh	r3, [r7, #10]
 80019b6:	460b      	mov	r3, r1
 80019b8:	813b      	strh	r3, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  if (x0 == x1) {
 80019be:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d120      	bne.n	8001a0c <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    if (y0 > y1)
 80019ca:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80019d2:	429a      	cmp	r2, r3
 80019d4:	dd05      	ble.n	80019e2 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
      _swap_int16_t(y0, y1);
 80019d6:	893b      	ldrh	r3, [r7, #8]
 80019d8:	82bb      	strh	r3, [r7, #20]
 80019da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019dc:	813b      	strh	r3, [r7, #8]
 80019de:	8abb      	ldrh	r3, [r7, #20]
 80019e0:	853b      	strh	r3, [r7, #40]	@ 0x28
    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3338      	adds	r3, #56	@ 0x38
 80019e8:	681c      	ldr	r4, [r3, #0]
 80019ea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019ec:	893b      	ldrh	r3, [r7, #8]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3301      	adds	r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b218      	sxth	r0, r3
 80019f8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019fc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	47a0      	blx	r4
  } else {
    startWrite();
    writeLine(x0, y0, x1, y1, color);
    endWrite();
  }
}
 8001a0a:	e044      	b.n	8001a96 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
  } else if (y0 == y1) {
 8001a0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d120      	bne.n	8001a5a <_ZN12Adafruit_GFX8drawLineEsssst+0xb6>
    if (x0 > x1)
 8001a18:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dd05      	ble.n	8001a30 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
      _swap_int16_t(x0, x1);
 8001a24:	897b      	ldrh	r3, [r7, #10]
 8001a26:	82fb      	strh	r3, [r7, #22]
 8001a28:	88fb      	ldrh	r3, [r7, #6]
 8001a2a:	817b      	strh	r3, [r7, #10]
 8001a2c:	8afb      	ldrh	r3, [r7, #22]
 8001a2e:	80fb      	strh	r3, [r7, #6]
    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	333c      	adds	r3, #60	@ 0x3c
 8001a36:	681c      	ldr	r4, [r3, #0]
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3301      	adds	r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	b218      	sxth	r0, r3
 8001a46:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a4a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	4603      	mov	r3, r0
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	47a0      	blx	r4
}
 8001a58:	e01d      	b.n	8001a96 <_ZN12Adafruit_GFX8drawLineEsssst+0xf2>
    startWrite();
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3314      	adds	r3, #20
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	4798      	blx	r3
    writeLine(x0, y0, x1, y1, color);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3328      	adds	r3, #40	@ 0x28
 8001a6c:	681c      	ldr	r4, [r3, #0]
 8001a6e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a76:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a7a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4603      	mov	r3, r0
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	47a0      	blx	r4
    endWrite();
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	332c      	adds	r3, #44	@ 0x2c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	4798      	blx	r3
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}

08001a9e <_ZN12Adafruit_GFX10fillCircleEssst>:
    @param    r   Radius of circle
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
                              uint16_t color) {
 8001a9e:	b590      	push	{r4, r7, lr}
 8001aa0:	b089      	sub	sp, #36	@ 0x24
 8001aa2:	af04      	add	r7, sp, #16
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	4608      	mov	r0, r1
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	817b      	strh	r3, [r7, #10]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	813b      	strh	r3, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	3314      	adds	r3, #20
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	4798      	blx	r3
  writeFastVLine(x0, y0 - r, 2 * r + 1, color);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	3320      	adds	r3, #32
 8001aca:	681c      	ldr	r4, [r3, #0]
 8001acc:	893a      	ldrh	r2, [r7, #8]
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	b218      	sxth	r0, r3
 8001ae2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001ae6:	8c3b      	ldrh	r3, [r7, #32]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	47a0      	blx	r4
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001af0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001af4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001af8:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001afc:	8c3b      	ldrh	r3, [r7, #32]
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	2300      	movs	r3, #0
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2303      	movs	r3, #3
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f80a 	bl	8001b24 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	332c      	adds	r3, #44	@ 0x2c
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	4798      	blx	r3
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}

08001b24 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
    @param  color    16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
                                    uint8_t corners, int16_t delta,
                                    uint16_t color) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af02      	add	r7, sp, #8
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]

  int16_t f = 1 - r;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	f1c3 0301 	rsb	r3, r3, #1
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	83fb      	strh	r3, [r7, #30]
  int16_t ddF_x = 1;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	83bb      	strh	r3, [r7, #28]
  int16_t ddF_y = -2 * r;
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	03d2      	lsls	r2, r2, #15
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	837b      	strh	r3, [r7, #26]
  int16_t x = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	833b      	strh	r3, [r7, #24]
  int16_t y = r;
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	82fb      	strh	r3, [r7, #22]
  int16_t px = x;
 8001b62:	8b3b      	ldrh	r3, [r7, #24]
 8001b64:	82bb      	strh	r3, [r7, #20]
  int16_t py = y;
 8001b66:	8afb      	ldrh	r3, [r7, #22]
 8001b68:	827b      	strh	r3, [r7, #18]

  delta++; // Avoid some +1's in the loop
 8001b6a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	86bb      	strh	r3, [r7, #52]	@ 0x34

  while (x < y) {
 8001b76:	e0b5      	b.n	8001ce4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1c0>
    if (f >= 0) {
 8001b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db0e      	blt.n	8001b9e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x7a>
      y--;
 8001b80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	82fb      	strh	r3, [r7, #22]
      ddF_y += 2;
 8001b8c:	8b7b      	ldrh	r3, [r7, #26]
 8001b8e:	3302      	adds	r3, #2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	837b      	strh	r3, [r7, #26]
      f += ddF_y;
 8001b94:	8bfa      	ldrh	r2, [r7, #30]
 8001b96:	8b7b      	ldrh	r3, [r7, #26]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	83fb      	strh	r3, [r7, #30]
    }
    x++;
 8001b9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	833b      	strh	r3, [r7, #24]
    ddF_x += 2;
 8001baa:	8bbb      	ldrh	r3, [r7, #28]
 8001bac:	3302      	adds	r3, #2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	83bb      	strh	r3, [r7, #28]
    f += ddF_x;
 8001bb2:	8bfa      	ldrh	r2, [r7, #30]
 8001bb4:	8bbb      	ldrh	r3, [r7, #28]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	83fb      	strh	r3, [r7, #30]
    // These checks avoid double-drawing certain lines, important
    // for the SSD1306 library which has an INVERT drawing mode.
    if (x < (y + 1)) {
 8001bbc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001bc0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	db41      	blt.n	8001c4c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
      if (corners & 1)
 8001bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01a      	beq.n	8001c0a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xe6>
        writeFastVLine(x0 + x, y0 - y, 2 * y + delta, color);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3320      	adds	r3, #32
 8001bda:	681c      	ldr	r4, [r3, #0]
 8001bdc:	897a      	ldrh	r2, [r7, #10]
 8001bde:	8b3b      	ldrh	r3, [r7, #24]
 8001be0:	4413      	add	r3, r2
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b219      	sxth	r1, r3
 8001be6:	893a      	ldrh	r2, [r7, #8]
 8001be8:	8afb      	ldrh	r3, [r7, #22]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b218      	sxth	r0, r3
 8001bf0:	8afb      	ldrh	r3, [r7, #22]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	4613      	mov	r3, r2
 8001c04:	4602      	mov	r2, r0
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	47a0      	blx	r4
      if (corners & 2)
 8001c0a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d01a      	beq.n	8001c4c <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x128>
        writeFastVLine(x0 - x, y0 - y, 2 * y + delta, color);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	681c      	ldr	r4, [r3, #0]
 8001c1e:	897a      	ldrh	r2, [r7, #10]
 8001c20:	8b3b      	ldrh	r3, [r7, #24]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	b219      	sxth	r1, r3
 8001c28:	893a      	ldrh	r2, [r7, #8]
 8001c2a:	8afb      	ldrh	r3, [r7, #22]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b218      	sxth	r0, r3
 8001c32:	8afb      	ldrh	r3, [r7, #22]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	b21a      	sxth	r2, r3
 8001c40:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	4602      	mov	r2, r0
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	47a0      	blx	r4
    }
    if (y != py) {
 8001c4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d043      	beq.n	8001ce0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1bc>
      if (corners & 1)
 8001c58:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01a      	beq.n	8001c9a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x176>
        writeFastVLine(x0 + py, y0 - px, 2 * px + delta, color);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	3320      	adds	r3, #32
 8001c6a:	681c      	ldr	r4, [r3, #0]
 8001c6c:	897a      	ldrh	r2, [r7, #10]
 8001c6e:	8a7b      	ldrh	r3, [r7, #18]
 8001c70:	4413      	add	r3, r2
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b219      	sxth	r1, r3
 8001c76:	893a      	ldrh	r2, [r7, #8]
 8001c78:	8abb      	ldrh	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	b218      	sxth	r0, r3
 8001c80:	8abb      	ldrh	r3, [r7, #20]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	4613      	mov	r3, r2
 8001c94:	4602      	mov	r2, r0
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	47a0      	blx	r4
      if (corners & 2)
 8001c9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d01a      	beq.n	8001cdc <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x1b8>
        writeFastVLine(x0 - py, y0 - px, 2 * px + delta, color);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3320      	adds	r3, #32
 8001cac:	681c      	ldr	r4, [r3, #0]
 8001cae:	897a      	ldrh	r2, [r7, #10]
 8001cb0:	8a7b      	ldrh	r3, [r7, #18]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	b219      	sxth	r1, r3
 8001cb8:	893a      	ldrh	r2, [r7, #8]
 8001cba:	8abb      	ldrh	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	b218      	sxth	r0, r3
 8001cc2:	8abb      	ldrh	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	b21a      	sxth	r2, r3
 8001cd0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	47a0      	blx	r4
      py = y;
 8001cdc:	8afb      	ldrh	r3, [r7, #22]
 8001cde:	827b      	strh	r3, [r7, #18]
    }
    px = x;
 8001ce0:	8b3b      	ldrh	r3, [r7, #24]
 8001ce2:	82bb      	strh	r3, [r7, #20]
  while (x < y) {
 8001ce4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001ce8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f6ff af43 	blt.w	8001b78 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x54>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	3724      	adds	r7, #36	@ 0x24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd90      	pop	{r4, r7, pc}

08001cfc <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            uint16_t color) {
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b087      	sub	sp, #28
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	4608      	mov	r0, r1
 8001d06:	4611      	mov	r1, r2
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	817b      	strh	r3, [r7, #10]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	813b      	strh	r3, [r7, #8]
 8001d12:	4613      	mov	r3, r2
 8001d14:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	3314      	adds	r3, #20
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	4798      	blx	r3
  writeFastHLine(x, y, w, color);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3324      	adds	r3, #36	@ 0x24
 8001d28:	681c      	ldr	r4, [r3, #0]
 8001d2a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d2e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d32:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	47a0      	blx	r4
  writeFastHLine(x, y + h - 1, w, color);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	3324      	adds	r3, #36	@ 0x24
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	8c3b      	ldrh	r3, [r7, #32]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001d5a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4603      	mov	r3, r0
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	47a0      	blx	r4
  writeFastVLine(x, y, h, color);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	3320      	adds	r3, #32
 8001d6e:	681c      	ldr	r4, [r3, #0]
 8001d70:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001d74:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d78:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001d7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	47a0      	blx	r4
  writeFastVLine(x + w - 1, y, h, color);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3320      	adds	r3, #32
 8001d8c:	681c      	ldr	r4, [r3, #0]
 8001d8e:	897a      	ldrh	r2, [r7, #10]
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4413      	add	r3, r2
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b219      	sxth	r1, r3
 8001d9c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001da0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001da4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4603      	mov	r3, r0
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	47a0      	blx	r4
  endWrite();
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	332c      	adds	r3, #44	@ 0x2c
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	4798      	blx	r3
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}

08001dc2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>:
    @param    r   Radius of corner rounding
    @param    color 16-bit 5-6-5 Color to draw/fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                 int16_t r, uint16_t color) {
 8001dc2:	b590      	push	{r4, r7, lr}
 8001dc4:	b08b      	sub	sp, #44	@ 0x2c
 8001dc6:	af04      	add	r7, sp, #16
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	4608      	mov	r0, r1
 8001dcc:	4611      	mov	r1, r2
 8001dce:	461a      	mov	r2, r3
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	817b      	strh	r3, [r7, #10]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	813b      	strh	r3, [r7, #8]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	80fb      	strh	r3, [r7, #6]
  int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8001ddc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de4:	4293      	cmp	r3, r2
 8001de6:	bfa8      	it	ge
 8001de8:	4613      	movge	r3, r2
 8001dea:	b21b      	sxth	r3, r3
 8001dec:	0fda      	lsrs	r2, r3, #31
 8001dee:	4413      	add	r3, r2
 8001df0:	105b      	asrs	r3, r3, #1
 8001df2:	82fb      	strh	r3, [r7, #22]
  if (r > max_radius)
 8001df4:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001df8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dd01      	ble.n	8001e04 <_ZN12Adafruit_GFX13fillRoundRectEssssst+0x42>
    r = max_radius;
 8001e00:	8afb      	ldrh	r3, [r7, #22]
 8001e02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  // smarter version
  startWrite();
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3314      	adds	r3, #20
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	4798      	blx	r3
  writeFillRect(x + r, y, w - 2 * r, h, color);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	331c      	adds	r3, #28
 8001e16:	681c      	ldr	r4, [r3, #0]
 8001e18:	897a      	ldrh	r2, [r7, #10]
 8001e1a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b219      	sxth	r1, r3
 8001e22:	88fa      	ldrh	r2, [r7, #6]
 8001e24:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	b218      	sxth	r0, r3
 8001e30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e34:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4603      	mov	r3, r0
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	47a0      	blx	r4
  // draw four corners
  fillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8001e44:	897a      	ldrh	r2, [r7, #10]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4413      	add	r3, r2
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b219      	sxth	r1, r3
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	b218      	sxth	r0, r3
 8001e62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e64:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001e78:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e7a:	9202      	str	r2, [sp, #8]
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2301      	movs	r3, #1
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4623      	mov	r3, r4
 8001e84:	4602      	mov	r2, r0
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f7ff fe4c 	bl	8001b24 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  fillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8001e8c:	897a      	ldrh	r2, [r7, #10]
 8001e8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e90:	4413      	add	r3, r2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b219      	sxth	r1, r3
 8001e96:	893a      	ldrh	r2, [r7, #8]
 8001e98:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e9a:	4413      	add	r3, r2
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b218      	sxth	r0, r3
 8001ea0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001ea2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	@ 0x2c
 8001eb6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001eb8:	9202      	str	r2, [sp, #8]
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fe2d 	bl	8001b24 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
  endWrite();
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	332c      	adds	r3, #44	@ 0x2c
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	4798      	blx	r3
}
 8001ed6:	bf00      	nop
 8001ed8:	371c      	adds	r7, #28
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}
	...

08001ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
    @param    size_y  Font magnification level in Y-axis, 1 is 'original' size
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size_x,
                            uint8_t size_y) {
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b08e      	sub	sp, #56	@ 0x38
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	4608      	mov	r0, r1
 8001eea:	4611      	mov	r1, r2
 8001eec:	461a      	mov	r2, r3
 8001eee:	4603      	mov	r3, r0
 8001ef0:	817b      	strh	r3, [r7, #10]
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	813b      	strh	r3, [r7, #8]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	71fb      	strb	r3, [r7, #7]

  if (!gfxFont) { // 'Classic' built-in font
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 8153 	bne.w	80021aa <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ca>

    if ((x >= _width) ||              // Clip right
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f0a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	f280 8234 	bge.w	800237c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        (y >= _height) ||             // Clip bottom
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
    if ((x >= _width) ||              // Clip right
 8001f1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	f280 822c 	bge.w	800237c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001f24:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001f28:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	440b      	add	r3, r1
        (y >= _height) ||             // Clip bottom
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f340 8220 	ble.w	800237c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
        ((y + 8 * size_y - 1) < 0))   // Clip top
 8001f3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001f40:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4413      	add	r3, r2
        ((x + 6 * size_x - 1) < 0) || // Clip left
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f340 8217 	ble.w	800237c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49c>
      return;

    if (!_cp437 && (c >= 176))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	7f1b      	ldrb	r3, [r3, #28]
 8001f52:	f083 0301 	eor.w	r3, r3, #1
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	2baf      	cmp	r3, #175	@ 0xaf
 8001f60:	d902      	bls.n	8001f68 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x88>
      c++; // Handle 'classic' charset behavior
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	3301      	adds	r3, #1
 8001f66:	71fb      	strb	r3, [r7, #7]

    startWrite();
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	4798      	blx	r3
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001f7a:	e0c9      	b.n	8002110 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x230>
      uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	441a      	add	r2, r3
 8001f84:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001f88:	4413      	add	r3, r2
 8001f8a:	4aad      	ldr	r2, [pc, #692]	@ (8002240 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x360>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001f98:	e0ae      	b.n	80020f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x218>
        if (line & 1) {
 8001f9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d04b      	beq.n	800203e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x15e>
          if (size_x == 1 && size_y == 1)
 8001fa6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11a      	bne.n	8001fe4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
 8001fae:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d116      	bne.n	8001fe4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x104>
            writePixel(x + i, y + j, color);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3318      	adds	r3, #24
 8001fbc:	681c      	ldr	r4, [r3, #0]
 8001fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	897b      	ldrh	r3, [r7, #10]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b219      	sxth	r1, r3
 8001fcc:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	893b      	ldrh	r3, [r7, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	47a0      	blx	r4
 8001fe2:	e07d      	b.n	80020e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y,
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	331c      	adds	r3, #28
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	fb12 f303 	smulbb	r3, r2, r3
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	897b      	ldrh	r3, [r7, #10]
 8002000:	4413      	add	r3, r2
 8002002:	b29b      	uxth	r3, r3
 8002004:	b219      	sxth	r1, r3
 8002006:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800200a:	b29a      	uxth	r2, r3
 800200c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002010:	b29b      	uxth	r3, r3
 8002012:	fb12 f303 	smulbb	r3, r2, r3
 8002016:	b29a      	uxth	r2, r3
 8002018:	893b      	ldrh	r3, [r7, #8]
 800201a:	4413      	add	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	b218      	sxth	r0, r3
 8002020:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002024:	b21d      	sxth	r5, r3
 8002026:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800202a:	b21b      	sxth	r3, r3
 800202c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8002030:	9201      	str	r2, [sp, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	462b      	mov	r3, r5
 8002036:	4602      	mov	r2, r0
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	47a0      	blx	r4
 800203c:	e050      	b.n	80020e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
                          color);
        } else if (bg != color) {
 800203e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002042:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002046:	429a      	cmp	r2, r3
 8002048:	d04a      	beq.n	80020e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          if (size_x == 1 && size_y == 1)
 800204a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800204e:	2b01      	cmp	r3, #1
 8002050:	d11a      	bne.n	8002088 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
 8002052:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d116      	bne.n	8002088 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1a8>
            writePixel(x + i, y + j, bg);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	3318      	adds	r3, #24
 8002060:	681c      	ldr	r4, [r3, #0]
 8002062:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002066:	b29a      	uxth	r2, r3
 8002068:	897b      	ldrh	r3, [r7, #10]
 800206a:	4413      	add	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	b219      	sxth	r1, r3
 8002070:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002074:	b29a      	uxth	r2, r3
 8002076:	893b      	ldrh	r3, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	b29b      	uxth	r3, r3
 800207c:	b21a      	sxth	r2, r3
 800207e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	47a0      	blx	r4
 8002086:	e02b      	b.n	80020e0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x200>
          else
            writeFillRect(x + i * size_x, y + j * size_y, size_x, size_y, bg);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	331c      	adds	r3, #28
 800208e:	681c      	ldr	r4, [r3, #0]
 8002090:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002094:	b29a      	uxth	r2, r3
 8002096:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800209a:	b29b      	uxth	r3, r3
 800209c:	fb12 f303 	smulbb	r3, r2, r3
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	4413      	add	r3, r2
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b219      	sxth	r1, r3
 80020aa:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	fb12 f303 	smulbb	r3, r2, r3
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	893b      	ldrh	r3, [r7, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	b218      	sxth	r0, r3
 80020c4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80020c8:	b21d      	sxth	r5, r3
 80020ca:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80020d4:	9201      	str	r2, [sp, #4]
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	462b      	mov	r3, r5
 80020da:	4602      	mov	r2, r0
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	47a0      	blx	r4
      for (int8_t j = 0; j < 8; j++, line >>= 1) {
 80020e0:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80020ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80020f8:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	f77f af4c 	ble.w	8001f9a <_ZN12Adafruit_GFX8drawCharEsshtthh+0xba>
    for (int8_t i = 0; i < 5; i++) { // Char bitmap = 5 columns
 8002102:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002106:	b2db      	uxtb	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002110:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8002114:	2b04      	cmp	r3, #4
 8002116:	f77f af31 	ble.w	8001f7c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x9c>
        }
      }
    }
    if (bg != color) { // If opaque, draw vertical line for last column
 800211a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800211e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002122:	429a      	cmp	r2, r3
 8002124:	d03a      	beq.n	800219c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      if (size_x == 1 && size_y == 1)
 8002126:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800212a:	2b01      	cmp	r3, #1
 800212c:	d114      	bne.n	8002158 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
 800212e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002132:	2b01      	cmp	r3, #1
 8002134:	d110      	bne.n	8002158 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x278>
        writeFastVLine(x + 5, y, 8, bg);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3320      	adds	r3, #32
 800213c:	681c      	ldr	r4, [r3, #0]
 800213e:	897b      	ldrh	r3, [r7, #10]
 8002140:	3305      	adds	r3, #5
 8002142:	b29b      	uxth	r3, r3
 8002144:	b219      	sxth	r1, r3
 8002146:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800214a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	2308      	movs	r3, #8
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	47a0      	blx	r4
 8002156:	e021      	b.n	800219c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2bc>
      else
        writeFillRect(x + 5 * size_x, y, size_x, 8 * size_y, bg);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	331c      	adds	r3, #28
 800215e:	681c      	ldr	r4, [r3, #0]
 8002160:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	0092      	lsls	r2, r2, #2
 800216a:	4413      	add	r3, r2
 800216c:	b29a      	uxth	r2, r3
 800216e:	897b      	ldrh	r3, [r7, #10]
 8002170:	4413      	add	r3, r2
 8002172:	b29b      	uxth	r3, r3
 8002174:	b219      	sxth	r1, r3
 8002176:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800217a:	b21d      	sxth	r5, r3
 800217c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002180:	b29b      	uxth	r3, r3
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21b      	sxth	r3, r3
 8002188:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 800218c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8002190:	9201      	str	r2, [sp, #4]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	462b      	mov	r3, r5
 8002196:	4602      	mov	r2, r0
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	47a0      	blx	r4
    }
    endWrite();
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	332c      	adds	r3, #44	@ 0x2c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	4798      	blx	r3
 80021a8:	e0e9      	b.n	800237e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>

    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling
    // drawChar() directly with 'bad' characters of font may cause mayhem!

    c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	3308      	adds	r3, #8
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	79fa      	ldrb	r2, [r7, #7]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	71fb      	strb	r3, [r7, #7]
    GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	79fa      	ldrb	r2, [r7, #7]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff f98b 	bl	80014dc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 80021c6:	61f8      	str	r0, [r7, #28]
    uint8_t *bitmap = pgm_read_bitmap_ptr(gfxFont);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff f996 	bl	80014fe <_Z19pgm_read_bitmap_ptrPK7GFXfont>
 80021d2:	61b8      	str	r0, [r7, #24]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint8_t w = pgm_read_byte(&glyph->width), h = pgm_read_byte(&glyph->height);
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3302      	adds	r3, #2
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	75fb      	strb	r3, [r7, #23]
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3303      	adds	r3, #3
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	75bb      	strb	r3, [r7, #22]
    int8_t xo = pgm_read_byte(&glyph->xOffset),
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3305      	adds	r3, #5
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	757b      	strb	r3, [r7, #21]
           yo = pgm_read_byte(&glyph->yOffset);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3306      	adds	r3, #6
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	753b      	strb	r3, [r7, #20]
    uint8_t xx, yy, bits = 0, bit = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002200:	2300      	movs	r3, #0
 8002202:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int16_t xo16 = 0, yo16 = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800220a:	2300      	movs	r3, #0
 800220c:	847b      	strh	r3, [r7, #34]	@ 0x22

    if (size_x > 1 || size_y > 1) {
 800220e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002212:	2b01      	cmp	r3, #1
 8002214:	d803      	bhi.n	800221e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x33e>
 8002216:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d905      	bls.n	800222a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x34a>
      xo16 = xo;
 800221e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002222:	84bb      	strh	r3, [r7, #36]	@ 0x24
      yo16 = yo;
 8002224:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002228:	847b      	strh	r3, [r7, #34]	@ 0x22
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    startWrite();
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3314      	adds	r3, #20
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	4798      	blx	r3
    for (yy = 0; yy < h; yy++) {
 8002236:	2300      	movs	r3, #0
 8002238:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800223c:	e091      	b.n	8002362 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x482>
 800223e:	bf00      	nop
 8002240:	0801cd64 	.word	0x0801cd64
      for (xx = 0; xx < w; xx++) {
 8002244:	2300      	movs	r3, #0
 8002246:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800224a:	e07f      	b.n	800234c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x46c>
        if (!(bit++ & 7)) {
 800224c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf0c      	ite	eq
 800225e:	2301      	moveq	r3, #1
 8002260:	2300      	movne	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d008      	beq.n	800227a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x39a>
          bits = pgm_read_byte(&bitmap[bo++]);
 8002268:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	857a      	strh	r2, [r7, #42]	@ 0x2a
 800226e:	461a      	mov	r2, r3
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }
        if (bits & 0x80) {
 800227a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800227e:	2b00      	cmp	r3, #0
 8002280:	da5a      	bge.n	8002338 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          if (size_x == 1 && size_y == 1) {
 8002282:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002286:	2b01      	cmp	r3, #1
 8002288:	d124      	bne.n	80022d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
 800228a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800228e:	2b01      	cmp	r3, #1
 8002290:	d120      	bne.n	80022d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x3f4>
            writePixel(x + xo + xx, y + yo + yy, color);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3318      	adds	r3, #24
 8002298:	681c      	ldr	r4, [r3, #0]
 800229a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	897b      	ldrh	r3, [r7, #10]
 80022a2:	4413      	add	r3, r2
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	b219      	sxth	r1, r3
 80022b2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	893b      	ldrh	r3, [r7, #8]
 80022ba:	4413      	add	r3, r2
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	4413      	add	r3, r2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	47a0      	blx	r4
 80022d2:	e031      	b.n	8002338 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x458>
          } else {
            writeFillRect(x + (xo16 + xx) * size_x, y + (yo16 + yy) * size_y,
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	331c      	adds	r3, #28
 80022da:	681c      	ldr	r4, [r3, #0]
 80022dc:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80022e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80022e4:	4413      	add	r3, r2
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	fb12 f303 	smulbb	r3, r2, r3
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	897b      	ldrh	r3, [r7, #10]
 80022f6:	4413      	add	r3, r2
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	b219      	sxth	r1, r3
 80022fc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8002300:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002304:	4413      	add	r3, r2
 8002306:	b29a      	uxth	r2, r3
 8002308:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800230c:	b29b      	uxth	r3, r3
 800230e:	fb12 f303 	smulbb	r3, r2, r3
 8002312:	b29a      	uxth	r2, r3
 8002314:	893b      	ldrh	r3, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	b29b      	uxth	r3, r3
 800231a:	b218      	sxth	r0, r3
 800231c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002320:	b21d      	sxth	r5, r3
 8002322:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002326:	b21b      	sxth	r3, r3
 8002328:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462b      	mov	r3, r5
 8002332:	4602      	mov	r2, r0
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	47a0      	blx	r4
                          size_x, size_y, color);
          }
        }
        bits <<= 1;
 8002338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      for (xx = 0; xx < w; xx++) {
 8002342:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002346:	3301      	adds	r3, #1
 8002348:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800234c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002350:	7dfb      	ldrb	r3, [r7, #23]
 8002352:	429a      	cmp	r2, r3
 8002354:	f4ff af7a 	bcc.w	800224c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x36c>
    for (yy = 0; yy < h; yy++) {
 8002358:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800235c:	3301      	adds	r3, #1
 800235e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8002362:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002366:	7dbb      	ldrb	r3, [r7, #22]
 8002368:	429a      	cmp	r2, r3
 800236a:	f4ff af6b 	bcc.w	8002244 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x364>
      }
    }
    endWrite();
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	332c      	adds	r3, #44	@ 0x2c
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	4798      	blx	r3
 800237a:	e000      	b.n	800237e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x49e>
      return;
 800237c:	bf00      	nop

  } // End classic vs custom font
}
 800237e:	3730      	adds	r7, #48	@ 0x30
 8002380:	46bd      	mov	sp, r7
 8002382:	bdb0      	pop	{r4, r5, r7, pc}

08002384 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	b08b      	sub	sp, #44	@ 0x2c
 8002388:	af04      	add	r7, sp, #16
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	70fb      	strb	r3, [r7, #3]
  if (!gfxFont) { // 'Classic' built-in font
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d166      	bne.n	8002466 <_ZN12Adafruit_GFX5writeEh+0xe2>

    if (c == '\n') {              // Newline?
 8002398:	78fb      	ldrb	r3, [r7, #3]
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d110      	bne.n	80023c0 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	821a      	strh	r2, [r3, #16]
      cursor_y += textsize_y * 8; // advance y one line
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e5b      	ldrb	r3, [r3, #25]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	825a      	strh	r2, [r3, #18]
 80023be:	e0f5      	b.n	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {       // Ignore carriage returns
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	2b0d      	cmp	r3, #13
 80023c4:	f000 80f2 	beq.w	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7edb      	ldrb	r3, [r3, #27]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <_ZN12Adafruit_GFX5writeEh+0x8e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023d6:	4619      	mov	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
 80023dc:	461a      	mov	r2, r3
 80023de:	4613      	mov	r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	440b      	add	r3, r1
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80023ee:	4293      	cmp	r3, r2
 80023f0:	dd0f      	ble.n	8002412 <_ZN12Adafruit_GFX5writeEh+0x8e>
        cursor_x = 0;                                       // Reset x to zero,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	821a      	strh	r2, [r3, #16]
        cursor_y += textsize_y * 8; // advance y one line
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e5b      	ldrb	r3, [r3, #25]
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	b29b      	uxth	r3, r3
 8002408:	4413      	add	r3, r2
 800240a:	b29b      	uxth	r3, r3
 800240c:	b21a      	sxth	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	825a      	strh	r2, [r3, #18]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8a9b      	ldrh	r3, [r3, #20]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	8ad2      	ldrh	r2, [r2, #22]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	7e09      	ldrb	r1, [r1, #24]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	7e40      	ldrb	r0, [r0, #25]
 800242e:	78fe      	ldrb	r6, [r7, #3]
 8002430:	9003      	str	r0, [sp, #12]
 8002432:	9102      	str	r1, [sp, #8]
 8002434:	9201      	str	r2, [sp, #4]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	4633      	mov	r3, r6
 800243a:	462a      	mov	r2, r5
 800243c:	4621      	mov	r1, r4
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff fd4e 	bl	8001ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
               textsize_y);
      cursor_x += textsize_x * 6; // Advance x one char
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800244a:	b29a      	uxth	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	4619      	mov	r1, r3
 8002452:	0049      	lsls	r1, r1, #1
 8002454:	440b      	add	r3, r1
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	4413      	add	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	b21a      	sxth	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	821a      	strh	r2, [r3, #16]
 8002464:	e0a2      	b.n	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
    }

  } else { // Custom font

    if (c == '\n') {
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	2b0a      	cmp	r3, #10
 800246a:	d116      	bne.n	800249a <_ZN12Adafruit_GFX5writeEh+0x116>
      cursor_x = 0;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	821a      	strh	r2, [r3, #16]
      cursor_y +=
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002478:	b29a      	uxth	r2, r3
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	7e5b      	ldrb	r3, [r3, #25]
 800247e:	4619      	mov	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	330c      	adds	r3, #12
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	fb11 f303 	smulbb	r3, r1, r3
 800248c:	b29b      	uxth	r3, r3
      cursor_y +=
 800248e:	4413      	add	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	b21a      	sxth	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	825a      	strh	r2, [r3, #18]
 8002498:	e088      	b.n	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
    } else if (c != '\r') {
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	2b0d      	cmp	r3, #13
 800249e:	f000 8085 	beq.w	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	3308      	adds	r3, #8
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	75fb      	strb	r3, [r7, #23]
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d37b      	bcc.n	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	330a      	adds	r3, #10
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d874      	bhi.n	80025ac <_ZN12Adafruit_GFX5writeEh+0x228>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a18      	ldr	r0, [r3, #32]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7ff f804 	bl	80014dc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 80024d4:	6138      	str	r0, [r7, #16]
        uint8_t w = pgm_read_byte(&glyph->width),
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	3302      	adds	r3, #2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	73fb      	strb	r3, [r7, #15]
                h = pgm_read_byte(&glyph->height);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	3303      	adds	r3, #3
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	73bb      	strb	r3, [r7, #14]
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d04d      	beq.n	8002588 <_ZN12Adafruit_GFX5writeEh+0x204>
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d04a      	beq.n	8002588 <_ZN12Adafruit_GFX5writeEh+0x204>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	3305      	adds	r3, #5
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	81bb      	strh	r3, [r7, #12]
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7edb      	ldrb	r3, [r3, #27]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d028      	beq.n	8002556 <_ZN12Adafruit_GFX5writeEh+0x1d2>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800250a:	4619      	mov	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e1b      	ldrb	r3, [r3, #24]
 8002510:	4618      	mov	r0, r3
 8002512:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4413      	add	r3, r2
 800251a:	fb00 f303 	mul.w	r3, r0, r3
 800251e:	440b      	add	r3, r1
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002526:	4293      	cmp	r3, r2
 8002528:	dd15      	ble.n	8002556 <_ZN12Adafruit_GFX5writeEh+0x1d2>
            cursor_x = 0;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	821a      	strh	r2, [r3, #16]
            cursor_y += (int16_t)textsize_y *
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	7e5b      	ldrb	r3, [r3, #25]
 800253c:	4619      	mov	r1, r3
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	330c      	adds	r3, #12
 8002544:	781b      	ldrb	r3, [r3, #0]
            cursor_y += (int16_t)textsize_y *
 8002546:	fb11 f303 	smulbb	r3, r1, r3
 800254a:	b29b      	uxth	r3, r3
 800254c:	4413      	add	r3, r2
 800254e:	b29b      	uxth	r3, r3
 8002550:	b21a      	sxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	825a      	strh	r2, [r3, #18]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f9b3 4010 	ldrsh.w	r4, [r3, #16]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f9b3 5012 	ldrsh.w	r5, [r3, #18]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	8a9b      	ldrh	r3, [r3, #20]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	8ad2      	ldrh	r2, [r2, #22]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	7e09      	ldrb	r1, [r1, #24]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	7e40      	ldrb	r0, [r0, #25]
 8002572:	78fe      	ldrb	r6, [r7, #3]
 8002574:	9003      	str	r0, [sp, #12]
 8002576:	9102      	str	r1, [sp, #8]
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	4633      	mov	r3, r6
 800257e:	462a      	mov	r2, r5
 8002580:	4621      	mov	r1, r4
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fcac 	bl	8001ee0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                   textsize_y);
        }
        cursor_x +=
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800258e:	b29a      	uxth	r2, r3
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	3304      	adds	r3, #4
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	4619      	mov	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7e1b      	ldrb	r3, [r3, #24]
 800259c:	fb11 f303 	smulbb	r3, r1, r3
 80025a0:	b29b      	uxth	r3, r3
        cursor_x +=
 80025a2:	4413      	add	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	821a      	strh	r2, [r3, #16]
      }
    }
  }
  return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025b6 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f804 	bl	80025d6 <_ZN12Adafruit_GFX11setTextSizeEhh>
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN12Adafruit_GFX11setTextSizeEhh>:
   that much bigger.
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
 80025e2:	4613      	mov	r3, r2
 80025e4:	70bb      	strb	r3, [r7, #2]
  textsize_x = (s_x > 0) ? s_x : 1;
 80025e6:	78fb      	ldrb	r3, [r7, #3]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1a>
 80025ec:	78fa      	ldrb	r2, [r7, #3]
 80025ee:	e000      	b.n	80025f2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x1c>
 80025f0:	2201      	movs	r2, #1
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	761a      	strb	r2, [r3, #24]
  textsize_y = (s_y > 0) ? s_y : 1;
 80025f6:	78bb      	ldrb	r3, [r7, #2]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2a>
 80025fc:	78ba      	ldrb	r2, [r7, #2]
 80025fe:	e000      	b.n	8002602 <_ZN12Adafruit_GFX11setTextSizeEhh+0x2c>
 8002600:	2201      	movs	r2, #1
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	765a      	strb	r2, [r3, #25]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <_ZN12Adafruit_GFX11setRotationEh>:
/*!
    @brief      Set rotation setting for display
    @param  x   0 thru 3 corresponding to 4 cardinal rotations
*/
/**************************************************************************/
void Adafruit_GFX::setRotation(uint8_t x) {
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  rotation = (x & 3);
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	b2da      	uxtb	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	769a      	strb	r2, [r3, #26]
  switch (rotation) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e9b      	ldrb	r3, [r3, #26]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d821      	bhi.n	8002678 <_ZN12Adafruit_GFX11setRotationEh+0x64>
 8002634:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <_ZN12Adafruit_GFX11setRotationEh+0x28>)
 8002636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263a:	bf00      	nop
 800263c:	0800264d 	.word	0x0800264d
 8002640:	08002663 	.word	0x08002663
 8002644:	0800264d 	.word	0x0800264d
 8002648:	08002663 	.word	0x08002663
  case 0:
  case 2:
    _width = WIDTH;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	819a      	strh	r2, [r3, #12]
    _height = HEIGHT;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	81da      	strh	r2, [r3, #14]
    break;
 8002660:	e00a      	b.n	8002678 <_ZN12Adafruit_GFX11setRotationEh+0x64>
  case 1:
  case 3:
    _width = HEIGHT;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	819a      	strh	r2, [r3, #12]
    _height = WIDTH;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	81da      	strh	r2, [r3, #14]
    break;
 8002676:	bf00      	nop
  }
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void Adafruit_GFX::setFont(const GFXfont *f) {
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  if (f) {          // Font struct pointer passed in?
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00d      	beq.n	80026b0 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x2c>
    if (!gfxFont) { // And no current font struct?
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d116      	bne.n	80026ca <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
      // Switching from classic to new font behavior.
      // Move cursor pos down 6 pixels so it's on baseline.
      cursor_y += 6;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3306      	adds	r3, #6
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b21a      	sxth	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	825a      	strh	r2, [r3, #18]
 80026ae:	e00c      	b.n	80026ca <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    }
  } else if (gfxFont) { // NULL passed.  Current font struct defined?
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x46>
    // Switching from new to classic font behavior.
    // Move cursor pos up 6 pixels so it's at top-left of char.
    cursor_y -= 6;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b06      	subs	r3, #6
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	825a      	strh	r2, [r3, #18]
  }
  gfxFont = (GFXfont *)f;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	621a      	str	r2, [r3, #32]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>:
    @param  maxy  Pointer to maximum Y coord, passed in AND returned.
*/
/**************************************************************************/
void Adafruit_GFX::charBounds(unsigned char c, int16_t *x, int16_t *y,
                              int16_t *minx, int16_t *miny, int16_t *maxx,
                              int16_t *maxy) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08e      	sub	sp, #56	@ 0x38
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	72fb      	strb	r3, [r7, #11]

  if (gfxFont) {
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80fc 	beq.w	80028ee <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x212>

    if (c == '\n') { // Newline?
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d116      	bne.n	800272a <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x4e>
      *x = 0;        // Reset x to zero, advance y by one line
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	7e5b      	ldrb	r3, [r3, #25]
 800270e:	4619      	mov	r1, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	330c      	adds	r3, #12
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	fb11 f303 	smulbb	r3, r1, r3
 800271c:	b29b      	uxth	r3, r3
 800271e:	4413      	add	r3, r2
 8002720:	b29b      	uxth	r3, r3
 8002722:	b21a      	sxth	r2, r3
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
 8002728:	e175      	b.n	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Not a carriage return; is normal char
 800272a:	7afb      	ldrb	r3, [r7, #11]
 800272c:	2b0d      	cmp	r3, #13
 800272e:	f000 8172 	beq.w	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      uint8_t first = pgm_read_byte(&gfxFont->first),
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	3308      	adds	r3, #8
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
              last = pgm_read_byte(&gfxFont->last);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	330a      	adds	r3, #10
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
      if ((c >= first) && (c <= last)) { // Char present in this font?
 800274a:	7afa      	ldrb	r2, [r7, #11]
 800274c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002750:	429a      	cmp	r2, r3
 8002752:	f0c0 8160 	bcc.w	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
 8002756:	7afa      	ldrb	r2, [r7, #11]
 8002758:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800275c:	429a      	cmp	r2, r3
 800275e:	f200 815a 	bhi.w	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a18      	ldr	r0, [r3, #32]
 8002766:	7afa      	ldrb	r2, [r7, #11]
 8002768:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	4619      	mov	r1, r3
 8002772:	f7fe feb3 	bl	80014dc <_Z18pgm_read_glyph_ptrPK7GFXfonth>
 8002776:	62b8      	str	r0, [r7, #40]	@ 0x28
        uint8_t gw = pgm_read_byte(&glyph->width),
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	3302      	adds	r3, #2
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                gh = pgm_read_byte(&glyph->height),
 8002782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002784:	3303      	adds	r3, #3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                xa = pgm_read_byte(&glyph->xAdvance);
 800278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278e:	3304      	adds	r3, #4
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        int8_t xo = pgm_read_byte(&glyph->xOffset),
 8002796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002798:	3305      	adds	r3, #5
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
               yo = pgm_read_byte(&glyph->yOffset);
 80027a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a2:	3306      	adds	r3, #6
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	7edb      	ldrb	r3, [r3, #27]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d028      	beq.n	8002804 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b8:	4619      	mov	r1, r3
 80027ba:	f997 2024 	ldrsb.w	r2, [r7, #36]	@ 0x24
 80027be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027c2:	4413      	add	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	7e12      	ldrb	r2, [r2, #24]
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	440b      	add	r3, r1
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	dd15      	ble.n	8002804 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x128>
          *x = 0; // Reset x to zero, advance y by one line
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
          *y += textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	7e5b      	ldrb	r3, [r3, #25]
 80027ea:	4619      	mov	r1, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	330c      	adds	r3, #12
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	fb11 f303 	smulbb	r3, r1, r3
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21a      	sxth	r2, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	801a      	strh	r2, [r3, #0]
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
 8002808:	843b      	strh	r3, [r7, #32]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	7e5b      	ldrb	r3, [r3, #25]
 800280e:	83fb      	strh	r3, [r7, #30]
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002816:	b29a      	uxth	r2, r3
 8002818:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800281c:	b299      	uxth	r1, r3
 800281e:	8c3b      	ldrh	r3, [r7, #32]
 8002820:	fb11 f303 	smulbb	r3, r1, r3
 8002824:	b29b      	uxth	r3, r3
 8002826:	4413      	add	r3, r2
 8002828:	b29b      	uxth	r3, r3
 800282a:	83bb      	strh	r3, [r7, #28]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002832:	b29a      	uxth	r2, r3
 8002834:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002838:	b299      	uxth	r1, r3
 800283a:	8bfb      	ldrh	r3, [r7, #30]
 800283c:	fb11 f303 	smulbb	r3, r1, r3
 8002840:	b29b      	uxth	r3, r3
 8002842:	4413      	add	r3, r2
 8002844:	b29b      	uxth	r3, r3
 8002846:	837b      	strh	r3, [r7, #26]
 8002848:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800284c:	b29a      	uxth	r2, r3
 800284e:	8c3b      	ldrh	r3, [r7, #32]
 8002850:	fb12 f303 	smulbb	r3, r2, r3
 8002854:	b29a      	uxth	r2, r3
 8002856:	8bbb      	ldrh	r3, [r7, #28]
 8002858:	4413      	add	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	833b      	strh	r3, [r7, #24]
                y2 = y1 + gh * tsy - 1;
 8002862:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002866:	b29a      	uxth	r2, r3
 8002868:	8bfb      	ldrh	r3, [r7, #30]
 800286a:	fb12 f303 	smulbb	r3, r2, r3
 800286e:	b29a      	uxth	r2, r3
 8002870:	8b7b      	ldrh	r3, [r7, #26]
 8002872:	4413      	add	r3, r2
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b29b      	uxth	r3, r3
 800287a:	82fb      	strh	r3, [r7, #22]
        if (x1 < *minx)
 800287c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800287e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002882:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002886:	429a      	cmp	r2, r3
 8002888:	da02      	bge.n	8002890 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1b4>
          *minx = x1;
 800288a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800288c:	8bba      	ldrh	r2, [r7, #28]
 800288e:	801a      	strh	r2, [r3, #0]
        if (y1 < *miny)
 8002890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002896:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800289a:	429a      	cmp	r2, r3
 800289c:	da02      	bge.n	80028a4 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1c8>
          *miny = y1;
 800289e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a0:	8b7a      	ldrh	r2, [r7, #26]
 80028a2:	801a      	strh	r2, [r3, #0]
        if (x2 > *maxx)
 80028a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	dd02      	ble.n	80028b8 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1dc>
          *maxx = x2;
 80028b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b4:	8b3a      	ldrh	r2, [r7, #24]
 80028b6:	801a      	strh	r2, [r3, #0]
        if (y2 > *maxy)
 80028b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	dd02      	ble.n	80028cc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x1f0>
          *maxy = y2;
 80028c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c8:	8afa      	ldrh	r2, [r7, #22]
 80028ca:	801a      	strh	r2, [r3, #0]
        *x += xa * tsx;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028d8:	b299      	uxth	r1, r3
 80028da:	8c3b      	ldrh	r3, [r7, #32]
 80028dc:	fb11 f303 	smulbb	r3, r1, r3
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b21a      	sxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	801a      	strh	r2, [r3, #0]
}
 80028ec:	e093      	b.n	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    if (c == '\n') {        // Newline?
 80028ee:	7afb      	ldrb	r3, [r7, #11]
 80028f0:	2b0a      	cmp	r3, #10
 80028f2:	d110      	bne.n	8002916 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x23a>
      *x = 0;               // Reset x to zero,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
      *y += textsize_y * 8; // advance y one line
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	7e5b      	ldrb	r3, [r3, #25]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	b29b      	uxth	r3, r3
 800290a:	4413      	add	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	b21a      	sxth	r2, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	801a      	strh	r2, [r3, #0]
}
 8002914:	e07f      	b.n	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
    } else if (c != '\r') { // Normal char; ignore carriage returns
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	2b0d      	cmp	r3, #13
 800291a:	d07c      	beq.n	8002a16 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x33a>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	7edb      	ldrb	r3, [r3, #27]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800292a:	4619      	mov	r1, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	7e1b      	ldrb	r3, [r3, #24]
 8002930:	461a      	mov	r2, r3
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	440b      	add	r3, r1
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002942:	4293      	cmp	r3, r2
 8002944:	dd0f      	ble.n	8002966 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x28a>
        *x = 0;                                       // Reset x to zero,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	801a      	strh	r2, [r3, #0]
        *y += textsize_y * 8;                         // advance y one line
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	7e5b      	ldrb	r3, [r3, #25]
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	b29b      	uxth	r3, r3
 800295c:	4413      	add	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	b21a      	sxth	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	801a      	strh	r2, [r3, #0]
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296c:	4619      	mov	r1, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	7e1b      	ldrb	r3, [r3, #24]
 8002972:	461a      	mov	r2, r3
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	440b      	add	r3, r1
 800297e:	3b01      	subs	r3, #1
 8002980:	637b      	str	r3, [r7, #52]	@ 0x34
          y2 = *y + textsize_y * 8 - 1;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	461a      	mov	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	7e5b      	ldrb	r3, [r3, #25]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	3b01      	subs	r3, #1
 8002994:	633b      	str	r3, [r7, #48]	@ 0x30
      if (x2 > *maxx)
 8002996:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299c:	461a      	mov	r2, r3
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	4293      	cmp	r3, r2
 80029a2:	dd03      	ble.n	80029ac <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2d0>
        *maxx = x2; // Track max x, y
 80029a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a6:	b21a      	sxth	r2, r3
 80029a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029aa:	801a      	strh	r2, [r3, #0]
      if (y2 > *maxy)
 80029ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029b2:	461a      	mov	r2, r3
 80029b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b6:	4293      	cmp	r3, r2
 80029b8:	dd03      	ble.n	80029c2 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x2e6>
        *maxy = y2;
 80029ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029bc:	b21a      	sxth	r2, r3
 80029be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029c0:	801a      	strh	r2, [r3, #0]
      if (*x < *minx)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	da04      	bge.n	80029dc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x300>
        *minx = *x; // Track min x, y
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029da:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	da04      	bge.n	80029f6 <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_+0x31a>
        *miny = *y;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029f4:	801a      	strh	r2, [r3, #0]
      *x += textsize_x * 6; // Advance x one char
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	7e1b      	ldrb	r3, [r3, #24]
 8002a02:	4619      	mov	r1, r3
 8002a04:	0049      	lsls	r1, r1, #1
 8002a06:	440b      	add	r3, r1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	801a      	strh	r2, [r3, #0]
}
 8002a16:	bf00      	nop
 8002a18:	3738      	adds	r7, #56	@ 0x38
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>:
    @param  h    The boundary height, returned by function
*/
/**************************************************************************/
void Adafruit_GFX::getTextBounds(const char *str, int16_t x, int16_t y,
                                 int16_t *x1, int16_t *y1, uint16_t *w,
                                 uint16_t *h) {
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b08c      	sub	sp, #48	@ 0x30
 8002a22:	af04      	add	r7, sp, #16
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	4611      	mov	r1, r2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	80fb      	strh	r3, [r7, #6]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80bb      	strh	r3, [r7, #4]

  uint8_t c; // Current character
  int16_t minx = 0x7FFF, miny = 0x7FFF, maxx = -1, maxy = -1; // Bound rect
 8002a34:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002a38:	83bb      	strh	r3, [r7, #28]
 8002a3a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002a3e:	837b      	strh	r3, [r7, #26]
 8002a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a44:	833b      	strh	r3, [r7, #24]
 8002a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a4a:	82fb      	strh	r3, [r7, #22]
  // Bound rect is intentionally initialized inverted, so 1st char sets it

  *x1 = x; // Initial position is value passed in
 8002a4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a52:	801a      	strh	r2, [r3, #0]
  *y1 = y;
 8002a54:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5a:	801a      	strh	r2, [r3, #0]
  *w = *h = 0; // Initial size is zero
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a5e:	2200      	movs	r2, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a64:	881a      	ldrh	r2, [r3, #0]
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	801a      	strh	r2, [r3, #0]

  while ((c = *str++)) {
 8002a6a:	e012      	b.n	8002a92 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x74>
    // charBounds() modifies x/y to advance for each character,
    // and min/max x/y are updated to incrementally build bounding rect.
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
 8002a6c:	1d38      	adds	r0, r7, #4
 8002a6e:	1dba      	adds	r2, r7, #6
 8002a70:	7ff9      	ldrb	r1, [r7, #31]
 8002a72:	f107 0316 	add.w	r3, r7, #22
 8002a76:	9303      	str	r3, [sp, #12]
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	9302      	str	r3, [sp, #8]
 8002a7e:	f107 031a 	add.w	r3, r7, #26
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	f107 031c 	add.w	r3, r7, #28
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fe25 	bl	80026dc <_ZN12Adafruit_GFX10charBoundsEhPsS0_S0_S0_S0_S0_>
  while ((c = *str++)) {
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	60ba      	str	r2, [r7, #8]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	7ffb      	ldrb	r3, [r7, #31]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	bf14      	ite	ne
 8002aa2:	2301      	movne	r3, #1
 8002aa4:	2300      	moveq	r3, #0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1df      	bne.n	8002a6c <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0x4e>
  }

  if (maxx >= minx) {     // If legit string bounds were found...
 8002aac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002ab0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	db0f      	blt.n	8002ad8 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xba>
    *x1 = minx;           // Update x1 to least X coord,
 8002ab8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	801a      	strh	r2, [r3, #0]
    *w = maxx - minx + 1; // And w to bound rect width
 8002ac0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	801a      	strh	r2, [r3, #0]
  }
  if (maxy >= miny) { // Same for height
 8002ad8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002adc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	db0f      	blt.n	8002b04 <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_+0xe6>
    *y1 = miny;
 8002ae4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	801a      	strh	r2, [r3, #0]
    *h = maxy - miny + 1;
 8002aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b02:	801a      	strh	r2, [r3, #0]
  }
}
 8002b04:	bf00      	nop
 8002b06:	3720      	adds	r7, #32
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZN12Adafruit_GFX13invertDisplayEb>:
/*!
    @brief      Invert the display (ideally using built-in hardware command)
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(bool i) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  // Do nothing, must be subclassed if supported by hardware
  (void)i; // disable -Wunused-parameter warning
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_ZN11GFXcanvas16C1Ettb>:
   false, the subclass must initialize the buffer before any drawing operation,
   and free it in the destructor. If false (the default), the buffer is
   allocated and freed by the library.
*/
/**************************************************************************/
GFXcanvas16::GFXcanvas16(uint16_t w, uint16_t h, bool allocate_buffer)
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	71fb      	strb	r3, [r7, #7]
    : Adafruit_GFX(w, h), buffer_owned(allocate_buffer) {
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002b44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fe fce5 	bl	8001518 <_ZN12Adafruit_GFXC1Ess>
 8002b4e:	4a18      	ldr	r2, [pc, #96]	@ (8002bb0 <_ZN11GFXcanvas16C1Ettb+0x8c>)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	79fa      	ldrb	r2, [r7, #7]
 8002b58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  if (allocate_buffer) {
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01d      	beq.n	8002b9e <_ZN11GFXcanvas16C1Ettb+0x7a>
    uint32_t bytes = w * h * 2;
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
    if ((buffer = (uint16_t *)malloc(bytes))) {
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f017 f8be 	bl	8019cf0 <malloc>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <_ZN11GFXcanvas16C1Ettb+0x80>
      memset(buffer, 0, bytes);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f017 ff13 	bl	801a9c2 <memset>
 8002b9c:	e002      	b.n	8002ba4 <_ZN11GFXcanvas16C1Ettb+0x80>
    }
  } else {
    buffer = nullptr;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	0801d26c 	.word	0x0801d26c

08002bb4 <_ZN11GFXcanvas16D1Ev>:
/**************************************************************************/
/*!
   @brief    Delete the canvas, free memory
*/
/**************************************************************************/
GFXcanvas16::~GFXcanvas16(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <_ZN11GFXcanvas16D1Ev+0x34>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
  if (buffer && buffer_owned)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <_ZN11GFXcanvas16D1Ev+0x2a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d004      	beq.n	8002bde <_ZN11GFXcanvas16D1Ev+0x2a>
    free(buffer);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f017 f891 	bl	8019d00 <free>
}
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0801d26c 	.word	0x0801d26c

08002bec <_ZN11GFXcanvas169drawPixelEsst>:
    @param  x   x coordinate
    @param  y   y coordinate
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::drawPixel(int16_t x, int16_t y, uint16_t color) {
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  if (buffer) {
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d065      	beq.n	8002cda <_ZN11GFXcanvas169drawPixelEsst+0xee>
    if ((x < 0) || (y < 0) || (x >= _width) || (y >= _height))
 8002c0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	db60      	blt.n	8002cd8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002c16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	db5c      	blt.n	8002cd8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c24:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	da55      	bge.n	8002cd8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002c32:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	da4e      	bge.n	8002cd8 <_ZN11GFXcanvas169drawPixelEsst+0xec>
      return;

    int16_t t;
    switch (rotation) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	7e9b      	ldrb	r3, [r3, #26]
 8002c3e:	2b03      	cmp	r3, #3
 8002c40:	d02a      	beq.n	8002c98 <_ZN11GFXcanvas169drawPixelEsst+0xac>
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	dc37      	bgt.n	8002cb6 <_ZN11GFXcanvas169drawPixelEsst+0xca>
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d002      	beq.n	8002c50 <_ZN11GFXcanvas169drawPixelEsst+0x64>
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d00f      	beq.n	8002c6e <_ZN11GFXcanvas169drawPixelEsst+0x82>
 8002c4e:	e032      	b.n	8002cb6 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 1:
      t = x;
 8002c50:	897b      	ldrh	r3, [r7, #10]
 8002c52:	82fb      	strh	r3, [r7, #22]
      x = WIDTH - 1 - y;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	893b      	ldrh	r3, [r7, #8]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	817b      	strh	r3, [r7, #10]
      y = t;
 8002c68:	8afb      	ldrh	r3, [r7, #22]
 8002c6a:	813b      	strh	r3, [r7, #8]
      break;
 8002c6c:	e023      	b.n	8002cb6 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 2:
      x = WIDTH - 1 - x;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	897b      	ldrh	r3, [r7, #10]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - y;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	813b      	strh	r3, [r7, #8]
      break;
 8002c96:	e00e      	b.n	8002cb6 <_ZN11GFXcanvas169drawPixelEsst+0xca>
    case 3:
      t = x;
 8002c98:	897b      	ldrh	r3, [r7, #10]
 8002c9a:	82fb      	strh	r3, [r7, #22]
      x = y;
 8002c9c:	893b      	ldrh	r3, [r7, #8]
 8002c9e:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - 1 - t;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	8afb      	ldrh	r3, [r7, #22]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	813b      	strh	r3, [r7, #8]
      break;
 8002cb4:	bf00      	nop
    }

    buffer[x + y * WIDTH] = color;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cba:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002cbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8002cc8:	fb00 f303 	mul.w	r3, r0, r3
 8002ccc:	440b      	add	r3, r1
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	4413      	add	r3, r2
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	e000      	b.n	8002cda <_ZN11GFXcanvas169drawPixelEsst+0xee>
      return;
 8002cd8:	bf00      	nop
  }
}
 8002cda:	371c      	adds	r7, #28
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_ZN11GFXcanvas1610fillScreenEt>:
/*!
    @brief  Fill the framebuffer completely with one color
    @param  color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void GFXcanvas16::fillScreen(uint16_t color) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	807b      	strh	r3, [r7, #2]
  if (buffer) {
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d035      	beq.n	8002d64 <_ZN11GFXcanvas1610fillScreenEt+0x80>
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	74fb      	strb	r3, [r7, #19]
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	74bb      	strb	r3, [r7, #18]
    if (hi == lo) {
 8002d04:	7cfa      	ldrb	r2, [r7, #19]
 8002d06:	7cbb      	ldrb	r3, [r7, #18]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d110      	bne.n	8002d2e <_ZN11GFXcanvas1610fillScreenEt+0x4a>
      memset(buffer, lo, WIDTH * HEIGHT * 2);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8002d10:	7cb9      	ldrb	r1, [r7, #18]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d20:	fb02 f303 	mul.w	r3, r2, r3
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	461a      	mov	r2, r3
 8002d28:	f017 fe4b 	bl	801a9c2 <memset>
      uint32_t i, pixels = WIDTH * HEIGHT;
      for (i = 0; i < pixels; i++)
        buffer[i] = color;
    }
  }
}
 8002d2c:	e01a      	b.n	8002d64 <_ZN11GFXcanvas1610fillScreenEt+0x80>
      uint32_t i, pixels = WIDTH * HEIGHT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002d3c:	fb02 f303 	mul.w	r3, r2, r3
 8002d40:	60fb      	str	r3, [r7, #12]
      for (i = 0; i < pixels; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	e009      	b.n	8002d5c <_ZN11GFXcanvas1610fillScreenEt+0x78>
        buffer[i] = color;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	801a      	strh	r2, [r3, #0]
      for (i = 0; i < pixels; i++)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d3f1      	bcc.n	8002d48 <_ZN11GFXcanvas1610fillScreenEt+0x64>
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_ZN11GFXcanvas1613drawFastVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                uint16_t color) {
 8002d6c:	b590      	push	{r4, r7, lr}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	4608      	mov	r0, r1
 8002d76:	4611      	mov	r1, r2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	817b      	strh	r3, [r7, #10]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	813b      	strh	r3, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	80fb      	strh	r3, [r7, #6]
  if (h < 0) { // Convert negative heights to positive equivalent
 8002d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	da15      	bge.n	8002dba <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
    h *= -1;
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	425b      	negs	r3, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	80fb      	strh	r3, [r7, #6]
    y -= h - 1;
 8002d96:	893a      	ldrh	r2, [r7, #8]
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	813b      	strh	r3, [r7, #8]
    if (y < 0) {
 8002da4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	da06      	bge.n	8002dba <_ZN11GFXcanvas1613drawFastVLineEssst+0x4e>
      h += y;
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	893b      	ldrh	r3, [r7, #8]
 8002db0:	4413      	add	r3, r2
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	80fb      	strh	r3, [r7, #6]
      y = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	813b      	strh	r3, [r7, #8]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((x < 0) || (x >= width()) || (y >= height()) || ((y + h - 1) < 0)) {
 8002dba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db1a      	blt.n	8002df8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fb63 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	da10      	bge.n	8002df8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fe fb66 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002de6:	4293      	cmp	r3, r2
 8002de8:	da06      	bge.n	8002df8 <_ZN11GFXcanvas1613drawFastVLineEssst+0x8c>
 8002dea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002dee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002df2:	4413      	add	r3, r2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dc01      	bgt.n	8002dfc <_ZN11GFXcanvas1613drawFastVLineEssst+0x90>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e000      	b.n	8002dfe <_ZN11GFXcanvas1613drawFastVLineEssst+0x92>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 80c8 	bne.w	8002f94 <_ZN11GFXcanvas1613drawFastVLineEssst+0x228>
    return;
  }

  if (y < 0) { // Clip top
 8002e04:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	da06      	bge.n	8002e1a <_ZN11GFXcanvas1613drawFastVLineEssst+0xae>
    h += y;
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	4413      	add	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	80fb      	strh	r3, [r7, #6]
    y = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	813b      	strh	r3, [r7, #8]
  }
  if (y + h > height()) { // Clip bottom
 8002e1a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e22:	18d4      	adds	r4, r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fe fb3f 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	429c      	cmp	r4, r3
 8002e30:	bfcc      	ite	gt
 8002e32:	2301      	movgt	r3, #1
 8002e34:	2300      	movle	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <_ZN11GFXcanvas1613drawFastVLineEssst+0xe4>
    h = height() - y;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fb33 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8002e44:	4603      	mov	r3, r0
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	893b      	ldrh	r3, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fb36 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <_ZN11GFXcanvas1613drawFastVLineEssst+0x116>
    drawFastRawVLine(x, y, h, color);
 8002e68:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e6c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e70:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	4603      	mov	r3, r0
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f9a6 	bl	80031cc <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002e80:	e089      	b.n	8002f96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 1) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fb1d 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	bf0c      	ite	eq
 8002e90:	2301      	moveq	r3, #1
 8002e92:	2300      	movne	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d021      	beq.n	8002ede <_ZN11GFXcanvas1613drawFastVLineEssst+0x172>
    int16_t t = x;
 8002e9a:	897b      	ldrh	r3, [r7, #10]
 8002e9c:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	893b      	ldrh	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	817b      	strh	r3, [r7, #10]
    y = t;
 8002eb2:	8abb      	ldrh	r3, [r7, #20]
 8002eb4:	813b      	strh	r3, [r7, #8]
    x -= h - 1;
 8002eb6:	897a      	ldrh	r2, [r7, #10]
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, h, color);
 8002ec4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002ec8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002ecc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002ed0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f9b5 	bl	8003246 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002edc:	e05b      	b.n	8002f96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fe faef 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d027      	beq.n	8002f46 <_ZN11GFXcanvas1613drawFastVLineEssst+0x1da>
    x = WIDTH - 1 - x;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	813b      	strh	r3, [r7, #8]

    y -= h - 1;
 8002f1e:	893a      	ldrh	r2, [r7, #8]
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, h, color);
 8002f2c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f34:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f944 	bl	80031cc <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 8002f44:	e027      	b.n	8002f96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fabb 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01b      	beq.n	8002f96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    int16_t t = x;
 8002f5e:	897b      	ldrh	r3, [r7, #10]
 8002f60:	82fb      	strh	r3, [r7, #22]
    x = y;
 8002f62:	893b      	ldrh	r3, [r7, #8]
 8002f64:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	8afb      	ldrh	r3, [r7, #22]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	813b      	strh	r3, [r7, #8]
    drawFastRawHLine(x, y, h, color);
 8002f7a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002f7e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f82:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002f86:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f95a 	bl	8003246 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8002f92:	e000      	b.n	8002f96 <_ZN11GFXcanvas1613drawFastVLineEssst+0x22a>
    return;
 8002f94:	bf00      	nop
  }
}
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd90      	pop	{r4, r7, pc}

08002f9c <_ZN11GFXcanvas1613drawFastHLineEssst>:
   @param  w      Length of horizontal line to be drawn, including 1st point
   @param  color  Color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	4608      	mov	r0, r1
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	813b      	strh	r3, [r7, #8]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	80fb      	strh	r3, [r7, #6]
  if (w < 0) { // Convert negative widths to positive equivalent
 8002fb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	da15      	bge.n	8002fea <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
    w *= -1;
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	425b      	negs	r3, r3
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	80fb      	strh	r3, [r7, #6]
    x -= w - 1;
 8002fc6:	897a      	ldrh	r2, [r7, #10]
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	817b      	strh	r3, [r7, #10]
    if (x < 0) {
 8002fd4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	da06      	bge.n	8002fea <_ZN11GFXcanvas1613drawFastHLineEssst+0x4e>
      w += x;
 8002fdc:	88fa      	ldrh	r2, [r7, #6]
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	80fb      	strh	r3, [r7, #6]
      x = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	817b      	strh	r3, [r7, #10]
    }
  }

  // Edge rejection (no-draw if totally off canvas)
  if ((y < 0) || (y >= height()) || (x >= width()) || ((x + w - 1) < 0)) {
 8002fea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	db1a      	blt.n	8003028 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fa58 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003002:	4293      	cmp	r3, r2
 8003004:	da10      	bge.n	8003028 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fa41 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003016:	4293      	cmp	r3, r2
 8003018:	da06      	bge.n	8003028 <_ZN11GFXcanvas1613drawFastHLineEssst+0x8c>
 800301a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800301e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003022:	4413      	add	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	dc01      	bgt.n	800302c <_ZN11GFXcanvas1613drawFastHLineEssst+0x90>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <_ZN11GFXcanvas1613drawFastHLineEssst+0x92>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80c8 	bne.w	80031c4 <_ZN11GFXcanvas1613drawFastHLineEssst+0x228>
    return;
  }

  if (x < 0) { // Clip left
 8003034:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003038:	2b00      	cmp	r3, #0
 800303a:	da06      	bge.n	800304a <_ZN11GFXcanvas1613drawFastHLineEssst+0xae>
    w += x;
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	4413      	add	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	80fb      	strh	r3, [r7, #6]
    x = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	817b      	strh	r3, [r7, #10]
  }
  if (x + w >= width()) { // Clip right
 800304a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800304e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003052:	18d4      	adds	r4, r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fa1a 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 800305c:	4603      	mov	r3, r0
 800305e:	429c      	cmp	r4, r3
 8003060:	bfac      	ite	ge
 8003062:	2301      	movge	r3, #1
 8003064:	2300      	movlt	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d009      	beq.n	8003080 <_ZN11GFXcanvas1613drawFastHLineEssst+0xe4>
    w = width() - x;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fa0e 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 8003074:	4603      	mov	r3, r0
 8003076:	b29a      	uxth	r2, r3
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	b29b      	uxth	r3, r3
 800307e:	80fb      	strh	r3, [r7, #6]
  }

  if (getRotation() == 0) {
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fa1e 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00c      	beq.n	80030b2 <_ZN11GFXcanvas1613drawFastHLineEssst+0x116>
    drawFastRawHLine(x, y, w, color);
 8003098:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800309c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030a0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80030a4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4603      	mov	r3, r0
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f8cb 	bl	8003246 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 80030b0:	e089      	b.n	80031c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 1) {
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fa05 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d01a      	beq.n	8003100 <_ZN11GFXcanvas1613drawFastHLineEssst+0x164>
    int16_t t = x;
 80030ca:	897b      	ldrh	r3, [r7, #10]
 80030cc:	82bb      	strh	r3, [r7, #20]
    x = WIDTH - 1 - y;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	893b      	ldrh	r3, [r7, #8]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	817b      	strh	r3, [r7, #10]
    y = t;
 80030e2:	8abb      	ldrh	r3, [r7, #20]
 80030e4:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 80030e6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80030ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80030ee:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80030f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4603      	mov	r3, r0
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f867 	bl	80031cc <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 80030fe:	e062      	b.n	80031c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 2) {
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe f9de 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8003108:	4603      	mov	r3, r0
 800310a:	2b02      	cmp	r3, #2
 800310c:	bf0c      	ite	eq
 800310e:	2301      	moveq	r3, #1
 8003110:	2300      	movne	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d027      	beq.n	8003168 <_ZN11GFXcanvas1613drawFastHLineEssst+0x1cc>
    x = WIDTH - 1 - x;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800311e:	b29a      	uxth	r2, r3
 8003120:	897b      	ldrh	r3, [r7, #10]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29b      	uxth	r3, r3
 800312a:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - y;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003132:	b29a      	uxth	r2, r3
 8003134:	893b      	ldrh	r3, [r7, #8]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29b      	uxth	r3, r3
 800313e:	813b      	strh	r3, [r7, #8]

    x -= w - 1;
 8003140:	897a      	ldrh	r2, [r7, #10]
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	b29b      	uxth	r3, r3
 8003148:	3301      	adds	r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	817b      	strh	r3, [r7, #10]
    drawFastRawHLine(x, y, w, color);
 800314e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003152:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003156:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800315a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f870 	bl	8003246 <_ZN11GFXcanvas1616drawFastRawHLineEssst>
 8003166:	e02e      	b.n	80031c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
  } else if (getRotation() == 3) {
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe f9aa 	bl	80014c4 <_ZNK12Adafruit_GFX11getRotationEv>
 8003170:	4603      	mov	r3, r0
 8003172:	2b03      	cmp	r3, #3
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d022      	beq.n	80031c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    int16_t t = x;
 8003180:	897b      	ldrh	r3, [r7, #10]
 8003182:	82fb      	strh	r3, [r7, #22]
    x = y;
 8003184:	893b      	ldrh	r3, [r7, #8]
 8003186:	817b      	strh	r3, [r7, #10]
    y = HEIGHT - 1 - t;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800318e:	b29a      	uxth	r2, r3
 8003190:	8afb      	ldrh	r3, [r7, #22]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	813b      	strh	r3, [r7, #8]
    y -= w - 1;
 800319c:	893a      	ldrh	r2, [r7, #8]
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	813b      	strh	r3, [r7, #8]
    drawFastRawVLine(x, y, w, color);
 80031aa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80031ae:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80031b2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	4603      	mov	r3, r0
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f805 	bl	80031cc <_ZN11GFXcanvas1616drawFastRawVLineEssst>
 80031c2:	e000      	b.n	80031c6 <_ZN11GFXcanvas1613drawFastHLineEssst+0x22a>
    return;
 80031c4:	bf00      	nop
  }
}
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd90      	pop	{r4, r7, pc}

080031cc <_ZN11GFXcanvas1616drawFastRawVLineEssst>:
   @param    h   length of vertical line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawVLine(int16_t x, int16_t y, int16_t h,
                                   uint16_t color) {
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	4608      	mov	r0, r1
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	460b      	mov	r3, r1
 80031e0:	813b      	strh	r3, [r7, #8]
 80031e2:	4613      	mov	r3, r2
 80031e4:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint16_t *buffer_ptr = buffer + y * WIDTH + x;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031ea:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031ee:	68f9      	ldr	r1, [r7, #12]
 80031f0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031fe:	440b      	add	r3, r1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 8003206:	2300      	movs	r3, #0
 8003208:	827b      	strh	r3, [r7, #18]
 800320a:	e00f      	b.n	800322c <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x60>
    (*buffer_ptr) = color;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	8c3a      	ldrh	r2, [r7, #32]
 8003210:	801a      	strh	r2, [r3, #0]
    buffer_ptr += WIDTH;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4413      	add	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  for (int16_t i = 0; i < h; i++) {
 8003220:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003224:	b29b      	uxth	r3, r3
 8003226:	3301      	adds	r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	827b      	strh	r3, [r7, #18]
 800322c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003234:	429a      	cmp	r2, r3
 8003236:	dbe9      	blt.n	800320c <_ZN11GFXcanvas1616drawFastRawVLineEssst+0x40>
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN11GFXcanvas1616drawFastRawHLineEssst>:
   @param    w   length of horizontal line to be drawn, including first point
   @param    color   color 16-bit 5-6-5 Color to draw line with
*/
/**************************************************************************/
void GFXcanvas16::drawFastRawHLine(int16_t x, int16_t y, int16_t w,
                                   uint16_t color) {
 8003246:	b480      	push	{r7}
 8003248:	b087      	sub	sp, #28
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	4608      	mov	r0, r1
 8003250:	4611      	mov	r1, r2
 8003252:	461a      	mov	r2, r3
 8003254:	4603      	mov	r3, r0
 8003256:	817b      	strh	r3, [r7, #10]
 8003258:	460b      	mov	r3, r1
 800325a:	813b      	strh	r3, [r7, #8]
 800325c:	4613      	mov	r3, r2
 800325e:	80fb      	strh	r3, [r7, #6]
  // x & y already in raw (rotation 0) coordinates, no need to transform.
  uint32_t buffer_index = y * WIDTH + x;
 8003260:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800326a:	fb03 f202 	mul.w	r2, r3, r2
 800326e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003272:	4413      	add	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e009      	b.n	8003290 <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x4a>
    buffer[i] = color;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	4413      	add	r3, r2
 8003286:	8c3a      	ldrh	r2, [r7, #32]
 8003288:	801a      	strh	r2, [r3, #0]
  for (uint32_t i = buffer_index; i < buffer_index + w; i++) {
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	3301      	adds	r3, #1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	429a      	cmp	r2, r3
 800329c:	d3ee      	bcc.n	800327c <_ZN11GFXcanvas1616drawFastRawHLineEssst+0x36>
  }
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <_ZN5Print5writeEPKc+0x14>
 80032bc:	2300      	movs	r3, #0
 80032be:	e00d      	b.n	80032dc <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3304      	adds	r3, #4
 80032c6:	681c      	ldr	r4, [r3, #0]
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	f7fc ffb9 	bl	8000240 <strlen>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	6839      	ldr	r1, [r7, #0]
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	47a0      	blx	r4
 80032d8:	4603      	mov	r3, r0
 80032da:	bf00      	nop
    }
 80032dc:	4618      	mov	r0, r3
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}

080032e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  while (size--) {
 80032f4:	e014      	b.n	8003320 <_ZN5Print5writeEPKhj+0x3c>
    if (write(*buffer++)) n++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	1c59      	adds	r1, r3, #1
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	4790      	blx	r2
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf14      	ite	ne
 8003310:	2301      	movne	r3, #1
 8003312:	2300      	moveq	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <_ZN5Print5writeEPKhj+0x52>
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	1e5a      	subs	r2, r3, #1
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	bf14      	ite	ne
 800332a:	2301      	movne	r3, #1
 800332c:	2300      	moveq	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1e0      	bne.n	80032f6 <_ZN5Print5writeEPKhj+0x12>
 8003334:	e000      	b.n	8003338 <_ZN5Print5writeEPKhj+0x54>
    else break;
 8003336:	bf00      	nop
  }
  return n;
 8003338:	697b      	ldr	r3, [r7, #20]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  return write(str);
 800334c:	6839      	ldr	r1, [r7, #0]
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ffac 	bl	80032ac <_ZN5Print5writeEPKc>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>:
#include "ST7789V_STM32.h"
#include "spi.h"


ST7789V_STM32::ST7789V_STM32(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin,
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	807b      	strh	r3, [r7, #2]
                             GPIO_TypeDef *dc_port, uint16_t dc_pin, GPIO_TypeDef *rst_port, uint16_t rst_pin)
    : Adafruit_GFX(ST7789V_TFTWIDTH, ST7789V_TFTHEIGHT),
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
      _inTransaction(false)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003374:	21f0      	movs	r1, #240	@ 0xf0
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f8ce 	bl	8001518 <_ZN12Adafruit_GFXC1Ess>
 800337c:	4a17      	ldr	r2, [pc, #92]	@ (80033dc <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t+0x7c>)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	625a      	str	r2, [r3, #36]	@ 0x24
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	629a      	str	r2, [r3, #40]	@ 0x28
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	635a      	str	r2, [r3, #52]	@ 0x34
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	639a      	str	r2, [r3, #56]	@ 0x38
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a3a      	ldr	r2, [r7, #32]
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
      _hspi(hspi), _cs_port(cs_port), _cs_pin(cs_pin),
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	887a      	ldrh	r2, [r7, #2]
 80033b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      _dc_port(dc_port), _dc_pin(dc_pin), _rst_port(rst_port), _rst_pin(rst_pin),
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8bba      	ldrh	r2, [r7, #28]
 80033be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      _inTransaction(false)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
{
}
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	0801d334 	.word	0x0801d334

080033e0 <_ZN13ST7789V_STM325beginEv>:

void ST7789V_STM32::begin(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  // dmaState = INIT;



  // Hardware reset sequence
  rstHigh();
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fd0f 	bl	8003e0c <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f002 f85d 	bl	80054ae <HAL_Delay>
  rstLow();
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fcf8 	bl	8003dea <_ZN13ST7789V_STM326rstLowEv>
  HAL_Delay(10);
 80033fa:	200a      	movs	r0, #10
 80033fc:	f002 f857 	bl	80054ae <HAL_Delay>
  rstHigh();
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 fd03 	bl	8003e0c <_ZN13ST7789V_STM327rstHighEv>
  HAL_Delay(120);
 8003406:	2078      	movs	r0, #120	@ 0x78
 8003408:	f002 f851 	bl	80054ae <HAL_Delay>

  csHigh();
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fcb9 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>

  // ST7789V initialization sequence (based on your vendor code)
  writeCommand(ST7789V_COLMOD); // 0x3A - Pixel format
 8003412:	213a      	movs	r1, #58	@ 0x3a
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fba7 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);              // 16-bit color
 800341a:	2105      	movs	r1, #5
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 fbce 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_MADCTL); // 0x36 - Memory access control
 8003422:	2136      	movs	r1, #54	@ 0x36
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fb9f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);              // Default orientation
 800342a:	2100      	movs	r1, #0
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fbc6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  // Frame rate control
  writeCommand(0xB2);
 8003432:	21b2      	movs	r1, #178	@ 0xb2
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fb97 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x05);
 800343a:	2105      	movs	r1, #5
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fbbe 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 8003442:	2105      	movs	r1, #5
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fbba 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 800344a:	2100      	movs	r1, #0
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fbb6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 8003452:	2133      	movs	r1, #51	@ 0x33
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fbb2 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 800345a:	2133      	movs	r1, #51	@ 0x33
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fbae 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xB7);
 8003462:	21b7      	movs	r1, #183	@ 0xb7
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fb7f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x35);
 800346a:	2135      	movs	r1, #53	@ 0x35
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 fba6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  // Power settings
  writeCommand(0xBB); // VCOM
 8003472:	21bb      	movs	r1, #187	@ 0xbb
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fb77 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x3F);
 800347a:	213f      	movs	r1, #63	@ 0x3f
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fb9e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC0);
 8003482:	21c0      	movs	r1, #192	@ 0xc0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb6f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x2C);
 800348a:	212c      	movs	r1, #44	@ 0x2c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb96 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC2);
 8003492:	21c2      	movs	r1, #194	@ 0xc2
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fb67 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x01);
 800349a:	2101      	movs	r1, #1
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb8e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC3);
 80034a2:	21c3      	movs	r1, #195	@ 0xc3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb5f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x0F);
 80034aa:	210f      	movs	r1, #15
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb86 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC4);
 80034b2:	21c4      	movs	r1, #196	@ 0xc4
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb57 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x20);
 80034ba:	2120      	movs	r1, #32
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 fb7e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xC6);
 80034c2:	21c6      	movs	r1, #198	@ 0xc6
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fb4f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x11);
 80034ca:	2111      	movs	r1, #17
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 fb76 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xD0);
 80034d2:	21d0      	movs	r1, #208	@ 0xd0
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb47 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xA4);
 80034da:	21a4      	movs	r1, #164	@ 0xa4
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fb6e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xA1);
 80034e2:	21a1      	movs	r1, #161	@ 0xa1
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb6a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE8);
 80034ea:	21e8      	movs	r1, #232	@ 0xe8
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fb3b 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x03);
 80034f2:	2103      	movs	r1, #3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb62 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE9);
 80034fa:	21e9      	movs	r1, #233	@ 0xe9
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 fb33 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x09);
 8003502:	2109      	movs	r1, #9
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fb5a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 800350a:	2109      	movs	r1, #9
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fb56 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003512:	2108      	movs	r1, #8
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fb52 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  // Gamma settings
  writeCommand(0xE0);
 800351a:	21e0      	movs	r1, #224	@ 0xe0
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fb23 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 8003522:	21d0      	movs	r1, #208	@ 0xd0
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fb4a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 800352a:	2105      	movs	r1, #5
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb46 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 8003532:	2109      	movs	r1, #9
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb42 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 800353a:	2109      	movs	r1, #9
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fb3e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 8003542:	2108      	movs	r1, #8
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 fb3a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 800354a:	2114      	movs	r1, #20
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb36 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003552:	2128      	movs	r1, #40	@ 0x28
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 fb32 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x33);
 800355a:	2133      	movs	r1, #51	@ 0x33
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fb2e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F);
 8003562:	213f      	movs	r1, #63	@ 0x3f
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fb2a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x07);
 800356a:	2107      	movs	r1, #7
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb26 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 8003572:	2113      	movs	r1, #19
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 fb22 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 800357a:	2114      	movs	r1, #20
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 fb1e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003582:	2128      	movs	r1, #40	@ 0x28
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fb1a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x30);
 800358a:	2130      	movs	r1, #48	@ 0x30
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb16 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(0xE1);
 8003592:	21e1      	movs	r1, #225	@ 0xe1
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fae7 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0xD0);
 800359a:	21d0      	movs	r1, #208	@ 0xd0
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb0e 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x05);
 80035a2:	2105      	movs	r1, #5
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 fb0a 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80035aa:	2109      	movs	r1, #9
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fb06 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x09);
 80035b2:	2109      	movs	r1, #9
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb02 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x08);
 80035ba:	2108      	movs	r1, #8
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 fafe 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x03);
 80035c2:	2103      	movs	r1, #3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fafa 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x24);
 80035ca:	2124      	movs	r1, #36	@ 0x24
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 faf6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 80035d2:	2132      	movs	r1, #50	@ 0x32
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 faf2 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x32);
 80035da:	2132      	movs	r1, #50	@ 0x32
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 faee 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3B);
 80035e2:	213b      	movs	r1, #59	@ 0x3b
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 faea 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x38);
 80035ea:	2138      	movs	r1, #56	@ 0x38
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fae6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x14);
 80035f2:	2114      	movs	r1, #20
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fae2 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x13);
 80035fa:	2113      	movs	r1, #19
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fade 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x28);
 8003602:	2128      	movs	r1, #40	@ 0x28
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 fada 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x2F);
 800360a:	212f      	movs	r1, #47	@ 0x2f
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fad6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_INVON); // 0x21 - Inversion on
 8003612:	2121      	movs	r1, #33	@ 0x21
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 faa7 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>

  // Set display window
  writeCommand(ST7789V_CASET); // 0x2A - Column address set
 800361a:	212a      	movs	r1, #42	@ 0x2a
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 faa3 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 8003622:	2100      	movs	r1, #0
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 faca 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 800362a:	2100      	movs	r1, #0
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fac6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 8003632:	2100      	movs	r1, #0
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fac2 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0xEF); // 239 (240-1)
 800363a:	21ef      	movs	r1, #239	@ 0xef
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fabe 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_RASET); // 0x2B - Row address set
 8003642:	212b      	movs	r1, #43	@ 0x2b
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 fa8f 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(0x00);
 800364a:	2100      	movs	r1, #0
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fab6 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x00);
 8003652:	2100      	movs	r1, #0
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 fab2 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x01);
 800365a:	2101      	movs	r1, #1
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 faae 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(0x3F); // 319 (320-1)
 8003662:	213f      	movs	r1, #63	@ 0x3f
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 faaa 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>

  writeCommand(ST7789V_SLPOUT); // 0x11 - Exit sleep mode
 800366a:	2111      	movs	r1, #17
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fa7b 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  HAL_Delay(120);
 8003672:	2078      	movs	r0, #120	@ 0x78
 8003674:	f001 ff1b 	bl	80054ae <HAL_Delay>

  writeCommand(ST7789V_DISPON); // 0x29 - Display on
 8003678:	2129      	movs	r1, #41	@ 0x29
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa74 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeCommand(ST7789V_RAMWR);  // 0x2C - Memory write
 8003680:	212c      	movs	r1, #44	@ 0x2c
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fa70 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZN13ST7789V_STM329drawPixelEsst>:

void ST7789V_STM32::drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	4608      	mov	r0, r1
 800369a:	4611      	mov	r1, r2
 800369c:	461a      	mov	r2, r3
 800369e:	4603      	mov	r3, r0
 80036a0:	817b      	strh	r3, [r7, #10]
 80036a2:	460b      	mov	r3, r1
 80036a4:	813b      	strh	r3, [r7, #8]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 80036aa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db20      	blt.n	80036f4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80036b8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80036bc:	429a      	cmp	r2, r3
 80036be:	da19      	bge.n	80036f4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 80036c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db15      	blt.n	80036f4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036ce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	da0e      	bge.n	80036f4 <_ZN13ST7789V_STM329drawPixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 80036d6:	8979      	ldrh	r1, [r7, #10]
 80036d8:	893a      	ldrh	r2, [r7, #8]
 80036da:	8978      	ldrh	r0, [r7, #10]
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	4603      	mov	r3, r0
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fabb 	bl	8003c5e <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	4619      	mov	r1, r3
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa8e 	bl	8003c0e <_ZN13ST7789V_STM3211writeData16Et>
 80036f2:	e000      	b.n	80036f6 <_ZN13ST7789V_STM329drawPixelEsst+0x66>
    return;
 80036f4:	bf00      	nop
}
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <_ZN13ST7789V_STM3210startWriteEv>:

void ST7789V_STM32::startWrite(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  if (!_inTransaction)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d006      	beq.n	8003722 <_ZN13ST7789V_STM3210startWriteEv+0x26>
  {
    csLow();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 fb24 	bl	8003d62 <_ZN13ST7789V_STM325csLowEv>
    _inTransaction = true;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <_ZN13ST7789V_STM328endWriteEv>:

void ST7789V_STM32::endWrite(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  if (_inTransaction)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <_ZN13ST7789V_STM328endWriteEv+0x20>
  {
    csHigh();
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fb21 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
    _inTransaction = false;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
  }
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZN13ST7789V_STM3210writePixelEsst>:

void ST7789V_STM32::writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af02      	add	r7, sp, #8
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	4608      	mov	r0, r1
 800375c:	4611      	mov	r1, r2
 800375e:	461a      	mov	r2, r3
 8003760:	4603      	mov	r3, r0
 8003762:	817b      	strh	r3, [r7, #10]
 8003764:	460b      	mov	r3, r1
 8003766:	813b      	strh	r3, [r7, #8]
 8003768:	4613      	mov	r3, r2
 800376a:	80fb      	strh	r3, [r7, #6]
  if ((x < 0) || (x >= _width) || (y < 0) || (y >= _height))
 800376c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db20      	blt.n	80037b6 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800377a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800377e:	429a      	cmp	r2, r3
 8003780:	da19      	bge.n	80037b6 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 8003782:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003786:	2b00      	cmp	r3, #0
 8003788:	db15      	blt.n	80037b6 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003790:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003794:	429a      	cmp	r2, r3
 8003796:	da0e      	bge.n	80037b6 <_ZN13ST7789V_STM3210writePixelEsst+0x64>
    return;

  setWindow(x, y, x, y);
 8003798:	8979      	ldrh	r1, [r7, #10]
 800379a:	893a      	ldrh	r2, [r7, #8]
 800379c:	8978      	ldrh	r0, [r7, #10]
 800379e:	893b      	ldrh	r3, [r7, #8]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	4603      	mov	r3, r0
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 fa5a 	bl	8003c5e <_ZN13ST7789V_STM329setWindowEtttt>
  writeData16(color);
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	4619      	mov	r1, r3
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fa2d 	bl	8003c0e <_ZN13ST7789V_STM3211writeData16Et>
 80037b4:	e000      	b.n	80037b8 <_ZN13ST7789V_STM3210writePixelEsst+0x66>
    return;
 80037b6:	bf00      	nop
}
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <_ZN13ST7789V_STM3213writeFillRectEsssst>:

void ST7789V_STM32::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b08a      	sub	sp, #40	@ 0x28
 80037c2:	af02      	add	r7, sp, #8
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	461a      	mov	r2, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	817b      	strh	r3, [r7, #10]
 80037d0:	460b      	mov	r3, r1
 80037d2:	813b      	strh	r3, [r7, #8]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  if ((x >= _width) || (y >= _height))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80037de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	da6c      	bge.n	80038c0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80037ec:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	da65      	bge.n	80038c0 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x102>
    return;
  int16_t x2 = x + w - 1, y2 = y + h - 1;
 80037f4:	897a      	ldrh	r2, [r7, #10]
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	4413      	add	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	83fb      	strh	r3, [r7, #30]
 8003802:	893a      	ldrh	r2, [r7, #8]
 8003804:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003806:	4413      	add	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29b      	uxth	r3, r3
 800380e:	83bb      	strh	r3, [r7, #28]
  if ((x2 < 0) || (y2 < 0))
 8003810:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003814:	2b00      	cmp	r3, #0
 8003816:	db55      	blt.n	80038c4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
 8003818:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	db51      	blt.n	80038c4 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x106>
    return;

  // Clip to screen bounds
  if (x < 0)
 8003820:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003824:	2b00      	cmp	r3, #0
 8003826:	da01      	bge.n	800382c <_ZN13ST7789V_STM3213writeFillRectEsssst+0x6e>
  {
    x = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	817b      	strh	r3, [r7, #10]
  }
  if (y < 0)
 800382c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	da01      	bge.n	8003838 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x7a>
  {
    y = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	813b      	strh	r3, [r7, #8]
  }
  if (x2 >= _width)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800383e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003842:	429a      	cmp	r2, r3
 8003844:	db06      	blt.n	8003854 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x96>
  {
    x2 = _width - 1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29b      	uxth	r3, r3
 8003852:	83fb      	strh	r3, [r7, #30]
  }
  if (y2 >= _height)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800385a:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800385e:	429a      	cmp	r2, r3
 8003860:	db06      	blt.n	8003870 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xb2>
  {
    y2 = _height - 1;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29b      	uxth	r3, r3
 800386e:	83bb      	strh	r3, [r7, #28]
  }

  setWindow(x, y, x2, y2);
 8003870:	8979      	ldrh	r1, [r7, #10]
 8003872:	893a      	ldrh	r2, [r7, #8]
 8003874:	8bf8      	ldrh	r0, [r7, #30]
 8003876:	8bbb      	ldrh	r3, [r7, #28]
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	4603      	mov	r3, r0
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f9ee 	bl	8003c5e <_ZN13ST7789V_STM329setWindowEtttt>
  uint32_t pixels = (x2 - x + 1) * (y2 - y + 1);
 8003882:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003886:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8003892:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003896:	1a8a      	subs	r2, r1, r2
 8003898:	3201      	adds	r2, #1
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]

  for (uint32_t i = 0; i < pixels; i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xf8>
  {
    writeData16(color);
 80038a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80038a8:	4619      	mov	r1, r3
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 f9af 	bl	8003c0e <_ZN13ST7789V_STM3211writeData16Et>
  for (uint32_t i = 0; i < pixels; i++)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3f3      	bcc.n	80038a6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0xe8>
 80038be:	e002      	b.n	80038c6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <_ZN13ST7789V_STM3213writeFillRectEsssst+0x108>
    return;
 80038c4:	bf00      	nop
  }
}
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN13ST7789V_STM3210fillScreenEt>:

void ST7789V_STM32::fillScreen(uint16_t color)
{
 80038cc:	b590      	push	{r4, r7, lr}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
  writeFillRect(0, 0, _width, _height, color);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	331c      	adds	r3, #28
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80038ec:	887a      	ldrh	r2, [r7, #2]
 80038ee:	9201      	str	r2, [sp, #4]
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	460b      	mov	r3, r1
 80038f4:	2200      	movs	r2, #0
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	47a0      	blx	r4
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}

08003904 <_ZN13ST7789V_STM328fillRectEsssst>:

void ST7789V_STM32::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003904:	b590      	push	{r4, r7, lr}
 8003906:	b087      	sub	sp, #28
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	461a      	mov	r2, r3
 8003912:	4603      	mov	r3, r0
 8003914:	817b      	strh	r3, [r7, #10]
 8003916:	460b      	mov	r3, r1
 8003918:	813b      	strh	r3, [r7, #8]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3314      	adds	r3, #20
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	4798      	blx	r3
  writeFillRect(x, y, w, h, color);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	331c      	adds	r3, #28
 8003930:	681c      	ldr	r4, [r3, #0]
 8003932:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003936:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800393a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800393e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4603      	mov	r3, r0
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	47a0      	blx	r4
  endWrite();
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	332c      	adds	r3, #44	@ 0x2c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	4798      	blx	r3
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}

08003962 <_ZN13ST7789V_STM3213drawFastVLineEssst>:

void ST7789V_STM32::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b087      	sub	sp, #28
 8003966:	af02      	add	r7, sp, #8
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	4608      	mov	r0, r1
 800396c:	4611      	mov	r1, r2
 800396e:	461a      	mov	r2, r3
 8003970:	4603      	mov	r3, r0
 8003972:	817b      	strh	r3, [r7, #10]
 8003974:	460b      	mov	r3, r1
 8003976:	813b      	strh	r3, [r7, #8]
 8003978:	4613      	mov	r3, r2
 800397a:	80fb      	strh	r3, [r7, #6]
  startWrite();
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	4798      	blx	r3
  writeFillRect(x, y, 1, h, color);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	331c      	adds	r3, #28
 800398e:	681c      	ldr	r4, [r3, #0]
 8003990:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003994:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003998:	8c3b      	ldrh	r3, [r7, #32]
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	2301      	movs	r3, #1
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	47a0      	blx	r4
  endWrite();
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	332c      	adds	r3, #44	@ 0x2c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	4798      	blx	r3
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd90      	pop	{r4, r7, pc}

080039bc <_ZN13ST7789V_STM3214writeFastVLineEssst>:

void ST7789V_STM32::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b087      	sub	sp, #28
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	817b      	strh	r3, [r7, #10]
 80039ce:	460b      	mov	r3, r1
 80039d0:	813b      	strh	r3, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, 1, h, color);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	331c      	adds	r3, #28
 80039dc:	681c      	ldr	r4, [r3, #0]
 80039de:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80039e2:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80039e6:	8c3b      	ldrh	r3, [r7, #32]
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	47a0      	blx	r4
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd90      	pop	{r4, r7, pc}

080039fe <_ZN13ST7789V_STM3213drawFastHLineEssst>:

void ST7789V_STM32::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80039fe:	b590      	push	{r4, r7, lr}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af02      	add	r7, sp, #8
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	4608      	mov	r0, r1
 8003a08:	4611      	mov	r1, r2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	817b      	strh	r3, [r7, #10]
 8003a10:	460b      	mov	r3, r1
 8003a12:	813b      	strh	r3, [r7, #8]
 8003a14:	4613      	mov	r3, r2
 8003a16:	80fb      	strh	r3, [r7, #6]
  startWrite();
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	4798      	blx	r3
  writeFillRect(x, y, w, 1, color);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	331c      	adds	r3, #28
 8003a2a:	681c      	ldr	r4, [r3, #0]
 8003a2c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a30:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a34:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a38:	8c3b      	ldrh	r3, [r7, #32]
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4603      	mov	r3, r0
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	47a0      	blx	r4
  endWrite();
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	332c      	adds	r3, #44	@ 0x2c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	4798      	blx	r3
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd90      	pop	{r4, r7, pc}

08003a5a <_ZN13ST7789V_STM3214writeFastHLineEssst>:

void ST7789V_STM32::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003a5a:	b590      	push	{r4, r7, lr}
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	af02      	add	r7, sp, #8
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	4608      	mov	r0, r1
 8003a64:	4611      	mov	r1, r2
 8003a66:	461a      	mov	r2, r3
 8003a68:	4603      	mov	r3, r0
 8003a6a:	817b      	strh	r3, [r7, #10]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	813b      	strh	r3, [r7, #8]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  writeFillRect(x, y, w, 1, color);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	331c      	adds	r3, #28
 8003a7a:	681c      	ldr	r4, [r3, #0]
 8003a7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003a80:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003a84:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003a88:	8c3b      	ldrh	r3, [r7, #32]
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4603      	mov	r3, r0
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	47a0      	blx	r4
}
 8003a96:	bf00      	nop
 8003a98:	3714      	adds	r7, #20
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd90      	pop	{r4, r7, pc}
	...

08003aa0 <_ZN13ST7789V_STM3211setRotationEh>:

void ST7789V_STM32::setRotation(uint8_t rotation)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  writeCommand(ST7789V_MADCTL);
 8003aac:	2136      	movs	r1, #54	@ 0x36
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f85a 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  rotation = rotation % 4;
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	70fb      	strb	r3, [r7, #3]

  switch (rotation)
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d83a      	bhi.n	8003b38 <_ZN13ST7789V_STM3211setRotationEh+0x98>
 8003ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ac8 <_ZN13ST7789V_STM3211setRotationEh+0x28>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003ad9 	.word	0x08003ad9
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b09 	.word	0x08003b09
 8003ad4:	08003b21 	.word	0x08003b21
  {
  case 0:
    writeData(0x00);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f86f 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	22f0      	movs	r2, #240	@ 0xf0
 8003ae4:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003aec:	81da      	strh	r2, [r3, #14]
    break;
 8003aee:	e023      	b.n	8003b38 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 1:
    writeData(0x60);
 8003af0:	2160      	movs	r1, #96	@ 0x60
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f863 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003afe:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	22f0      	movs	r2, #240	@ 0xf0
 8003b04:	81da      	strh	r2, [r3, #14]
    break;
 8003b06:	e017      	b.n	8003b38 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 2:
    writeData(0xC0);
 8003b08:	21c0      	movs	r1, #192	@ 0xc0
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f857 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTWIDTH;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	22f0      	movs	r2, #240	@ 0xf0
 8003b14:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTHEIGHT;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b1c:	81da      	strh	r2, [r3, #14]
    break;
 8003b1e:	e00b      	b.n	8003b38 <_ZN13ST7789V_STM3211setRotationEh+0x98>
  case 3:
    writeData(0xA0);
 8003b20:	21a0      	movs	r1, #160	@ 0xa0
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f84b 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
    _width = ST7789V_TFTHEIGHT;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003b2e:	819a      	strh	r2, [r3, #12]
    _height = ST7789V_TFTWIDTH;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	22f0      	movs	r2, #240	@ 0xf0
 8003b34:	81da      	strh	r2, [r3, #14]
    break;
 8003b36:	bf00      	nop
  }
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN13ST7789V_STM3213invertDisplayEb>:

void ST7789V_STM32::invertDisplay(bool invert)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	70fb      	strb	r3, [r7, #3]
  writeCommand(invert ? ST7789V_INVON : ST7789V_INVOFF);
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <_ZN13ST7789V_STM3213invertDisplayEb+0x16>
 8003b52:	2321      	movs	r3, #33	@ 0x21
 8003b54:	e000      	b.n	8003b58 <_ZN13ST7789V_STM3213invertDisplayEb+0x18>
 8003b56:	2320      	movs	r3, #32
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f804 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <_ZN13ST7789V_STM3212writeCommandEh>:
  writeCommand(ST7789V_DISPON);
}

// Private methods
void ST7789V_STM32::writeCommand(uint8_t cmd)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003b7a:	f083 0301 	eor.w	r3, r3, #1
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <_ZN13ST7789V_STM3212writeCommandEh+0x22>
    csLow();
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f8ec 	bl	8003d62 <_ZN13ST7789V_STM325csLowEv>
  dcLow();
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f90b 	bl	8003da6 <_ZN13ST7789V_STM325dcLowEv>
  spiWrite(cmd);
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	4619      	mov	r1, r3
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8b7 	bl	8003d08 <_ZN13ST7789V_STM328spiWriteEh>
  dcHigh();
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f914 	bl	8003dc8 <_ZN13ST7789V_STM326dcHighEv>
  if (!_inTransaction)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <_ZN13ST7789V_STM3212writeCommandEh+0x4e>
    csHigh();
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f8e7 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <_ZN13ST7789V_STM329writeDataEh>:

void ST7789V_STM32::writeData(uint8_t data)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70fb      	strb	r3, [r7, #3]
  if (!_inTransaction)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <_ZN13ST7789V_STM329writeDataEh+0x22>
    csLow();
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f8c1 	bl	8003d62 <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f8f1 	bl	8003dc8 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite(data);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f88c 	bl	8003d08 <_ZN13ST7789V_STM328spiWriteEh>
  if (!_inTransaction)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003bf6:	f083 0301 	eor.w	r3, r3, #1
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <_ZN13ST7789V_STM329writeDataEh+0x48>
    csHigh();
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 f8bf 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
}
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <_ZN13ST7789V_STM3211writeData16Et>:

void ST7789V_STM32::writeData16(uint16_t data)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	460b      	mov	r3, r1
 8003c18:	807b      	strh	r3, [r7, #2]
  if (!_inTransaction)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c20:	f083 0301 	eor.w	r3, r3, #1
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <_ZN13ST7789V_STM3211writeData16Et+0x22>
    csLow();
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f899 	bl	8003d62 <_ZN13ST7789V_STM325csLowEv>
  dcHigh();
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f8c9 	bl	8003dc8 <_ZN13ST7789V_STM326dcHighEv>
  spiWrite16(data);
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	4619      	mov	r1, r3
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f876 	bl	8003d2c <_ZN13ST7789V_STM3210spiWrite16Et>
  if (!_inTransaction)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003c46:	f083 0301 	eor.w	r3, r3, #1
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <_ZN13ST7789V_STM3211writeData16Et+0x48>
    csHigh();
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f897 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <_ZN13ST7789V_STM329setWindowEtttt>:

void ST7789V_STM32::setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	4608      	mov	r0, r1
 8003c68:	4611      	mov	r1, r2
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	817b      	strh	r3, [r7, #10]
 8003c70:	460b      	mov	r3, r1
 8003c72:	813b      	strh	r3, [r7, #8]
 8003c74:	4613      	mov	r3, r2
 8003c76:	80fb      	strh	r3, [r7, #6]
  writeCommand(ST7789V_CASET);
 8003c78:	212a      	movs	r1, #42	@ 0x2a
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff74 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(x0 >> 8);
 8003c80:	897b      	ldrh	r3, [r7, #10]
 8003c82:	0a1b      	lsrs	r3, r3, #8
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff ff97 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(x0 & 0xFF);
 8003c90:	897b      	ldrh	r3, [r7, #10]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff ff91 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 >> 8);
 8003c9c:	88fb      	ldrh	r3, [r7, #6]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff ff89 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(x1 & 0xFF);
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff ff83 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RASET);
 8003cb8:	212b      	movs	r1, #43	@ 0x2b
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f7ff ff54 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
  writeData(y0 >> 8);
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff ff77 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(y0 & 0xFF);
 8003cd0:	893b      	ldrh	r3, [r7, #8]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff ff71 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 >> 8);
 8003cdc:	8b3b      	ldrh	r3, [r7, #24]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff ff69 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeData(y1 & 0xFF);
 8003cec:	8b3b      	ldrh	r3, [r7, #24]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff63 	bl	8003bbe <_ZN13ST7789V_STM329writeDataEh>
  writeCommand(ST7789V_RAMWR);
 8003cf8:	212c      	movs	r1, #44	@ 0x2c
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff ff34 	bl	8003b68 <_ZN13ST7789V_STM3212writeCommandEh>
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <_ZN13ST7789V_STM328spiWriteEh>:

void ST7789V_STM32::spiWrite(uint8_t data)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(_hspi, &data, 1, HAL_MAX_DELAY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003d18:	1cf9      	adds	r1, r7, #3
 8003d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f009 fb5f 	bl	800d3e2 <HAL_SPI_Transmit>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZN13ST7789V_STM3210spiWrite16Et>:

void ST7789V_STM32::spiWrite16(uint16_t data)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	460b      	mov	r3, r1
 8003d36:	807b      	strh	r3, [r7, #2]
  uint8_t buffer[2];
  buffer[0] = data >> 8;   // MSB first
 8003d38:	887b      	ldrh	r3, [r7, #2]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	733b      	strb	r3, [r7, #12]
  buffer[1] = data & 0xFF; // LSB second
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003d4c:	f107 010c 	add.w	r1, r7, #12
 8003d50:	f04f 33ff 	mov.w	r3, #4294967295
 8003d54:	2202      	movs	r2, #2
 8003d56:	f009 fb44 	bl	800d3e2 <HAL_SPI_Transmit>
}
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <_ZN13ST7789V_STM325csLowEv>:

// GPIO control functions
void ST7789V_STM32::csLow(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d74:	2200      	movs	r2, #0
 8003d76:	4619      	mov	r1, r3
 8003d78:	f004 fc80 	bl	800867c <HAL_GPIO_WritePin>
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <_ZN13ST7789V_STM326csHighEv>:

void ST7789V_STM32::csHigh(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003d96:	2201      	movs	r2, #1
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f004 fc6f 	bl	800867c <HAL_GPIO_WritePin>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <_ZN13ST7789V_STM325dcLowEv>:

void ST7789V_STM32::dcLow(void)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_RESET);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003db8:	2200      	movs	r2, #0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	f004 fc5e 	bl	800867c <HAL_GPIO_WritePin>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_ZN13ST7789V_STM326dcHighEv>:

void ST7789V_STM32::dcHigh(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_dc_port, _dc_pin, GPIO_PIN_SET);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f004 fc4d 	bl	800867c <HAL_GPIO_WritePin>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_ZN13ST7789V_STM326rstLowEv>:

void ST7789V_STM32::rstLow(void)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_RESET);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f004 fc3c 	bl	800867c <HAL_GPIO_WritePin>
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <_ZN13ST7789V_STM327rstHighEv>:

void ST7789V_STM32::rstHigh(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_rst_port, _rst_pin, GPIO_PIN_SET);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4619      	mov	r1, r3
 8003e22:	f004 fc2b 	bl	800867c <HAL_GPIO_WritePin>
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <_ZN13ST7789V_STM3214writeBufferDMAEPtm>:
  if (!_inTransaction)
    csHigh();
}

void ST7789V_STM32::writeBufferDMA(uint16_t *buffer, uint32_t len)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b086      	sub	sp, #24
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	607a      	str	r2, [r7, #4]
    // Don't start new transfer if one is already in progress
    if (_dmaState.isActive) {
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d14c      	bne.n	8003ede <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb0>
        return; // Or handle this error condition as needed
    }

    if (!_inTransaction)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003e4a:	f083 0301 	eor.w	r3, r3, #1
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x2c>
        csLow();
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff ff84 	bl	8003d62 <_ZN13ST7789V_STM325csLowEv>
    dcHigh();
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ffb4 	bl	8003dc8 <_ZN13ST7789V_STM326dcHighEv>

    // Initialize DMA transfer state
    _dmaState.buffer = (uint8_t *)buffer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	64da      	str	r2, [r3, #76]	@ 0x4c
    _dmaState.totalBytes = len * 2; // Convert 16-bit length to bytes
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	005a      	lsls	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	651a      	str	r2, [r3, #80]	@ 0x50
    _dmaState.bytesTransferred = 0;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	655a      	str	r2, [r3, #84]	@ 0x54
    _dmaState.isActive = true;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    _dmaTransferComplete = false;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a

    // Start first chunk
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e8c:	d203      	bcs.n	8003e96 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x68>
                         MAX_DMA_CHUNK : _dmaState.totalBytes;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	3350      	adds	r3, #80	@ 0x50
    uint32_t firstChunk = (_dmaState.totalBytes > MAX_DMA_CHUNK) ?
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	e001      	b.n	8003e9a <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0x6c>
 8003e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e9a:	617b      	str	r3, [r7, #20]

    _dmaState.currentChunkSize = firstChunk;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	659a      	str	r2, [r3, #88]	@ 0x58

    // Start DMA transfer
    HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi, _dmaState.buffer, firstChunk);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	b292      	uxth	r2, r2
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f009 fe2c 	bl	800db0c <HAL_SPI_Transmit_DMA>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	74fb      	strb	r3, [r7, #19]

    if (status != HAL_OK) {
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d010      	beq.n	8003ee0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        // Handle error - fall back to blocking mode or return error
        _dmaState.isActive = false;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        if (!_inTransaction)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
            csHigh();
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff ff54 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
 8003edc:	e000      	b.n	8003ee0 <_ZN13ST7789V_STM3214writeBufferDMAEPtm+0xb2>
        return; // Or handle this error condition as needed
 8003ede:	bf00      	nop
    }
}
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>:

void ST7789V_STM32::dmaTransferCompleteCallback()
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
    _dmaState.bytesTransferred += _dmaState.currentChunkSize;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef6:	441a      	add	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54

    // Check if there are more chunks to send
    if (_dmaState.bytesTransferred < _dmaState.totalBytes) {
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d238      	bcs.n	8003f7a <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x94>
        // Calculate next chunk size
        uint32_t remaining = _dmaState.totalBytes - _dmaState.bytesTransferred;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	60fb      	str	r3, [r7, #12]
        uint32_t nextChunk = (remaining > MAX_DMA_CHUNK) ? MAX_DMA_CHUNK : remaining;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1a:	d203      	bcs.n	8003f24 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x3e>
 8003f1c:	f107 030c 	add.w	r3, r7, #12
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	e001      	b.n	8003f28 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0x42>
 8003f24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f28:	617b      	str	r3, [r7, #20]

        _dmaState.currentChunkSize = nextChunk;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	659a      	str	r2, [r3, #88]	@ 0x58

        // Start next chunk
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b58      	ldr	r0, [r3, #52]	@ 0x34
                                                       _dmaState.buffer + _dmaState.bytesTransferred,
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3c:	4413      	add	r3, r2
        HAL_StatusTypeDef status = HAL_SPI_Transmit_DMA(_hspi,
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	b292      	uxth	r2, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	f009 fde2 	bl	800db0c <HAL_SPI_Transmit_DMA>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	74fb      	strb	r3, [r7, #19]
                                                       nextChunk);

        if (status != HAL_OK) {
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d026      	beq.n	8003fa0 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            // Handle error
            _dmaState.isActive = false;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
            _dmaTransferComplete = true;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
            if (!_inTransaction)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003f68:	f083 0301 	eor.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
                csHigh();
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ff06 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
        _dmaTransferComplete = true;

        if (!_inTransaction)
            csHigh();
    }
}
 8003f78:	e012      	b.n	8003fa0 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
        _dmaState.isActive = false;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        _dmaTransferComplete = true;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
        if (!_inTransaction)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8003f90:	f083 0301 	eor.w	r3, r3, #1
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv+0xba>
            csHigh();
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fef2 	bl	8003d84 <_ZN13ST7789V_STM326csHighEv>
}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
    @param  hspi Pointer to SPI handle
    @param  cs_port GPIO port for chip select
    @param  cs_pin GPIO pin for chip select
*/
/**************************************************************************/
Adafruit_MAX31856::Adafruit_MAX31856(SPI_HandleTypeDef *hspi, GPIO_TypeDef *cs_port, uint16_t cs_pin)
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	807b      	strh	r3, [r7, #2]
{
  _hspi = hspi;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	601a      	str	r2, [r3, #0]
  _cs_port = cs_port;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	605a      	str	r2, [r3, #4]
  _cs_pin = cs_pin;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	887a      	ldrh	r2, [r7, #2]
 8003fc6:	811a      	strh	r2, [r3, #8]
}
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <_ZN17Adafruit_MAX31856C1Ev>:

Adafruit_MAX31856::Adafruit_MAX31856()
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
{
  _hspi = nullptr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
  _cs_port = nullptr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
  _cs_pin = 0;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	811a      	strh	r2, [r3, #8]
}
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <_ZN17Adafruit_MAX318565beginEv>:
    @brief  Initialize MAX31856 with STM32 HAL
    @returns Always returns true at this time
*/
/**************************************************************************/
bool Adafruit_MAX31856::begin(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  // Set CS pin high initially
  csHigh();
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f952 	bl	80042b0 <_ZN17Adafruit_MAX318566csHighEv>

  // Small delay for chip to stabilize
  HAL_Delay(100);
 800400c:	2064      	movs	r0, #100	@ 0x64
 800400e:	f001 fa4e 	bl	80054ae <HAL_Delay>

  // assert on any fault
  writeRegister8(MAX31856_MASK_REG, 0x0);
 8004012:	2200      	movs	r2, #0
 8004014:	2102      	movs	r1, #2
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa2e 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // enable open circuit fault detection
  writeRegister8(MAX31856_CR0_REG, MAX31856_CR0_OCFAULT0);
 800401c:	2210      	movs	r2, #16
 800401e:	2100      	movs	r1, #0
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fa29 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set cold junction temperature offset to zero
  writeRegister8(MAX31856_CJTO_REG, 0x0);
 8004026:	2200      	movs	r2, #0
 8004028:	2109      	movs	r1, #9
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa24 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  // set Type K by default
  setThermocoupleType(MAX31856_TCTYPE_K);
 8004030:	2103      	movs	r1, #3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f837 	bl	80040a6 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>

  // set One-Shot conversion mode
  setConversionMode(MAX31856_CONTINUOUS);
 8004038:	2101      	movs	r1, #1
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f805 	bl	800404a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>

  return true;
 8004040:	2301      	movs	r3, #1
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>:
    @brief  Set temperature conversion mode
    @param mode The conversion mode
*/
/**************************************************************************/
void Adafruit_MAX31856::setConversionMode(max31856_conversion_mode_t mode)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	70fb      	strb	r3, [r7, #3]
  conversionMode = mode;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	729a      	strb	r2, [r3, #10]
  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 800405c:	2100      	movs	r1, #0
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f936 	bl	80042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]
  if (conversionMode == MAX31856_CONTINUOUS)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	7a9b      	ldrb	r3, [r3, #10]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d108      	bne.n	8004082 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x38>
  {
    t |= MAX31856_CR0_AUTOCONVERT; // turn on automatic
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004076:	73fb      	strb	r3, [r7, #15]
    t &= ~MAX31856_CR0_1SHOT;      // turn off one-shot
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e007      	b.n	8004092 <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t+0x48>
  }
  else
  {
    t &= ~MAX31856_CR0_AUTOCONVERT; // turn off automatic
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004088:	73fb      	strb	r3, [r7, #15]
    t |= MAX31856_CR0_1SHOT;        // turn on one-shot
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004090:	73fb      	strb	r3, [r7, #15]
  }
  writeRegister8(MAX31856_CR0_REG, t); // write value back to register
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	461a      	mov	r2, r3
 8004096:	2100      	movs	r1, #0
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f9ed 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>:
    @brief  Set which kind of Thermocouple (K, J, T, etc) to detect & decode
    @param type The enumeration type of the thermocouple
*/
/**************************************************************************/
void Adafruit_MAX31856::setThermocoupleType(max31856_thermocoupletype_t type)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  uint8_t t = readRegister8(MAX31856_CR1_REG);
 80040b2:	2101      	movs	r1, #1
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f90b 	bl	80042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
  t &= 0xF0; // mask off bottom 4 bits
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	f023 030f 	bic.w	r3, r3, #15
 80040c4:	73fb      	strb	r3, [r7, #15]
  t |= (uint8_t)type & 0x0F;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR1_REG, t);
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	461a      	mov	r2, r3
 80040d8:	2101      	movs	r1, #1
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f9cc 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <_ZN17Adafruit_MAX318569readFaultEv>:
    @brief  Read the fault register (8 bits)
    @returns 8 bits of fault register data
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readFault(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return readRegister8(MAX31856_SR_REG);
 80040f0:	210f      	movs	r1, #15
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f8ec 	bl	80042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>:
    @param  flow Low (min) temperature, floating point
    @param  fhigh High (max) temperature, floating point
*/
/**************************************************************************/
void Adafruit_MAX31856::setTempFaultThreshholds(float flow, float fhigh)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	ed87 0a02 	vstr	s0, [r7, #8]
 800410e:	edc7 0a01 	vstr	s1, [r7, #4]
  int16_t low, high;

  flow *= 16;
 8004112:	edd7 7a02 	vldr	s15, [r7, #8]
 8004116:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 800411a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411e:	edc7 7a02 	vstr	s15, [r7, #8]
  low = flow;
 8004122:	edd7 7a02 	vldr	s15, [r7, #8]
 8004126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	82fb      	strh	r3, [r7, #22]

  fhigh *= 16;
 8004130:	edd7 7a01 	vldr	s15, [r7, #4]
 8004134:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8004138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413c:	edc7 7a01 	vstr	s15, [r7, #4]
  high = fhigh;
 8004140:	edd7 7a01 	vldr	s15, [r7, #4]
 8004144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004148:	ee17 3a90 	vmov	r3, s15
 800414c:	82bb      	strh	r3, [r7, #20]

  writeRegister8(MAX31856_LTHFTH_REG, high >> 8);
 800414e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004152:	121b      	asrs	r3, r3, #8
 8004154:	b21b      	sxth	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	2105      	movs	r1, #5
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f98b 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
  writeRegister8(MAX31856_LTHFTL_REG, high);
 8004162:	8abb      	ldrh	r3, [r7, #20]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	2106      	movs	r1, #6
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f984 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>

  writeRegister8(MAX31856_LTLFTH_REG, low >> 8);
 8004170:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004174:	121b      	asrs	r3, r3, #8
 8004176:	b21b      	sxth	r3, r3
 8004178:	b2db      	uxtb	r3, r3
 800417a:	461a      	mov	r2, r3
 800417c:	2107      	movs	r1, #7
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f97a 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
  writeRegister8(MAX31856_LTLFTL_REG, low);
 8004184:	8afb      	ldrh	r3, [r7, #22]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	461a      	mov	r2, r3
 800418a:	2108      	movs	r1, #8
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f973 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_ZN17Adafruit_MAX3185614triggerOneShotEv>:
    @brief  Begin a one-shot (read temperature only upon request) measurement.
    Value must be read later, not returned here!
*/
/**************************************************************************/
void Adafruit_MAX31856::triggerOneShot(void)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7a9b      	ldrb	r3, [r3, #10]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d014      	beq.n	80041d4 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3a>
    return;

  uint8_t t = readRegister8(MAX31856_CR0_REG); // get current register value
 80041aa:	2100      	movs	r1, #0
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f88f 	bl	80042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80041b2:	4603      	mov	r3, r0
 80041b4:	73fb      	strb	r3, [r7, #15]
  t &= ~MAX31856_CR0_AUTOCONVERT;              // turn off autoconvert
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041bc:	73fb      	strb	r3, [r7, #15]
  t |= MAX31856_CR0_1SHOT;                     // turn on one-shot
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	73fb      	strb	r3, [r7, #15]
  writeRegister8(MAX31856_CR0_REG, t);         // write value back to register
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	461a      	mov	r2, r3
 80041ca:	2100      	movs	r1, #0
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f953 	bl	8004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>
 80041d2:	e000      	b.n	80041d6 <_ZN17Adafruit_MAX3185614triggerOneShotEv+0x3c>
    return;
 80041d4:	bf00      	nop
                                               // conversion starts when CS goes high
}
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_ZN17Adafruit_MAX3185618conversionCompleteEv>:
    @brief  Return status of temperature conversion.
    @returns true if conversion complete, otherwise false
*/
/**************************************************************************/
bool Adafruit_MAX31856::conversionComplete(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  if (conversionMode == MAX31856_CONTINUOUS)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7a9b      	ldrb	r3, [r3, #10]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x14>
    return true;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e00b      	b.n	8004208 <_ZN17Adafruit_MAX3185618conversionCompleteEv+0x2c>
  return !(readRegister8(MAX31856_CR0_REG) & MAX31856_CR0_1SHOT);
 80041f0:	2100      	movs	r1, #0
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f86c 	bl	80042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	bf0c      	ite	eq
 8004202:	2301      	moveq	r3, #1
 8004204:	2300      	movne	r3, #0
 8004206:	b2db      	uxtb	r3, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>:
    @brief  Return hot-junction (thermocouple) temperature
    @returns Floating point temperature in Celsius
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readThermocoupleTemperature(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  // for one-shot, make it happen
  if (conversionMode == MAX31856_ONESHOT)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	7a9b      	ldrb	r3, [r3, #10]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d120      	bne.n	8004262 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x52>
  {
    triggerOneShot();
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ffba 	bl	800419a <_ZN17Adafruit_MAX3185614triggerOneShotEv>
    uint32_t start = HAL_GetTick();
 8004226:	f003 fc0f 	bl	8007a48 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]
    while (!conversionComplete())
 800422c:	e010      	b.n	8004250 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x40>
    {
      if (HAL_GetTick() - start > 250)
 800422e:	f003 fc0b 	bl	8007a48 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2bfa      	cmp	r3, #250	@ 0xfa
 800423a:	bf8c      	ite	hi
 800423c:	2301      	movhi	r3, #1
 800423e:	2300      	movls	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x3a>
        return 0;
 8004246:	2300      	movs	r3, #0
 8004248:	e01e      	b.n	8004288 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x78>
      HAL_Delay(10);
 800424a:	200a      	movs	r0, #10
 800424c:	f001 f92f 	bl	80054ae <HAL_Delay>
    while (!conversionComplete())
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffc3 	bl	80041dc <_ZN17Adafruit_MAX3185618conversionCompleteEv>
 8004256:	4603      	mov	r3, r0
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e5      	bne.n	800422e <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x1e>
    }
  }

  // read the thermocouple temperature registers (3 bytes)
  int32_t temp24 = readRegister24(MAX31856_LTCBH_REG);
 8004262:	210c      	movs	r1, #12
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f847 	bl	80042f8 <_ZN17Adafruit_MAX3185614readRegister24Eh>
 800426a:	4603      	mov	r3, r0
 800426c:	60fb      	str	r3, [r7, #12]
  // and compute temperature
  if (temp24 & 0x800000)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv+0x70>
  {
    temp24 |= 0xFF000000; // fix sign
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427e:	60fb      	str	r3, [r7, #12]
  }

  temp24 >>= 5; // bottom 5 bits are unused
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	115b      	asrs	r3, r3, #5
 8004284:	60fb      	str	r3, [r7, #12]

  return temp24;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <_ZN17Adafruit_MAX318565csLowEv>:
/*!
    @brief  Set chip select low
*/
/**************************************************************************/
void Adafruit_MAX31856::csLow(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_RESET);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6858      	ldr	r0, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	891b      	ldrh	r3, [r3, #8]
 80042a0:	2200      	movs	r2, #0
 80042a2:	4619      	mov	r1, r3
 80042a4:	f004 f9ea 	bl	800867c <HAL_GPIO_WritePin>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZN17Adafruit_MAX318566csHighEv>:
/*!
    @brief  Set chip select high
*/
/**************************************************************************/
void Adafruit_MAX31856::csHigh(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(_cs_port, _cs_pin, GPIO_PIN_SET);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6858      	ldr	r0, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	891b      	ldrh	r3, [r3, #8]
 80042c0:	2201      	movs	r2, #1
 80042c2:	4619      	mov	r1, r3
 80042c4:	f004 f9da 	bl	800867c <HAL_GPIO_WritePin>
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <_ZN17Adafruit_MAX3185613readRegister8Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint8_t Adafruit_MAX31856::readRegister8(uint8_t addr)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	73fb      	strb	r3, [r7, #15]
  readRegisterN(addr, &ret, 1);
 80042e0:	f107 020f 	add.w	r2, r7, #15
 80042e4:	78f9      	ldrb	r1, [r7, #3]
 80042e6:	2301      	movs	r3, #1
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f81d 	bl	8004328 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ret;
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <_ZN17Adafruit_MAX3185614readRegister24Eh>:
    @param  addr Register address
    @returns Register value
*/
/**************************************************************************/
uint32_t Adafruit_MAX31856::readRegister24(uint8_t addr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  uint8_t buffer[3];
  readRegisterN(addr, buffer, 3);
 8004304:	f107 020c 	add.w	r2, r7, #12
 8004308:	78f9      	ldrb	r1, [r7, #3]
 800430a:	2303      	movs	r3, #3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 f80b 	bl	8004328 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>
  return ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
 8004312:	7b3b      	ldrb	r3, [r7, #12]
 8004314:	041a      	lsls	r2, r3, #16
 8004316:	7b7b      	ldrb	r3, [r7, #13]
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	4313      	orrs	r3, r2
 800431c:	7bba      	ldrb	r2, [r7, #14]
 800431e:	4313      	orrs	r3, r2
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh>:
    @param  buffer Buffer to store data
    @param  n Number of bytes to read
*/
/**************************************************************************/
void Adafruit_MAX31856::readRegisterN(uint8_t addr, uint8_t buffer[], uint8_t n)
{
 8004328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432c:	b08f      	sub	sp, #60	@ 0x3c
 800432e:	af02      	add	r7, sp, #8
 8004330:	6178      	str	r0, [r7, #20]
 8004332:	60fa      	str	r2, [r7, #12]
 8004334:	461a      	mov	r2, r3
 8004336:	460b      	mov	r3, r1
 8004338:	74fb      	strb	r3, [r7, #19]
 800433a:	4613      	mov	r3, r2
 800433c:	74bb      	strb	r3, [r7, #18]
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
  csHigh();

  for (uint8_t i = 0; i < n; i++)
    buffer[i] = rx[i + 1];
}
 800433e:	466b      	mov	r3, sp
 8004340:	461e      	mov	r6, r3
  addr &= 0x7F; // Read operation
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004348:	74fb      	strb	r3, [r7, #19]
  uint8_t tx[1 + n];
 800434a:	7cbb      	ldrb	r3, [r7, #18]
 800434c:	1c59      	adds	r1, r3, #1
 800434e:	1e4b      	subs	r3, r1, #1
 8004350:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004352:	460a      	mov	r2, r1
 8004354:	2300      	movs	r3, #0
 8004356:	603a      	str	r2, [r7, #0]
 8004358:	607b      	str	r3, [r7, #4]
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	00c3      	lsls	r3, r0, #3
 8004366:	6838      	ldr	r0, [r7, #0]
 8004368:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800436c:	6838      	ldr	r0, [r7, #0]
 800436e:	00c2      	lsls	r2, r0, #3
 8004370:	460a      	mov	r2, r1
 8004372:	2300      	movs	r3, #0
 8004374:	4692      	mov	sl, r2
 8004376:	469b      	mov	fp, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800438c:	460b      	mov	r3, r1
 800438e:	3307      	adds	r3, #7
 8004390:	08db      	lsrs	r3, r3, #3
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	ebad 0d03 	sub.w	sp, sp, r3
 8004398:	ab02      	add	r3, sp, #8
 800439a:	3300      	adds	r3, #0
 800439c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t rx[1 + n];
 800439e:	7cbb      	ldrb	r3, [r7, #18]
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	1e4b      	subs	r3, r1, #1
 80043a4:	623b      	str	r3, [r7, #32]
 80043a6:	460a      	mov	r2, r1
 80043a8:	2300      	movs	r3, #0
 80043aa:	4690      	mov	r8, r2
 80043ac:	4699      	mov	r9, r3
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c2:	460a      	mov	r2, r1
 80043c4:	2300      	movs	r3, #0
 80043c6:	4614      	mov	r4, r2
 80043c8:	461d      	mov	r5, r3
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	00eb      	lsls	r3, r5, #3
 80043d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d8:	00e2      	lsls	r2, r4, #3
 80043da:	460b      	mov	r3, r1
 80043dc:	3307      	adds	r3, #7
 80043de:	08db      	lsrs	r3, r3, #3
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	ebad 0d03 	sub.w	sp, sp, r3
 80043e6:	ab02      	add	r3, sp, #8
 80043e8:	3300      	adds	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
  tx[0] = addr;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	7cfa      	ldrb	r2, [r7, #19]
 80043f0:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 1; i < 1 + n; i++)
 80043f2:	2301      	movs	r3, #1
 80043f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80043f8:	e009      	b.n	800440e <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xe6>
    tx[i] = 0x00;
 80043fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	2100      	movs	r1, #0
 8004402:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 1; i < 1 + n; i++)
 8004404:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004408:	3301      	adds	r3, #1
 800440a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800440e:	7cba      	ldrb	r2, [r7, #18]
 8004410:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004414:	429a      	cmp	r2, r3
 8004416:	d2f0      	bcs.n	80043fa <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0xd2>
  csLow();
 8004418:	6978      	ldr	r0, [r7, #20]
 800441a:	f7ff ff39 	bl	8004290 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_TransmitReceive(_hspi, tx, rx, 1 + n, 100);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	7cbb      	ldrb	r3, [r7, #18]
 8004424:	b29b      	uxth	r3, r3
 8004426:	3301      	adds	r3, #1
 8004428:	b29b      	uxth	r3, r3
 800442a:	2264      	movs	r2, #100	@ 0x64
 800442c:	9200      	str	r2, [sp, #0]
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004432:	f009 f94c 	bl	800d6ce <HAL_SPI_TransmitReceive>
  csHigh();
 8004436:	6978      	ldr	r0, [r7, #20]
 8004438:	f7ff ff3a 	bl	80042b0 <_ZN17Adafruit_MAX318566csHighEv>
  for (uint8_t i = 0; i < n; i++)
 800443c:	2300      	movs	r3, #0
 800443e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004442:	e00e      	b.n	8004462 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x13a>
    buffer[i] = rx[i + 1];
 8004444:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	440b      	add	r3, r1
 8004452:	69f9      	ldr	r1, [r7, #28]
 8004454:	5c8a      	ldrb	r2, [r1, r2]
 8004456:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < n; i++)
 8004458:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800445c:	3301      	adds	r3, #1
 800445e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8004462:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004466:	7cbb      	ldrb	r3, [r7, #18]
 8004468:	429a      	cmp	r2, r3
 800446a:	d3eb      	bcc.n	8004444 <_ZN17Adafruit_MAX3185613readRegisterNEhPhh+0x11c>
 800446c:	46b5      	mov	sp, r6
}
 800446e:	bf00      	nop
 8004470:	3734      	adds	r7, #52	@ 0x34
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004478 <_ZN17Adafruit_MAX3185614writeRegister8Ehh>:
    @param  addr Register address
    @param  data Data to write
*/
/**************************************************************************/
void Adafruit_MAX31856::writeRegister8(uint8_t addr, uint8_t data)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	70fb      	strb	r3, [r7, #3]
 8004484:	4613      	mov	r3, r2
 8004486:	70bb      	strb	r3, [r7, #2]
  addr |= 0x80; // MSB=1 for write, make sure top bit is set
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800448e:	70fb      	strb	r3, [r7, #3]

  uint8_t buffer[2] = {addr, data};
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	733b      	strb	r3, [r7, #12]
 8004494:	78bb      	ldrb	r3, [r7, #2]
 8004496:	737b      	strb	r3, [r7, #13]

  csLow();
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fef9 	bl	8004290 <_ZN17Adafruit_MAX318565csLowEv>
  HAL_SPI_Transmit(_hspi, buffer, 2, HAL_MAX_DELAY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	f107 010c 	add.w	r1, r7, #12
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	2202      	movs	r2, #2
 80044ac:	f008 ff99 	bl	800d3e2 <HAL_SPI_Transmit>
  csHigh();
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fefd 	bl	80042b0 <_ZN17Adafruit_MAX318566csHighEv>
}
 80044b6:	bf00      	nop
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <_ZN13Accelerometer5setupEv>:
#include "main.h"

Accelerometer::States Accelerometer::state;

void Accelerometer::setup(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
    // pinMode(0, OUTPUT);
    state = AWAKE;
 80044c8:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <_ZN13Accelerometer5setupEv+0x24>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	701a      	strb	r2, [r3, #0]
    delay = 1; // seconds?
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
    readAccelerometer();
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f875 	bl	80045c4 <_ZN13Accelerometer17readAccelerometerEv>
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20000354 	.word	0x20000354

080044e8 <_ZN13Accelerometer12stateMachineEv>:

void Accelerometer::stateMachine(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
    if (!readDelay)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf0c      	ite	eq
 80044f8:	2301      	moveq	r3, #1
 80044fa:	2300      	movne	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <_ZN13Accelerometer12stateMachineEv+0x26>
    {
        readAccelerometer();
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f85e 	bl	80045c4 <_ZN13Accelerometer17readAccelerometerEv>

        readDelay = 10; // 10ms so 100ms
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	220a      	movs	r2, #10
 800450c:	605a      	str	r2, [r3, #4]
    }

    switch (state)
 800450e:	4b28      	ldr	r3, [pc, #160]	@ (80045b0 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <_ZN13Accelerometer12stateMachineEv+0x34>
 8004516:	2b01      	cmp	r3, #1
 8004518:	d019      	beq.n	800454e <_ZN13Accelerometer12stateMachineEv+0x66>
            // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));
        }

        break;
    default:
        break;
 800451a:	e044      	b.n	80045a6 <_ZN13Accelerometer12stateMachineEv+0xbe>
        if (acceleration < activityThreshold && !delay)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	429a      	cmp	r2, r3
 8004526:	da05      	bge.n	8004534 <_ZN13Accelerometer12stateMachineEv+0x4c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <_ZN13Accelerometer12stateMachineEv+0x4c>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <_ZN13Accelerometer12stateMachineEv+0x4e>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d032      	beq.n	80045a0 <_ZN13Accelerometer12stateMachineEv+0xb8>
            delay = 3; // seconds
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2203      	movs	r2, #3
 800453e:	601a      	str	r2, [r3, #0]
            state = SLEEP;
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 8004542:	2201      	movs	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::LOW;
 8004546:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <_ZN13Accelerometer12stateMachineEv+0xcc>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
        break;
 800454c:	e028      	b.n	80045a0 <_ZN13Accelerometer12stateMachineEv+0xb8>
        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "SLEEP");
 800454e:	4a1a      	ldr	r2, [pc, #104]	@ (80045b8 <_ZN13Accelerometer12stateMachineEv+0xd0>)
 8004550:	2140      	movs	r1, #64	@ 0x40
 8004552:	481a      	ldr	r0, [pc, #104]	@ (80045bc <_ZN13Accelerometer12stateMachineEv+0xd4>)
 8004554:	f016 f9a2 	bl	801a89c <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004558:	4818      	ldr	r0, [pc, #96]	@ (80045bc <_ZN13Accelerometer12stateMachineEv+0xd4>)
 800455a:	f7fb fe71 	bl	8000240 <strlen>
 800455e:	4603      	mov	r3, r0
 8004560:	b29a      	uxth	r2, r3
 8004562:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004566:	4915      	ldr	r1, [pc, #84]	@ (80045bc <_ZN13Accelerometer12stateMachineEv+0xd4>)
 8004568:	4815      	ldr	r0, [pc, #84]	@ (80045c0 <_ZN13Accelerometer12stateMachineEv+0xd8>)
 800456a:	f00a fef3 	bl	800f354 <HAL_UART_Transmit>
        if (acceleration > activityThreshold && !delay)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691a      	ldr	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	429a      	cmp	r2, r3
 8004578:	dd05      	ble.n	8004586 <_ZN13Accelerometer12stateMachineEv+0x9e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <_ZN13Accelerometer12stateMachineEv+0x9e>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <_ZN13Accelerometer12stateMachineEv+0xa0>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <_ZN13Accelerometer12stateMachineEv+0xbc>
            delay = 10; // seconds
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	220a      	movs	r2, #10
 8004590:	601a      	str	r2, [r3, #0]
            state = AWAKE;
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <_ZN13Accelerometer12stateMachineEv+0xc8>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
            Backlight::state = Backlight::States::HIGH;
 8004598:	4b06      	ldr	r3, [pc, #24]	@ (80045b4 <_ZN13Accelerometer12stateMachineEv+0xcc>)
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
        break;
 800459e:	e001      	b.n	80045a4 <_ZN13Accelerometer12stateMachineEv+0xbc>
        break;
 80045a0:	bf00      	nop
 80045a2:	e000      	b.n	80045a6 <_ZN13Accelerometer12stateMachineEv+0xbe>
        break;
 80045a4:	bf00      	nop
    }
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000354 	.word	0x20000354
 80045b4:	20000355 	.word	0x20000355
 80045b8:	0801c9f8 	.word	0x0801c9f8
 80045bc:	200004cc 	.word	0x200004cc
 80045c0:	20000a60 	.word	0x20000a60

080045c4 <_ZN13Accelerometer17readAccelerometerEv>:

void Accelerometer::readAccelerometer(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af04      	add	r7, sp, #16
 80045ca:	6078      	str	r0, [r7, #4]
    // Set MEASURE bit (Bit 3) to enable measurement mode
    HAL_I2C_Mem_Write(&hi2c1, ADXL343_ADDR, 0x2D, I2C_MEMADD_SIZE_8BIT, &powerCtl, 1, 1000);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3314      	adds	r3, #20
 80045d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045d4:	9202      	str	r2, [sp, #8]
 80045d6:	2201      	movs	r2, #1
 80045d8:	9201      	str	r2, [sp, #4]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2301      	movs	r3, #1
 80045de:	222d      	movs	r2, #45	@ 0x2d
 80045e0:	21a6      	movs	r1, #166	@ 0xa6
 80045e2:	483c      	ldr	r0, [pc, #240]	@ (80046d4 <_ZN13Accelerometer17readAccelerometerEv+0x110>)
 80045e4:	f004 fb30 	bl	8008c48 <HAL_I2C_Mem_Write>

    // Read with error handling
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ADXL343_ADDR, accreg, I2C_MEMADD_SIZE_8BIT, accdata, 6, 1000);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	7d5b      	ldrb	r3, [r3, #21]
 80045ec:	4619      	mov	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3316      	adds	r3, #22
 80045f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045f6:	9202      	str	r2, [sp, #8]
 80045f8:	2206      	movs	r2, #6
 80045fa:	9201      	str	r2, [sp, #4]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2301      	movs	r3, #1
 8004600:	460a      	mov	r2, r1
 8004602:	21a6      	movs	r1, #166	@ 0xa6
 8004604:	4833      	ldr	r0, [pc, #204]	@ (80046d4 <_ZN13Accelerometer17readAccelerometerEv+0x110>)
 8004606:	f004 fc33 	bl	8008e70 <HAL_I2C_Mem_Read>
 800460a:	4603      	mov	r3, r0
 800460c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d15b      	bne.n	80046cc <_ZN13Accelerometer17readAccelerometerEv+0x108>
    {

        int16_t x = (int16_t)((accdata[1] << 8) | accdata[0]);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	7ddb      	ldrb	r3, [r3, #23]
 8004618:	b21b      	sxth	r3, r3
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	b21a      	sxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	7d9b      	ldrb	r3, [r3, #22]
 8004622:	b21b      	sxth	r3, r3
 8004624:	4313      	orrs	r3, r2
 8004626:	81bb      	strh	r3, [r7, #12]
        int16_t y = (int16_t)((accdata[3] << 8) | accdata[2]);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	7e5b      	ldrb	r3, [r3, #25]
 800462c:	b21b      	sxth	r3, r3
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b21a      	sxth	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7e1b      	ldrb	r3, [r3, #24]
 8004636:	b21b      	sxth	r3, r3
 8004638:	4313      	orrs	r3, r2
 800463a:	817b      	strh	r3, [r7, #10]
        int16_t z = (int16_t)((accdata[5] << 8) | accdata[4]);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7edb      	ldrb	r3, [r3, #27]
 8004640:	b21b      	sxth	r3, r3
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	b21a      	sxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7e9b      	ldrb	r3, [r3, #26]
 800464a:	b21b      	sxth	r3, r3
 800464c:	4313      	orrs	r3, r2
 800464e:	813b      	strh	r3, [r7, #8]

        acceleration = (int32_t)x * x + (int32_t)y * y + (int32_t)z * z;
 8004650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004654:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004658:	fb03 f202 	mul.w	r2, r3, r2
 800465c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004660:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004664:	fb01 f303 	mul.w	r3, r1, r3
 8004668:	441a      	add	r2, r3
 800466a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800466e:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	441a      	add	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	611a      	str	r2, [r3, #16]
        //{
        //     // Acceleration magnitude exceeds threshold
        //     HAL_UART_Transmit(&huart1, (uint8_t *)"Threshold exceeded\r\n", 21, 100);
        // }

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Acceleration: %ld\r\n", acceleration);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	4a15      	ldr	r2, [pc, #84]	@ (80046d8 <_ZN13Accelerometer17readAccelerometerEv+0x114>)
 8004682:	2140      	movs	r1, #64	@ 0x40
 8004684:	4815      	ldr	r0, [pc, #84]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 8004686:	f016 f909 	bl	801a89c <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 800468a:	4814      	ldr	r0, [pc, #80]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 800468c:	f7fb fdd8 	bl	8000240 <strlen>
 8004690:	4603      	mov	r3, r0
 8004692:	b29a      	uxth	r2, r3
 8004694:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004698:	4910      	ldr	r1, [pc, #64]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 800469a:	4811      	ldr	r0, [pc, #68]	@ (80046e0 <_ZN13Accelerometer17readAccelerometerEv+0x11c>)
 800469c:	f00a fe5a 	bl	800f354 <HAL_UART_Transmit>

        // snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "X: %f, Y: %f, Z: %f\r\n", x_g, y_g, z_g);
        // HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "X: %.2d, Y: %.2d\r\n", x, y);
 80046a0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <_ZN13Accelerometer17readAccelerometerEv+0x120>)
 80046ae:	2140      	movs	r1, #64	@ 0x40
 80046b0:	480a      	ldr	r0, [pc, #40]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 80046b2:	f016 f8f3 	bl	801a89c <sniprintf>
        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 80046b6:	4809      	ldr	r0, [pc, #36]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 80046b8:	f7fb fdc2 	bl	8000240 <strlen>
 80046bc:	4603      	mov	r3, r0
 80046be:	b29a      	uxth	r2, r3
 80046c0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80046c4:	4905      	ldr	r1, [pc, #20]	@ (80046dc <_ZN13Accelerometer17readAccelerometerEv+0x118>)
 80046c6:	4806      	ldr	r0, [pc, #24]	@ (80046e0 <_ZN13Accelerometer17readAccelerometerEv+0x11c>)
 80046c8:	f00a fe44 	bl	800f354 <HAL_UART_Transmit>
    }
}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	2000043c 	.word	0x2000043c
 80046d8:	0801ca00 	.word	0x0801ca00
 80046dc:	200004cc 	.word	0x200004cc
 80046e0:	20000a60 	.word	0x20000a60
 80046e4:	0801ca14 	.word	0x0801ca14

080046e8 <_ZN9Backlight5setupEv>:

Backlight::States Backlight::state;

void Backlight::setup(void)

{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80046f0:	2100      	movs	r1, #0
 80046f2:	4808      	ldr	r0, [pc, #32]	@ (8004714 <_ZN9Backlight5setupEv+0x2c>)
 80046f4:	f009 ff04 	bl	800e500 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0); // turn off screen to start
 80046f8:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <_ZN9Backlight5setupEv+0x2c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2200      	movs	r2, #0
 80046fe:	635a      	str	r2, [r3, #52]	@ 0x34

    state = HIGH;
 8004700:	4b05      	ldr	r3, [pc, #20]	@ (8004718 <_ZN9Backlight5setupEv+0x30>)
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
    // pinMode(0, OUTPUT);
    // state = AWAKE;
    delay = 0;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
    // readAccelerometer();
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	200009c8 	.word	0x200009c8
 8004718:	20000355 	.word	0x20000355

0800471c <_ZN9Backlight12stateMachineEv>:

void Backlight::stateMachine(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]

    switch (state)
 8004724:	4b2d      	ldr	r3, [pc, #180]	@ (80047dc <_ZN9Backlight12stateMachineEv+0xc0>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d843      	bhi.n	80047b4 <_ZN9Backlight12stateMachineEv+0x98>
 800472c:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <_ZN9Backlight12stateMachineEv+0x18>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	08004761 	.word	0x08004761
 800473c:	0800477d 	.word	0x0800477d
 8004740:	08004799 	.word	0x08004799
    {

    case LOW:
        if (!delay)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf0c      	ite	eq
 800474c:	2301      	moveq	r3, #1
 800474e:	2300      	movne	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d030      	beq.n	80047b8 <_ZN9Backlight12stateMachineEv+0x9c>
        {
            desired_brightness = low_brightness;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	609a      	str	r2, [r3, #8]
        }
        break;
 800475e:	e02b      	b.n	80047b8 <_ZN9Backlight12stateMachineEv+0x9c>
    case MID:
        if (!delay)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d024      	beq.n	80047bc <_ZN9Backlight12stateMachineEv+0xa0>
        {
            desired_brightness = mid_brightness;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]
        }
        break;
 800477a:	e01f      	b.n	80047bc <_ZN9Backlight12stateMachineEv+0xa0>
    case HIGH:
        if (!delay)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d018      	beq.n	80047c0 <_ZN9Backlight12stateMachineEv+0xa4>
        {
            desired_brightness = hi_brightness;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695a      	ldr	r2, [r3, #20]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
        }
        break;
 8004796:	e013      	b.n	80047c0 <_ZN9Backlight12stateMachineEv+0xa4>
    case OFF:
        if (!delay)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <_ZN9Backlight12stateMachineEv+0xa8>
        {
            desired_brightness = off;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
        }
        break;
 80047b2:	e007      	b.n	80047c4 <_ZN9Backlight12stateMachineEv+0xa8>
    default:
        break;
 80047b4:	bf00      	nop
 80047b6:	e006      	b.n	80047c6 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80047b8:	bf00      	nop
 80047ba:	e004      	b.n	80047c6 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <_ZN9Backlight12stateMachineEv+0xaa>
        break;
 80047c4:	bf00      	nop
    }

    fadeScreen(desired_brightness);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f807 	bl	80047e0 <_ZN9Backlight10fadeScreenEi>
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000355 	.word	0x20000355

080047e0 <_ZN9Backlight10fadeScreenEi>:

void Backlight::fadeScreen(int target_brightness)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]

    if (current_brightness < target_brightness)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	dd0d      	ble.n	8004810 <_ZN9Backlight10fadeScreenEi+0x30>
    {
        current_brightness += 1; // Adjust step size for fade speed
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	605a      	str	r2, [r3, #4]
        if (current_brightness > target_brightness)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	da15      	bge.n	8004834 <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	e011      	b.n	8004834 <_ZN9Backlight10fadeScreenEi+0x54>
    }
    else if (current_brightness > target_brightness)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	da0c      	bge.n	8004834 <_ZN9Backlight10fadeScreenEi+0x54>
    {
        current_brightness -= 1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	605a      	str	r2, [r3, #4]
        if (current_brightness < target_brightness)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	dd02      	ble.n	8004834 <_ZN9Backlight10fadeScreenEi+0x54>
            current_brightness = target_brightness;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
    }

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, current_brightness);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	4b04      	ldr	r3, [pc, #16]	@ (800484c <_ZN9Backlight10fadeScreenEi+0x6c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	200009c8 	.word	0x200009c8

08004850 <_ZN14BatteryMonitor5setupEv>:
// bool BatteryMonitor::newData = false;
bool BatteryMonitor::charging = false;
uint16_t BatteryMonitor::charge = 0;

void BatteryMonitor::setup()
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
    // Wire1.setPins(PERIPHERAL_SDA, PERIPHERAL_SCL);

    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 8004858:	e013      	b.n	8004882 <_ZN14BatteryMonitor5setupEv+0x32>
    {
        // Serial.println(F("Couldnt find Adafruit MAX17048?\nMake sure a battery is plugged in!"));
        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Couldnt find Adafruit MAX17048?\r\n");
 800485a:	4a14      	ldr	r2, [pc, #80]	@ (80048ac <_ZN14BatteryMonitor5setupEv+0x5c>)
 800485c:	2140      	movs	r1, #64	@ 0x40
 800485e:	4814      	ldr	r0, [pc, #80]	@ (80048b0 <_ZN14BatteryMonitor5setupEv+0x60>)
 8004860:	f016 f81c 	bl	801a89c <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004864:	4812      	ldr	r0, [pc, #72]	@ (80048b0 <_ZN14BatteryMonitor5setupEv+0x60>)
 8004866:	f7fb fceb 	bl	8000240 <strlen>
 800486a:	4603      	mov	r3, r0
 800486c:	b29a      	uxth	r2, r3
 800486e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004872:	490f      	ldr	r1, [pc, #60]	@ (80048b0 <_ZN14BatteryMonitor5setupEv+0x60>)
 8004874:	480f      	ldr	r0, [pc, #60]	@ (80048b4 <_ZN14BatteryMonitor5setupEv+0x64>)
 8004876:	f00a fd6d 	bl	800f354 <HAL_UART_Transmit>
        HAL_Delay(1000);
 800487a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800487e:	f000 fe16 	bl	80054ae <HAL_Delay>
    while (!max17048.begin(&hi2c1, MAX17048_I2CADDR_DEFAULT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2236      	movs	r2, #54	@ 0x36
 8004886:	490c      	ldr	r1, [pc, #48]	@ (80048b8 <_ZN14BatteryMonitor5setupEv+0x68>)
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fb70 	bl	8000f6e <_ZN23Adafruit_MAX17048_STM325beginEP19__I2C_HandleTypeDeft>
 800488e:	4603      	mov	r3, r0
 8004890:	f083 0301 	eor.w	r3, r3, #1
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1df      	bne.n	800485a <_ZN14BatteryMonitor5setupEv+0xa>
    }
    // Serial.print(F("Found MAX17048"));
    // Serial.print(F(" with Chip ID: 0x"));
    // Serial.println(max17048.getChipID(), HEX);
    max17048.quickStart();
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fd97 	bl	80013d0 <_ZN23Adafruit_MAX17048_STM3210quickStartEv>
    // percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	0801ca28 	.word	0x0801ca28
 80048b0:	200004cc 	.word	0x200004cc
 80048b4:	20000a60 	.word	0x20000a60
 80048b8:	2000043c 	.word	0x2000043c

080048bc <_ZN14BatteryMonitor12stateMachineEv>:

void BatteryMonitor::stateMachine(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	6078      	str	r0, [r7, #4]

    if (!delay)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf0c      	ite	eq
 80048cc:	2301      	moveq	r3, #1
 80048ce:	2300      	movne	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d06f      	beq.n	80049b6 <_ZN14BatteryMonitor12stateMachineEv+0xfa>
    {
        delay = 3; // seconds // ms
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2203      	movs	r2, #3
 80048da:	60da      	str	r2, [r3, #12]
        // lastPercent = percent;
        // snprintf(percent, sizeof(usbBuffer), "%f", max17048.cellPercent());
        // newData = (percent != lastPercent);
        charging = (max17048.chargeRate() > 0.0);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fd12 	bl	8001308 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 80048e4:	eef0 7a40 	vmov.f32	s15, s0
 80048e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f0:	bfcc      	ite	gt
 80048f2:	2301      	movgt	r3, #1
 80048f4:	2300      	movle	r3, #0
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <_ZN14BatteryMonitor12stateMachineEv+0x104>)
 80048fa:	701a      	strb	r2, [r3, #0]
        // Serial.println(max17048.chargeRate());

        // snprintf(usbBuffer, sizeof(usbBuffer), );
        // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Battery: %f\r\n", max17048.cellPercent());
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc fcd0 	bl	80012a4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 8004904:	ee10 3a10 	vmov	r3, s0
 8004908:	4618      	mov	r0, r3
 800490a:	f7fb fe05 	bl	8000518 <__aeabi_f2d>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	e9cd 2300 	strd	r2, r3, [sp]
 8004916:	4a2b      	ldr	r2, [pc, #172]	@ (80049c4 <_ZN14BatteryMonitor12stateMachineEv+0x108>)
 8004918:	2140      	movs	r1, #64	@ 0x40
 800491a:	482b      	ldr	r0, [pc, #172]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 800491c:	f015 ffbe 	bl	801a89c <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004920:	4829      	ldr	r0, [pc, #164]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 8004922:	f7fb fc8d 	bl	8000240 <strlen>
 8004926:	4603      	mov	r3, r0
 8004928:	b29a      	uxth	r2, r3
 800492a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800492e:	4926      	ldr	r1, [pc, #152]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 8004930:	4826      	ldr	r0, [pc, #152]	@ (80049cc <_ZN14BatteryMonitor12stateMachineEv+0x110>)
 8004932:	f00a fd0f 	bl	800f354 <HAL_UART_Transmit>

        snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Charge Rate: %f\r\n", max17048.chargeRate());
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fc fce5 	bl	8001308 <_ZN23Adafruit_MAX17048_STM3210chargeRateEv>
 800493e:	ee10 3a10 	vmov	r3, s0
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fde8 	bl	8000518 <__aeabi_f2d>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	e9cd 2300 	strd	r2, r3, [sp]
 8004950:	4a1f      	ldr	r2, [pc, #124]	@ (80049d0 <_ZN14BatteryMonitor12stateMachineEv+0x114>)
 8004952:	2140      	movs	r1, #64	@ 0x40
 8004954:	481c      	ldr	r0, [pc, #112]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 8004956:	f015 ffa1 	bl	801a89c <sniprintf>

        HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 800495a:	481b      	ldr	r0, [pc, #108]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 800495c:	f7fb fc70 	bl	8000240 <strlen>
 8004960:	4603      	mov	r3, r0
 8004962:	b29a      	uxth	r2, r3
 8004964:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004968:	4917      	ldr	r1, [pc, #92]	@ (80049c8 <_ZN14BatteryMonitor12stateMachineEv+0x10c>)
 800496a:	4818      	ldr	r0, [pc, #96]	@ (80049cc <_ZN14BatteryMonitor12stateMachineEv+0x110>)
 800496c:	f00a fcf2 	bl	800f354 <HAL_UART_Transmit>

        if (max17048.cellPercent() >= 100)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fc fc96 	bl	80012a4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 8004978:	eef0 7a40 	vmov.f32	s15, s0
 800497c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80049d4 <_ZN14BatteryMonitor12stateMachineEv+0x118>
 8004980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	bfac      	ite	ge
 800498a:	2301      	movge	r3, #1
 800498c:	2300      	movlt	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <_ZN14BatteryMonitor12stateMachineEv+0xe0>
        {
            charge = 100;
 8004994:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <_ZN14BatteryMonitor12stateMachineEv+0x11c>)
 8004996:	2264      	movs	r2, #100	@ 0x64
 8004998:	801a      	strh	r2, [r3, #0]
        else
        {
            charge = (uint16_t)max17048.cellPercent();
        }
    }
}
 800499a:	e00c      	b.n	80049b6 <_ZN14BatteryMonitor12stateMachineEv+0xfa>
            charge = (uint16_t)max17048.cellPercent();
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc fc80 	bl	80012a4 <_ZN23Adafruit_MAX17048_STM3211cellPercentEv>
 80049a4:	eef0 7a40 	vmov.f32	s15, s0
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 3a90 	vmov	r3, s15
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	4b09      	ldr	r3, [pc, #36]	@ (80049d8 <_ZN14BatteryMonitor12stateMachineEv+0x11c>)
 80049b4:	801a      	strh	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000356 	.word	0x20000356
 80049c4:	0801ca4c 	.word	0x0801ca4c
 80049c8:	200004cc 	.word	0x200004cc
 80049cc:	20000a60 	.word	0x20000a60
 80049d0:	0801ca5c 	.word	0x0801ca5c
 80049d4:	42c80000 	.word	0x42c80000
 80049d8:	20000358 	.word	0x20000358

080049dc <_ZN6Switch5setupEv>:
// bool BatteryMonitor::newData = false;
// bool BatteryMonitor::charging = false;
Switch::States Switch::state;

void Switch::setup()
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

    delay = 1;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
    //  percent = String(int()) + '%';

    // sprintf(percent, "%f", max17048.cellPercent());

    // newData = true;
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
	...

080049f8 <_ZN6Switch12stateMachineEv>:

void Switch::stateMachine(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

    switch (state)
 8004a00:	4b30      	ldr	r3, [pc, #192]	@ (8004ac4 <_ZN6Switch12stateMachineEv+0xcc>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <_ZN6Switch12stateMachineEv+0x16>
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d02a      	beq.n	8004a62 <_ZN6Switch12stateMachineEv+0x6a>
        }

        break;

    default:
        break;
 8004a0c:	e056      	b.n	8004abc <_ZN6Switch12stateMachineEv+0xc4>
        if (!delay && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <_ZN6Switch12stateMachineEv+0x30>
 8004a16:	2101      	movs	r1, #1
 8004a18:	482b      	ldr	r0, [pc, #172]	@ (8004ac8 <_ZN6Switch12stateMachineEv+0xd0>)
 8004a1a:	f003 fe17 	bl	800864c <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <_ZN6Switch12stateMachineEv+0x30>
 8004a24:	2301      	movs	r3, #1
 8004a26:	e000      	b.n	8004a2a <_ZN6Switch12stateMachineEv+0x32>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d043      	beq.n	8004ab6 <_ZN6Switch12stateMachineEv+0xbe>
            state = HIGH;
 8004a2e:	4b25      	ldr	r3, [pc, #148]	@ (8004ac4 <_ZN6Switch12stateMachineEv+0xcc>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
            delay = 1;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
            snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "LOW SETTING --> HIGH SETTING\r\n");
 8004a3a:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <_ZN6Switch12stateMachineEv+0xd4>)
 8004a3c:	2140      	movs	r1, #64	@ 0x40
 8004a3e:	4824      	ldr	r0, [pc, #144]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004a40:	f015 ff2c 	bl	801a89c <sniprintf>
            HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004a44:	4822      	ldr	r0, [pc, #136]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004a46:	f7fb fbfb 	bl	8000240 <strlen>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004a52:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004a54:	481f      	ldr	r0, [pc, #124]	@ (8004ad4 <_ZN6Switch12stateMachineEv+0xdc>)
 8004a56:	f00a fc7d 	bl	800f354 <HAL_UART_Transmit>
            Thermocouples::userGain = 150.0;
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad8 <_ZN6Switch12stateMachineEv+0xe0>)
 8004a5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004adc <_ZN6Switch12stateMachineEv+0xe4>)
 8004a5e:	601a      	str	r2, [r3, #0]
        break;
 8004a60:	e029      	b.n	8004ab6 <_ZN6Switch12stateMachineEv+0xbe>
        if (!delay && !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d108      	bne.n	8004a7c <_ZN6Switch12stateMachineEv+0x84>
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	4816      	ldr	r0, [pc, #88]	@ (8004ac8 <_ZN6Switch12stateMachineEv+0xd0>)
 8004a6e:	f003 fded 	bl	800864c <HAL_GPIO_ReadPin>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <_ZN6Switch12stateMachineEv+0x84>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <_ZN6Switch12stateMachineEv+0x86>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01b      	beq.n	8004aba <_ZN6Switch12stateMachineEv+0xc2>
            state = LOW;
 8004a82:	4b10      	ldr	r3, [pc, #64]	@ (8004ac4 <_ZN6Switch12stateMachineEv+0xcc>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
            delay = 1;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
            snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "HIGH SETTING --> LOW SETTING\r\n");
 8004a8e:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <_ZN6Switch12stateMachineEv+0xe8>)
 8004a90:	2140      	movs	r1, #64	@ 0x40
 8004a92:	480f      	ldr	r0, [pc, #60]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004a94:	f015 ff02 	bl	801a89c <sniprintf>
            HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004a98:	480d      	ldr	r0, [pc, #52]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004a9a:	f7fb fbd1 	bl	8000240 <strlen>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004aa6:	490a      	ldr	r1, [pc, #40]	@ (8004ad0 <_ZN6Switch12stateMachineEv+0xd8>)
 8004aa8:	480a      	ldr	r0, [pc, #40]	@ (8004ad4 <_ZN6Switch12stateMachineEv+0xdc>)
 8004aaa:	f00a fc53 	bl	800f354 <HAL_UART_Transmit>
            Thermocouples::userGain = 50.0;
 8004aae:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <_ZN6Switch12stateMachineEv+0xe0>)
 8004ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae4 <_ZN6Switch12stateMachineEv+0xec>)
 8004ab2:	601a      	str	r2, [r3, #0]
        break;
 8004ab4:	e001      	b.n	8004aba <_ZN6Switch12stateMachineEv+0xc2>
        break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <_ZN6Switch12stateMachineEv+0xc4>
        break;
 8004aba:	bf00      	nop
    }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	2000035a 	.word	0x2000035a
 8004ac8:	48000400 	.word	0x48000400
 8004acc:	0801ca70 	.word	0x0801ca70
 8004ad0:	200004cc 	.word	0x200004cc
 8004ad4:	20000a60 	.word	0x20000a60
 8004ad8:	20000360 	.word	0x20000360
 8004adc:	43160000 	.word	0x43160000
 8004ae0:	0801ca90 	.word	0x0801ca90
 8004ae4:	42480000 	.word	0x42480000

08004ae8 <_ZN13Thermocouples5setupEv>:
KALMAN_T rf;
KALMAN_T lf;
// Static member definitions for MAX31856 objects

void Thermocouples::setup()
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
    // SPI_Set_Mode(1);

    // Re-initialize the SPI handle pointers
    left = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_9);
 8004af0:	f107 0008 	add.w	r0, r7, #8
 8004af4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004af8:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004afc:	493b      	ldr	r1, [pc, #236]	@ (8004bec <_ZN13Thermocouples5setupEv+0x104>)
 8004afe:	f7ff fa53 	bl	8003fa8 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	cb03      	ldmia	r3!, {r0, r1}
 8004b0c:	6010      	str	r0, [r2, #0]
 8004b0e:	6051      	str	r1, [r2, #4]
 8004b10:	8819      	ldrh	r1, [r3, #0]
 8004b12:	789b      	ldrb	r3, [r3, #2]
 8004b14:	8111      	strh	r1, [r2, #8]
 8004b16:	7293      	strb	r3, [r2, #10]
    right = Adafruit_MAX31856(&hspi1, GPIOA, GPIO_PIN_8);
 8004b18:	f107 0014 	add.w	r0, r7, #20
 8004b1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b20:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8004b24:	4931      	ldr	r1, [pc, #196]	@ (8004bec <_ZN13Thermocouples5setupEv+0x104>)
 8004b26:	f7ff fa3f 	bl	8003fa8 <_ZN17Adafruit_MAX31856C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f103 020c 	add.w	r2, r3, #12
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	cb03      	ldmia	r3!, {r0, r1}
 8004b36:	6010      	str	r0, [r2, #0]
 8004b38:	6051      	str	r1, [r2, #4]
 8004b3a:	8819      	ldrh	r1, [r3, #0]
 8004b3c:	789b      	ldrb	r3, [r3, #2]
 8004b3e:	8111      	strh	r1, [r2, #8]
 8004b40:	7293      	strb	r3, [r2, #10]

    rf.error = 0.0f;
 8004b42:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf0 <_ZN13Thermocouples5setupEv+0x108>)
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
    rf.estimate = 0.0f;
 8004b4a:	4b29      	ldr	r3, [pc, #164]	@ (8004bf0 <_ZN13Thermocouples5setupEv+0x108>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	611a      	str	r2, [r3, #16]
    rf.process_variance = 0.1f;
 8004b52:	4b27      	ldr	r3, [pc, #156]	@ (8004bf0 <_ZN13Thermocouples5setupEv+0x108>)
 8004b54:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <_ZN13Thermocouples5setupEv+0x10c>)
 8004b56:	615a      	str	r2, [r3, #20]
    rf.measurement_variance = 50.0f;
 8004b58:	4b25      	ldr	r3, [pc, #148]	@ (8004bf0 <_ZN13Thermocouples5setupEv+0x108>)
 8004b5a:	4a27      	ldr	r2, [pc, #156]	@ (8004bf8 <_ZN13Thermocouples5setupEv+0x110>)
 8004b5c:	619a      	str	r2, [r3, #24]

    lf.error = 0.0f;
 8004b5e:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <_ZN13Thermocouples5setupEv+0x114>)
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	609a      	str	r2, [r3, #8]
    lf.estimate = 0.0f;
 8004b66:	4b25      	ldr	r3, [pc, #148]	@ (8004bfc <_ZN13Thermocouples5setupEv+0x114>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	611a      	str	r2, [r3, #16]
    lf.process_variance = 0.1f;
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <_ZN13Thermocouples5setupEv+0x114>)
 8004b70:	4a20      	ldr	r2, [pc, #128]	@ (8004bf4 <_ZN13Thermocouples5setupEv+0x10c>)
 8004b72:	615a      	str	r2, [r3, #20]
    lf.measurement_variance = 50.0f;
 8004b74:	4b21      	ldr	r3, [pc, #132]	@ (8004bfc <_ZN13Thermocouples5setupEv+0x114>)
 8004b76:	4a20      	ldr	r2, [pc, #128]	@ (8004bf8 <_ZN13Thermocouples5setupEv+0x110>)
 8004b78:	619a      	str	r2, [r3, #24]
    // area = 3.14159f * diameter * length; // surface area in m^2
    // ambientTemp = 20.0f;
    // h = 500;      // W/m^2 * K
    // C = 0.000053; // J /K
    // lastTime = HAL_GetTick();
    left.begin();
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fa3e 	bl	8003ffe <_ZN17Adafruit_MAX318565beginEv>
    left.setThermocoupleType(MAX31856_TCTYPE_K);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2103      	movs	r1, #3
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fa8d 	bl	80040a6 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    left.setConversionMode(MAX31856_CONTINUOUS);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2101      	movs	r1, #1
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fa5a 	bl	800404a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    left.setTempFaultThreshholds(0.0, 100.0);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8004c00 <_ZN13Thermocouples5setupEv+0x118>
 8004b9c:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8004c04 <_ZN13Thermocouples5setupEv+0x11c>
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff faae 	bl	8004102 <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>

    right.begin();
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fa27 	bl	8003ffe <_ZN17Adafruit_MAX318565beginEv>
    right.setThermocoupleType(MAX31856_TCTYPE_K);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	330c      	adds	r3, #12
 8004bb4:	2103      	movs	r1, #3
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff fa75 	bl	80040a6 <_ZN17Adafruit_MAX3185619setThermocoupleTypeE27max31856_thermocoupletype_t>
    right.setConversionMode(MAX31856_CONTINUOUS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fa41 	bl	800404a <_ZN17Adafruit_MAX3185617setConversionModeE26max31856_conversion_mode_t>
    right.setTempFaultThreshholds(0.0, 100.0);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	330c      	adds	r3, #12
 8004bcc:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8004c00 <_ZN13Thermocouples5setupEv+0x118>
 8004bd0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004c04 <_ZN13Thermocouples5setupEv+0x11c>
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fa94 	bl	8004102 <_ZN17Adafruit_MAX3185623setTempFaultThreshholdsEff>
    // SPI_Set_Mode(0);
    HAL_Delay(500);
 8004bda:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004bde:	f000 fc66 	bl	80054ae <HAL_Delay>
    // setNoiseFilter(&tempSensor, MAX31856_NOISE_FILTER_50HZ);
    // HAL_Delay(200);
    // Set fault thresholds (optional)
    // setTempFaultThresholds(&tempSensor, -200.0f, 1000.0f); // -200°C to 1000°C
    // setColdJunctionFaultThresholds(&tempSensor, -40, 85);   // -40°C to 85°C
}
 8004be2:	bf00      	nop
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	2000089c 	.word	0x2000089c
 8004bf0:	20000364 	.word	0x20000364
 8004bf4:	3dcccccd 	.word	0x3dcccccd
 8004bf8:	42480000 	.word	0x42480000
 8004bfc:	20000380 	.word	0x20000380
 8004c00:	42c80000 	.word	0x42c80000
 8004c04:	00000000 	.word	0x00000000

08004c08 <_ZN13Thermocouples12stateMachineEv>:

void Thermocouples::stateMachine(void)
{
 8004c08:	b5b0      	push	{r4, r5, r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	6078      	str	r0, [r7, #4]
    if (!delay)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d025      	beq.n	8004c6e <_ZN13Thermocouples12stateMachineEv+0x66>
    {
        // SPI_Set_Mode(1);
        rightRawTemp = (int32_t)right.readThermocoupleTemperature();
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	330c      	adds	r3, #12
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff faf2 	bl	8004210 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	461a      	mov	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	641a      	str	r2, [r3, #64]	@ 0x40
        leftRawTemp = (int32_t)left.readThermocoupleTemperature();
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff faea 	bl	8004210 <_ZN17Adafruit_MAX3185627readThermocoupleTemperatureEv>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	63da      	str	r2, [r3, #60]	@ 0x3c

        checkFault("------------ Right: ", right.readFault());
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	330c      	adds	r3, #12
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7ff fa4d 	bl	80040e8 <_ZN17Adafruit_MAX318569readFaultEv>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461a      	mov	r2, r3
 8004c52:	4986      	ldr	r1, [pc, #536]	@ (8004e6c <_ZN13Thermocouples12stateMachineEv+0x264>)
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f91f 	bl	8004e98 <_ZN13Thermocouples10checkFaultEPch>
        checkFault("------------ Left:  ", left.readFault());
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fa43 	bl	80040e8 <_ZN17Adafruit_MAX318569readFaultEv>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	4982      	ldr	r1, [pc, #520]	@ (8004e70 <_ZN13Thermocouples12stateMachineEv+0x268>)
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f915 	bl	8004e98 <_ZN13Thermocouples10checkFaultEPch>
    //  deltaTemp = deltaTemp + ((rightTemp - leftTemp) - deltaTemp) * 0.9; // leaky integrator with a gain of 0.9
    //  Average two sensors, or use one

    /// currentTime = HAL_GetTick();

    rightTemp = rightRawTemp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
    leftTemp = leftRawTemp;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    rf.measurement = 0.0078125f * (rightTemp); // deg c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004c98:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8004e74 <_ZN13Thermocouples12stateMachineEv+0x26c>
 8004c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ca0:	4b75      	ldr	r3, [pc, #468]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004ca2:	edc3 7a00 	vstr	s15, [r3]
    lf.measurement = 0.0078125f * (leftTemp);  // deg c
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004cac:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8004e74 <_ZN13Thermocouples12stateMachineEv+0x26c>
 8004cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cb4:	4b71      	ldr	r3, [pc, #452]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004cb6:	edc3 7a00 	vstr	s15, [r3]
                                               //
    rf.error = rf.error + rf.process_variance;
 8004cba:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8004cc0:	4b6d      	ldr	r3, [pc, #436]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cc2:	edd3 7a05 	vldr	s15, [r3, #20]
 8004cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cca:	4b6b      	ldr	r3, [pc, #428]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004ccc:	edc3 7a02 	vstr	s15, [r3, #8]
    rf.gain = rf.error / (rf.error + rf.measurement_variance);
 8004cd0:	4b69      	ldr	r3, [pc, #420]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8004cd6:	4b68      	ldr	r3, [pc, #416]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8004cdc:	4b66      	ldr	r3, [pc, #408]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cde:	edd3 7a06 	vldr	s15, [r3, #24]
 8004ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cea:	4b63      	ldr	r3, [pc, #396]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cec:	edc3 7a03 	vstr	s15, [r3, #12]
    rf.estimate = rf.estimate + rf.gain * (rf.measurement - rf.estimate);
 8004cf0:	4b61      	ldr	r3, [pc, #388]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cf2:	ed93 7a04 	vldr	s14, [r3, #16]
 8004cf6:	4b60      	ldr	r3, [pc, #384]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cf8:	edd3 6a03 	vldr	s13, [r3, #12]
 8004cfc:	4b5e      	ldr	r3, [pc, #376]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004cfe:	ed93 6a00 	vldr	s12, [r3]
 8004d02:	4b5d      	ldr	r3, [pc, #372]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d04:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d08:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d14:	4b58      	ldr	r3, [pc, #352]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d16:	edc3 7a04 	vstr	s15, [r3, #16]
    rf.error = (1.0 - rf.gain) * rf.error;
 8004d1a:	4b57      	ldr	r3, [pc, #348]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fb fbfa 	bl	8000518 <__aeabi_f2d>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	4954      	ldr	r1, [pc, #336]	@ (8004e80 <_ZN13Thermocouples12stateMachineEv+0x278>)
 8004d2e:	f7fb fa93 	bl	8000258 <__aeabi_dsub>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	4614      	mov	r4, r2
 8004d38:	461d      	mov	r5, r3
 8004d3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fb fbea 	bl	8000518 <__aeabi_f2d>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7fb fc3c 	bl	80005c8 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	f7fb ff0e 	bl	8000b78 <__aeabi_d2f>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a46      	ldr	r2, [pc, #280]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004d60:	6093      	str	r3, [r2, #8]
    //
    lf.error = lf.error + lf.process_variance;
 8004d62:	4b46      	ldr	r3, [pc, #280]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d64:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d68:	4b44      	ldr	r3, [pc, #272]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d6a:	edd3 7a05 	vldr	s15, [r3, #20]
 8004d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d72:	4b42      	ldr	r3, [pc, #264]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d74:	edc3 7a02 	vstr	s15, [r3, #8]
    lf.gain = lf.error / (lf.error + lf.measurement_variance);
 8004d78:	4b40      	ldr	r3, [pc, #256]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d80:	ed93 7a02 	vldr	s14, [r3, #8]
 8004d84:	4b3d      	ldr	r3, [pc, #244]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d86:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d92:	4b3a      	ldr	r3, [pc, #232]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d94:	edc3 7a03 	vstr	s15, [r3, #12]
    lf.estimate = lf.estimate + lf.gain * (lf.measurement - lf.estimate);
 8004d98:	4b38      	ldr	r3, [pc, #224]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004d9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8004d9e:	4b37      	ldr	r3, [pc, #220]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004da0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004da4:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004da6:	ed93 6a00 	vldr	s12, [r3]
 8004daa:	4b34      	ldr	r3, [pc, #208]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004dac:	edd3 7a04 	vldr	s15, [r3, #16]
 8004db0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8004db4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004dbe:	edc3 7a04 	vstr	s15, [r3, #16]
    lf.error = (1.0 - lf.gain) * lf.error;
 8004dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fba6 	bl	8000518 <__aeabi_f2d>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	f04f 0000 	mov.w	r0, #0
 8004dd4:	492a      	ldr	r1, [pc, #168]	@ (8004e80 <_ZN13Thermocouples12stateMachineEv+0x278>)
 8004dd6:	f7fb fa3f 	bl	8000258 <__aeabi_dsub>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4614      	mov	r4, r2
 8004de0:	461d      	mov	r5, r3
 8004de2:	4b26      	ldr	r3, [pc, #152]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fb fb96 	bl	8000518 <__aeabi_f2d>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb fbe8 	bl	80005c8 <__aeabi_dmul>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f7fb feba 	bl	8000b78 <__aeabi_d2f>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e08:	6093      	str	r3, [r2, #8]

    deltaTemp = (rf.estimate - lf.estimate) * userGain;
 8004e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e78 <_ZN13Thermocouples12stateMachineEv+0x270>)
 8004e0c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004e10:	4b1a      	ldr	r3, [pc, #104]	@ (8004e7c <_ZN13Thermocouples12stateMachineEv+0x274>)
 8004e12:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <_ZN13Thermocouples12stateMachineEv+0x27c>)
 8004e1c:	edd3 7a00 	vldr	s15, [r3]
 8004e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e24:	4b18      	ldr	r3, [pc, #96]	@ (8004e88 <_ZN13Thermocouples12stateMachineEv+0x280>)
 8004e26:	edc3 7a00 	vstr	s15, [r3]
    // CDC_Transmit_FS((uint8_t *)usbBuffer, strlen(usbBuffer));

    //     snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Left: %f  Right: %f\r\n", lf.measurement, rf.measurement);
    // HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);

    snprintf((char *)UART_BUFFER, sizeof(UART_BUFFER), "Delta Temp: %f\r\n", deltaTemp);
 8004e2a:	4b17      	ldr	r3, [pc, #92]	@ (8004e88 <_ZN13Thermocouples12stateMachineEv+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fb fb72 	bl	8000518 <__aeabi_f2d>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	e9cd 2300 	strd	r2, r3, [sp]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <_ZN13Thermocouples12stateMachineEv+0x284>)
 8004e3e:	2140      	movs	r1, #64	@ 0x40
 8004e40:	4813      	ldr	r0, [pc, #76]	@ (8004e90 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004e42:	f015 fd2b 	bl	801a89c <sniprintf>
    HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8004e46:	4812      	ldr	r0, [pc, #72]	@ (8004e90 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004e48:	f7fb f9fa 	bl	8000240 <strlen>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004e54:	490e      	ldr	r1, [pc, #56]	@ (8004e90 <_ZN13Thermocouples12stateMachineEv+0x288>)
 8004e56:	480f      	ldr	r0, [pc, #60]	@ (8004e94 <_ZN13Thermocouples12stateMachineEv+0x28c>)
 8004e58:	f00a fa7c 	bl	800f354 <HAL_UART_Transmit>

    delay = 10; // 50 ms
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	220a      	movs	r2, #10
 8004e60:	619a      	str	r2, [r3, #24]
}
 8004e62:	bf00      	nop
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdb0      	pop	{r4, r5, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	0801cab0 	.word	0x0801cab0
 8004e70:	0801cac8 	.word	0x0801cac8
 8004e74:	3c000000 	.word	0x3c000000
 8004e78:	20000364 	.word	0x20000364
 8004e7c:	20000380 	.word	0x20000380
 8004e80:	3ff00000 	.word	0x3ff00000
 8004e84:	20000360 	.word	0x20000360
 8004e88:	2000035c 	.word	0x2000035c
 8004e8c:	0801cae0 	.word	0x0801cae0
 8004e90:	200004cc 	.word	0x200004cc
 8004e94:	20000a60 	.word	0x20000a60

08004e98 <_ZN13Thermocouples10checkFaultEPch>:
    // Raw temperature is in units of 0.0078125°C (1/128°C)
    return (rawTemp * 0.0078125f);
}

void Thermocouples::checkFault(char *name, uint8_t fault)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
    // Clear buffer first
    memset(UART_BUFFER, 0, sizeof(UART_BUFFER));
 8004ea6:	2240      	movs	r2, #64	@ 0x40
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	486d      	ldr	r0, [pc, #436]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004eac:	f015 fd89 	bl	801a9c2 <memset>

    // Add the name
    strcat((char *)UART_BUFFER, name);
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	486b      	ldr	r0, [pc, #428]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004eb4:	f015 fd8d 	bl	801a9d2 <strcat>

    if (fault == 0x00)
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <_ZN13Thermocouples10checkFaultEPch+0x48>
    {
        strcat((char *)UART_BUFFER, "FAULT_NONE\r\n");
 8004ebe:	4868      	ldr	r0, [pc, #416]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004ec0:	f7fb f9be 	bl	8000240 <strlen>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4b65      	ldr	r3, [pc, #404]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	4a65      	ldr	r2, [pc, #404]	@ (8005064 <_ZN13Thermocouples10checkFaultEPch+0x1cc>)
 8004ece:	461c      	mov	r4, r3
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004ed4:	6020      	str	r0, [r4, #0]
 8004ed6:	6061      	str	r1, [r4, #4]
 8004ed8:	60a2      	str	r2, [r4, #8]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	7323      	strb	r3, [r4, #12]
 8004ede:	e0b0      	b.n	8005042 <_ZN13Thermocouples10checkFaultEPch+0x1aa>
    }
    else
    {
        // Check each fault bit individually for multiple faults
        if (fault & 0x01)
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d011      	beq.n	8004f0e <_ZN13Thermocouples10checkFaultEPch+0x76>
            strcat((char *)UART_BUFFER, "FAULT_CJ_HIGH ");
 8004eea:	485d      	ldr	r0, [pc, #372]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004eec:	f7fb f9a8 	bl	8000240 <strlen>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004ef6:	4413      	add	r3, r2
 8004ef8:	4a5b      	ldr	r2, [pc, #364]	@ (8005068 <_ZN13Thermocouples10checkFaultEPch+0x1d0>)
 8004efa:	461c      	mov	r4, r3
 8004efc:	4613      	mov	r3, r2
 8004efe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f00:	6020      	str	r0, [r4, #0]
 8004f02:	6061      	str	r1, [r4, #4]
 8004f04:	60a2      	str	r2, [r4, #8]
 8004f06:	881a      	ldrh	r2, [r3, #0]
 8004f08:	789b      	ldrb	r3, [r3, #2]
 8004f0a:	81a2      	strh	r2, [r4, #12]
 8004f0c:	73a3      	strb	r3, [r4, #14]
        if (fault & 0x02)
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00f      	beq.n	8004f38 <_ZN13Thermocouples10checkFaultEPch+0xa0>
            strcat((char *)UART_BUFFER, "FAULT_CJ_LOW ");
 8004f18:	4851      	ldr	r0, [pc, #324]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f1a:	f7fb f991 	bl	8000240 <strlen>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	461a      	mov	r2, r3
 8004f22:	4b4f      	ldr	r3, [pc, #316]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f24:	4413      	add	r3, r2
 8004f26:	4a51      	ldr	r2, [pc, #324]	@ (800506c <_ZN13Thermocouples10checkFaultEPch+0x1d4>)
 8004f28:	461c      	mov	r4, r3
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f2e:	6020      	str	r0, [r4, #0]
 8004f30:	6061      	str	r1, [r4, #4]
 8004f32:	60a2      	str	r2, [r4, #8]
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	81a3      	strh	r3, [r4, #12]
        if (fault & 0x04)
 8004f38:	79fb      	ldrb	r3, [r7, #7]
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <_ZN13Thermocouples10checkFaultEPch+0xce>
            strcat((char *)UART_BUFFER, "FAULT_TC_HIGH ");
 8004f42:	4847      	ldr	r0, [pc, #284]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f44:	f7fb f97c 	bl	8000240 <strlen>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b44      	ldr	r3, [pc, #272]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	4a47      	ldr	r2, [pc, #284]	@ (8005070 <_ZN13Thermocouples10checkFaultEPch+0x1d8>)
 8004f52:	461c      	mov	r4, r3
 8004f54:	4613      	mov	r3, r2
 8004f56:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f58:	6020      	str	r0, [r4, #0]
 8004f5a:	6061      	str	r1, [r4, #4]
 8004f5c:	60a2      	str	r2, [r4, #8]
 8004f5e:	881a      	ldrh	r2, [r3, #0]
 8004f60:	789b      	ldrb	r3, [r3, #2]
 8004f62:	81a2      	strh	r2, [r4, #12]
 8004f64:	73a3      	strb	r3, [r4, #14]
        if (fault & 0x08)
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <_ZN13Thermocouples10checkFaultEPch+0xf8>
            strcat((char *)UART_BUFFER, "FAULT_TC_LOW ");
 8004f70:	483b      	ldr	r0, [pc, #236]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f72:	f7fb f965 	bl	8000240 <strlen>
 8004f76:	4603      	mov	r3, r0
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4b39      	ldr	r3, [pc, #228]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f7c:	4413      	add	r3, r2
 8004f7e:	4a3d      	ldr	r2, [pc, #244]	@ (8005074 <_ZN13Thermocouples10checkFaultEPch+0x1dc>)
 8004f80:	461c      	mov	r4, r3
 8004f82:	4613      	mov	r3, r2
 8004f84:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004f86:	6020      	str	r0, [r4, #0]
 8004f88:	6061      	str	r1, [r4, #4]
 8004f8a:	60a2      	str	r2, [r4, #8]
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	81a3      	strh	r3, [r4, #12]
        if (fault & 0x10)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	f003 0310 	and.w	r3, r3, #16
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <_ZN13Thermocouples10checkFaultEPch+0x11e>
            strcat((char *)UART_BUFFER, "FAULT_OVUV ");
 8004f9a:	4831      	ldr	r0, [pc, #196]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004f9c:	f7fb f950 	bl	8000240 <strlen>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fa6:	4413      	add	r3, r2
 8004fa8:	4a33      	ldr	r2, [pc, #204]	@ (8005078 <_ZN13Thermocouples10checkFaultEPch+0x1e0>)
 8004faa:	461c      	mov	r4, r3
 8004fac:	4613      	mov	r3, r2
 8004fae:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fb0:	6020      	str	r0, [r4, #0]
 8004fb2:	6061      	str	r1, [r4, #4]
 8004fb4:	60a2      	str	r2, [r4, #8]
        if (fault & 0x20)
 8004fb6:	79fb      	ldrb	r3, [r7, #7]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <_ZN13Thermocouples10checkFaultEPch+0x144>
            strcat((char *)UART_BUFFER, "FAULT_OPEN ");
 8004fc0:	4827      	ldr	r0, [pc, #156]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fc2:	f7fb f93d 	bl	8000240 <strlen>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	4a2b      	ldr	r2, [pc, #172]	@ (800507c <_ZN13Thermocouples10checkFaultEPch+0x1e4>)
 8004fd0:	461c      	mov	r4, r3
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004fd6:	6020      	str	r0, [r4, #0]
 8004fd8:	6061      	str	r1, [r4, #4]
 8004fda:	60a2      	str	r2, [r4, #8]
        if (fault & 0x40)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00e      	beq.n	8005004 <_ZN13Thermocouples10checkFaultEPch+0x16c>
            strcat((char *)UART_BUFFER, "FAULT_CJ_RANGE ");
 8004fe6:	481e      	ldr	r0, [pc, #120]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004fe8:	f7fb f92a 	bl	8000240 <strlen>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4a22      	ldr	r2, [pc, #136]	@ (8005080 <_ZN13Thermocouples10checkFaultEPch+0x1e8>)
 8004ff6:	461c      	mov	r4, r3
 8004ff8:	4615      	mov	r5, r2
 8004ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ffc:	6020      	str	r0, [r4, #0]
 8004ffe:	6061      	str	r1, [r4, #4]
 8005000:	60a2      	str	r2, [r4, #8]
 8005002:	60e3      	str	r3, [r4, #12]
        if (fault & 0x80)
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0e      	bge.n	800502a <_ZN13Thermocouples10checkFaultEPch+0x192>
            strcat((char *)UART_BUFFER, "FAULT_TC_RANGE ");
 800500c:	4814      	ldr	r0, [pc, #80]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800500e:	f7fb f917 	bl	8000240 <strlen>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005018:	4413      	add	r3, r2
 800501a:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <_ZN13Thermocouples10checkFaultEPch+0x1ec>)
 800501c:	461c      	mov	r4, r3
 800501e:	4615      	mov	r5, r2
 8005020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005022:	6020      	str	r0, [r4, #0]
 8005024:	6061      	str	r1, [r4, #4]
 8005026:	60a2      	str	r2, [r4, #8]
 8005028:	60e3      	str	r3, [r4, #12]

        strcat((char *)UART_BUFFER, "\r\n");
 800502a:	480d      	ldr	r0, [pc, #52]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 800502c:	f7fb f908 	bl	8000240 <strlen>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005036:	4413      	add	r3, r2
 8005038:	4a13      	ldr	r2, [pc, #76]	@ (8005088 <_ZN13Thermocouples10checkFaultEPch+0x1f0>)
 800503a:	8811      	ldrh	r1, [r2, #0]
 800503c:	7892      	ldrb	r2, [r2, #2]
 800503e:	8019      	strh	r1, [r3, #0]
 8005040:	709a      	strb	r2, [r3, #2]

        // left.begin();
        // right.begin();
    }

    HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8005042:	4807      	ldr	r0, [pc, #28]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005044:	f7fb f8fc 	bl	8000240 <strlen>
 8005048:	4603      	mov	r3, r0
 800504a:	b29a      	uxth	r2, r3
 800504c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8005050:	4903      	ldr	r1, [pc, #12]	@ (8005060 <_ZN13Thermocouples10checkFaultEPch+0x1c8>)
 8005052:	480e      	ldr	r0, [pc, #56]	@ (800508c <_ZN13Thermocouples10checkFaultEPch+0x1f4>)
 8005054:	f00a f97e 	bl	800f354 <HAL_UART_Transmit>
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bdb0      	pop	{r4, r5, r7, pc}
 8005060:	200004cc 	.word	0x200004cc
 8005064:	0801caf4 	.word	0x0801caf4
 8005068:	0801cb04 	.word	0x0801cb04
 800506c:	0801cb14 	.word	0x0801cb14
 8005070:	0801cb24 	.word	0x0801cb24
 8005074:	0801cb34 	.word	0x0801cb34
 8005078:	0801cb44 	.word	0x0801cb44
 800507c:	0801cb50 	.word	0x0801cb50
 8005080:	0801cb5c 	.word	0x0801cb5c
 8005084:	0801cb6c 	.word	0x0801cb6c
 8005088:	0801cb7c 	.word	0x0801cb7c
 800508c:	20000a60 	.word	0x20000a60

08005090 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8005090:	b5b0      	push	{r4, r5, r7, lr}
 8005092:	b088      	sub	sp, #32
 8005094:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <APPD_EnableCPU2+0x34>)
 8005098:	1d3c      	adds	r4, r7, #4
 800509a:	461d      	mov	r5, r3
 800509c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800509e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80050a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050a4:	c403      	stmia	r4!, {r0, r1}
 80050a6:	8022      	strh	r2, [r4, #0]
 80050a8:	3402      	adds	r4, #2
 80050aa:	0c13      	lsrs	r3, r2, #16
 80050ac:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80050ae:	f010 feb9 	bl	8015e24 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80050b2:	1d3b      	adds	r3, r7, #4
 80050b4:	4618      	mov	r0, r3
 80050b6:	f010 f94a 	bl	801534e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80050ba:	bf00      	nop
}
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bdb0      	pop	{r4, r5, r7, pc}
 80050c2:	bf00      	nop
 80050c4:	0801cb80 	.word	0x0801cb80

080050c8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80050d0:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80050d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d6:	f023 0207 	bic.w	r2, r3, #7
 80050da:	4905      	ldr	r1, [pc, #20]	@ (80050f0 <LL_C2_PWR_SetPowerMode+0x28>)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	58000400 	.word	0x58000400

080050f4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <LL_EXTI_EnableIT_32_63+0x24>)
 80050fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005102:	4905      	ldr	r1, [pc, #20]	@ (8005118 <LL_EXTI_EnableIT_32_63+0x24>)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	58000800 	.word	0x58000800

0800511c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005128:	4a0a      	ldr	r2, [pc, #40]	@ (8005154 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800512a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005136:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr
 8005154:	cafecafe 	.word	0xcafecafe

08005158 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8005160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800516a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4313      	orrs	r3, r2
 8005172:	608b      	str	r3, [r1, #8]
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8005180:	b480      	push	{r7}
 8005182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8005184:	4b04      	ldr	r3, [pc, #16]	@ (8005198 <LL_DBGMCU_GetDeviceID+0x18>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e0042000 	.word	0xe0042000

0800519c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80051a0:	4b04      	ldr	r3, [pc, #16]	@ (80051b4 <LL_DBGMCU_GetRevisionID+0x18>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	b29b      	uxth	r3, r3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	e0042000 	.word	0xe0042000

080051b8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <LL_LPM_EnableSleep+0x1c>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	4a04      	ldr	r2, [pc, #16]	@ (80051d4 <LL_LPM_EnableSleep+0x1c>)
 80051c2:	f023 0304 	bic.w	r3, r3, #4
 80051c6:	6113      	str	r3, [r2, #16]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	e000ed00 	.word	0xe000ed00

080051d8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	22ff      	movs	r2, #255	@ 0xff
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22ca      	movs	r2, #202	@ 0xca
 80051fe:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2253      	movs	r2, #83	@ 0x53
 8005204:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f023 0207 	bic.w	r2, r3, #7
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	609a      	str	r2, [r3, #8]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800523c:	4b04      	ldr	r3, [pc, #16]	@ (8005250 <MX_APPE_Config+0x18>)
 800523e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005242:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8005244:	f000 f824 	bl	8005290 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8005248:	f000 f829 	bl	800529e <Config_HSE>

  return;
 800524c:	bf00      	nop
}
 800524e:	bd80      	pop	{r7, pc}
 8005250:	58004000 	.word	0x58004000

08005254 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8005258:	f000 f835 	bl	80052c6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800525c:	f000 f84e 	bl	80052fc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8005260:	4903      	ldr	r1, [pc, #12]	@ (8005270 <MX_APPE_Init+0x1c>)
 8005262:	2000      	movs	r0, #0
 8005264:	f000 fe2c 	bl	8005ec0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8005268:	f000 f856 	bl	8005318 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800526c:	bf00      	nop
}
 800526e:	bd80      	pop	{r7, pc}
 8005270:	20000878 	.word	0x20000878

08005274 <Init_Smps>:

void Init_Smps(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8005278:	bf00      	nop
}
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <Init_Exti>:

void Init_Exti(void)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8005286:	2050      	movs	r0, #80	@ 0x50
 8005288:	f7ff ff34 	bl	80050f4 <LL_EXTI_EnableIT_32_63>

  return;
 800528c:	bf00      	nop
}
 800528e:	bd80      	pop	{r7, pc}

08005290 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8005294:	bf00      	nop
}
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80052a4:	2000      	movs	r0, #0
 80052a6:	f010 fe49 	bl	8015f3c <OTP_Read>
 80052aa:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d005      	beq.n	80052be <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	799b      	ldrb	r3, [r3, #6]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff ff30 	bl	800511c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
}
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <System_Init>:

static void System_Init(void)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	af00      	add	r7, sp, #0
  Init_Smps();
 80052ca:	f7ff ffd3 	bl	8005274 <Init_Smps>

  Init_Exti();
 80052ce:	f7ff ffd8 	bl	8005282 <Init_Exti>

  Init_Rtc();
 80052d2:	f000 f803 	bl	80052dc <Init_Rtc>

  return;
 80052d6:	bf00      	nop
}
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <Init_Rtc>:

static void Init_Rtc(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80052e0:	4805      	ldr	r0, [pc, #20]	@ (80052f8 <Init_Rtc+0x1c>)
 80052e2:	f7ff ff86 	bl	80051f2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80052e6:	2100      	movs	r1, #0
 80052e8:	4803      	ldr	r0, [pc, #12]	@ (80052f8 <Init_Rtc+0x1c>)
 80052ea:	f7ff ff92 	bl	8005212 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80052ee:	4802      	ldr	r0, [pc, #8]	@ (80052f8 <Init_Rtc+0x1c>)
 80052f0:	f7ff ff72 	bl	80051d8 <LL_RTC_EnableWriteProtection>

  return;
 80052f4:	bf00      	nop
}
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40002800 	.word	0x40002800

080052fc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8005300:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005304:	f7ff ff28 	bl	8005158 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8005308:	f013 fd0c 	bl	8018d24 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800530c:	2004      	movs	r0, #4
 800530e:	f7ff fedb 	bl	80050c8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8005312:	bf00      	nop
}
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800531e:	f010 fbcb 	bl	8015ab8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8005322:	4a11      	ldr	r2, [pc, #68]	@ (8005368 <appe_Tl_Init+0x50>)
 8005324:	2100      	movs	r1, #0
 8005326:	2008      	movs	r0, #8
 8005328:	f013 fe3a 	bl	8018fa0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800532c:	4b0f      	ldr	r3, [pc, #60]	@ (800536c <appe_Tl_Init+0x54>)
 800532e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8005330:	4b0f      	ldr	r3, [pc, #60]	@ (8005370 <appe_Tl_Init+0x58>)
 8005332:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8005334:	463b      	mov	r3, r7
 8005336:	4619      	mov	r1, r3
 8005338:	480e      	ldr	r0, [pc, #56]	@ (8005374 <appe_Tl_Init+0x5c>)
 800533a:	f010 fa7f 	bl	801583c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800533e:	4b0e      	ldr	r3, [pc, #56]	@ (8005378 <appe_Tl_Init+0x60>)
 8005340:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8005342:	4b0e      	ldr	r3, [pc, #56]	@ (800537c <appe_Tl_Init+0x64>)
 8005344:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8005346:	4b0e      	ldr	r3, [pc, #56]	@ (8005380 <appe_Tl_Init+0x68>)
 8005348:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800534a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800534e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8005350:	f107 0308 	add.w	r3, r7, #8
 8005354:	4618      	mov	r0, r3
 8005356:	f010 fcf1 	bl	8015d3c <TL_MM_Init>

  TL_Enable();
 800535a:	f010 fba7 	bl	8015aac <TL_Enable>

  return;
 800535e:	bf00      	nop
}
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	08015875 	.word	0x08015875
 800536c:	20030734 	.word	0x20030734
 8005370:	08005385 	.word	0x08005385
 8005374:	0800539d 	.word	0x0800539d
 8005378:	2003094c 	.word	0x2003094c
 800537c:	20030840 	.word	0x20030840
 8005380:	200301f8 	.word	0x200301f8

08005384 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800538e:	bf00      	nop
}
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
	...

0800539c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	330b      	adds	r3, #11
 80053aa:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80053b6:	2b07      	cmp	r3, #7
 80053b8:	d81f      	bhi.n	80053fa <APPE_SysUserEvtRx+0x5e>
 80053ba:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <APPE_SysUserEvtRx+0x24>)
 80053bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053f3 	.word	0x080053f3
 80053c8:	080053fb 	.word	0x080053fb
 80053cc:	080053fb 	.word	0x080053fb
 80053d0:	080053fb 	.word	0x080053fb
 80053d4:	080053fb 	.word	0x080053fb
 80053d8:	080053fb 	.word	0x080053fb
 80053dc:	080053fb 	.word	0x080053fb
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80053e0:	f107 030c 	add.w	r3, r7, #12
 80053e4:	4618      	mov	r0, r3
 80053e6:	f00f ffdf 	bl	80153a8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f81b 	bl	8005426 <APPE_SysEvtReadyProcessing>
    break;
 80053f0:	e004      	b.n	80053fc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f806 	bl	8005404 <APPE_SysEvtError>
    break;
 80053f8:	e000      	b.n	80053fc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80053fa:	bf00      	nop
  }

  return;
 80053fc:	bf00      	nop
}
 80053fe:	3720      	adds	r7, #32
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	330b      	adds	r3, #11
 8005412:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3302      	adds	r3, #2
 8005418:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800541a:	bf00      	nop
}
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b08a      	sub	sp, #40	@ 0x28
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800542e:	f107 0308 	add.w	r3, r7, #8
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	609a      	str	r2, [r3, #8]
 800543a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8005440:	2300      	movs	r3, #0
 8005442:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	330b      	adds	r3, #11
 800544a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	3302      	adds	r3, #2
 8005450:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11d      	bne.n	8005496 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800545a:	f7ff fe19 	bl	8005090 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800545e:	230f      	movs	r3, #15
 8005460:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8005462:	237f      	movs	r3, #127	@ 0x7f
 8005464:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8005466:	f7ff fe99 	bl	800519c <LL_DBGMCU_GetRevisionID>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	b29b      	uxth	r3, r3
 8005470:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8005472:	f7ff fe85 	bl	8005180 <LL_DBGMCU_GetDeviceID>
 8005476:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	b29b      	uxth	r3, r3
 800547c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	4618      	mov	r0, r3
 8005484:	f00f ff7a 	bl	801537c <SHCI_C2_Config>

    APP_BLE_Init();
 8005488:	f010 fe62 	bl	8016150 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800548c:	2100      	movs	r1, #0
 800548e:	2001      	movs	r0, #1
 8005490:	f013 fc5a 	bl	8018d48 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8005494:	e007      	b.n	80054a6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d103      	bne.n	80054a6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
  return;
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
}
 80054a8:	3728      	adds	r7, #40	@ 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b6:	f002 fac7 	bl	8007a48 <HAL_GetTick>
 80054ba:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d00a      	beq.n	80054de <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80054c8:	f002 fad6 	bl	8007a78 <HAL_GetTickFreq>
 80054cc:	4603      	mov	r3, r0
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054d6:	e002      	b.n	80054de <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80054d8:	f7ff fe6e 	bl	80051b8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 80054dc:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80054de:	f002 fab3 	bl	8007a48 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d8f4      	bhi.n	80054d8 <HAL_Delay+0x2a>
  }
}
 80054ee:	bf00      	nop
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80054fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005500:	f013 fc52 	bl	8018da8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}

08005508 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800550c:	bf00      	nop
}
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800551e:	2100      	movs	r1, #0
 8005520:	2008      	movs	r0, #8
 8005522:	f013 fd5f 	bl	8018fe4 <UTIL_SEQ_SetTask>
  return;
 8005526:	bf00      	nop
}
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b082      	sub	sp, #8
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8005536:	2002      	movs	r0, #2
 8005538:	f013 fdc0 	bl	80190bc <UTIL_SEQ_SetEvt>
  return;
 800553c:	bf00      	nop
}
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800554c:	2002      	movs	r0, #2
 800554e:	f013 fdd5 	bl	80190fc <UTIL_SEQ_WaitEvt>
  return;
 8005552:	bf00      	nop
}
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4313      	orrs	r3, r2
 8005570:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005576:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800557e:	68fb      	ldr	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8005590:	2004      	movs	r0, #4
 8005592:	f7ff ffe2 	bl	800555a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005596:	2001      	movs	r0, #1
 8005598:	f7ff ffdf 	bl	800555a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	200b      	movs	r0, #11
 80055a2:	f002 fbb0 	bl	8007d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80055a6:	200b      	movs	r0, #11
 80055a8:	f002 fbc7 	bl	8007d3a <HAL_NVIC_EnableIRQ>

}
 80055ac:	bf00      	nop
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4013      	ands	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055d4:	68fb      	ldr	r3, [r7, #12]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ea:	1d3b      	adds	r3, r7, #4
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]
 80055f6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055f8:	2004      	movs	r0, #4
 80055fa:	f7ff ffd9 	bl	80055b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055fe:	2002      	movs	r0, #2
 8005600:	f7ff ffd6 	bl	80055b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005604:	2001      	movs	r0, #1
 8005606:	f7ff ffd3 	bl	80055b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 800560a:	2200      	movs	r2, #0
 800560c:	f240 310e 	movw	r1, #782	@ 0x30e
 8005610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005614:	f003 f832 	bl	800867c <HAL_GPIO_WritePin>
                          |TEMP2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 8005618:	2200      	movs	r2, #0
 800561a:	2120      	movs	r1, #32
 800561c:	481d      	ldr	r0, [pc, #116]	@ (8005694 <MX_GPIO_Init+0xb0>)
 800561e:	f003 f82d 	bl	800867c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TFT_RESET_Pin TFT_RS_DC_Pin TFT_CS_Pin TEMP1_CS_Pin
                           TEMP2_CS_Pin */
  GPIO_InitStruct.Pin = TFT_RESET_Pin|TFT_RS_DC_Pin|TFT_CS_Pin|TEMP1_CS_Pin
 8005622:	f240 330e 	movw	r3, #782	@ 0x30e
 8005626:	607b      	str	r3, [r7, #4]
                          |TEMP2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005628:	2301      	movs	r3, #1
 800562a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005630:	2300      	movs	r3, #0
 8005632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005634:	1d3b      	adds	r3, r7, #4
 8005636:	4619      	mov	r1, r3
 8005638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800563c:	f002 fe96 	bl	800836c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEMP1_DRDY_Pin TEMP2_DRDY_Pin */
  GPIO_InitStruct.Pin = TEMP1_DRDY_Pin|TEMP2_DRDY_Pin;
 8005640:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8005644:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005646:	2300      	movs	r3, #0
 8005648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564e:	1d3b      	adds	r3, r7, #4
 8005650:	4619      	mov	r1, r3
 8005652:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005656:	f002 fe89 	bl	800836c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800565a:	2301      	movs	r3, #1
 800565c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005666:	1d3b      	adds	r3, r7, #4
 8005668:	4619      	mov	r1, r3
 800566a:	480a      	ldr	r0, [pc, #40]	@ (8005694 <MX_GPIO_Init+0xb0>)
 800566c:	f002 fe7e 	bl	800836c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 8005670:	2320      	movs	r3, #32
 8005672:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005674:	2301      	movs	r3, #1
 8005676:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	4619      	mov	r1, r3
 8005684:	4803      	ldr	r0, [pc, #12]	@ (8005694 <MX_GPIO_Init+0xb0>)
 8005686:	f002 fe71 	bl	800836c <HAL_GPIO_Init>

}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	48000400 	.word	0x48000400

08005698 <LL_EXTI_EnableIT_0_31>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80056a0:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <LL_EXTI_EnableIT_0_31+0x24>)
 80056a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80056a6:	4905      	ldr	r1, [pc, #20]	@ (80056bc <LL_EXTI_EnableIT_0_31+0x24>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	58000800 	.word	0x58000800

080056c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80056c8:	4b05      	ldr	r3, [pc, #20]	@ (80056e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4904      	ldr	r1, [pc, #16]	@ (80056e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	58000800 	.word	0x58000800

080056e4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80056ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <ReadRtcSsrValue+0x3c>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80056f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005720 <ReadRtcSsrValue+0x3c>)
 80056f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80056fa:	e005      	b.n	8005708 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8005700:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <ReadRtcSsrValue+0x3c>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	b29b      	uxth	r3, r3
 8005706:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d1f5      	bne.n	80056fc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8005710:	683b      	ldr	r3, [r7, #0]
}
 8005712:	4618      	mov	r0, r3
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40002800 	.word	0x40002800

08005724 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	460a      	mov	r2, r1
 800572e:	71fb      	strb	r3, [r7, #7]
 8005730:	4613      	mov	r3, r2
 8005732:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8005734:	79ba      	ldrb	r2, [r7, #6]
 8005736:	491d      	ldr	r1, [pc, #116]	@ (80057ac <LinkTimerAfter+0x88>)
 8005738:	4613      	mov	r3, r2
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	4413      	add	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	440b      	add	r3, r1
 8005742:	3315      	adds	r3, #21
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d009      	beq.n	8005762 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800574e:	7bfa      	ldrb	r2, [r7, #15]
 8005750:	4916      	ldr	r1, [pc, #88]	@ (80057ac <LinkTimerAfter+0x88>)
 8005752:	4613      	mov	r3, r2
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	4413      	add	r3, r2
 8005758:	00db      	lsls	r3, r3, #3
 800575a:	440b      	add	r3, r1
 800575c:	3314      	adds	r3, #20
 800575e:	79fa      	ldrb	r2, [r7, #7]
 8005760:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8005762:	79fa      	ldrb	r2, [r7, #7]
 8005764:	4911      	ldr	r1, [pc, #68]	@ (80057ac <LinkTimerAfter+0x88>)
 8005766:	4613      	mov	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	3315      	adds	r3, #21
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8005776:	79fa      	ldrb	r2, [r7, #7]
 8005778:	490c      	ldr	r1, [pc, #48]	@ (80057ac <LinkTimerAfter+0x88>)
 800577a:	4613      	mov	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	440b      	add	r3, r1
 8005784:	3314      	adds	r3, #20
 8005786:	79ba      	ldrb	r2, [r7, #6]
 8005788:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800578a:	79ba      	ldrb	r2, [r7, #6]
 800578c:	4907      	ldr	r1, [pc, #28]	@ (80057ac <LinkTimerAfter+0x88>)
 800578e:	4613      	mov	r3, r2
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	4413      	add	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	440b      	add	r3, r1
 8005798:	3315      	adds	r3, #21
 800579a:	79fa      	ldrb	r2, [r7, #7]
 800579c:	701a      	strb	r2, [r3, #0]

  return;
 800579e:	bf00      	nop
}
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000039c 	.word	0x2000039c

080057b0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	4603      	mov	r3, r0
 80057b8:	460a      	mov	r2, r1
 80057ba:	71fb      	strb	r3, [r7, #7]
 80057bc:	4613      	mov	r3, r2
 80057be:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80057c0:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <LinkTimerBefore+0xb8>)
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	79ba      	ldrb	r2, [r7, #6]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d032      	beq.n	8005832 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80057cc:	79ba      	ldrb	r2, [r7, #6]
 80057ce:	4927      	ldr	r1, [pc, #156]	@ (800586c <LinkTimerBefore+0xbc>)
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	3314      	adds	r3, #20
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80057e0:	7bfa      	ldrb	r2, [r7, #15]
 80057e2:	4922      	ldr	r1, [pc, #136]	@ (800586c <LinkTimerBefore+0xbc>)
 80057e4:	4613      	mov	r3, r2
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	3315      	adds	r3, #21
 80057f0:	79fa      	ldrb	r2, [r7, #7]
 80057f2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80057f4:	79fa      	ldrb	r2, [r7, #7]
 80057f6:	491d      	ldr	r1, [pc, #116]	@ (800586c <LinkTimerBefore+0xbc>)
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	3315      	adds	r3, #21
 8005804:	79ba      	ldrb	r2, [r7, #6]
 8005806:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8005808:	79fa      	ldrb	r2, [r7, #7]
 800580a:	4918      	ldr	r1, [pc, #96]	@ (800586c <LinkTimerBefore+0xbc>)
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	440b      	add	r3, r1
 8005816:	3314      	adds	r3, #20
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800581c:	79ba      	ldrb	r2, [r7, #6]
 800581e:	4913      	ldr	r1, [pc, #76]	@ (800586c <LinkTimerBefore+0xbc>)
 8005820:	4613      	mov	r3, r2
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	3314      	adds	r3, #20
 800582c:	79fa      	ldrb	r2, [r7, #7]
 800582e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8005830:	e014      	b.n	800585c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8005832:	79fa      	ldrb	r2, [r7, #7]
 8005834:	490d      	ldr	r1, [pc, #52]	@ (800586c <LinkTimerBefore+0xbc>)
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	3315      	adds	r3, #21
 8005842:	79ba      	ldrb	r2, [r7, #6]
 8005844:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8005846:	79ba      	ldrb	r2, [r7, #6]
 8005848:	4908      	ldr	r1, [pc, #32]	@ (800586c <LinkTimerBefore+0xbc>)
 800584a:	4613      	mov	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	4413      	add	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	440b      	add	r3, r1
 8005854:	3314      	adds	r3, #20
 8005856:	79fa      	ldrb	r2, [r7, #7]
 8005858:	701a      	strb	r2, [r3, #0]
  return;
 800585a:	bf00      	nop
}
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000042c 	.word	0x2000042c
 800586c:	2000039c 	.word	0x2000039c

08005870 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800587a:	4b4e      	ldr	r3, [pc, #312]	@ (80059b4 <linkTimer+0x144>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b06      	cmp	r3, #6
 8005882:	d118      	bne.n	80058b6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8005884:	4b4b      	ldr	r3, [pc, #300]	@ (80059b4 <linkTimer+0x144>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	4b4b      	ldr	r3, [pc, #300]	@ (80059b8 <linkTimer+0x148>)
 800588c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800588e:	4a49      	ldr	r2, [pc, #292]	@ (80059b4 <linkTimer+0x144>)
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8005894:	79fa      	ldrb	r2, [r7, #7]
 8005896:	4949      	ldr	r1, [pc, #292]	@ (80059bc <linkTimer+0x14c>)
 8005898:	4613      	mov	r3, r2
 800589a:	005b      	lsls	r3, r3, #1
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	3315      	adds	r3, #21
 80058a4:	2206      	movs	r2, #6
 80058a6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80058a8:	4b45      	ldr	r3, [pc, #276]	@ (80059c0 <linkTimer+0x150>)
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80058b0:	2300      	movs	r3, #0
 80058b2:	81fb      	strh	r3, [r7, #14]
 80058b4:	e078      	b.n	80059a8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80058b6:	f000 f909 	bl	8005acc <ReturnTimeElapsed>
 80058ba:	4603      	mov	r3, r0
 80058bc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80058be:	79fa      	ldrb	r2, [r7, #7]
 80058c0:	493e      	ldr	r1, [pc, #248]	@ (80059bc <linkTimer+0x14c>)
 80058c2:	4613      	mov	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	440b      	add	r3, r1
 80058cc:	3308      	adds	r3, #8
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	79fa      	ldrb	r2, [r7, #7]
 80058d4:	4419      	add	r1, r3
 80058d6:	4839      	ldr	r0, [pc, #228]	@ (80059bc <linkTimer+0x14c>)
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4403      	add	r3, r0
 80058e2:	3308      	adds	r3, #8
 80058e4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80058e6:	79fa      	ldrb	r2, [r7, #7]
 80058e8:	4934      	ldr	r1, [pc, #208]	@ (80059bc <linkTimer+0x14c>)
 80058ea:	4613      	mov	r3, r2
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	4413      	add	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	440b      	add	r3, r1
 80058f4:	3308      	adds	r3, #8
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80058fa:	4b2e      	ldr	r3, [pc, #184]	@ (80059b4 <linkTimer+0x144>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	4619      	mov	r1, r3
 8005902:	4a2e      	ldr	r2, [pc, #184]	@ (80059bc <linkTimer+0x14c>)
 8005904:	460b      	mov	r3, r1
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	440b      	add	r3, r1
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	3308      	adds	r3, #8
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	d337      	bcc.n	8005988 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8005918:	4b26      	ldr	r3, [pc, #152]	@ (80059b4 <linkTimer+0x144>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800591e:	7b7a      	ldrb	r2, [r7, #13]
 8005920:	4926      	ldr	r1, [pc, #152]	@ (80059bc <linkTimer+0x14c>)
 8005922:	4613      	mov	r3, r2
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	3315      	adds	r3, #21
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8005932:	e013      	b.n	800595c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8005934:	7b7a      	ldrb	r2, [r7, #13]
 8005936:	4921      	ldr	r1, [pc, #132]	@ (80059bc <linkTimer+0x14c>)
 8005938:	4613      	mov	r3, r2
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	4413      	add	r3, r2
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	440b      	add	r3, r1
 8005942:	3315      	adds	r3, #21
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8005948:	7b7a      	ldrb	r2, [r7, #13]
 800594a:	491c      	ldr	r1, [pc, #112]	@ (80059bc <linkTimer+0x14c>)
 800594c:	4613      	mov	r3, r2
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	4413      	add	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	440b      	add	r3, r1
 8005956:	3315      	adds	r3, #21
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800595c:	7b3b      	ldrb	r3, [r7, #12]
 800595e:	2b06      	cmp	r3, #6
 8005960:	d00b      	beq.n	800597a <linkTimer+0x10a>
 8005962:	7b3a      	ldrb	r2, [r7, #12]
 8005964:	4915      	ldr	r1, [pc, #84]	@ (80059bc <linkTimer+0x14c>)
 8005966:	4613      	mov	r3, r2
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4413      	add	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	440b      	add	r3, r1
 8005970:	3308      	adds	r3, #8
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d2dc      	bcs.n	8005934 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800597a:	7b7a      	ldrb	r2, [r7, #13]
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	4611      	mov	r1, r2
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fecf 	bl	8005724 <LinkTimerAfter>
 8005986:	e00f      	b.n	80059a8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <linkTimer+0x144>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff0c 	bl	80057b0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8005998:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <linkTimer+0x144>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	b2da      	uxtb	r2, r3
 800599e:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <linkTimer+0x148>)
 80059a0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80059a2:	4a04      	ldr	r2, [pc, #16]	@ (80059b4 <linkTimer+0x144>)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80059a8:	89fb      	ldrh	r3, [r7, #14]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2000042c 	.word	0x2000042c
 80059b8:	2000042d 	.word	0x2000042d
 80059bc:	2000039c 	.word	0x2000039c
 80059c0:	20000430 	.word	0x20000430

080059c4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4603      	mov	r3, r0
 80059cc:	460a      	mov	r2, r1
 80059ce:	71fb      	strb	r3, [r7, #7]
 80059d0:	4613      	mov	r3, r2
 80059d2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80059d4:	4b39      	ldr	r3, [pc, #228]	@ (8005abc <UnlinkTimer+0xf8>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	79fa      	ldrb	r2, [r7, #7]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d111      	bne.n	8005a04 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80059e0:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <UnlinkTimer+0xf8>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	4b36      	ldr	r3, [pc, #216]	@ (8005ac0 <UnlinkTimer+0xfc>)
 80059e8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80059ea:	79fa      	ldrb	r2, [r7, #7]
 80059ec:	4935      	ldr	r1, [pc, #212]	@ (8005ac4 <UnlinkTimer+0x100>)
 80059ee:	4613      	mov	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	3315      	adds	r3, #21
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	4b2f      	ldr	r3, [pc, #188]	@ (8005abc <UnlinkTimer+0xf8>)
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e03e      	b.n	8005a82 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8005a04:	79fa      	ldrb	r2, [r7, #7]
 8005a06:	492f      	ldr	r1, [pc, #188]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	440b      	add	r3, r1
 8005a12:	3314      	adds	r3, #20
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8005a18:	79fa      	ldrb	r2, [r7, #7]
 8005a1a:	492a      	ldr	r1, [pc, #168]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	440b      	add	r3, r1
 8005a26:	3315      	adds	r3, #21
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8005a2c:	79f9      	ldrb	r1, [r7, #7]
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	4824      	ldr	r0, [pc, #144]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a32:	460b      	mov	r3, r1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	440b      	add	r3, r1
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4403      	add	r3, r0
 8005a3c:	3315      	adds	r3, #21
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b2d8      	uxtb	r0, r3
 8005a42:	4920      	ldr	r1, [pc, #128]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a44:	4613      	mov	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	3315      	adds	r3, #21
 8005a50:	4602      	mov	r2, r0
 8005a52:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005a54:	7bbb      	ldrb	r3, [r7, #14]
 8005a56:	2b06      	cmp	r3, #6
 8005a58:	d013      	beq.n	8005a82 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8005a5a:	79f9      	ldrb	r1, [r7, #7]
 8005a5c:	7bba      	ldrb	r2, [r7, #14]
 8005a5e:	4819      	ldr	r0, [pc, #100]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a60:	460b      	mov	r3, r1
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	440b      	add	r3, r1
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4403      	add	r3, r0
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b2d8      	uxtb	r0, r3
 8005a70:	4914      	ldr	r1, [pc, #80]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a72:	4613      	mov	r3, r2
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	4602      	mov	r2, r0
 8005a80:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8005a82:	79fa      	ldrb	r2, [r7, #7]
 8005a84:	490f      	ldr	r1, [pc, #60]	@ (8005ac4 <UnlinkTimer+0x100>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	330c      	adds	r3, #12
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <UnlinkTimer+0xf8>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b06      	cmp	r3, #6
 8005a9e:	d107      	bne.n	8005ab0 <UnlinkTimer+0xec>
 8005aa0:	79bb      	ldrb	r3, [r7, #6]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005aa6:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <UnlinkTimer+0x104>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	601a      	str	r2, [r3, #0]
  }

  return;
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
}
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000042c 	.word	0x2000042c
 8005ac0:	2000042d 	.word	0x2000042d
 8005ac4:	2000039c 	.word	0x2000039c
 8005ac8:	20000430 	.word	0x20000430

08005acc <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8005ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <ReturnTimeElapsed+0x70>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ada:	d026      	beq.n	8005b2a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8005adc:	f7ff fe02 	bl	80056e4 <ReadRtcSsrValue>
 8005ae0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8005ae2:	4b16      	ldr	r3, [pc, #88]	@ (8005b3c <ReturnTimeElapsed+0x70>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d805      	bhi.n	8005af8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8005aec:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <ReturnTimeElapsed+0x70>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	607b      	str	r3, [r7, #4]
 8005af6:	e00a      	b.n	8005b0e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8005af8:	4b11      	ldr	r3, [pc, #68]	@ (8005b40 <ReturnTimeElapsed+0x74>)
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8005b04:	4b0d      	ldr	r3, [pc, #52]	@ (8005b3c <ReturnTimeElapsed+0x70>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <ReturnTimeElapsed+0x78>)
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8005b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b48 <ReturnTimeElapsed+0x7c>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	40d3      	lsrs	r3, r2
 8005b26:	607b      	str	r3, [r7, #4]
 8005b28:	e001      	b.n	8005b2e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	b29b      	uxth	r3, r3
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20000430 	.word	0x20000430
 8005b40:	20000438 	.word	0x20000438
 8005b44:	20000436 	.word	0x20000436
 8005b48:	20000435 	.word	0x20000435

08005b4c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	4603      	mov	r3, r0
 8005b54:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d108      	bne.n	8005b6e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005b5c:	f7ff fdc2 	bl	80056e4 <ReadRtcSsrValue>
 8005b60:	4603      	mov	r3, r0
 8005b62:	4a21      	ldr	r2, [pc, #132]	@ (8005be8 <RestartWakeupCounter+0x9c>)
 8005b64:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8005b66:	2003      	movs	r0, #3
 8005b68:	f002 f90f 	bl	8007d8a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8005b6c:	e039      	b.n	8005be2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d803      	bhi.n	8005b7c <RestartWakeupCounter+0x30>
 8005b74:	4b1d      	ldr	r3, [pc, #116]	@ (8005bec <RestartWakeupCounter+0xa0>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d002      	beq.n	8005b82 <RestartWakeupCounter+0x36>
      Value -= 1;
 8005b7c:	88fb      	ldrh	r3, [r7, #6]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005b82:	bf00      	nop
 8005b84:	4b1a      	ldr	r3, [pc, #104]	@ (8005bf0 <RestartWakeupCounter+0xa4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f8      	beq.n	8005b84 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005b92:	4b17      	ldr	r3, [pc, #92]	@ (8005bf0 <RestartWakeupCounter+0xa4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b15      	ldr	r3, [pc, #84]	@ (8005bf0 <RestartWakeupCounter+0xa4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005ba2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005ba4:	4b13      	ldr	r3, [pc, #76]	@ (8005bf4 <RestartWakeupCounter+0xa8>)
 8005ba6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005baa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8005bac:	2003      	movs	r0, #3
 8005bae:	f002 f8fa 	bl	8007da6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8005bb2:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <RestartWakeupCounter+0xac>)
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	0c1b      	lsrs	r3, r3, #16
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	490e      	ldr	r1, [pc, #56]	@ (8005bf8 <RestartWakeupCounter+0xac>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8005bc2:	f7ff fd8f 	bl	80056e4 <ReadRtcSsrValue>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a07      	ldr	r2, [pc, #28]	@ (8005be8 <RestartWakeupCounter+0x9c>)
 8005bca:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8005bcc:	4b08      	ldr	r3, [pc, #32]	@ (8005bf0 <RestartWakeupCounter+0xa4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	4b07      	ldr	r3, [pc, #28]	@ (8005bf0 <RestartWakeupCounter+0xa4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bda:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8005bdc:	f3af 8000 	nop.w
  return ;
 8005be0:	bf00      	nop
}
 8005be2:	3708      	adds	r7, #8
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000430 	.word	0x20000430
 8005bec:	20000435 	.word	0x20000435
 8005bf0:	20000878 	.word	0x20000878
 8005bf4:	58000800 	.word	0x58000800
 8005bf8:	40002800 	.word	0x40002800

08005bfc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8005c02:	4b45      	ldr	r3, [pc, #276]	@ (8005d18 <RescheduleTimerList+0x11c>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0e:	d107      	bne.n	8005c20 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8005c10:	bf00      	nop
 8005c12:	4b42      	ldr	r3, [pc, #264]	@ (8005d1c <RescheduleTimerList+0x120>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0304 	and.w	r3, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f8      	bne.n	8005c12 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8005c20:	4b3e      	ldr	r3, [pc, #248]	@ (8005d1c <RescheduleTimerList+0x120>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	4b3d      	ldr	r3, [pc, #244]	@ (8005d1c <RescheduleTimerList+0x120>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8005c30:	4b3b      	ldr	r3, [pc, #236]	@ (8005d20 <RescheduleTimerList+0x124>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8005c36:	7bfa      	ldrb	r2, [r7, #15]
 8005c38:	493a      	ldr	r1, [pc, #232]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	4413      	add	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	440b      	add	r3, r1
 8005c44:	3308      	adds	r3, #8
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8005c4a:	f7ff ff3f 	bl	8005acc <ReturnTimeElapsed>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d205      	bcs.n	8005c66 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005c5e:	4b32      	ldr	r3, [pc, #200]	@ (8005d28 <RescheduleTimerList+0x12c>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	e04d      	b.n	8005d02 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8005c66:	88fb      	ldrh	r3, [r7, #6]
 8005c68:	4a30      	ldr	r2, [pc, #192]	@ (8005d2c <RescheduleTimerList+0x130>)
 8005c6a:	8812      	ldrh	r2, [r2, #0]
 8005c6c:	b292      	uxth	r2, r2
 8005c6e:	4413      	add	r3, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d906      	bls.n	8005c86 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8005c78:	4b2c      	ldr	r3, [pc, #176]	@ (8005d2c <RescheduleTimerList+0x130>)
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005d28 <RescheduleTimerList+0x12c>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
 8005c84:	e03d      	b.n	8005d02 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005c90:	4b25      	ldr	r3, [pc, #148]	@ (8005d28 <RescheduleTimerList+0x12c>)
 8005c92:	2201      	movs	r2, #1
 8005c94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005c96:	e034      	b.n	8005d02 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8005c98:	7bfa      	ldrb	r2, [r7, #15]
 8005c9a:	4922      	ldr	r1, [pc, #136]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	88fb      	ldrh	r3, [r7, #6]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d20a      	bcs.n	8005cc6 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8005cb0:	7bfa      	ldrb	r2, [r7, #15]
 8005cb2:	491c      	ldr	r1, [pc, #112]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	00db      	lsls	r3, r3, #3
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	e013      	b.n	8005cee <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8005cc6:	7bfa      	ldrb	r2, [r7, #15]
 8005cc8:	4916      	ldr	r1, [pc, #88]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	7bfa      	ldrb	r2, [r7, #15]
 8005cdc:	1ac9      	subs	r1, r1, r3
 8005cde:	4811      	ldr	r0, [pc, #68]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4403      	add	r3, r0
 8005cea:	3308      	adds	r3, #8
 8005cec:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8005cee:	7bfa      	ldrb	r2, [r7, #15]
 8005cf0:	490c      	ldr	r1, [pc, #48]	@ (8005d24 <RescheduleTimerList+0x128>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3315      	adds	r3, #21
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d1c7      	bne.n	8005c98 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8005d08:	89bb      	ldrh	r3, [r7, #12]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff ff1e 	bl	8005b4c <RestartWakeupCounter>

  return ;
 8005d10:	bf00      	nop
}
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40002800 	.word	0x40002800
 8005d1c:	20000878 	.word	0x20000878
 8005d20:	2000042c 	.word	0x2000042c
 8005d24:	2000039c 	.word	0x2000039c
 8005d28:	20000434 	.word	0x20000434
 8005d2c:	2000043a 	.word	0x2000043a

08005d30 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b08a      	sub	sp, #40	@ 0x28
 8005d34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	617b      	str	r3, [r7, #20]
  return(result);
 8005d3c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8005d40:	b672      	cpsid	i
}
 8005d42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005d44:	4b59      	ldr	r3, [pc, #356]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	22ca      	movs	r2, #202	@ 0xca
 8005d4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d4c:	4b57      	ldr	r3, [pc, #348]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2253      	movs	r2, #83	@ 0x53
 8005d52:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8005d54:	4b55      	ldr	r3, [pc, #340]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	4b54      	ldr	r3, [pc, #336]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d62:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8005d64:	4b52      	ldr	r3, [pc, #328]	@ (8005eb0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8005d6c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005d70:	4950      	ldr	r1, [pc, #320]	@ (8005eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005d72:	4613      	mov	r3, r2
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	4413      	add	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	440b      	add	r3, r1
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d16e      	bne.n	8005e64 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8005d86:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005d8a:	494a      	ldr	r1, [pc, #296]	@ (8005eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	4413      	add	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	440b      	add	r3, r1
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8005d9a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005d9e:	4945      	ldr	r1, [pc, #276]	@ (8005eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	440b      	add	r3, r1
 8005daa:	3310      	adds	r3, #16
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8005db0:	4b41      	ldr	r3, [pc, #260]	@ (8005eb8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d04c      	beq.n	8005e54 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8005dba:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005dbe:	493d      	ldr	r1, [pc, #244]	@ (8005eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	440b      	add	r3, r1
 8005dca:	330d      	adds	r3, #13
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d124      	bne.n	8005e1e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8005dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fdf2 	bl	80059c4 <UnlinkTimer>
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f383 8810 	msr	PRIMASK, r3
}
 8005dea:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8005dec:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005df0:	4930      	ldr	r1, [pc, #192]	@ (8005eb4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8005df2:	4613      	mov	r3, r2
 8005df4:	005b      	lsls	r3, r3, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e04:	4611      	mov	r1, r2
 8005e06:	4618      	mov	r0, r3
 8005e08:	f000 f9b8 	bl	800617c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005e0c:	4b27      	ldr	r3, [pc, #156]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	22ca      	movs	r2, #202	@ 0xca
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e14:	4b25      	ldr	r3, [pc, #148]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2253      	movs	r2, #83	@ 0x53
 8005e1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e1c:	e012      	b.n	8005e44 <HW_TS_RTC_Wakeup_Handler+0x114>
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f383 8810 	msr	PRIMASK, r3
}
 8005e28:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8005e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f920 	bl	8006074 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005e34:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	22ca      	movs	r2, #202	@ 0xca
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2253      	movs	r2, #83	@ 0x53
 8005e42:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8005e44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	69b8      	ldr	r0, [r7, #24]
 8005e4e:	f000 fa1b 	bl	8006288 <HW_TS_RTC_Int_AppNot>
 8005e52:	e022      	b.n	8005e9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8005e54:	f7ff fed2 	bl	8005bfc <RescheduleTimerList>
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f383 8810 	msr	PRIMASK, r3
}
 8005e62:	e01a      	b.n	8005e9a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8005e64:	bf00      	nop
 8005e66:	4b11      	ldr	r3, [pc, #68]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f8      	beq.n	8005e66 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8005e74:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005e84:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8005e86:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8005e88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e90:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8005e9a:	4b04      	ldr	r3, [pc, #16]	@ (8005eac <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	22ff      	movs	r2, #255	@ 0xff
 8005ea0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8005ea2:	bf00      	nop
}
 8005ea4:	3728      	adds	r7, #40	@ 0x28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000878 	.word	0x20000878
 8005eb0:	2000042c 	.word	0x2000042c
 8005eb4:	2000039c 	.word	0x2000039c
 8005eb8:	20000434 	.word	0x20000434
 8005ebc:	58000800 	.word	0x58000800

08005ec0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	6039      	str	r1, [r7, #0]
 8005eca:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8005ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8006048 <HW_TS_Init+0x188>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	22ca      	movs	r2, #202	@ 0xca
 8005ed2:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8006048 <HW_TS_Init+0x188>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2253      	movs	r2, #83	@ 0x53
 8005eda:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005edc:	4b5b      	ldr	r3, [pc, #364]	@ (800604c <HW_TS_Init+0x18c>)
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	4a5a      	ldr	r2, [pc, #360]	@ (800604c <HW_TS_Init+0x18c>)
 8005ee2:	f043 0320 	orr.w	r3, r3, #32
 8005ee6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8005ee8:	4b58      	ldr	r3, [pc, #352]	@ (800604c <HW_TS_Init+0x18c>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	f1c3 0304 	rsb	r3, r3, #4
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <HW_TS_Init+0x190>)
 8005efc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8005efe:	4b53      	ldr	r3, [pc, #332]	@ (800604c <HW_TS_Init+0x18c>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005f06:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8005f0a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	fa92 f2a2 	rbit	r2, r2
 8005f12:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d101      	bne.n	8005f22 <HW_TS_Init+0x62>
  {
    return 32U;
 8005f1e:	2220      	movs	r2, #32
 8005f20:	e003      	b.n	8005f2a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	fab2 f282 	clz	r2, r2
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	40d3      	lsrs	r3, r2
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	4b48      	ldr	r3, [pc, #288]	@ (8006054 <HW_TS_Init+0x194>)
 8005f34:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8005f36:	4b45      	ldr	r3, [pc, #276]	@ (800604c <HW_TS_Init+0x18c>)
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3301      	adds	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	4b44      	ldr	r3, [pc, #272]	@ (8006058 <HW_TS_Init+0x198>)
 8005f48:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8005f4a:	4b43      	ldr	r3, [pc, #268]	@ (8006058 <HW_TS_Init+0x198>)
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	4a40      	ldr	r2, [pc, #256]	@ (8006054 <HW_TS_Init+0x194>)
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	fb02 f303 	mul.w	r3, r2, r3
 8005f58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005f5c:	4a3c      	ldr	r2, [pc, #240]	@ (8006050 <HW_TS_Init+0x190>)
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	40d3      	lsrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d904      	bls.n	8005f78 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800605c <HW_TS_Init+0x19c>)
 8005f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005f74:	801a      	strh	r2, [r3, #0]
 8005f76:	e003      	b.n	8005f80 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	4b37      	ldr	r3, [pc, #220]	@ (800605c <HW_TS_Init+0x19c>)
 8005f7e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005f80:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005f84:	f7ff fb9c 	bl	80056c0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005f88:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005f8c:	f7ff fb84 	bl	8005698 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d13d      	bne.n	8006012 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8005f96:	4b32      	ldr	r3, [pc, #200]	@ (8006060 <HW_TS_Init+0x1a0>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8005f9c:	4b31      	ldr	r3, [pc, #196]	@ (8006064 <HW_TS_Init+0x1a4>)
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e00c      	b.n	8005fc4 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8005faa:	7ffa      	ldrb	r2, [r7, #31]
 8005fac:	492e      	ldr	r1, [pc, #184]	@ (8006068 <HW_TS_Init+0x1a8>)
 8005fae:	4613      	mov	r3, r2
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	4413      	add	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	440b      	add	r3, r1
 8005fb8:	330c      	adds	r3, #12
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	77fb      	strb	r3, [r7, #31]
 8005fc4:	7ffb      	ldrb	r3, [r7, #31]
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d9ef      	bls.n	8005faa <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8005fca:	4b28      	ldr	r3, [pc, #160]	@ (800606c <HW_TS_Init+0x1ac>)
 8005fcc:	2206      	movs	r2, #6
 8005fce:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <HW_TS_Init+0x188>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8006048 <HW_TS_Init+0x188>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fde:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8005fe0:	4b19      	ldr	r3, [pc, #100]	@ (8006048 <HW_TS_Init+0x188>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b17      	ldr	r3, [pc, #92]	@ (8006048 <HW_TS_Init+0x188>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8005ff0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8005ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8006070 <HW_TS_Init+0x1b0>)
 8005ff4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005ff8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8005ffa:	2003      	movs	r0, #3
 8005ffc:	f001 fed3 	bl	8007da6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8006000:	4b11      	ldr	r3, [pc, #68]	@ (8006048 <HW_TS_Init+0x188>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	4b10      	ldr	r3, [pc, #64]	@ (8006048 <HW_TS_Init+0x188>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600e:	609a      	str	r2, [r3, #8]
 8006010:	e009      	b.n	8006026 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8006012:	4b0d      	ldr	r3, [pc, #52]	@ (8006048 <HW_TS_Init+0x188>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8006020:	2003      	movs	r0, #3
 8006022:	f001 feb2 	bl	8007d8a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8006026:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <HW_TS_Init+0x188>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	22ff      	movs	r2, #255	@ 0xff
 800602c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800602e:	2200      	movs	r2, #0
 8006030:	2103      	movs	r1, #3
 8006032:	2003      	movs	r0, #3
 8006034:	f001 fe67 	bl	8007d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8006038:	2003      	movs	r0, #3
 800603a:	f001 fe7e 	bl	8007d3a <HAL_NVIC_EnableIRQ>

  return;
 800603e:	bf00      	nop
}
 8006040:	3720      	adds	r7, #32
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000878 	.word	0x20000878
 800604c:	40002800 	.word	0x40002800
 8006050:	20000435 	.word	0x20000435
 8006054:	20000436 	.word	0x20000436
 8006058:	20000438 	.word	0x20000438
 800605c:	2000043a 	.word	0x2000043a
 8006060:	20000434 	.word	0x20000434
 8006064:	20000430 	.word	0x20000430
 8006068:	2000039c 	.word	0x2000039c
 800606c:	2000042c 	.word	0x2000042c
 8006070:	58000800 	.word	0x58000800

08006074 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607e:	f3ef 8310 	mrs	r3, PRIMASK
 8006082:	60fb      	str	r3, [r7, #12]
  return(result);
 8006084:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006088:	b672      	cpsid	i
}
 800608a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800608c:	2003      	movs	r0, #3
 800608e:	f001 fe62 	bl	8007d56 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006092:	4b34      	ldr	r3, [pc, #208]	@ (8006164 <HW_TS_Stop+0xf0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	22ca      	movs	r2, #202	@ 0xca
 8006098:	625a      	str	r2, [r3, #36]	@ 0x24
 800609a:	4b32      	ldr	r3, [pc, #200]	@ (8006164 <HW_TS_Stop+0xf0>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2253      	movs	r2, #83	@ 0x53
 80060a0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80060a2:	79fa      	ldrb	r2, [r7, #7]
 80060a4:	4930      	ldr	r1, [pc, #192]	@ (8006168 <HW_TS_Stop+0xf4>)
 80060a6:	4613      	mov	r3, r2
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	4413      	add	r3, r2
 80060ac:	00db      	lsls	r3, r3, #3
 80060ae:	440b      	add	r3, r1
 80060b0:	330c      	adds	r3, #12
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d142      	bne.n	8006140 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fc80 	bl	80059c4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80060c4:	4b29      	ldr	r3, [pc, #164]	@ (800616c <HW_TS_Stop+0xf8>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
 80060cc:	2b06      	cmp	r3, #6
 80060ce:	d12f      	bne.n	8006130 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80060d0:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HW_TS_Stop+0xfc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060dc:	d107      	bne.n	80060ee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80060de:	bf00      	nop
 80060e0:	4b20      	ldr	r3, [pc, #128]	@ (8006164 <HW_TS_Stop+0xf0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f8      	bne.n	80060e0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80060ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006164 <HW_TS_Stop+0xf0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	4b1b      	ldr	r3, [pc, #108]	@ (8006164 <HW_TS_Stop+0xf0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80060fe:	bf00      	nop
 8006100:	4b18      	ldr	r3, [pc, #96]	@ (8006164 <HW_TS_Stop+0xf0>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0f8      	beq.n	8006100 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800610e:	4b15      	ldr	r3, [pc, #84]	@ (8006164 <HW_TS_Stop+0xf0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	4b13      	ldr	r3, [pc, #76]	@ (8006164 <HW_TS_Stop+0xf0>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800611e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8006120:	4b14      	ldr	r3, [pc, #80]	@ (8006174 <HW_TS_Stop+0x100>)
 8006122:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006126:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8006128:	2003      	movs	r0, #3
 800612a:	f001 fe3c 	bl	8007da6 <HAL_NVIC_ClearPendingIRQ>
 800612e:	e007      	b.n	8006140 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8006130:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <HW_TS_Stop+0x104>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	7cfa      	ldrb	r2, [r7, #19]
 8006138:	429a      	cmp	r2, r3
 800613a:	d001      	beq.n	8006140 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800613c:	f7ff fd5e 	bl	8005bfc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8006140:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <HW_TS_Stop+0xf0>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ff      	movs	r2, #255	@ 0xff
 8006146:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8006148:	2003      	movs	r0, #3
 800614a:	f001 fdf6 	bl	8007d3a <HAL_NVIC_EnableIRQ>
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f383 8810 	msr	PRIMASK, r3
}
 8006158:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800615a:	bf00      	nop
}
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20000878 	.word	0x20000878
 8006168:	2000039c 	.word	0x2000039c
 800616c:	2000042c 	.word	0x2000042c
 8006170:	40002800 	.word	0x40002800
 8006174:	58000800 	.word	0x58000800
 8006178:	2000042d 	.word	0x2000042d

0800617c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8006188:	79fa      	ldrb	r2, [r7, #7]
 800618a:	493b      	ldr	r1, [pc, #236]	@ (8006278 <HW_TS_Start+0xfc>)
 800618c:	4613      	mov	r3, r2
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	4413      	add	r3, r2
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	440b      	add	r3, r1
 8006196:	330c      	adds	r3, #12
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d103      	bne.n	80061a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff ff66 	bl	8006074 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061a8:	f3ef 8310 	mrs	r3, PRIMASK
 80061ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80061ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061b2:	b672      	cpsid	i
}
 80061b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80061b6:	2003      	movs	r0, #3
 80061b8:	f001 fdcd 	bl	8007d56 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80061bc:	4b2f      	ldr	r3, [pc, #188]	@ (800627c <HW_TS_Start+0x100>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	22ca      	movs	r2, #202	@ 0xca
 80061c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80061c4:	4b2d      	ldr	r3, [pc, #180]	@ (800627c <HW_TS_Start+0x100>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2253      	movs	r2, #83	@ 0x53
 80061ca:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80061cc:	79fa      	ldrb	r2, [r7, #7]
 80061ce:	492a      	ldr	r1, [pc, #168]	@ (8006278 <HW_TS_Start+0xfc>)
 80061d0:	4613      	mov	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	440b      	add	r3, r1
 80061da:	330c      	adds	r3, #12
 80061dc:	2202      	movs	r2, #2
 80061de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80061e0:	79fa      	ldrb	r2, [r7, #7]
 80061e2:	4925      	ldr	r1, [pc, #148]	@ (8006278 <HW_TS_Start+0xfc>)
 80061e4:	4613      	mov	r3, r2
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	4413      	add	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	440b      	add	r3, r1
 80061ee:	3308      	adds	r3, #8
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80061f4:	79fa      	ldrb	r2, [r7, #7]
 80061f6:	4920      	ldr	r1, [pc, #128]	@ (8006278 <HW_TS_Start+0xfc>)
 80061f8:	4613      	mov	r3, r2
 80061fa:	005b      	lsls	r3, r3, #1
 80061fc:	4413      	add	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	440b      	add	r3, r1
 8006202:	3304      	adds	r3, #4
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8006208:	79fb      	ldrb	r3, [r7, #7]
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fb30 	bl	8005870 <linkTimer>
 8006210:	4603      	mov	r3, r0
 8006212:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8006214:	4b1a      	ldr	r3, [pc, #104]	@ (8006280 <HW_TS_Start+0x104>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800621a:	4b1a      	ldr	r3, [pc, #104]	@ (8006284 <HW_TS_Start+0x108>)
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	7c7a      	ldrb	r2, [r7, #17]
 8006222:	429a      	cmp	r2, r3
 8006224:	d002      	beq.n	800622c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8006226:	f7ff fce9 	bl	8005bfc <RescheduleTimerList>
 800622a:	e013      	b.n	8006254 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800622c:	79fa      	ldrb	r2, [r7, #7]
 800622e:	4912      	ldr	r1, [pc, #72]	@ (8006278 <HW_TS_Start+0xfc>)
 8006230:	4613      	mov	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	4413      	add	r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	440b      	add	r3, r1
 800623a:	3308      	adds	r3, #8
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	8a7b      	ldrh	r3, [r7, #18]
 8006240:	79fa      	ldrb	r2, [r7, #7]
 8006242:	1ac9      	subs	r1, r1, r3
 8006244:	480c      	ldr	r0, [pc, #48]	@ (8006278 <HW_TS_Start+0xfc>)
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	00db      	lsls	r3, r3, #3
 800624e:	4403      	add	r3, r0
 8006250:	3308      	adds	r3, #8
 8006252:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8006254:	4b09      	ldr	r3, [pc, #36]	@ (800627c <HW_TS_Start+0x100>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	22ff      	movs	r2, #255	@ 0xff
 800625a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800625c:	2003      	movs	r0, #3
 800625e:	f001 fd6c 	bl	8007d3a <HAL_NVIC_EnableIRQ>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	f383 8810 	msr	PRIMASK, r3
}
 800626c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800626e:	bf00      	nop
}
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	2000039c 	.word	0x2000039c
 800627c:	20000878 	.word	0x20000878
 8006280:	2000042c 	.word	0x2000042c
 8006284:	2000042d 	.word	0x2000042d

08006288 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	460b      	mov	r3, r1
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4798      	blx	r3

  return;
 800629a:	bf00      	nop
}
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <LL_AHB2_GRP1_EnableClock>:
{
 80062a2:	b480      	push	{r7}
 80062a4:	b085      	sub	sp, #20
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80062aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4013      	ands	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	bf00      	nop
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80062ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4013      	ands	r3, r2
 80062f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80062f8:	68fb      	ldr	r3, [r7, #12]
}
 80062fa:	bf00      	nop
 80062fc:	3714      	adds	r7, #20
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800630c:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <MX_I2C1_Init+0x74>)
 800630e:	4a1c      	ldr	r2, [pc, #112]	@ (8006380 <MX_I2C1_Init+0x78>)
 8006310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8006312:	4b1a      	ldr	r3, [pc, #104]	@ (800637c <MX_I2C1_Init+0x74>)
 8006314:	4a1b      	ldr	r2, [pc, #108]	@ (8006384 <MX_I2C1_Init+0x7c>)
 8006316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006318:	4b18      	ldr	r3, [pc, #96]	@ (800637c <MX_I2C1_Init+0x74>)
 800631a:	2200      	movs	r2, #0
 800631c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <MX_I2C1_Init+0x74>)
 8006320:	2201      	movs	r2, #1
 8006322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006324:	4b15      	ldr	r3, [pc, #84]	@ (800637c <MX_I2C1_Init+0x74>)
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800632a:	4b14      	ldr	r3, [pc, #80]	@ (800637c <MX_I2C1_Init+0x74>)
 800632c:	2200      	movs	r2, #0
 800632e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006330:	4b12      	ldr	r3, [pc, #72]	@ (800637c <MX_I2C1_Init+0x74>)
 8006332:	2200      	movs	r2, #0
 8006334:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006336:	4b11      	ldr	r3, [pc, #68]	@ (800637c <MX_I2C1_Init+0x74>)
 8006338:	2200      	movs	r2, #0
 800633a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800633c:	4b0f      	ldr	r3, [pc, #60]	@ (800637c <MX_I2C1_Init+0x74>)
 800633e:	2200      	movs	r2, #0
 8006340:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006342:	480e      	ldr	r0, [pc, #56]	@ (800637c <MX_I2C1_Init+0x74>)
 8006344:	f002 f9d6 	bl	80086f4 <HAL_I2C_Init>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800634e:	f000 fd01 	bl	8006d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006352:	2100      	movs	r1, #0
 8006354:	4809      	ldr	r0, [pc, #36]	@ (800637c <MX_I2C1_Init+0x74>)
 8006356:	f003 f9f3 	bl	8009740 <HAL_I2CEx_ConfigAnalogFilter>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006360:	f000 fcf8 	bl	8006d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006364:	2100      	movs	r1, #0
 8006366:	4805      	ldr	r0, [pc, #20]	@ (800637c <MX_I2C1_Init+0x74>)
 8006368:	f003 fa35 	bl	80097d6 <HAL_I2CEx_ConfigDigitalFilter>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d001      	beq.n	8006376 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006372:	f000 fcef 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	2000043c 	.word	0x2000043c
 8006380:	40005400 	.word	0x40005400
 8006384:	00b07cb4 	.word	0x00b07cb4

08006388 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b09c      	sub	sp, #112	@ 0x70
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006390:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	609a      	str	r2, [r3, #8]
 800639c:	60da      	str	r2, [r3, #12]
 800639e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063a0:	f107 030c 	add.w	r3, r7, #12
 80063a4:	2250      	movs	r2, #80	@ 0x50
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f014 fb0a 	bl	801a9c2 <memset>
  if(i2cHandle->Instance==I2C1)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a17      	ldr	r2, [pc, #92]	@ (8006410 <HAL_I2C_MspInit+0x88>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d126      	bne.n	8006406 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80063b8:	2304      	movs	r3, #4
 80063ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80063bc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80063c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063c2:	f107 030c 	add.w	r3, r7, #12
 80063c6:	4618      	mov	r0, r3
 80063c8:	f006 fb00 	bl	800c9cc <HAL_RCCEx_PeriphCLKConfig>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80063d2:	f000 fcbf 	bl	8006d54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d6:	2002      	movs	r0, #2
 80063d8:	f7ff ff63 	bl	80062a2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80063dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80063e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063e2:	2312      	movs	r3, #18
 80063e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063ea:	2300      	movs	r3, #0
 80063ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063ee:	2304      	movs	r3, #4
 80063f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80063f6:	4619      	mov	r1, r3
 80063f8:	4806      	ldr	r0, [pc, #24]	@ (8006414 <HAL_I2C_MspInit+0x8c>)
 80063fa:	f001 ffb7 	bl	800836c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006402:	f7ff ff67 	bl	80062d4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8006406:	bf00      	nop
 8006408:	3770      	adds	r7, #112	@ 0x70
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40005400 	.word	0x40005400
 8006414:	48000400 	.word	0x48000400

08006418 <LL_AHB3_GRP1_EnableClock>:
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006426:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4313      	orrs	r3, r2
 800642e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006434:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4013      	ands	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800643c:	68fb      	ldr	r3, [r7, #12]
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8006450:	4b06      	ldr	r3, [pc, #24]	@ (800646c <MX_IPCC_Init+0x20>)
 8006452:	4a07      	ldr	r2, [pc, #28]	@ (8006470 <MX_IPCC_Init+0x24>)
 8006454:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8006456:	4805      	ldr	r0, [pc, #20]	@ (800646c <MX_IPCC_Init+0x20>)
 8006458:	f003 fa0a 	bl	8009870 <HAL_IPCC_Init>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8006462:	f000 fc77 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000490 	.word	0x20000490
 8006470:	58000c00 	.word	0x58000c00

08006474 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a0d      	ldr	r2, [pc, #52]	@ (80064b8 <HAL_IPCC_MspInit+0x44>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d113      	bne.n	80064ae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8006486:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800648a:	f7ff ffc5 	bl	8006418 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800648e:	2200      	movs	r2, #0
 8006490:	2100      	movs	r1, #0
 8006492:	202c      	movs	r0, #44	@ 0x2c
 8006494:	f001 fc37 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006498:	202c      	movs	r0, #44	@ 0x2c
 800649a:	f001 fc4e 	bl	8007d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800649e:	2200      	movs	r2, #0
 80064a0:	2100      	movs	r1, #0
 80064a2:	202d      	movs	r0, #45	@ 0x2d
 80064a4:	f001 fc2f 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80064a8:	202d      	movs	r0, #45	@ 0x2d
 80064aa:	f001 fc46 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	58000c00 	.word	0x58000c00

080064bc <LL_RCC_LSE_SetDriveCapability>:
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80064c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064cc:	f023 0218 	bic.w	r2, r3, #24
 80064d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(const HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_RLR_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	3220      	adds	r2, #32
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	4a05      	ldr	r2, [pc, #20]	@ (8006514 <LL_HSEM_1StepLock+0x2c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d001      	beq.n	8006506 <LL_HSEM_1StepLock+0x1e>
 8006502:	2301      	movs	r3, #1
 8006504:	e000      	b.n	8006508 <LL_HSEM_1StepLock+0x20>
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	80000400 	.word	0x80000400

08006518 <_ZN13AccelerometerC1Ev>:
#include "main.h"

// #define STATUS_LED 0
#define ADXL343_ADDR (0x53 << 1) // Correct 8-bit address for grounded ALT_ADDRESS

class Accelerometer
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8006532:	609a      	str	r2, [r3, #8]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	220f      	movs	r2, #15
 8006538:	60da      	str	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	611a      	str	r2, [r3, #16]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2208      	movs	r2, #8
 8006544:	751a      	strb	r2, [r3, #20]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2232      	movs	r2, #50	@ 0x32
 800654a:	755a      	strb	r2, [r3, #21]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <_ZN13ThermocouplesC1Ev>:
#include "gpio.h"
#include "usart.h"
#include <stdio.h>
#include <string.h>

class Thermocouples
 800655a:	b580      	push	{r7, lr}
 800655c:	b082      	sub	sp, #8
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fd fd36 	bl	8003fd6 <_ZN17Adafruit_MAX31856C1Ev>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	330c      	adds	r3, #12
 800656e:	4618      	mov	r0, r3
 8006570:	f7fd fd31 	bl	8003fd6 <_ZN17Adafruit_MAX31856C1Ev>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	619a      	str	r2, [r3, #24]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <_ZN6ScreenC1Ev>:
#include "Switch.hpp"
#define BACKGROUND_COLOR 0xDCFF
#define TEXT_COLOR 0xA329
#define ACCENT_COLOR 0x6763

class Screen
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af04      	add	r7, sp, #16
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	2302      	movs	r3, #2
 8006590:	9303      	str	r3, [sp, #12]
 8006592:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006596:	9302      	str	r3, [sp, #8]
 8006598:	2304      	movs	r3, #4
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	2308      	movs	r3, #8
 80065a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80065a8:	49c4      	ldr	r1, [pc, #784]	@ (80068bc <_ZN6ScreenC1Ev+0x338>)
 80065aa:	f7fc fed9 	bl	8003360 <_ZN13ST7789V_STM32C1EP19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_tS3_t>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	665a      	str	r2, [r3, #100]	@ 0x64
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80065c0:	2301      	movs	r3, #1
 80065c2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80065c6:	21f0      	movs	r1, #240	@ 0xf0
 80065c8:	f7fc faac 	bl	8002b24 <_ZN11GFXcanvas16C1Ettb>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	22f0      	movs	r2, #240	@ 0xf0
 80065d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80065da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	1ad2      	subs	r2, r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2218      	movs	r2, #24
 800663a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2204      	movs	r2, #4
 800665a:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	22b0      	movs	r2, #176	@ 0xb0
 800666e:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800668a:	441a      	add	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800669e:	0fd9      	lsrs	r1, r3, #31
 80066a0:	440b      	add	r3, r1
 80066a2:	105b      	asrs	r3, r3, #1
 80066a4:	441a      	add	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2204      	movs	r2, #4
 80066b0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80066c0:	1ad2      	subs	r2, r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a7b      	ldr	r2, [pc, #492]	@ (80068c0 <_ZN6ScreenC1Ev+0x33c>)
 80066d4:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a79      	ldr	r2, [pc, #484]	@ (80068c0 <_ZN6ScreenC1Ev+0x33c>)
 80066dc:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a78      	ldr	r2, [pc, #480]	@ (80068c4 <_ZN6ScreenC1Ev+0x340>)
 80066e4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2240      	movs	r2, #64	@ 0x40
 80066f8:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006714:	441a      	add	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006734:	1ad2      	subs	r2, r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800673c:	1ad2      	subs	r2, r2, r3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2204      	movs	r2, #4
 8006770:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 8006780:	4619      	mov	r1, r3
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	1acb      	subs	r3, r1, r3
 8006786:	4413      	add	r3, r2
 8006788:	0fda      	lsrs	r2, r3, #31
 800678a:	4413      	add	r3, r2
 800678c:	105b      	asrs	r3, r3, #1
 800678e:	461a      	mov	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 2158 	ldr.w	r2, [r3, #344]	@ 0x158
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80067b8:	441a      	add	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80067cc:	441a      	add	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	441a      	add	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80067ea:	441a      	add	r2, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8c3 2198 	str.w	r2, [r3, #408]	@ 0x198
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 80067fe:	441a      	add	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8c3 219c 	str.w	r2, [r3, #412]	@ 0x19c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800681e:	441a      	add	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800683e:	441a      	add	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 800685e:	441a      	add	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8c3 21b4 	str.w	r2, [r3, #436]	@ 0x1b4
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800687e:	441a      	add	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	220a      	movs	r2, #10
 800688a:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2206      	movs	r2, #6
 8006892:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2205      	movs	r2, #5
 800689a:	f8c3 21c8 	str.w	r2, [r3, #456]	@ 0x1c8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a09      	ldr	r2, [pc, #36]	@ (80068c8 <_ZN6ScreenC1Ev+0x344>)
 80068a2:	f8c3 21cc 	str.w	r2, [r3, #460]	@ 0x1cc
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c3 21d0 	str.w	r2, [r3, #464]	@ 0x1d0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b4:	f8c3 21d4 	str.w	r2, [r3, #468]	@ 0x1d4
 80068b8:	e008      	b.n	80068cc <_ZN6ScreenC1Ev+0x348>
 80068ba:	bf00      	nop
 80068bc:	20000900 	.word	0x20000900
 80068c0:	43870000 	.word	0x43870000
 80068c4:	3a83126f 	.word	0x3a83126f
 80068c8:	40490fdb 	.word	0x40490fdb
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2208      	movs	r2, #8
 80068d0:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80068e0:	0fd9      	lsrs	r1, r3, #31
 80068e2:	440b      	add	r3, r1
 80068e4:	105b      	asrs	r3, r3, #1
 80068e6:	441a      	add	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80068fa:	441a      	add	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2264      	movs	r2, #100	@ 0x64
 8006906:	f8c3 21e8 	str.w	r2, [r3, #488]	@ 0x1e8
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <_ZN14BatteryMonitorC1Ev>:

#include "Adafruit_MAX1704X.h"
#include "i2c.h"
#include "usart.h"

class BatteryMonitor
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fa fb0c 	bl	8000f44 <_ZN23Adafruit_MAX17048_STM32C1Ev>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	220a      	movs	r2, #10
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <HAL_TIM_PeriodElapsedCallback>:
Screen myScreen;
BatteryMonitor myBatteryMonitor;
Switch mySwitch;
// main timer implementation
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]

  if (htim == &htim16)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a57      	ldr	r2, [pc, #348]	@ (8006aa4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006948:	4293      	cmp	r3, r2
 800694a:	f040 80a5 	bne.w	8006a98 <HAL_TIM_PeriodElapsedCallback+0x15c>
  {
    // if(init_finished) {
    //  increment / decrement 0.1ms timers here.

    timerCounter++;
 800694e:	4b56      	ldr	r3, [pc, #344]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3301      	adds	r3, #1
 8006954:	4a54      	ldr	r2, [pc, #336]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006956:	6013      	str	r3, [r2, #0]

    if ((timerCounter % 10) == 0)
 8006958:	4b53      	ldr	r3, [pc, #332]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800695a:	6819      	ldr	r1, [r3, #0]
 800695c:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <HAL_TIM_PeriodElapsedCallback+0x170>)
 800695e:	fb83 2301 	smull	r2, r3, r3, r1
 8006962:	109a      	asrs	r2, r3, #2
 8006964:	17cb      	asrs	r3, r1, #31
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	4613      	mov	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	1aca      	subs	r2, r1, r3
 8006972:	2a00      	cmp	r2, #0
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01b      	beq.n	80069b8 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {

      if (myScreen.renderDelay)
 8006980:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006984:	2b00      	cmp	r3, #0
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_TIM_PeriodElapsedCallback+0x60>
      {
        myScreen.renderDelay--;
 8006992:	4b47      	ldr	r3, [pc, #284]	@ (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006994:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006996:	3b01      	subs	r3, #1
 8006998:	4a45      	ldr	r2, [pc, #276]	@ (8006ab0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800699a:	6653      	str	r3, [r2, #100]	@ 0x64
      }

      if (myThermocouples.delay)
 800699c:	4b45      	ldr	r3, [pc, #276]	@ (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bf14      	ite	ne
 80069a4:	2301      	movne	r3, #1
 80069a6:	2300      	moveq	r3, #0
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <HAL_TIM_PeriodElapsedCallback+0x7c>
      {
        myThermocouples.delay--;
 80069ae:	4b41      	ldr	r3, [pc, #260]	@ (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80069b6:	6193      	str	r3, [r2, #24]
      }
      // increment / decrement 1 ms timers here.
    }

    if ((timerCounter % 100) == 0)
 80069b8:	4b3b      	ldr	r3, [pc, #236]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80069be:	fb83 1302 	smull	r1, r3, r3, r2
 80069c2:	1159      	asrs	r1, r3, #5
 80069c4:	17d3      	asrs	r3, r2, #31
 80069c6:	1acb      	subs	r3, r1, r3
 80069c8:	2164      	movs	r1, #100	@ 0x64
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bf0c      	ite	eq
 80069d4:	2301      	moveq	r3, #1
 80069d6:	2300      	movne	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00d      	beq.n	80069fa <HAL_TIM_PeriodElapsedCallback+0xbe>
      // if (thermocoupleDelay)
      //{
      //  thermocoupleDelay--;
      //}

      if (myAccelerometer.readDelay)
 80069de:	4b37      	ldr	r3, [pc, #220]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf14      	ite	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	2300      	moveq	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <HAL_TIM_PeriodElapsedCallback+0xbe>
      {
        myAccelerometer.readDelay--;
 80069f0:	4b32      	ldr	r3, [pc, #200]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	3b01      	subs	r3, #1
 80069f6:	4a31      	ldr	r2, [pc, #196]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 80069f8:	6053      	str	r3, [r2, #4]
      }
    }

    if ((timerCounter % 1000) == 0)
 80069fa:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b30      	ldr	r3, [pc, #192]	@ (8006ac0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8006a00:	fb83 1302 	smull	r1, r3, r3, r2
 8006a04:	1199      	asrs	r1, r3, #6
 8006a06:	17d3      	asrs	r3, r2, #31
 8006a08:	1acb      	subs	r3, r1, r3
 8006a0a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	2b00      	cmp	r3, #0
      //{
      //  helloWorldDelay--;
      //}
    }

    if ((timerCounter % 10000) == 0)
 8006a16:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ac4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8006a1c:	fb83 1302 	smull	r1, r3, r3, r2
 8006a20:	1319      	asrs	r1, r3, #12
 8006a22:	17d3      	asrs	r3, r2, #31
 8006a24:	1acb      	subs	r3, r1, r3
 8006a26:	f242 7110 	movw	r1, #10000	@ 0x2710
 8006a2a:	fb01 f303 	mul.w	r3, r1, r3
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02c      	beq.n	8006a98 <HAL_TIM_PeriodElapsedCallback+0x15c>
    {
      // increment / decrement 1000 ms timers here.  Note this resets the timer variable.
      timerCounter = 0;
 8006a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
      if (myAccelerometer.delay)
 8006a44:	4b1d      	ldr	r3, [pc, #116]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bf14      	ite	ne
 8006a4c:	2301      	movne	r3, #1
 8006a4e:	2300      	moveq	r3, #0
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_TIM_PeriodElapsedCallback+0x124>
      {
        myAccelerometer.delay--;
 8006a56:	4b19      	ldr	r3, [pc, #100]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	4a17      	ldr	r2, [pc, #92]	@ (8006abc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8006a5e:	6013      	str	r3, [r2, #0]
      }

      if (myBatteryMonitor.delay)
 8006a60:	4b19      	ldr	r3, [pc, #100]	@ (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf14      	ite	ne
 8006a68:	2301      	movne	r3, #1
 8006a6a:	2300      	moveq	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d004      	beq.n	8006a7c <HAL_TIM_PeriodElapsedCallback+0x140>
      {
        myBatteryMonitor.delay--;
 8006a72:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a13      	ldr	r2, [pc, #76]	@ (8006ac8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8006a7a:	60d3      	str	r3, [r2, #12]
      }

      if (mySwitch.delay)
 8006a7c:	4b13      	ldr	r3, [pc, #76]	@ (8006acc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	bf14      	ite	ne
 8006a84:	2301      	movne	r3, #1
 8006a86:	2300      	moveq	r3, #0
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <HAL_TIM_PeriodElapsedCallback+0x15c>
      {
        mySwitch.delay--;
 8006a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8006acc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3b01      	subs	r3, #1
 8006a94:	4a0d      	ldr	r2, [pc, #52]	@ (8006acc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8006a96:	6013      	str	r3, [r2, #0]
      }
    }
    //}
  }
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	20000a14 	.word	0x20000a14
 8006aa8:	2000050c 	.word	0x2000050c
 8006aac:	66666667 	.word	0x66666667
 8006ab0:	200005b8 	.word	0x200005b8
 8006ab4:	2000056c 	.word	0x2000056c
 8006ab8:	51eb851f 	.word	0x51eb851f
 8006abc:	20000510 	.word	0x20000510
 8006ac0:	10624dd3 	.word	0x10624dd3
 8006ac4:	68db8bad 	.word	0x68db8bad
 8006ac8:	20000844 	.word	0x20000844
 8006acc:	20000854 	.word	0x20000854

08006ad0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  if (hspi == myScreen.tft._hspi)
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <HAL_SPI_TxCpltCallback+0x20>)
 8006ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_TxCpltCallback+0x18>
  { // Make sure it's the right SPI instance
    myScreen.tft.dmaTransferCompleteCallback();
 8006ae2:	4803      	ldr	r0, [pc, #12]	@ (8006af0 <HAL_SPI_TxCpltCallback+0x20>)
 8006ae4:	f7fd f9ff 	bl	8003ee6 <_ZN13ST7789V_STM3227dmaTransferCompleteCallbackEv>
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	200005b8 	.word	0x200005b8

08006af4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006af8:	f000 ff38 	bl	800796c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8006afc:	f7fe fb9c 	bl	8005238 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006b00:	f000 f87c 	bl	8006bfc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006b04:	f000 f8fa 	bl	8006cfc <_Z24PeriphCommonClock_Configv>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8006b08:	f7ff fca0 	bl	800644c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006b0c:	f7fe fd6a 	bl	80055e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8006b10:	f7fe fd3c 	bl	800558c <MX_DMA_Init>
  MX_RTC_Init();
 8006b14:	f000 f990 	bl	8006e38 <MX_RTC_Init>
  MX_I2C1_Init();
 8006b18:	f7ff fbf6 	bl	8006308 <MX_I2C1_Init>
  MX_SPI1_Init();
 8006b1c:	f000 fa40 	bl	8006fa0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8006b20:	f000 fa7c 	bl	800701c <MX_SPI2_Init>
  MX_TIM2_Init();
 8006b24:	f000 fd4e 	bl	80075c4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006b28:	f000 fe54 	bl	80077d4 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8006b2c:	f000 fda4 	bl	8007678 <MX_TIM16_Init>
  MX_RF_Init();
 8006b30:	f000 f950 	bl	8006dd4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  // MX_APPE_Init();

  HAL_Delay(500);
 8006b34:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b38:	f7fe fcb9 	bl	80054ae <HAL_Delay>
  MX_USB_Device_Init();
 8006b3c:	f011 fc42 	bl	80183c4 <MX_USB_Device_Init>
  HAL_Delay(500);
 8006b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8006b44:	f7fe fcb3 	bl	80054ae <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim16);
 8006b48:	4822      	ldr	r0, [pc, #136]	@ (8006bd4 <main+0xe0>)
 8006b4a:	f007 fc33 	bl	800e3b4 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2100      	movs	r1, #0
 8006b52:	2019      	movs	r0, #25
 8006b54:	f001 f8d7 	bl	8007d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006b58:	2019      	movs	r0, #25
 8006b5a:	f001 f8ee 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006b5e:	f7fe fb79 	bl	8005254 <MX_APPE_Init>

  myAccelerometer.setup();
 8006b62:	481d      	ldr	r0, [pc, #116]	@ (8006bd8 <main+0xe4>)
 8006b64:	f7fd fcac 	bl	80044c0 <_ZN13Accelerometer5setupEv>
  myBacklight.setup();
 8006b68:	481c      	ldr	r0, [pc, #112]	@ (8006bdc <main+0xe8>)
 8006b6a:	f7fd fdbd 	bl	80046e8 <_ZN9Backlight5setupEv>
  myThermocouples.setup();
 8006b6e:	481c      	ldr	r0, [pc, #112]	@ (8006be0 <main+0xec>)
 8006b70:	f7fd ffba 	bl	8004ae8 <_ZN13Thermocouples5setupEv>
  myBatteryMonitor.setup();
 8006b74:	481b      	ldr	r0, [pc, #108]	@ (8006be4 <main+0xf0>)
 8006b76:	f7fd fe6b 	bl	8004850 <_ZN14BatteryMonitor5setupEv>
  myScreen.setup();
 8006b7a:	481b      	ldr	r0, [pc, #108]	@ (8006be8 <main+0xf4>)
 8006b7c:	f011 f9a6 	bl	8017ecc <_ZN6Screen5setupEv>
  mySwitch.setup();
 8006b80:	481a      	ldr	r0, [pc, #104]	@ (8006bec <main+0xf8>)
 8006b82:	f7fd ff2b 	bl	80049dc <_ZN6Switch5setupEv>

  snprintf((char *)UART_BUFFER, 64, "Setup finished\r\n");
 8006b86:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf0 <main+0xfc>)
 8006b88:	2140      	movs	r1, #64	@ 0x40
 8006b8a:	481a      	ldr	r0, [pc, #104]	@ (8006bf4 <main+0x100>)
 8006b8c:	f013 fe86 	bl	801a89c <sniprintf>
  HAL_UART_Transmit(&huart1, UART_BUFFER, strlen((char *)UART_BUFFER), 300);
 8006b90:	4818      	ldr	r0, [pc, #96]	@ (8006bf4 <main+0x100>)
 8006b92:	f7f9 fb55 	bl	8000240 <strlen>
 8006b96:	4603      	mov	r3, r0
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8006b9e:	4915      	ldr	r1, [pc, #84]	@ (8006bf4 <main+0x100>)
 8006ba0:	4815      	ldr	r0, [pc, #84]	@ (8006bf8 <main+0x104>)
 8006ba2:	f008 fbd7 	bl	800f354 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8006ba6:	f7fe fca7 	bl	80054f8 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    myAccelerometer.stateMachine();
 8006baa:	480b      	ldr	r0, [pc, #44]	@ (8006bd8 <main+0xe4>)
 8006bac:	f7fd fc9c 	bl	80044e8 <_ZN13Accelerometer12stateMachineEv>
    myBacklight.stateMachine();
 8006bb0:	480a      	ldr	r0, [pc, #40]	@ (8006bdc <main+0xe8>)
 8006bb2:	f7fd fdb3 	bl	800471c <_ZN9Backlight12stateMachineEv>
    myThermocouples.stateMachine();
 8006bb6:	480a      	ldr	r0, [pc, #40]	@ (8006be0 <main+0xec>)
 8006bb8:	f7fe f826 	bl	8004c08 <_ZN13Thermocouples12stateMachineEv>
    myBatteryMonitor.stateMachine();
 8006bbc:	4809      	ldr	r0, [pc, #36]	@ (8006be4 <main+0xf0>)
 8006bbe:	f7fd fe7d 	bl	80048bc <_ZN14BatteryMonitor12stateMachineEv>
    myScreen.stateMachine();
 8006bc2:	4809      	ldr	r0, [pc, #36]	@ (8006be8 <main+0xf4>)
 8006bc4:	f011 f9ea 	bl	8017f9c <_ZN6Screen12stateMachineEv>
    mySwitch.stateMachine();
 8006bc8:	4808      	ldr	r0, [pc, #32]	@ (8006bec <main+0xf8>)
 8006bca:	f7fd ff15 	bl	80049f8 <_ZN6Switch12stateMachineEv>
    MX_APPE_Process();
 8006bce:	bf00      	nop
 8006bd0:	e7e9      	b.n	8006ba6 <main+0xb2>
 8006bd2:	bf00      	nop
 8006bd4:	20000a14 	.word	0x20000a14
 8006bd8:	20000510 	.word	0x20000510
 8006bdc:	20000008 	.word	0x20000008
 8006be0:	2000056c 	.word	0x2000056c
 8006be4:	20000844 	.word	0x20000844
 8006be8:	200005b8 	.word	0x200005b8
 8006bec:	20000854 	.word	0x20000854
 8006bf0:	0801cb9c 	.word	0x0801cb9c
 8006bf4:	200004cc 	.word	0x200004cc
 8006bf8:	20000a60 	.word	0x20000a60

08006bfc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b09a      	sub	sp, #104	@ 0x68
 8006c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c02:	f107 0320 	add.w	r3, r7, #32
 8006c06:	2248      	movs	r2, #72	@ 0x48
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f013 fed9 	bl	801a9c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c10:	1d3b      	adds	r3, r7, #4
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	611a      	str	r2, [r3, #16]
 8006c1e:	615a      	str	r2, [r3, #20]
 8006c20:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
   */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8006c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c30:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
   */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8006c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f023 0303 	bic.w	r3, r3, #3
 8006c3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 8006c46:	f004 fb5d 	bl	800b304 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8006c4a:	2010      	movs	r0, #16
 8006c4c:	f7ff fc36 	bl	80064bc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c50:	4b29      	ldr	r3, [pc, #164]	@ (8006cf8 <SystemClock_Config+0xfc>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c58:	4a27      	ldr	r2, [pc, #156]	@ (8006cf8 <SystemClock_Config+0xfc>)
 8006c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	4b25      	ldr	r3, [pc, #148]	@ (8006cf8 <SystemClock_Config+0xfc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8006c6c:	2327      	movs	r3, #39	@ 0x27
 8006c6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006c70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006c74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8006c76:	2301      	movs	r3, #1
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006c80:	2301      	movs	r3, #1
 8006c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c84:	2340      	movs	r3, #64	@ 0x40
 8006c86:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006c8c:	2360      	movs	r3, #96	@ 0x60
 8006c8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c94:	f107 0320 	add.w	r3, r7, #32
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f004 fed7 	bl	800ba4c <HAL_RCC_OscConfig>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bf14      	ite	ne
 8006ca4:	2301      	movne	r3, #1
 8006ca6:	2300      	moveq	r3, #0
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8006cae:	f000 f851 	bl	8006d54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006cb2:	236f      	movs	r3, #111	@ 0x6f
 8006cb4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006cce:	1d3b      	adds	r3, r7, #4
 8006cd0:	2101      	movs	r1, #1
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f005 fa2e 	bl	800c134 <HAL_RCC_ClockConfig>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8006ce8:	f000 f834 	bl	8006d54 <Error_Handler>
  }

  /** Enable MSI Auto calibration
   */
  HAL_RCCEx_EnableMSIPLLMode();
 8006cec:	f005 ffe4 	bl	800ccb8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8006cf0:	bf00      	nop
 8006cf2:	3768      	adds	r7, #104	@ 0x68
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	58000400 	.word	0x58000400

08006cfc <_Z24PeriphCommonClock_Configv>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b094      	sub	sp, #80	@ 0x50
 8006d00:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d02:	463b      	mov	r3, r7
 8006d04:	2250      	movs	r2, #80	@ 0x50
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f013 fe5a 	bl	801a9c2 <memset>

  /** Initializes the peripherals clock
   */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS | RCC_PERIPHCLK_RFWAKEUP;
 8006d0e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006d12:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8006d14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006d18:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8006d1e:	2310      	movs	r3, #16
 8006d20:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d22:	463b      	mov	r3, r7
 8006d24:	4618      	mov	r0, r3
 8006d26:	f005 fe51 	bl	800c9cc <HAL_RCCEx_PeriphCLKConfig>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bf14      	ite	ne
 8006d30:	2301      	movne	r3, #1
 8006d32:	2300      	moveq	r3, #0
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <_Z24PeriphCommonClock_Configv+0x42>
  {
    Error_Handler();
 8006d3a:	f000 f80b 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock(HSEM, 5);
 8006d3e:	2105      	movs	r1, #5
 8006d40:	4803      	ldr	r0, [pc, #12]	@ (8006d50 <_Z24PeriphCommonClock_Configv+0x54>)
 8006d42:	f7ff fbd1 	bl	80064e8 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8006d46:	bf00      	nop
 8006d48:	3750      	adds	r7, #80	@ 0x50
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	58001400 	.word	0x58001400

08006d54 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006d58:	b672      	cpsid	i
}
 8006d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <Error_Handler+0x8>

08006d60 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
Accelerometer myAccelerometer;
 8006d64:	4806      	ldr	r0, [pc, #24]	@ (8006d80 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8006d66:	f7ff fbd7 	bl	8006518 <_ZN13AccelerometerC1Ev>
Thermocouples myThermocouples;
 8006d6a:	4806      	ldr	r0, [pc, #24]	@ (8006d84 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8006d6c:	f7ff fbf5 	bl	800655a <_ZN13ThermocouplesC1Ev>
Screen myScreen;
 8006d70:	4805      	ldr	r0, [pc, #20]	@ (8006d88 <_Z41__static_initialization_and_destruction_0v+0x28>)
 8006d72:	f7ff fc07 	bl	8006584 <_ZN6ScreenC1Ev>
BatteryMonitor myBatteryMonitor;
 8006d76:	4805      	ldr	r0, [pc, #20]	@ (8006d8c <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8006d78:	f7ff fdd0 	bl	800691c <_ZN14BatteryMonitorC1Ev>
}
 8006d7c:	bf00      	nop
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000510 	.word	0x20000510
 8006d84:	2000056c 	.word	0x2000056c
 8006d88:	200005b8 	.word	0x200005b8
 8006d8c:	20000844 	.word	0x20000844

08006d90 <_ZN6ScreenD1Ev>:
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	336c      	adds	r3, #108	@ 0x6c
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fb ff09 	bl	8002bb4 <_ZN11GFXcanvas16D1Ev>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <_Z41__static_initialization_and_destruction_1v>:
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
Screen myScreen;
 8006db0:	4802      	ldr	r0, [pc, #8]	@ (8006dbc <_Z41__static_initialization_and_destruction_1v+0x10>)
 8006db2:	f7ff ffed 	bl	8006d90 <_ZN6ScreenD1Ev>
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200005b8 	.word	0x200005b8

08006dc0 <_GLOBAL__sub_I_UART_BUFFER>:
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	f7ff ffcc 	bl	8006d60 <_Z41__static_initialization_and_destruction_0v>
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <_GLOBAL__sub_D_UART_BUFFER>:
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	f7ff ffed 	bl	8006dac <_Z41__static_initialization_and_destruction_1v>
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006de2:	b480      	push	{r7}
 8006de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006dfa:	bf00      	nop
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <LL_APB1_GRP1_EnableClock>:
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4013      	ands	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e28:	68fb      	ldr	r3, [r7, #12]
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006e3c:	4b16      	ldr	r3, [pc, #88]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e3e:	4a17      	ldr	r2, [pc, #92]	@ (8006e9c <MX_RTC_Init+0x64>)
 8006e40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006e48:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e4a:	220f      	movs	r2, #15
 8006e4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e50:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006e54:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006e56:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006e62:	4b0d      	ldr	r3, [pc, #52]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006e68:	4b0b      	ldr	r3, [pc, #44]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006e6e:	480a      	ldr	r0, [pc, #40]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e70:	f006 f839 	bl	800cee6 <HAL_RTC_Init>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006e7a:	f7ff ff6b 	bl	8006d54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2100      	movs	r1, #0
 8006e82:	4805      	ldr	r0, [pc, #20]	@ (8006e98 <MX_RTC_Init+0x60>)
 8006e84:	f006 f93e 	bl	800d104 <HAL_RTCEx_SetWakeUpTimer_IT>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8006e8e:	f7ff ff61 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20000878 	.word	0x20000878
 8006e9c:	40002800 	.word	0x40002800

08006ea0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b096      	sub	sp, #88	@ 0x58
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	2250      	movs	r2, #80	@ 0x50
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f013 fd86 	bl	801a9c2 <memset>
  if(rtcHandle->Instance==RTC)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a12      	ldr	r2, [pc, #72]	@ (8006f04 <HAL_RTC_MspInit+0x64>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d11d      	bne.n	8006efc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006ec4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006eca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f005 fd7b 	bl	800c9cc <HAL_RCCEx_PeriphCLKConfig>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8006edc:	f7ff ff3a 	bl	8006d54 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006ee0:	f7ff ff7f 	bl	8006de2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006ee4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8006ee8:	f7ff ff8c 	bl	8006e04 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8006eec:	2200      	movs	r2, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	2003      	movs	r0, #3
 8006ef2:	f000 ff08 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8006ef6:	2003      	movs	r0, #3
 8006ef8:	f000 ff1f 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006efc:	bf00      	nop
 8006efe:	3758      	adds	r7, #88	@ 0x58
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40002800 	.word	0x40002800

08006f08 <LL_AHB2_GRP1_EnableClock>:
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4013      	ands	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
}
 8006f2e:	bf00      	nop
 8006f30:	3714      	adds	r7, #20
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <LL_APB1_GRP1_EnableClock>:
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f56:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f78:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f90:	68fb      	ldr	r3, [r7, #12]
}
 8006f92:	bf00      	nop
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8007018 <MX_SPI1_Init+0x78>)
 8006fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006faa:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006fb2:	4b18      	ldr	r3, [pc, #96]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006fb8:	4b16      	ldr	r3, [pc, #88]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fba:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006fbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006fc0:	4b14      	ldr	r3, [pc, #80]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006fc6:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006fcc:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8006fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fd6:	2238      	movs	r2, #56	@ 0x38
 8006fd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006fda:	4b0e      	ldr	r3, [pc, #56]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006fec:	4b09      	ldr	r3, [pc, #36]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006fee:	2207      	movs	r2, #7
 8006ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006ff2:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006ff8:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <MX_SPI1_Init+0x74>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006ffe:	4805      	ldr	r0, [pc, #20]	@ (8007014 <MX_SPI1_Init+0x74>)
 8007000:	f006 f94c 	bl	800d29c <HAL_SPI_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800700a:	f7ff fea3 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800700e:	bf00      	nop
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	2000089c 	.word	0x2000089c
 8007018:	40013000 	.word	0x40013000

0800701c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007020:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <MX_SPI2_Init+0x78>)
 8007024:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007026:	4b1a      	ldr	r3, [pc, #104]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007028:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800702c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800702e:	4b18      	ldr	r3, [pc, #96]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007030:	2200      	movs	r2, #0
 8007032:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007034:	4b16      	ldr	r3, [pc, #88]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007036:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800703a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800703c:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <MX_SPI2_Init+0x74>)
 800703e:	2200      	movs	r2, #0
 8007040:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007044:	2200      	movs	r2, #0
 8007046:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007048:	4b11      	ldr	r3, [pc, #68]	@ (8007090 <MX_SPI2_Init+0x74>)
 800704a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800704e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007050:	4b0f      	ldr	r3, [pc, #60]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007052:	2200      	movs	r2, #0
 8007054:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007056:	4b0e      	ldr	r3, [pc, #56]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007058:	2200      	movs	r2, #0
 800705a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800705c:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <MX_SPI2_Init+0x74>)
 800705e:	2200      	movs	r2, #0
 8007060:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007062:	4b0b      	ldr	r3, [pc, #44]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007064:	2200      	movs	r2, #0
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8007068:	4b09      	ldr	r3, [pc, #36]	@ (8007090 <MX_SPI2_Init+0x74>)
 800706a:	2207      	movs	r2, #7
 800706c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800706e:	4b08      	ldr	r3, [pc, #32]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007074:	4b06      	ldr	r3, [pc, #24]	@ (8007090 <MX_SPI2_Init+0x74>)
 8007076:	2208      	movs	r2, #8
 8007078:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800707a:	4805      	ldr	r0, [pc, #20]	@ (8007090 <MX_SPI2_Init+0x74>)
 800707c:	f006 f90e 	bl	800d29c <HAL_SPI_Init>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8007086:	f7ff fe65 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800708a:	bf00      	nop
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000900 	.word	0x20000900
 8007094:	40003800 	.word	0x40003800

08007098 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a0:	f107 030c 	add.w	r3, r7, #12
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a3b      	ldr	r2, [pc, #236]	@ (80071a4 <HAL_SPI_MspInit+0x10c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d120      	bne.n	80070fc <HAL_SPI_MspInit+0x64>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80070ba:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80070be:	f7ff ff55 	bl	8006f6c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7ff ff20 	bl	8006f08 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80070c8:	23e0      	movs	r3, #224	@ 0xe0
 80070ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070cc:	2302      	movs	r3, #2
 80070ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070d4:	2300      	movs	r3, #0
 80070d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80070d8:	2305      	movs	r3, #5
 80070da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070dc:	f107 030c 	add.w	r3, r7, #12
 80070e0:	4619      	mov	r1, r3
 80070e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070e6:	f001 f941 	bl	800836c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	2022      	movs	r0, #34	@ 0x22
 80070f0:	f000 fe09 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80070f4:	2022      	movs	r0, #34	@ 0x22
 80070f6:	f000 fe20 	bl	8007d3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80070fa:	e04e      	b.n	800719a <HAL_SPI_MspInit+0x102>
  else if(spiHandle->Instance==SPI2)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a29      	ldr	r2, [pc, #164]	@ (80071a8 <HAL_SPI_MspInit+0x110>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d149      	bne.n	800719a <HAL_SPI_MspInit+0x102>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007106:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800710a:	f7ff ff16 	bl	8006f3a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800710e:	2002      	movs	r0, #2
 8007110:	f7ff fefa 	bl	8006f08 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007114:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8007118:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711a:	2302      	movs	r3, #2
 800711c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007122:	2300      	movs	r3, #0
 8007124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007126:	2305      	movs	r3, #5
 8007128:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800712a:	f107 030c 	add.w	r3, r7, #12
 800712e:	4619      	mov	r1, r3
 8007130:	481e      	ldr	r0, [pc, #120]	@ (80071ac <HAL_SPI_MspInit+0x114>)
 8007132:	f001 f91b 	bl	800836c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8007136:	4b1e      	ldr	r3, [pc, #120]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007138:	4a1e      	ldr	r2, [pc, #120]	@ (80071b4 <HAL_SPI_MspInit+0x11c>)
 800713a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 800713c:	4b1c      	ldr	r3, [pc, #112]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 800713e:	2209      	movs	r2, #9
 8007140:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007142:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007144:	2210      	movs	r2, #16
 8007146:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007148:	4b19      	ldr	r3, [pc, #100]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 800714a:	2200      	movs	r2, #0
 800714c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800714e:	4b18      	ldr	r3, [pc, #96]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007150:	2280      	movs	r2, #128	@ 0x80
 8007152:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007154:	4b16      	ldr	r3, [pc, #88]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007156:	2200      	movs	r2, #0
 8007158:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800715a:	4b15      	ldr	r3, [pc, #84]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 800715c:	2200      	movs	r2, #0
 800715e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8007160:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007162:	2200      	movs	r2, #0
 8007164:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007166:	4b12      	ldr	r3, [pc, #72]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007168:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800716c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800716e:	4810      	ldr	r0, [pc, #64]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007170:	f000 fe28 	bl	8007dc4 <HAL_DMA_Init>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_SPI_MspInit+0xe6>
      Error_Handler();
 800717a:	f7ff fdeb 	bl	8006d54 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a0b      	ldr	r2, [pc, #44]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007182:	655a      	str	r2, [r3, #84]	@ 0x54
 8007184:	4a0a      	ldr	r2, [pc, #40]	@ (80071b0 <HAL_SPI_MspInit+0x118>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	2023      	movs	r0, #35	@ 0x23
 8007190:	f000 fdb9 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007194:	2023      	movs	r0, #35	@ 0x23
 8007196:	f000 fdd0 	bl	8007d3a <HAL_NVIC_EnableIRQ>
}
 800719a:	bf00      	nop
 800719c:	3720      	adds	r7, #32
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40013000 	.word	0x40013000
 80071a8:	40003800 	.word	0x40003800
 80071ac:	48000400 	.word	0x48000400
 80071b0:	20000964 	.word	0x20000964
 80071b4:	40020008 	.word	0x40020008

080071b8 <LL_AHB3_GRP1_EnableClock>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4013      	ands	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80071dc:	68fb      	ldr	r3, [r7, #12]
}
 80071de:	bf00      	nop
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80071ee:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80071f2:	f7ff ffe1 	bl	80071b8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80071f6:	2200      	movs	r2, #0
 80071f8:	2100      	movs	r1, #0
 80071fa:	202e      	movs	r0, #46	@ 0x2e
 80071fc:	f000 fd83 	bl	8007d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8007200:	202e      	movs	r0, #46	@ 0x2e
 8007202:	f000 fd9a 	bl	8007d3a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007206:	bf00      	nop
 8007208:	bd80      	pop	{r7, pc}

0800720a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800720a:	b480      	push	{r7}
 800720c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <NMI_Handler+0x4>

08007212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007212:	b480      	push	{r7}
 8007214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <HardFault_Handler+0x4>

0800721a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800721a:	b480      	push	{r7}
 800721c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800721e:	bf00      	nop
 8007220:	e7fd      	b.n	800721e <MemManage_Handler+0x4>

08007222 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007222:	b480      	push	{r7}
 8007224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <BusFault_Handler+0x4>

0800722a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800722a:	b480      	push	{r7}
 800722c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800722e:	bf00      	nop
 8007230:	e7fd      	b.n	800722e <UsageFault_Handler+0x4>

08007232 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007232:	b480      	push	{r7}
 8007234:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007236:	bf00      	nop
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007244:	bf00      	nop
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800724e:	b480      	push	{r7}
 8007250:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007260:	f000 fbde 	bl	8007a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007264:	bf00      	nop
 8007266:	bd80      	pop	{r7, pc}

08007268 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800726c:	f7fe fd60 	bl	8005d30 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8007270:	bf00      	nop
 8007272:	bd80      	pop	{r7, pc}

08007274 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8007278:	4802      	ldr	r0, [pc, #8]	@ (8007284 <DMA1_Channel1_IRQHandler+0x10>)
 800727a:	f000 ff25 	bl	80080c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800727e:	bf00      	nop
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	20000964 	.word	0x20000964

08007288 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800728c:	4802      	ldr	r0, [pc, #8]	@ (8007298 <USB_LP_IRQHandler+0x10>)
 800728e:	f002 fc87 	bl	8009ba0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8007292:	bf00      	nop
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	20001220 	.word	0x20001220

0800729c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80072a0:	4802      	ldr	r0, [pc, #8]	@ (80072ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80072a2:	f007 fa07 	bl	800e6b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80072a6:	bf00      	nop
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000a14 	.word	0x20000a14

080072b0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80072b4:	4802      	ldr	r0, [pc, #8]	@ (80072c0 <SPI1_IRQHandler+0x10>)
 80072b6:	f006 fd17 	bl	800dce8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	2000089c 	.word	0x2000089c

080072c4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80072c8:	4802      	ldr	r0, [pc, #8]	@ (80072d4 <SPI2_IRQHandler+0x10>)
 80072ca:	f006 fd0d 	bl	800dce8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80072ce:	bf00      	nop
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000900 	.word	0x20000900

080072d8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80072dc:	f00f fd62 	bl	8016da4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80072e0:	bf00      	nop
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80072e8:	f00f fd92 	bl	8016e10 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80072ec:	bf00      	nop
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80072f4:	f001 f9da 	bl	80086ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}

080072fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
  return 1;
 8007300:	2301      	movs	r3, #1
}
 8007302:	4618      	mov	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <_kill>:

int _kill(int pid, int sig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007316:	f013 fc09 	bl	801ab2c <__errno>
 800731a:	4603      	mov	r3, r0
 800731c:	2216      	movs	r2, #22
 800731e:	601a      	str	r2, [r3, #0]
  return -1;
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_exit>:

void _exit (int status)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007334:	f04f 31ff 	mov.w	r1, #4294967295
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ffe7 	bl	800730c <_kill>
  while (1) {}    /* Make sure we hang here */
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <_exit+0x12>

08007342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b086      	sub	sp, #24
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	e00a      	b.n	800736a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007354:	f3af 8000 	nop.w
 8007358:	4601      	mov	r1, r0
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	60ba      	str	r2, [r7, #8]
 8007360:	b2ca      	uxtb	r2, r1
 8007362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	3301      	adds	r3, #1
 8007368:	617b      	str	r3, [r7, #20]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	429a      	cmp	r2, r3
 8007370:	dbf0      	blt.n	8007354 <_read+0x12>
  }

  return len;
 8007372:	687b      	ldr	r3, [r7, #4]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e009      	b.n	80073a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	60ba      	str	r2, [r7, #8]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	3301      	adds	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	dbf1      	blt.n	800738e <_write+0x12>
  }
  return len;
 80073aa:	687b      	ldr	r3, [r7, #4]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <_close>:

int _close(int file)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80073dc:	605a      	str	r2, [r3, #4]
  return 0;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <_isatty>:

int _isatty(int file)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80073f4:	2301      	movs	r3, #1
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	60f8      	str	r0, [r7, #12]
 800740a:	60b9      	str	r1, [r7, #8]
 800740c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007424:	4a14      	ldr	r2, [pc, #80]	@ (8007478 <_sbrk+0x5c>)
 8007426:	4b15      	ldr	r3, [pc, #84]	@ (800747c <_sbrk+0x60>)
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007430:	4b13      	ldr	r3, [pc, #76]	@ (8007480 <_sbrk+0x64>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007438:	4b11      	ldr	r3, [pc, #68]	@ (8007480 <_sbrk+0x64>)
 800743a:	4a12      	ldr	r2, [pc, #72]	@ (8007484 <_sbrk+0x68>)
 800743c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800743e:	4b10      	ldr	r3, [pc, #64]	@ (8007480 <_sbrk+0x64>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	429a      	cmp	r2, r3
 800744a:	d207      	bcs.n	800745c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800744c:	f013 fb6e 	bl	801ab2c <__errno>
 8007450:	4603      	mov	r3, r0
 8007452:	220c      	movs	r2, #12
 8007454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007456:	f04f 33ff 	mov.w	r3, #4294967295
 800745a:	e009      	b.n	8007470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800745c:	4b08      	ldr	r3, [pc, #32]	@ (8007480 <_sbrk+0x64>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007462:	4b07      	ldr	r3, [pc, #28]	@ (8007480 <_sbrk+0x64>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	4a05      	ldr	r2, [pc, #20]	@ (8007480 <_sbrk+0x64>)
 800746c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800746e:	68fb      	ldr	r3, [r7, #12]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20030000 	.word	0x20030000
 800747c:	00001000 	.word	0x00001000
 8007480:	200009c4 	.word	0x200009c4
 8007484:	20001b10 	.word	0x20001b10

08007488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800748c:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <SystemInit+0x98>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007492:	4a23      	ldr	r2, [pc, #140]	@ (8007520 <SystemInit+0x98>)
 8007494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074a6:	f043 0301 	orr.w	r3, r3, #1
 80074aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80074ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80074b4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80074b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074c0:	4b18      	ldr	r3, [pc, #96]	@ (8007524 <SystemInit+0x9c>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80074c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074d2:	f023 0305 	bic.w	r3, r3, #5
 80074d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80074da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e6:	f023 0301 	bic.w	r3, r3, #1
 80074ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80074ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074f2:	4a0d      	ldr	r2, [pc, #52]	@ (8007528 <SystemInit+0xa0>)
 80074f4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007528 <SystemInit+0xa0>)
 80074fc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007508:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800750c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800750e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007512:	2200      	movs	r2, #0
 8007514:	619a      	str	r2, [r3, #24]
}
 8007516:	bf00      	nop
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	e000ed00 	.word	0xe000ed00
 8007524:	faf6fefb 	.word	0xfaf6fefb
 8007528:	22041000 	.word	0x22041000

0800752c <LL_AHB2_GRP1_EnableClock>:
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007538:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800753a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4313      	orrs	r3, r2
 8007542:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007548:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4013      	ands	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007550:	68fb      	ldr	r3, [r7, #12]
}
 8007552:	bf00      	nop
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <LL_APB1_GRP1_EnableClock>:
{
 800755e:	b480      	push	{r7}
 8007560:	b085      	sub	sp, #20
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8007566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800756a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800756c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4313      	orrs	r3, r2
 8007574:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8007576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4013      	ands	r3, r2
 8007580:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007582:	68fb      	ldr	r3, [r7, #12]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <LL_APB2_GRP1_EnableClock>:
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800759c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800759e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
	...

080075c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	@ 0x28
 80075c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075ca:	f107 031c 	add.w	r3, r7, #28
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80075d6:	463b      	mov	r3, r7
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	605a      	str	r2, [r3, #4]
 80075de:	609a      	str	r2, [r3, #8]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	611a      	str	r2, [r3, #16]
 80075e4:	615a      	str	r2, [r3, #20]
 80075e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80075e8:	4b22      	ldr	r3, [pc, #136]	@ (8007674 <MX_TIM2_Init+0xb0>)
 80075ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80075ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80075f0:	4b20      	ldr	r3, [pc, #128]	@ (8007674 <MX_TIM2_Init+0xb0>)
 80075f2:	221f      	movs	r2, #31
 80075f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	@ (8007674 <MX_TIM2_Init+0xb0>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80075fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007674 <MX_TIM2_Init+0xb0>)
 80075fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8007602:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007604:	4b1b      	ldr	r3, [pc, #108]	@ (8007674 <MX_TIM2_Init+0xb0>)
 8007606:	2200      	movs	r2, #0
 8007608:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800760a:	4b1a      	ldr	r3, [pc, #104]	@ (8007674 <MX_TIM2_Init+0xb0>)
 800760c:	2200      	movs	r2, #0
 800760e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8007610:	4818      	ldr	r0, [pc, #96]	@ (8007674 <MX_TIM2_Init+0xb0>)
 8007612:	f006 ff1d 	bl	800e450 <HAL_TIM_PWM_Init>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800761c:	f7ff fb9a 	bl	8006d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007620:	2300      	movs	r3, #0
 8007622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007624:	2300      	movs	r3, #0
 8007626:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007628:	f107 031c 	add.w	r3, r7, #28
 800762c:	4619      	mov	r1, r3
 800762e:	4811      	ldr	r0, [pc, #68]	@ (8007674 <MX_TIM2_Init+0xb0>)
 8007630:	f007 fd92 	bl	800f158 <HAL_TIMEx_MasterConfigSynchronization>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800763a:	f7ff fb8b 	bl	8006d54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800763e:	2360      	movs	r3, #96	@ 0x60
 8007640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800764e:	463b      	mov	r3, r7
 8007650:	2200      	movs	r2, #0
 8007652:	4619      	mov	r1, r3
 8007654:	4807      	ldr	r0, [pc, #28]	@ (8007674 <MX_TIM2_Init+0xb0>)
 8007656:	f007 f935 	bl	800e8c4 <HAL_TIM_PWM_ConfigChannel>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8007660:	f7ff fb78 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007664:	4803      	ldr	r0, [pc, #12]	@ (8007674 <MX_TIM2_Init+0xb0>)
 8007666:	f000 f859 	bl	800771c <HAL_TIM_MspPostInit>

}
 800766a:	bf00      	nop
 800766c:	3728      	adds	r7, #40	@ 0x28
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200009c8 	.word	0x200009c8

08007678 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800767c:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <MX_TIM16_Init+0x44>)
 800767e:	4a10      	ldr	r2, [pc, #64]	@ (80076c0 <MX_TIM16_Init+0x48>)
 8007680:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 8007682:	4b0e      	ldr	r3, [pc, #56]	@ (80076bc <MX_TIM16_Init+0x44>)
 8007684:	221f      	movs	r2, #31
 8007686:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007688:	4b0c      	ldr	r3, [pc, #48]	@ (80076bc <MX_TIM16_Init+0x44>)
 800768a:	2200      	movs	r2, #0
 800768c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800768e:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <MX_TIM16_Init+0x44>)
 8007690:	2263      	movs	r2, #99	@ 0x63
 8007692:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007694:	4b09      	ldr	r3, [pc, #36]	@ (80076bc <MX_TIM16_Init+0x44>)
 8007696:	2200      	movs	r2, #0
 8007698:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800769a:	4b08      	ldr	r3, [pc, #32]	@ (80076bc <MX_TIM16_Init+0x44>)
 800769c:	2200      	movs	r2, #0
 800769e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80076a0:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <MX_TIM16_Init+0x44>)
 80076a2:	2280      	movs	r2, #128	@ 0x80
 80076a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80076a6:	4805      	ldr	r0, [pc, #20]	@ (80076bc <MX_TIM16_Init+0x44>)
 80076a8:	f006 fe2c 	bl	800e304 <HAL_TIM_Base_Init>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80076b2:	f7ff fb4f 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80076b6:	bf00      	nop
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000a14 	.word	0x20000a14
 80076c0:	40014400 	.word	0x40014400

080076c4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076d4:	d102      	bne.n	80076dc <HAL_TIM_PWM_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076d6:	2001      	movs	r0, #1
 80076d8:	f7ff ff41 	bl	800755e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80076dc:	bf00      	nop
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <HAL_TIM_Base_MspInit+0x34>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10b      	bne.n	800770e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80076f6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80076fa:	f7ff ff49 	bl	8007590 <LL_APB2_GRP1_EnableClock>

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80076fe:	2200      	movs	r2, #0
 8007700:	2100      	movs	r1, #0
 8007702:	2019      	movs	r0, #25
 8007704:	f000 faff 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007708:	2019      	movs	r0, #25
 800770a:	f000 fb16 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800770e:	bf00      	nop
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40014400 	.word	0x40014400

0800771c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	609a      	str	r2, [r3, #8]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800773c:	d113      	bne.n	8007766 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773e:	2001      	movs	r0, #1
 8007740:	f7ff fef4 	bl	800752c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TFT_BACKLIGHT_Pin;
 8007744:	2301      	movs	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007748:	2302      	movs	r3, #2
 800774a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007754:	2301      	movs	r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TFT_BACKLIGHT_GPIO_Port, &GPIO_InitStruct);
 8007758:	f107 030c 	add.w	r3, r7, #12
 800775c:	4619      	mov	r1, r3
 800775e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007762:	f000 fe03 	bl	800836c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007766:	bf00      	nop
 8007768:	3720      	adds	r7, #32
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <LL_AHB2_GRP1_EnableClock>:
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800777c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4313      	orrs	r3, r2
 8007784:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800778a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4013      	ands	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007792:	68fb      	ldr	r3, [r7, #12]
}
 8007794:	bf00      	nop
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <LL_APB2_GRP1_EnableClock>:
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80077a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80077b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4013      	ands	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	bf00      	nop
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80077d8:	4b22      	ldr	r3, [pc, #136]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077da:	4a23      	ldr	r2, [pc, #140]	@ (8007868 <MX_USART1_UART_Init+0x94>)
 80077dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80077de:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80077e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077e6:	4b1f      	ldr	r3, [pc, #124]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80077ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80077f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80077f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 80077fa:	220c      	movs	r2, #12
 80077fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077fe:	4b19      	ldr	r3, [pc, #100]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007800:	2200      	movs	r2, #0
 8007802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007804:	4b17      	ldr	r3, [pc, #92]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007806:	2200      	movs	r2, #0
 8007808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800780a:	4b16      	ldr	r3, [pc, #88]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 800780c:	2200      	movs	r2, #0
 800780e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007810:	4b14      	ldr	r3, [pc, #80]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007812:	2200      	movs	r2, #0
 8007814:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007816:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007818:	2200      	movs	r2, #0
 800781a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800781c:	4811      	ldr	r0, [pc, #68]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 800781e:	f007 fd39 	bl	800f294 <HAL_UART_Init>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007828:	f7ff fa94 	bl	8006d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800782c:	2100      	movs	r1, #0
 800782e:	480d      	ldr	r0, [pc, #52]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007830:	f008 fb6a 	bl	800ff08 <HAL_UARTEx_SetTxFifoThreshold>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800783a:	f7ff fa8b 	bl	8006d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800783e:	2100      	movs	r1, #0
 8007840:	4808      	ldr	r0, [pc, #32]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007842:	f008 fb9f 	bl	800ff84 <HAL_UARTEx_SetRxFifoThreshold>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800784c:	f7ff fa82 	bl	8006d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007850:	4804      	ldr	r0, [pc, #16]	@ (8007864 <MX_USART1_UART_Init+0x90>)
 8007852:	f008 fb20 	bl	800fe96 <HAL_UARTEx_DisableFifoMode>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800785c:	f7ff fa7a 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000a60 	.word	0x20000a60
 8007868:	40013800 	.word	0x40013800

0800786c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b09c      	sub	sp, #112	@ 0x70
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007874:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	605a      	str	r2, [r3, #4]
 800787e:	609a      	str	r2, [r3, #8]
 8007880:	60da      	str	r2, [r3, #12]
 8007882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007884:	f107 030c 	add.w	r3, r7, #12
 8007888:	2250      	movs	r2, #80	@ 0x50
 800788a:	2100      	movs	r1, #0
 800788c:	4618      	mov	r0, r3
 800788e:	f013 f898 	bl	801a9c2 <memset>
  if(uartHandle->Instance==USART1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a16      	ldr	r2, [pc, #88]	@ (80078f0 <HAL_UART_MspInit+0x84>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d124      	bne.n	80078e6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800789c:	2301      	movs	r3, #1
 800789e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80078a0:	2300      	movs	r3, #0
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80078a4:	f107 030c 	add.w	r3, r7, #12
 80078a8:	4618      	mov	r0, r3
 80078aa:	f005 f88f 	bl	800c9cc <HAL_RCCEx_PeriphCLKConfig>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d001      	beq.n	80078b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80078b4:	f7ff fa4e 	bl	8006d54 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80078b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80078bc:	f7ff ff70 	bl	80077a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078c0:	2002      	movs	r0, #2
 80078c2:	f7ff ff54 	bl	800776e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078c6:	23c0      	movs	r3, #192	@ 0xc0
 80078c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ca:	2302      	movs	r3, #2
 80078cc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078d2:	2300      	movs	r3, #0
 80078d4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80078d6:	2307      	movs	r3, #7
 80078d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078da:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80078de:	4619      	mov	r1, r3
 80078e0:	4804      	ldr	r0, [pc, #16]	@ (80078f4 <HAL_UART_MspInit+0x88>)
 80078e2:	f000 fd43 	bl	800836c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80078e6:	bf00      	nop
 80078e8:	3770      	adds	r7, #112	@ 0x70
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40013800 	.word	0x40013800
 80078f4:	48000400 	.word	0x48000400

080078f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80078f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078fc:	3304      	adds	r3, #4

080078fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007900:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007902:	d3f9      	bcc.n	80078f8 <CopyDataInit>
  bx lr
 8007904:	4770      	bx	lr

08007906 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007906:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007908:	3004      	adds	r0, #4

0800790a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800790a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800790c:	d3fb      	bcc.n	8007906 <FillZerobss>
  bx lr
 800790e:	4770      	bx	lr

08007910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007910:	480c      	ldr	r0, [pc, #48]	@ (8007944 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007912:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007914:	f7ff fdb8 	bl	8007488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007918:	480b      	ldr	r0, [pc, #44]	@ (8007948 <LoopForever+0x6>)
 800791a:	490c      	ldr	r1, [pc, #48]	@ (800794c <LoopForever+0xa>)
 800791c:	4a0c      	ldr	r2, [pc, #48]	@ (8007950 <LoopForever+0xe>)
 800791e:	2300      	movs	r3, #0
 8007920:	f7ff ffed 	bl	80078fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007924:	480b      	ldr	r0, [pc, #44]	@ (8007954 <LoopForever+0x12>)
 8007926:	490c      	ldr	r1, [pc, #48]	@ (8007958 <LoopForever+0x16>)
 8007928:	4a0c      	ldr	r2, [pc, #48]	@ (800795c <LoopForever+0x1a>)
 800792a:	2300      	movs	r3, #0
 800792c:	f7ff ffe7 	bl	80078fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007930:	480b      	ldr	r0, [pc, #44]	@ (8007960 <LoopForever+0x1e>)
 8007932:	490c      	ldr	r1, [pc, #48]	@ (8007964 <LoopForever+0x22>)
 8007934:	2300      	movs	r3, #0
 8007936:	f7ff ffe8 	bl	800790a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800793a:	f013 f8fd 	bl	801ab38 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800793e:	f7ff f8d9 	bl	8006af4 <main>

08007942 <LoopForever>:

LoopForever:
  b LoopForever
 8007942:	e7fe      	b.n	8007942 <LoopForever>
  ldr   r0, =_estack
 8007944:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007948:	20000008 	.word	0x20000008
 800794c:	200002ec 	.word	0x200002ec
 8007950:	0801e444 	.word	0x0801e444
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007954:	200301e4 	.word	0x200301e4
 8007958:	20030a67 	.word	0x20030a67
 800795c:	0801e76e 	.word	0x0801e76e
  INIT_BSS _sbss, _ebss
 8007960:	20000338 	.word	0x20000338
 8007964:	20001b0c 	.word	0x20001b0c

08007968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007968:	e7fe      	b.n	8007968 <ADC1_IRQHandler>
	...

0800796c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007976:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <HAL_Init+0x3c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a0b      	ldr	r2, [pc, #44]	@ (80079a8 <HAL_Init+0x3c>)
 800797c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007980:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007982:	2003      	movs	r0, #3
 8007984:	f000 f9b4 	bl	8007cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007988:	200f      	movs	r0, #15
 800798a:	f000 f80f 	bl	80079ac <HAL_InitTick>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	71fb      	strb	r3, [r7, #7]
 8007998:	e001      	b.n	800799e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800799a:	f7ff fc26 	bl	80071ea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800799e:	79fb      	ldrb	r3, [r7, #7]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	58004000 	.word	0x58004000

080079ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80079b8:	4b17      	ldr	r3, [pc, #92]	@ (8007a18 <HAL_InitTick+0x6c>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d024      	beq.n	8007a0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80079c0:	f004 fd64 	bl	800c48c <HAL_RCC_GetHCLKFreq>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b14      	ldr	r3, [pc, #80]	@ (8007a18 <HAL_InitTick+0x6c>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	4619      	mov	r1, r3
 80079cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80079d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80079d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d8:	4618      	mov	r0, r3
 80079da:	f000 f9ca 	bl	8007d72 <HAL_SYSTICK_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10f      	bne.n	8007a04 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b0f      	cmp	r3, #15
 80079e8:	d809      	bhi.n	80079fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80079ea:	2200      	movs	r2, #0
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	f000 f988 	bl	8007d06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80079f6:	4a09      	ldr	r2, [pc, #36]	@ (8007a1c <HAL_InitTick+0x70>)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e007      	b.n	8007a0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	73fb      	strb	r3, [r7, #15]
 8007a02:	e004      	b.n	8007a0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
 8007a08:	e001      	b.n	8007a0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	2000002c 	.word	0x2000002c
 8007a1c:	20000028 	.word	0x20000028

08007a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007a24:	4b06      	ldr	r3, [pc, #24]	@ (8007a40 <HAL_IncTick+0x20>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <HAL_IncTick+0x24>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4413      	add	r3, r2
 8007a30:	4a04      	ldr	r2, [pc, #16]	@ (8007a44 <HAL_IncTick+0x24>)
 8007a32:	6013      	str	r3, [r2, #0]
}
 8007a34:	bf00      	nop
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	2000002c 	.word	0x2000002c
 8007a44:	20000b2c 	.word	0x20000b2c

08007a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8007a4c:	4b03      	ldr	r3, [pc, #12]	@ (8007a5c <HAL_GetTick+0x14>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	20000b2c 	.word	0x20000b2c

08007a60 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007a64:	4b03      	ldr	r3, [pc, #12]	@ (8007a74 <HAL_GetTickPrio+0x14>)
 8007a66:	681b      	ldr	r3, [r3, #0]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	20000028 	.word	0x20000028

08007a78 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	@ (8007a8c <HAL_GetTickFreq+0x14>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	2000002c 	.word	0x2000002c

08007a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007aac:	4013      	ands	r3, r2
 8007aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ab8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ac2:	4a04      	ldr	r2, [pc, #16]	@ (8007ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	60d3      	str	r3, [r2, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr
 8007ad4:	e000ed00 	.word	0xe000ed00

08007ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007adc:	4b04      	ldr	r3, [pc, #16]	@ (8007af0 <__NVIC_GetPriorityGrouping+0x18>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	0a1b      	lsrs	r3, r3, #8
 8007ae2:	f003 0307 	and.w	r3, r3, #7
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	4603      	mov	r3, r0
 8007afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	db0b      	blt.n	8007b1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f003 021f 	and.w	r2, r3, #31
 8007b0c:	4907      	ldr	r1, [pc, #28]	@ (8007b2c <__NVIC_EnableIRQ+0x38>)
 8007b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b12:	095b      	lsrs	r3, r3, #5
 8007b14:	2001      	movs	r0, #1
 8007b16:	fa00 f202 	lsl.w	r2, r0, r2
 8007b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	e000e100 	.word	0xe000e100

08007b30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	db12      	blt.n	8007b68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	f003 021f 	and.w	r2, r3, #31
 8007b48:	490a      	ldr	r1, [pc, #40]	@ (8007b74 <__NVIC_DisableIRQ+0x44>)
 8007b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4e:	095b      	lsrs	r3, r3, #5
 8007b50:	2001      	movs	r0, #1
 8007b52:	fa00 f202 	lsl.w	r2, r0, r2
 8007b56:	3320      	adds	r3, #32
 8007b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007b5c:	f3bf 8f4f 	dsb	sy
}
 8007b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007b62:	f3bf 8f6f 	isb	sy
}
 8007b66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	e000e100 	.word	0xe000e100

08007b78 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	db0c      	blt.n	8007ba4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f003 021f 	and.w	r2, r3, #31
 8007b90:	4907      	ldr	r1, [pc, #28]	@ (8007bb0 <__NVIC_SetPendingIRQ+0x38>)
 8007b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2001      	movs	r0, #1
 8007b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b9e:	3340      	adds	r3, #64	@ 0x40
 8007ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	e000e100 	.word	0xe000e100

08007bb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	db0c      	blt.n	8007be0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	f003 021f 	and.w	r2, r3, #31
 8007bcc:	4907      	ldr	r1, [pc, #28]	@ (8007bec <__NVIC_ClearPendingIRQ+0x38>)
 8007bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	2001      	movs	r0, #1
 8007bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8007bda:	3360      	adds	r3, #96	@ 0x60
 8007bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	e000e100 	.word	0xe000e100

08007bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	db0a      	blt.n	8007c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	490c      	ldr	r1, [pc, #48]	@ (8007c3c <__NVIC_SetPriority+0x4c>)
 8007c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c0e:	0112      	lsls	r2, r2, #4
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	440b      	add	r3, r1
 8007c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c18:	e00a      	b.n	8007c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	4908      	ldr	r1, [pc, #32]	@ (8007c40 <__NVIC_SetPriority+0x50>)
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	f003 030f 	and.w	r3, r3, #15
 8007c26:	3b04      	subs	r3, #4
 8007c28:	0112      	lsls	r2, r2, #4
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	761a      	strb	r2, [r3, #24]
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	e000e100 	.word	0xe000e100
 8007c40:	e000ed00 	.word	0xe000ed00

08007c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b089      	sub	sp, #36	@ 0x24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	60b9      	str	r1, [r7, #8]
 8007c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f003 0307 	and.w	r3, r3, #7
 8007c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f1c3 0307 	rsb	r3, r3, #7
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	bf28      	it	cs
 8007c62:	2304      	movcs	r3, #4
 8007c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	2b06      	cmp	r3, #6
 8007c6c:	d902      	bls.n	8007c74 <NVIC_EncodePriority+0x30>
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	3b03      	subs	r3, #3
 8007c72:	e000      	b.n	8007c76 <NVIC_EncodePriority+0x32>
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c78:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43da      	mvns	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	401a      	ands	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	fa01 f303 	lsl.w	r3, r1, r3
 8007c96:	43d9      	mvns	r1, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c9c:	4313      	orrs	r3, r2
         );
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3724      	adds	r7, #36	@ 0x24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
	...

08007cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cbc:	d301      	bcc.n	8007cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e00f      	b.n	8007ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cec <SysTick_Config+0x40>)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cca:	210f      	movs	r1, #15
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	f7ff ff8e 	bl	8007bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cd4:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <SysTick_Config+0x40>)
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cda:	4b04      	ldr	r3, [pc, #16]	@ (8007cec <SysTick_Config+0x40>)
 8007cdc:	2207      	movs	r2, #7
 8007cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	e000e010 	.word	0xe000e010

08007cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff fec9 	bl	8007a90 <__NVIC_SetPriorityGrouping>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b086      	sub	sp, #24
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d14:	f7ff fee0 	bl	8007ad8 <__NVIC_GetPriorityGrouping>
 8007d18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	6978      	ldr	r0, [r7, #20]
 8007d20:	f7ff ff90 	bl	8007c44 <NVIC_EncodePriority>
 8007d24:	4602      	mov	r2, r0
 8007d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff ff5f 	bl	8007bf0 <__NVIC_SetPriority>
}
 8007d32:	bf00      	nop
 8007d34:	3718      	adds	r7, #24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b082      	sub	sp, #8
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	4603      	mov	r3, r0
 8007d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fed3 	bl	8007af4 <__NVIC_EnableIRQ>
}
 8007d4e:	bf00      	nop
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff fee3 	bl	8007b30 <__NVIC_DisableIRQ>
}
 8007d6a:	bf00      	nop
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff ff96 	bl	8007cac <SysTick_Config>
 8007d80:	4603      	mov	r3, r0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	4603      	mov	r3, r0
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff feed 	bl	8007b78 <__NVIC_SetPendingIRQ>
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	4603      	mov	r3, r0
 8007dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff fefd 	bl	8007bb4 <__NVIC_ClearPendingIRQ>
}
 8007dba:	bf00      	nop
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
	...

08007dc4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d101      	bne.n	8007dd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e08e      	b.n	8007ef4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4b47      	ldr	r3, [pc, #284]	@ (8007efc <HAL_DMA_Init+0x138>)
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d80f      	bhi.n	8007e02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	4b45      	ldr	r3, [pc, #276]	@ (8007f00 <HAL_DMA_Init+0x13c>)
 8007dea:	4413      	add	r3, r2
 8007dec:	4a45      	ldr	r2, [pc, #276]	@ (8007f04 <HAL_DMA_Init+0x140>)
 8007dee:	fba2 2303 	umull	r2, r3, r2, r3
 8007df2:	091b      	lsrs	r3, r3, #4
 8007df4:	009a      	lsls	r2, r3, #2
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a42      	ldr	r2, [pc, #264]	@ (8007f08 <HAL_DMA_Init+0x144>)
 8007dfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e00:	e00e      	b.n	8007e20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	4b40      	ldr	r3, [pc, #256]	@ (8007f0c <HAL_DMA_Init+0x148>)
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f04 <HAL_DMA_Init+0x140>)
 8007e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e12:	091b      	lsrs	r3, r3, #4
 8007e14:	009a      	lsls	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f10 <HAL_DMA_Init+0x14c>)
 8007e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa16 	bl	80082a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e80:	d102      	bne.n	8007e88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e90:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007e94:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e9e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d010      	beq.n	8007eca <HAL_DMA_Init+0x106>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d80c      	bhi.n	8007eca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa35 	bl	8008320 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	e008      	b.n	8007edc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	40020407 	.word	0x40020407
 8007f00:	bffdfff8 	.word	0xbffdfff8
 8007f04:	cccccccd 	.word	0xcccccccd
 8007f08:	40020000 	.word	0x40020000
 8007f0c:	bffdfbf8 	.word	0xbffdfbf8
 8007f10:	40020400 	.word	0x40020400

08007f14 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
 8007f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f22:	2300      	movs	r3, #0
 8007f24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d101      	bne.n	8007f34 <HAL_DMA_Start_IT+0x20>
 8007f30:	2302      	movs	r3, #2
 8007f32:	e066      	b.n	8008002 <HAL_DMA_Start_IT+0xee>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d155      	bne.n	8007ff4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f000 f95a 	bl	8008226 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 020e 	orr.w	r2, r2, #14
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e00f      	b.n	8007fac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0204 	bic.w	r2, r2, #4
 8007f9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 020a 	orr.w	r2, r2, #10
 8007faa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fc8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007fe0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
 8007ff2:	e005      	b.n	8008000 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b084      	sub	sp, #16
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800801c:	b2db      	uxtb	r3, r3
 800801e:	2b02      	cmp	r3, #2
 8008020:	d005      	beq.n	800802e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2204      	movs	r2, #4
 8008026:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
 800802c:	e047      	b.n	80080be <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 020e 	bic.w	r2, r2, #14
 800803c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f022 0201 	bic.w	r2, r2, #1
 800804c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800805c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008062:	f003 021c 	and.w	r2, r3, #28
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806a:	2101      	movs	r1, #1
 800806c:	fa01 f202 	lsl.w	r2, r1, r2
 8008070:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800807a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00c      	beq.n	800809e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008092:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800809c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	4798      	blx	r3
    }
  }
  return status;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e4:	f003 031c 	and.w	r3, r3, #28
 80080e8:	2204      	movs	r2, #4
 80080ea:	409a      	lsls	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4013      	ands	r3, r2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d026      	beq.n	8008142 <HAL_DMA_IRQHandler+0x7a>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d021      	beq.n	8008142 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0204 	bic.w	r2, r2, #4
 800811a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008120:	f003 021c 	and.w	r2, r3, #28
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008128:	2104      	movs	r1, #4
 800812a:	fa01 f202 	lsl.w	r2, r1, r2
 800812e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d071      	beq.n	800821c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008140:	e06c      	b.n	800821c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008146:	f003 031c 	and.w	r3, r3, #28
 800814a:	2202      	movs	r2, #2
 800814c:	409a      	lsls	r2, r3
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d02e      	beq.n	80081b4 <HAL_DMA_IRQHandler+0xec>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d029      	beq.n	80081b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 020a 	bic.w	r2, r2, #10
 800817c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818a:	f003 021c 	and.w	r2, r3, #28
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008192:	2102      	movs	r1, #2
 8008194:	fa01 f202 	lsl.w	r2, r1, r2
 8008198:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d038      	beq.n	800821c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80081b2:	e033      	b.n	800821c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081b8:	f003 031c 	and.w	r3, r3, #28
 80081bc:	2208      	movs	r2, #8
 80081be:	409a      	lsls	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	4013      	ands	r3, r2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d02a      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f003 0308 	and.w	r3, r3, #8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d025      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f022 020e 	bic.w	r2, r2, #14
 80081e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e6:	f003 021c 	and.w	r2, r3, #28
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081ee:	2101      	movs	r1, #1
 80081f0:	fa01 f202 	lsl.w	r2, r1, r2
 80081f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800821c:	bf00      	nop
 800821e:	bf00      	nop
}
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800823c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800824e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008254:	f003 021c 	and.w	r2, r3, #28
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800825c:	2101      	movs	r1, #1
 800825e:	fa01 f202 	lsl.w	r2, r1, r2
 8008262:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b10      	cmp	r3, #16
 8008272:	d108      	bne.n	8008286 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008284:	e007      	b.n	8008296 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	60da      	str	r2, [r3, #12]
}
 8008296:	bf00      	nop
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
	...

080082a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4b17      	ldr	r3, [pc, #92]	@ (8008310 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d80a      	bhi.n	80082ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082bc:	089b      	lsrs	r3, r3, #2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80082c4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6493      	str	r3, [r2, #72]	@ 0x48
 80082cc:	e007      	b.n	80082de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d2:	089b      	lsrs	r3, r3, #2
 80082d4:	009a      	lsls	r2, r3, #2
 80082d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80082d8:	4413      	add	r3, r2
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	3b08      	subs	r3, #8
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80082e8:	fba2 2303 	umull	r2, r3, r2, r3
 80082ec:	091b      	lsrs	r3, r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0a      	ldr	r2, [pc, #40]	@ (800831c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80082f4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2201      	movs	r2, #1
 80082fe:	409a      	lsls	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008304:	bf00      	nop
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40020407 	.word	0x40020407
 8008314:	4002081c 	.word	0x4002081c
 8008318:	cccccccd 	.word	0xcccccccd
 800831c:	40020880 	.word	0x40020880

08008320 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008330:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4b0b      	ldr	r3, [pc, #44]	@ (8008364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	461a      	mov	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a09      	ldr	r2, [pc, #36]	@ (8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	3b01      	subs	r3, #1
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2201      	movs	r2, #1
 8008350:	409a      	lsls	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008356:	bf00      	nop
 8008358:	3714      	adds	r7, #20
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	1000823f 	.word	0x1000823f
 8008368:	40020940 	.word	0x40020940

0800836c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800836c:	b480      	push	{r7}
 800836e:	b087      	sub	sp, #28
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800837a:	e14c      	b.n	8008616 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	2101      	movs	r1, #1
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	fa01 f303 	lsl.w	r3, r1, r3
 8008388:	4013      	ands	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 813e 	beq.w	8008610 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	2b01      	cmp	r3, #1
 800839e:	d005      	beq.n	80083ac <HAL_GPIO_Init+0x40>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d130      	bne.n	800840e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	2203      	movs	r2, #3
 80083b8:	fa02 f303 	lsl.w	r3, r2, r3
 80083bc:	43db      	mvns	r3, r3
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4013      	ands	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80083e2:	2201      	movs	r2, #1
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	43db      	mvns	r3, r3
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4013      	ands	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	091b      	lsrs	r3, r3, #4
 80083f8:	f003 0201 	and.w	r2, r3, #1
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4313      	orrs	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	2b03      	cmp	r3, #3
 8008418:	d017      	beq.n	800844a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	2203      	movs	r2, #3
 8008426:	fa02 f303 	lsl.w	r3, r2, r3
 800842a:	43db      	mvns	r3, r3
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4013      	ands	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d123      	bne.n	800849e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	08da      	lsrs	r2, r3, #3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3208      	adds	r2, #8
 800845e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008462:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	220f      	movs	r2, #15
 800846e:	fa02 f303 	lsl.w	r3, r2, r3
 8008472:	43db      	mvns	r3, r3
 8008474:	693a      	ldr	r2, [r7, #16]
 8008476:	4013      	ands	r3, r2
 8008478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691a      	ldr	r2, [r3, #16]
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f003 0307 	and.w	r3, r3, #7
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	fa02 f303 	lsl.w	r3, r2, r3
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	4313      	orrs	r3, r2
 800848e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	08da      	lsrs	r2, r3, #3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3208      	adds	r2, #8
 8008498:	6939      	ldr	r1, [r7, #16]
 800849a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	2203      	movs	r2, #3
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	43db      	mvns	r3, r3
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4013      	ands	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f003 0203 	and.w	r2, r3, #3
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	fa02 f303 	lsl.w	r3, r2, r3
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8098 	beq.w	8008610 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80084e0:	4a54      	ldr	r2, [pc, #336]	@ (8008634 <HAL_GPIO_Init+0x2c8>)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	089b      	lsrs	r3, r3, #2
 80084e6:	3302      	adds	r3, #2
 80084e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f003 0303 	and.w	r3, r3, #3
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	220f      	movs	r2, #15
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	43db      	mvns	r3, r3
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4013      	ands	r3, r2
 8008502:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800850a:	d019      	beq.n	8008540 <HAL_GPIO_Init+0x1d4>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a4a      	ldr	r2, [pc, #296]	@ (8008638 <HAL_GPIO_Init+0x2cc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d013      	beq.n	800853c <HAL_GPIO_Init+0x1d0>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a49      	ldr	r2, [pc, #292]	@ (800863c <HAL_GPIO_Init+0x2d0>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d00d      	beq.n	8008538 <HAL_GPIO_Init+0x1cc>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a48      	ldr	r2, [pc, #288]	@ (8008640 <HAL_GPIO_Init+0x2d4>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d007      	beq.n	8008534 <HAL_GPIO_Init+0x1c8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4a47      	ldr	r2, [pc, #284]	@ (8008644 <HAL_GPIO_Init+0x2d8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d101      	bne.n	8008530 <HAL_GPIO_Init+0x1c4>
 800852c:	2304      	movs	r3, #4
 800852e:	e008      	b.n	8008542 <HAL_GPIO_Init+0x1d6>
 8008530:	2307      	movs	r3, #7
 8008532:	e006      	b.n	8008542 <HAL_GPIO_Init+0x1d6>
 8008534:	2303      	movs	r3, #3
 8008536:	e004      	b.n	8008542 <HAL_GPIO_Init+0x1d6>
 8008538:	2302      	movs	r3, #2
 800853a:	e002      	b.n	8008542 <HAL_GPIO_Init+0x1d6>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <HAL_GPIO_Init+0x1d6>
 8008540:	2300      	movs	r3, #0
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	f002 0203 	and.w	r2, r2, #3
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	4093      	lsls	r3, r2
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4313      	orrs	r3, r2
 8008550:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008552:	4938      	ldr	r1, [pc, #224]	@ (8008634 <HAL_GPIO_Init+0x2c8>)
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	089b      	lsrs	r3, r3, #2
 8008558:	3302      	adds	r3, #2
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008560:	4b39      	ldr	r3, [pc, #228]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	43db      	mvns	r3, r3
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4013      	ands	r3, r2
 800856e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	4313      	orrs	r3, r2
 8008582:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008584:	4a30      	ldr	r2, [pc, #192]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800858a:	4b2f      	ldr	r3, [pc, #188]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	43db      	mvns	r3, r3
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	4013      	ands	r3, r2
 8008598:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	4313      	orrs	r3, r2
 80085ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80085ae:	4a26      	ldr	r2, [pc, #152]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80085b4:	4b24      	ldr	r3, [pc, #144]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 80085b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	43db      	mvns	r3, r3
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4013      	ands	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80085da:	4a1b      	ldr	r2, [pc, #108]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80085e2:	4b19      	ldr	r3, [pc, #100]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 80085e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	43db      	mvns	r3, r3
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	4013      	ands	r3, r2
 80085f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d003      	beq.n	8008608 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008608:	4a0f      	ldr	r2, [pc, #60]	@ (8008648 <HAL_GPIO_Init+0x2dc>)
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3301      	adds	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681a      	ldr	r2, [r3, #0]
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	fa22 f303 	lsr.w	r3, r2, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f aeab 	bne.w	800837c <HAL_GPIO_Init+0x10>
  }
}
 8008626:	bf00      	nop
 8008628:	bf00      	nop
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	40010000 	.word	0x40010000
 8008638:	48000400 	.word	0x48000400
 800863c:	48000800 	.word	0x48000800
 8008640:	48000c00 	.word	0x48000c00
 8008644:	48001000 	.word	0x48001000
 8008648:	58000800 	.word	0x58000800

0800864c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	887b      	ldrh	r3, [r7, #2]
 800865e:	4013      	ands	r3, r2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
 8008668:	e001      	b.n	800866e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800866e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
 8008688:	4613      	mov	r3, r2
 800868a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800868c:	787b      	ldrb	r3, [r7, #1]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008692:	887a      	ldrh	r2, [r7, #2]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008698:	e002      	b.n	80086a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800869a:	887a      	ldrh	r2, [r7, #2]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80086b2:	4b0a      	ldr	r3, [pc, #40]	@ (80086dc <HAL_HSEM_IRQHandler+0x30>)
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80086b8:	4b08      	ldr	r3, [pc, #32]	@ (80086dc <HAL_HSEM_IRQHandler+0x30>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	43db      	mvns	r3, r3
 80086c0:	4906      	ldr	r1, [pc, #24]	@ (80086dc <HAL_HSEM_IRQHandler+0x30>)
 80086c2:	4013      	ands	r3, r2
 80086c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80086c6:	4a05      	ldr	r2, [pc, #20]	@ (80086dc <HAL_HSEM_IRQHandler+0x30>)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f807 	bl	80086e0 <HAL_HSEM_FreeCallback>
}
 80086d2:	bf00      	nop
 80086d4:	3708      	adds	r7, #8
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	58001500 	.word	0x58001500

080086e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e08d      	b.n	8008822 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d106      	bne.n	8008720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7fd fe34 	bl	8006388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2224      	movs	r2, #36	@ 0x24
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d107      	bne.n	800876e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800876a:	609a      	str	r2, [r3, #8]
 800876c:	e006      	b.n	800877c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800877a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d108      	bne.n	8008796 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685a      	ldr	r2, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008792:	605a      	str	r2, [r3, #4]
 8008794:	e007      	b.n	80087a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80087b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69d9      	ldr	r1, [r3, #28]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a1a      	ldr	r2, [r3, #32]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2220      	movs	r2, #32
 800880e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af02      	add	r7, sp, #8
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	607a      	str	r2, [r7, #4]
 8008836:	461a      	mov	r2, r3
 8008838:	460b      	mov	r3, r1
 800883a:	817b      	strh	r3, [r7, #10]
 800883c:	4613      	mov	r3, r2
 800883e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b20      	cmp	r3, #32
 800884a:	f040 80fd 	bne.w	8008a48 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008854:	2b01      	cmp	r3, #1
 8008856:	d101      	bne.n	800885c <HAL_I2C_Master_Transmit+0x30>
 8008858:	2302      	movs	r3, #2
 800885a:	e0f6      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008864:	f7ff f8f0 	bl	8007a48 <HAL_GetTick>
 8008868:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2319      	movs	r3, #25
 8008870:	2201      	movs	r2, #1
 8008872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 fce0 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d001      	beq.n	8008886 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e0e1      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2221      	movs	r2, #33	@ 0x21
 800888a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2210      	movs	r2, #16
 8008892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	893a      	ldrh	r2, [r7, #8]
 80088a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2bff      	cmp	r3, #255	@ 0xff
 80088b6:	d906      	bls.n	80088c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	22ff      	movs	r2, #255	@ 0xff
 80088bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80088be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	e007      	b.n	80088d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80088d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d024      	beq.n	8008928 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e2:	781a      	ldrb	r2, [r3, #0]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ee:	1c5a      	adds	r2, r3, #1
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	3b01      	subs	r3, #1
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008912:	b2db      	uxtb	r3, r3
 8008914:	3301      	adds	r3, #1
 8008916:	b2da      	uxtb	r2, r3
 8008918:	8979      	ldrh	r1, [r7, #10]
 800891a:	4b4e      	ldr	r3, [pc, #312]	@ (8008a54 <HAL_I2C_Master_Transmit+0x228>)
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 fedb 	bl	80096dc <I2C_TransferConfig>
 8008926:	e066      	b.n	80089f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800892c:	b2da      	uxtb	r2, r3
 800892e:	8979      	ldrh	r1, [r7, #10]
 8008930:	4b48      	ldr	r3, [pc, #288]	@ (8008a54 <HAL_I2C_Master_Transmit+0x228>)
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 fed0 	bl	80096dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800893c:	e05b      	b.n	80089f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	6a39      	ldr	r1, [r7, #32]
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f000 fcd3 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e07b      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008962:	1c5a      	adds	r2, r3, #1
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800896c:	b29b      	uxth	r3, r3
 800896e:	3b01      	subs	r3, #1
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800897a:	3b01      	subs	r3, #1
 800897c:	b29a      	uxth	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008986:	b29b      	uxth	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d034      	beq.n	80089f6 <HAL_I2C_Master_Transmit+0x1ca>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	d130      	bne.n	80089f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	2200      	movs	r2, #0
 800899c:	2180      	movs	r1, #128	@ 0x80
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fc4c 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e04d      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	2bff      	cmp	r3, #255	@ 0xff
 80089b6:	d90e      	bls.n	80089d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	22ff      	movs	r2, #255	@ 0xff
 80089bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	8979      	ldrh	r1, [r7, #10]
 80089c6:	2300      	movs	r3, #0
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fe84 	bl	80096dc <I2C_TransferConfig>
 80089d4:	e00f      	b.n	80089f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089da:	b29a      	uxth	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	8979      	ldrh	r1, [r7, #10]
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fe73 	bl	80096dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d19e      	bne.n	800893e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	6a39      	ldr	r1, [r7, #32]
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 fcb9 	bl	800937c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e01a      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6859      	ldr	r1, [r3, #4]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	4b0c      	ldr	r3, [pc, #48]	@ (8008a58 <HAL_I2C_Master_Transmit+0x22c>)
 8008a28:	400b      	ands	r3, r1
 8008a2a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e000      	b.n	8008a4a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	80002000 	.word	0x80002000
 8008a58:	fe00e800 	.word	0xfe00e800

08008a5c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	607a      	str	r2, [r7, #4]
 8008a66:	461a      	mov	r2, r3
 8008a68:	460b      	mov	r3, r1
 8008a6a:	817b      	strh	r3, [r7, #10]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b20      	cmp	r3, #32
 8008a7a:	f040 80db 	bne.w	8008c34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d101      	bne.n	8008a8c <HAL_I2C_Master_Receive+0x30>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e0d4      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a94:	f7fe ffd8 	bl	8007a48 <HAL_GetTick>
 8008a98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	2319      	movs	r3, #25
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 fbc8 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e0bf      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2222      	movs	r2, #34	@ 0x22
 8008aba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2210      	movs	r2, #16
 8008ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	893a      	ldrh	r2, [r7, #8]
 8008ad6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	2bff      	cmp	r3, #255	@ 0xff
 8008ae6:	d90e      	bls.n	8008b06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	22ff      	movs	r2, #255	@ 0xff
 8008aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	8979      	ldrh	r1, [r7, #10]
 8008af6:	4b52      	ldr	r3, [pc, #328]	@ (8008c40 <HAL_I2C_Master_Receive+0x1e4>)
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008afe:	68f8      	ldr	r0, [r7, #12]
 8008b00:	f000 fdec 	bl	80096dc <I2C_TransferConfig>
 8008b04:	e06d      	b.n	8008be2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	8979      	ldrh	r1, [r7, #10]
 8008b18:	4b49      	ldr	r3, [pc, #292]	@ (8008c40 <HAL_I2C_Master_Receive+0x1e4>)
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 fddb 	bl	80096dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008b26:	e05c      	b.n	8008be2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b28:	697a      	ldr	r2, [r7, #20]
 8008b2a:	6a39      	ldr	r1, [r7, #32]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fc69 	bl	8009404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e07c      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b46:	b2d2      	uxtb	r2, r2
 8008b48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	3b01      	subs	r3, #1
 8008b68:	b29a      	uxth	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d034      	beq.n	8008be2 <HAL_I2C_Master_Receive+0x186>
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d130      	bne.n	8008be2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	6a3b      	ldr	r3, [r7, #32]
 8008b86:	2200      	movs	r2, #0
 8008b88:	2180      	movs	r1, #128	@ 0x80
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 fb56 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e04d      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	2bff      	cmp	r3, #255	@ 0xff
 8008ba2:	d90e      	bls.n	8008bc2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	22ff      	movs	r2, #255	@ 0xff
 8008ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bae:	b2da      	uxtb	r2, r3
 8008bb0:	8979      	ldrh	r1, [r7, #10]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bba:	68f8      	ldr	r0, [r7, #12]
 8008bbc:	f000 fd8e 	bl	80096dc <I2C_TransferConfig>
 8008bc0:	e00f      	b.n	8008be2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	8979      	ldrh	r1, [r7, #10]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 fd7d 	bl	80096dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d19d      	bne.n	8008b28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	6a39      	ldr	r1, [r7, #32]
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f000 fbc3 	bl	800937c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e01a      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2220      	movs	r2, #32
 8008c06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6859      	ldr	r1, [r3, #4]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <HAL_I2C_Master_Receive+0x1e8>)
 8008c14:	400b      	ands	r3, r1
 8008c16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2220      	movs	r2, #32
 8008c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	e000      	b.n	8008c36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008c34:	2302      	movs	r3, #2
  }
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	80002400 	.word	0x80002400
 8008c44:	fe00e800 	.word	0xfe00e800

08008c48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b088      	sub	sp, #32
 8008c4c:	af02      	add	r7, sp, #8
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	4608      	mov	r0, r1
 8008c52:	4611      	mov	r1, r2
 8008c54:	461a      	mov	r2, r3
 8008c56:	4603      	mov	r3, r0
 8008c58:	817b      	strh	r3, [r7, #10]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	813b      	strh	r3, [r7, #8]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	f040 80f9 	bne.w	8008e62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_I2C_Mem_Write+0x34>
 8008c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e0ed      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d101      	bne.n	8008c96 <HAL_I2C_Mem_Write+0x4e>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e0e6      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008c9e:	f7fe fed3 	bl	8007a48 <HAL_GetTick>
 8008ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2319      	movs	r3, #25
 8008caa:	2201      	movs	r2, #1
 8008cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fac3 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e0d1      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2221      	movs	r2, #33	@ 0x21
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2240      	movs	r2, #64	@ 0x40
 8008ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ce8:	88f8      	ldrh	r0, [r7, #6]
 8008cea:	893a      	ldrh	r2, [r7, #8]
 8008cec:	8979      	ldrh	r1, [r7, #10]
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f9d3 	bl	80090a4 <I2C_RequestMemoryWrite>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e0a9      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2bff      	cmp	r3, #255	@ 0xff
 8008d18:	d90e      	bls.n	8008d38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	22ff      	movs	r2, #255	@ 0xff
 8008d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	8979      	ldrh	r1, [r7, #10]
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 fcd3 	bl	80096dc <I2C_TransferConfig>
 8008d36:	e00f      	b.n	8008d58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	8979      	ldrh	r1, [r7, #10]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f000 fcc2 	bl	80096dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 fac6 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e07b      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d70:	781a      	ldrb	r2, [r3, #0]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d7c:	1c5a      	adds	r2, r3, #1
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	b29a      	uxth	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008d94:	3b01      	subs	r3, #1
 8008d96:	b29a      	uxth	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d034      	beq.n	8008e10 <HAL_I2C_Mem_Write+0x1c8>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d130      	bne.n	8008e10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db4:	2200      	movs	r2, #0
 8008db6:	2180      	movs	r1, #128	@ 0x80
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f000 fa3f 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e04d      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2bff      	cmp	r3, #255	@ 0xff
 8008dd0:	d90e      	bls.n	8008df0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	22ff      	movs	r2, #255	@ 0xff
 8008dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	8979      	ldrh	r1, [r7, #10]
 8008de0:	2300      	movs	r3, #0
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 fc77 	bl	80096dc <I2C_TransferConfig>
 8008dee:	e00f      	b.n	8008e10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	8979      	ldrh	r1, [r7, #10]
 8008e02:	2300      	movs	r3, #0
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fc66 	bl	80096dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d19e      	bne.n	8008d58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 faac 	bl	800937c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d001      	beq.n	8008e2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e01a      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2220      	movs	r2, #32
 8008e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6859      	ldr	r1, [r3, #4]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	4b0a      	ldr	r3, [pc, #40]	@ (8008e6c <HAL_I2C_Mem_Write+0x224>)
 8008e42:	400b      	ands	r3, r1
 8008e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	e000      	b.n	8008e64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008e62:	2302      	movs	r3, #2
  }
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	fe00e800 	.word	0xfe00e800

08008e70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	4608      	mov	r0, r1
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	817b      	strh	r3, [r7, #10]
 8008e82:	460b      	mov	r3, r1
 8008e84:	813b      	strh	r3, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b20      	cmp	r3, #32
 8008e94:	f040 80fd 	bne.w	8009092 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <HAL_I2C_Mem_Read+0x34>
 8008e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e0f1      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d101      	bne.n	8008ebe <HAL_I2C_Mem_Read+0x4e>
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e0ea      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008ec6:	f7fe fdbf 	bl	8007a48 <HAL_GetTick>
 8008eca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	2319      	movs	r3, #25
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 f9af 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e0d5      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2222      	movs	r2, #34	@ 0x22
 8008eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2240      	movs	r2, #64	@ 0x40
 8008ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6a3a      	ldr	r2, [r7, #32]
 8008f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008f10:	88f8      	ldrh	r0, [r7, #6]
 8008f12:	893a      	ldrh	r2, [r7, #8]
 8008f14:	8979      	ldrh	r1, [r7, #10]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	9300      	str	r3, [sp, #0]
 8008f1e:	4603      	mov	r3, r0
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f913 	bl	800914c <I2C_RequestMemoryRead>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d005      	beq.n	8008f38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	e0ad      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2bff      	cmp	r3, #255	@ 0xff
 8008f40:	d90e      	bls.n	8008f60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	@ 0xff
 8008f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	8979      	ldrh	r1, [r7, #10]
 8008f50:	4b52      	ldr	r3, [pc, #328]	@ (800909c <HAL_I2C_Mem_Read+0x22c>)
 8008f52:	9300      	str	r3, [sp, #0]
 8008f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fbbf 	bl	80096dc <I2C_TransferConfig>
 8008f5e:	e00f      	b.n	8008f80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	8979      	ldrh	r1, [r7, #10]
 8008f72:	4b4a      	ldr	r3, [pc, #296]	@ (800909c <HAL_I2C_Mem_Read+0x22c>)
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 fbae 	bl	80096dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f86:	2200      	movs	r2, #0
 8008f88:	2104      	movs	r1, #4
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f956 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e07c      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	1c5a      	adds	r2, r3, #1
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29a      	uxth	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d034      	beq.n	8009040 <HAL_I2C_Mem_Read+0x1d0>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d130      	bne.n	8009040 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2180      	movs	r1, #128	@ 0x80
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f927 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d001      	beq.n	8008ff8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e04d      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	2bff      	cmp	r3, #255	@ 0xff
 8009000:	d90e      	bls.n	8009020 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	22ff      	movs	r2, #255	@ 0xff
 8009006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800900c:	b2da      	uxtb	r2, r3
 800900e:	8979      	ldrh	r1, [r7, #10]
 8009010:	2300      	movs	r3, #0
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 fb5f 	bl	80096dc <I2C_TransferConfig>
 800901e:	e00f      	b.n	8009040 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009024:	b29a      	uxth	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800902e:	b2da      	uxtb	r2, r3
 8009030:	8979      	ldrh	r1, [r7, #10]
 8009032:	2300      	movs	r3, #0
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fb4e 	bl	80096dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009044:	b29b      	uxth	r3, r3
 8009046:	2b00      	cmp	r3, #0
 8009048:	d19a      	bne.n	8008f80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f994 	bl	800937c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e01a      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2220      	movs	r2, #32
 8009064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6859      	ldr	r1, [r3, #4]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	4b0b      	ldr	r3, [pc, #44]	@ (80090a0 <HAL_I2C_Mem_Read+0x230>)
 8009072:	400b      	ands	r3, r1
 8009074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	e000      	b.n	8009094 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009092:	2302      	movs	r3, #2
  }
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	80002400 	.word	0x80002400
 80090a0:	fe00e800 	.word	0xfe00e800

080090a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af02      	add	r7, sp, #8
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	4608      	mov	r0, r1
 80090ae:	4611      	mov	r1, r2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4603      	mov	r3, r0
 80090b4:	817b      	strh	r3, [r7, #10]
 80090b6:	460b      	mov	r3, r1
 80090b8:	813b      	strh	r3, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80090be:	88fb      	ldrh	r3, [r7, #6]
 80090c0:	b2da      	uxtb	r2, r3
 80090c2:	8979      	ldrh	r1, [r7, #10]
 80090c4:	4b20      	ldr	r3, [pc, #128]	@ (8009148 <I2C_RequestMemoryWrite+0xa4>)
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80090cc:	68f8      	ldr	r0, [r7, #12]
 80090ce:	f000 fb05 	bl	80096dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	69b9      	ldr	r1, [r7, #24]
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 f909 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e02c      	b.n	8009140 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80090e6:	88fb      	ldrh	r3, [r7, #6]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d105      	bne.n	80090f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80090ec:	893b      	ldrh	r3, [r7, #8]
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80090f6:	e015      	b.n	8009124 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80090f8:	893b      	ldrh	r3, [r7, #8]
 80090fa:	0a1b      	lsrs	r3, r3, #8
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	b2da      	uxtb	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009106:	69fa      	ldr	r2, [r7, #28]
 8009108:	69b9      	ldr	r1, [r7, #24]
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f8ef 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e012      	b.n	8009140 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800911a:	893b      	ldrh	r3, [r7, #8]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	2200      	movs	r2, #0
 800912c:	2180      	movs	r1, #128	@ 0x80
 800912e:	68f8      	ldr	r0, [r7, #12]
 8009130:	f000 f884 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e000      	b.n	8009140 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	80002000 	.word	0x80002000

0800914c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	4608      	mov	r0, r1
 8009156:	4611      	mov	r1, r2
 8009158:	461a      	mov	r2, r3
 800915a:	4603      	mov	r3, r0
 800915c:	817b      	strh	r3, [r7, #10]
 800915e:	460b      	mov	r3, r1
 8009160:	813b      	strh	r3, [r7, #8]
 8009162:	4613      	mov	r3, r2
 8009164:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	b2da      	uxtb	r2, r3
 800916a:	8979      	ldrh	r1, [r7, #10]
 800916c:	4b20      	ldr	r3, [pc, #128]	@ (80091f0 <I2C_RequestMemoryRead+0xa4>)
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	2300      	movs	r3, #0
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 fab2 	bl	80096dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009178:	69fa      	ldr	r2, [r7, #28]
 800917a:	69b9      	ldr	r1, [r7, #24]
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f8b6 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d001      	beq.n	800918c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e02c      	b.n	80091e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800918c:	88fb      	ldrh	r3, [r7, #6]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d105      	bne.n	800919e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009192:	893b      	ldrh	r3, [r7, #8]
 8009194:	b2da      	uxtb	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	629a      	str	r2, [r3, #40]	@ 0x28
 800919c:	e015      	b.n	80091ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800919e:	893b      	ldrh	r3, [r7, #8]
 80091a0:	0a1b      	lsrs	r3, r3, #8
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80091ac:	69fa      	ldr	r2, [r7, #28]
 80091ae:	69b9      	ldr	r1, [r7, #24]
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f89c 	bl	80092ee <I2C_WaitOnTXISFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d001      	beq.n	80091c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e012      	b.n	80091e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80091c0:	893b      	ldrh	r3, [r7, #8]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2200      	movs	r2, #0
 80091d2:	2140      	movs	r1, #64	@ 0x40
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f831 	bl	800923c <I2C_WaitOnFlagUntilTimeout>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	e000      	b.n	80091e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	80002000 	.word	0x80002000

080091f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d103      	bne.n	8009212 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2200      	movs	r2, #0
 8009210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b01      	cmp	r3, #1
 800921e:	d007      	beq.n	8009230 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699a      	ldr	r2, [r3, #24]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	619a      	str	r2, [r3, #24]
  }
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	603b      	str	r3, [r7, #0]
 8009248:	4613      	mov	r3, r2
 800924a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800924c:	e03b      	b.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f962 	bl	800951c <I2C_IsErrorOccurred>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800925e:	2301      	movs	r3, #1
 8009260:	e041      	b.n	80092e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009268:	d02d      	beq.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800926a:	f7fe fbed 	bl	8007a48 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d302      	bcc.n	8009280 <I2C_WaitOnFlagUntilTimeout+0x44>
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d122      	bne.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	699a      	ldr	r2, [r3, #24]
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	4013      	ands	r3, r2
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	429a      	cmp	r2, r3
 800928e:	bf0c      	ite	eq
 8009290:	2301      	moveq	r3, #1
 8009292:	2300      	movne	r3, #0
 8009294:	b2db      	uxtb	r3, r3
 8009296:	461a      	mov	r2, r3
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	429a      	cmp	r2, r3
 800929c:	d113      	bne.n	80092c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a2:	f043 0220 	orr.w	r2, r3, #32
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2200      	movs	r2, #0
 80092be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e00f      	b.n	80092e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	699a      	ldr	r2, [r3, #24]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	4013      	ands	r3, r2
 80092d0:	68ba      	ldr	r2, [r7, #8]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	bf0c      	ite	eq
 80092d6:	2301      	moveq	r3, #1
 80092d8:	2300      	movne	r3, #0
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	461a      	mov	r2, r3
 80092de:	79fb      	ldrb	r3, [r7, #7]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d0b4      	beq.n	800924e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	60f8      	str	r0, [r7, #12]
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80092fa:	e033      	b.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f90b 	bl	800951c <I2C_IsErrorOccurred>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e031      	b.n	8009374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009316:	d025      	beq.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009318:	f7fe fb96 	bl	8007a48 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	d302      	bcc.n	800932e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d11a      	bne.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	f003 0302 	and.w	r3, r3, #2
 8009338:	2b02      	cmp	r3, #2
 800933a:	d013      	beq.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009340:	f043 0220 	orr.w	r2, r3, #32
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2220      	movs	r2, #32
 800934c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2200      	movs	r2, #0
 8009354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e007      	b.n	8009374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b02      	cmp	r3, #2
 8009370:	d1c4      	bne.n	80092fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009372:	2300      	movs	r3, #0
}
 8009374:	4618      	mov	r0, r3
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009388:	e02f      	b.n	80093ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f000 f8c4 	bl	800951c <I2C_IsErrorOccurred>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e02d      	b.n	80093fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800939e:	f7fe fb53 	bl	8007a48 <HAL_GetTick>
 80093a2:	4602      	mov	r2, r0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d302      	bcc.n	80093b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11a      	bne.n	80093ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	f003 0320 	and.w	r3, r3, #32
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d013      	beq.n	80093ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c6:	f043 0220 	orr.w	r2, r3, #32
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2220      	movs	r2, #32
 80093d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e007      	b.n	80093fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b20      	cmp	r3, #32
 80093f6:	d1c8      	bne.n	800938a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3710      	adds	r7, #16
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009414:	e071      	b.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	68b9      	ldr	r1, [r7, #8]
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 f87e 	bl	800951c <I2C_IsErrorOccurred>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d001      	beq.n	800942a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009426:	2301      	movs	r3, #1
 8009428:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f003 0320 	and.w	r3, r3, #32
 8009434:	2b20      	cmp	r3, #32
 8009436:	d13b      	bne.n	80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009438:	7dfb      	ldrb	r3, [r7, #23]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d138      	bne.n	80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	f003 0304 	and.w	r3, r3, #4
 8009448:	2b04      	cmp	r3, #4
 800944a:	d105      	bne.n	8009458 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f003 0310 	and.w	r3, r3, #16
 8009462:	2b10      	cmp	r3, #16
 8009464:	d121      	bne.n	80094aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2210      	movs	r2, #16
 800946c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2204      	movs	r2, #4
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2220      	movs	r2, #32
 800947a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	6859      	ldr	r1, [r3, #4]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b24      	ldr	r3, [pc, #144]	@ (8009518 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8009488:	400b      	ands	r3, r1
 800948a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	75fb      	strb	r3, [r7, #23]
 80094a8:	e002      	b.n	80094b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80094b0:	f7fe faca 	bl	8007a48 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d302      	bcc.n	80094c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d119      	bne.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d116      	bne.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	f003 0304 	and.w	r3, r3, #4
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d00f      	beq.n	80094fa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094de:	f043 0220 	orr.w	r2, r3, #32
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2220      	movs	r2, #32
 80094ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b04      	cmp	r3, #4
 8009506:	d002      	beq.n	800950e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d083      	beq.n	8009416 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3718      	adds	r7, #24
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	fe00e800 	.word	0xfe00e800

0800951c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b08a      	sub	sp, #40	@ 0x28
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	699b      	ldr	r3, [r3, #24]
 8009534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009536:	2300      	movs	r3, #0
 8009538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f003 0310 	and.w	r3, r3, #16
 8009544:	2b00      	cmp	r3, #0
 8009546:	d068      	beq.n	800961a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2210      	movs	r2, #16
 800954e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009550:	e049      	b.n	80095e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d045      	beq.n	80095e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800955a:	f7fe fa75 	bl	8007a48 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	429a      	cmp	r2, r3
 8009568:	d302      	bcc.n	8009570 <I2C_IsErrorOccurred+0x54>
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d13a      	bne.n	80095e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800957a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800958e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009592:	d121      	bne.n	80095d8 <I2C_IsErrorOccurred+0xbc>
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800959a:	d01d      	beq.n	80095d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800959c:	7cfb      	ldrb	r3, [r7, #19]
 800959e:	2b20      	cmp	r3, #32
 80095a0:	d01a      	beq.n	80095d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095b2:	f7fe fa49 	bl	8007a48 <HAL_GetTick>
 80095b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095b8:	e00e      	b.n	80095d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095ba:	f7fe fa45 	bl	8007a48 <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	2b19      	cmp	r3, #25
 80095c6:	d907      	bls.n	80095d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	f043 0320 	orr.w	r3, r3, #32
 80095ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80095d6:	e006      	b.n	80095e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f003 0320 	and.w	r3, r3, #32
 80095e2:	2b20      	cmp	r3, #32
 80095e4:	d1e9      	bne.n	80095ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	d003      	beq.n	80095fc <I2C_IsErrorOccurred+0xe0>
 80095f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0aa      	beq.n	8009552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80095fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2220      	movs	r2, #32
 800960a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	f043 0304 	orr.w	r3, r3, #4
 8009612:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800963c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	f043 0308 	orr.w	r3, r3, #8
 8009654:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800965e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00b      	beq.n	8009688 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	f043 0302 	orr.w	r3, r3, #2
 8009676:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800968c:	2b00      	cmp	r3, #0
 800968e:	d01c      	beq.n	80096ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f7ff fdaf 	bl	80091f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6859      	ldr	r1, [r3, #4]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	4b0d      	ldr	r3, [pc, #52]	@ (80096d8 <I2C_IsErrorOccurred+0x1bc>)
 80096a2:	400b      	ands	r3, r1
 80096a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80096ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3728      	adds	r7, #40	@ 0x28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	fe00e800 	.word	0xfe00e800

080096dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096dc:	b480      	push	{r7}
 80096de:	b087      	sub	sp, #28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	607b      	str	r3, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	817b      	strh	r3, [r7, #10]
 80096ea:	4613      	mov	r3, r2
 80096ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ee:	897b      	ldrh	r3, [r7, #10]
 80096f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096f4:	7a7b      	ldrb	r3, [r7, #9]
 80096f6:	041b      	lsls	r3, r3, #16
 80096f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	4313      	orrs	r3, r2
 8009706:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800970a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685a      	ldr	r2, [r3, #4]
 8009712:	6a3b      	ldr	r3, [r7, #32]
 8009714:	0d5b      	lsrs	r3, r3, #21
 8009716:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800971a:	4b08      	ldr	r3, [pc, #32]	@ (800973c <I2C_TransferConfig+0x60>)
 800971c:	430b      	orrs	r3, r1
 800971e:	43db      	mvns	r3, r3
 8009720:	ea02 0103 	and.w	r1, r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	697a      	ldr	r2, [r7, #20]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	03ff63ff 	.word	0x03ff63ff

08009740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
 8009748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b20      	cmp	r3, #32
 8009754:	d138      	bne.n	80097c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009760:	2302      	movs	r3, #2
 8009762:	e032      	b.n	80097ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2224      	movs	r2, #36	@ 0x24
 8009770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 0201 	bic.w	r2, r2, #1
 8009782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6819      	ldr	r1, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	430a      	orrs	r2, r1
 80097a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f042 0201 	orr.w	r2, r2, #1
 80097b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e000      	b.n	80097ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097c8:	2302      	movs	r3, #2
  }
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b085      	sub	sp, #20
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b20      	cmp	r3, #32
 80097ea:	d139      	bne.n	8009860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80097f6:	2302      	movs	r3, #2
 80097f8:	e033      	b.n	8009862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2224      	movs	r2, #36	@ 0x24
 8009806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f022 0201 	bic.w	r2, r2, #1
 8009818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	e000      	b.n	8009862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009860:	2302      	movs	r3, #2
  }
}
 8009862:	4618      	mov	r0, r3
 8009864:	3714      	adds	r7, #20
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr
	...

08009870 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d01e      	beq.n	80098c0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009882:	4b13      	ldr	r3, [pc, #76]	@ (80098d0 <HAL_IPCC_Init+0x60>)
 8009884:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800988c:	b2db      	uxtb	r3, r3
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fc fdee 	bl	8006474 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009898:	68b8      	ldr	r0, [r7, #8]
 800989a:	f000 f85b 	bl	8009954 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f82c 	bl	8009908 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80098be:	e001      	b.n	80098c4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	58000c00 	.word	0x58000c00

080098d4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	60f8      	str	r0, [r7, #12]
 80098f6:	60b9      	str	r1, [r7, #8]
 80098f8:	4613      	mov	r3, r2
 80098fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009910:	2300      	movs	r3, #0
 8009912:	60fb      	str	r3, [r7, #12]
 8009914:	e00f      	b.n	8009936 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	4a0b      	ldr	r2, [pc, #44]	@ (800994c <IPCC_SetDefaultCallbacks+0x44>)
 8009920:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3306      	adds	r3, #6
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	4a08      	ldr	r2, [pc, #32]	@ (8009950 <IPCC_SetDefaultCallbacks+0x48>)
 800992e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	3301      	adds	r3, #1
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2b05      	cmp	r3, #5
 800993a:	d9ec      	bls.n	8009916 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800993c:	bf00      	nop
 800993e:	bf00      	nop
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	080098d5 	.word	0x080098d5
 8009950:	080098ef 	.word	0x080098ef

08009954 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009968:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	223f      	movs	r2, #63	@ 0x3f
 800996e:	609a      	str	r2, [r3, #8]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e0c0      	b.n	8009b10 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d106      	bne.n	80099a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f00e fec6 	bl	8018734 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2203      	movs	r2, #3
 80099ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f006 fb88 	bl	80100ca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099ba:	2300      	movs	r3, #0
 80099bc:	73fb      	strb	r3, [r7, #15]
 80099be:	e03e      	b.n	8009a3e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80099c0:	7bfa      	ldrb	r2, [r7, #15]
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	440b      	add	r3, r1
 80099ce:	3311      	adds	r3, #17
 80099d0:	2201      	movs	r2, #1
 80099d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099d4:	7bfa      	ldrb	r2, [r7, #15]
 80099d6:	6879      	ldr	r1, [r7, #4]
 80099d8:	4613      	mov	r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4413      	add	r3, r2
 80099de:	00db      	lsls	r3, r3, #3
 80099e0:	440b      	add	r3, r1
 80099e2:	3310      	adds	r3, #16
 80099e4:	7bfa      	ldrb	r2, [r7, #15]
 80099e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099e8:	7bfa      	ldrb	r2, [r7, #15]
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	00db      	lsls	r3, r3, #3
 80099f4:	440b      	add	r3, r1
 80099f6:	3313      	adds	r3, #19
 80099f8:	2200      	movs	r2, #0
 80099fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80099fc:	7bfa      	ldrb	r2, [r7, #15]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	3320      	adds	r3, #32
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a10:	7bfa      	ldrb	r2, [r7, #15]
 8009a12:	6879      	ldr	r1, [r7, #4]
 8009a14:	4613      	mov	r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	4413      	add	r3, r2
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	440b      	add	r3, r1
 8009a1e:	3324      	adds	r3, #36	@ 0x24
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	6879      	ldr	r1, [r7, #4]
 8009a28:	1c5a      	adds	r2, r3, #1
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	00db      	lsls	r3, r3, #3
 8009a32:	440b      	add	r3, r1
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	73fb      	strb	r3, [r7, #15]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	791b      	ldrb	r3, [r3, #4]
 8009a42:	7bfa      	ldrb	r2, [r7, #15]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d3bb      	bcc.n	80099c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
 8009a4c:	e044      	b.n	8009ad8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a4e:	7bfa      	ldrb	r2, [r7, #15]
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	00db      	lsls	r3, r3, #3
 8009a5a:	440b      	add	r3, r1
 8009a5c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a64:	7bfa      	ldrb	r2, [r7, #15]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	440b      	add	r3, r1
 8009a72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a76:	7bfa      	ldrb	r2, [r7, #15]
 8009a78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a7a:	7bfa      	ldrb	r2, [r7, #15]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	440b      	add	r3, r1
 8009a88:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a90:	7bfa      	ldrb	r2, [r7, #15]
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	440b      	add	r3, r1
 8009a9e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009aa6:	7bfa      	ldrb	r2, [r7, #15]
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	440b      	add	r3, r1
 8009ab4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009abc:	7bfa      	ldrb	r2, [r7, #15]
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	440b      	add	r3, r1
 8009aca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	791b      	ldrb	r3, [r3, #4]
 8009adc:	7bfa      	ldrb	r2, [r7, #15]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d3b5      	bcc.n	8009a4e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6818      	ldr	r0, [r3, #0]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009aee:	f006 fb07 	bl	8010100 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	7a9b      	ldrb	r3, [r3, #10]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d102      	bne.n	8009b0e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f001 fbd0 	bl	800b2ae <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_PCD_Start+0x16>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e012      	b.n	8009b54 <HAL_PCD_Start+0x3c>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f006 faae 	bl	801009c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f007 fe9e 	bl	8011886 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3708      	adds	r7, #8
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d101      	bne.n	8009b72 <HAL_PCD_Stop+0x16>
 8009b6e:	2302      	movs	r3, #2
 8009b70:	e012      	b.n	8009b98 <HAL_PCD_Stop+0x3c>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_DISABLE(hpcd);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f006 faa3 	bl	80100ca <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f007 fe93 	bl	80118b4 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f007 fe96 	bl	80118de <USB_ReadInterrupts>
 8009bb2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 faa6 	bl	800a110 <PCD_EP_ISR_Handler>

    return;
 8009bc4:	e110      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d013      	beq.n	8009bf8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009be2:	b292      	uxth	r2, r2
 8009be4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f00e fe56 	bl	801889a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009bee:	2100      	movs	r1, #0
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f8fc 	bl	8009dee <HAL_PCD_SetAddress>

    return;
 8009bf6:	e0f7      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00c      	beq.n	8009c1c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009c14:	b292      	uxth	r2, r2
 8009c16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009c1a:	e0e5      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d00c      	beq.n	8009c40 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c38:	b292      	uxth	r2, r2
 8009c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009c3e:	e0d3      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d034      	beq.n	8009cb4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0204 	bic.w	r2, r2, #4
 8009c5c:	b292      	uxth	r2, r2
 8009c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f022 0208 	bic.w	r2, r2, #8
 8009c74:	b292      	uxth	r2, r2
 8009c76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d107      	bne.n	8009c94 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f00e ffc8 	bl	8018c24 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f00e fe39 	bl	801890c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ca2:	b29a      	uxth	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009cac:	b292      	uxth	r2, r2
 8009cae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009cb2:	e099      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d027      	beq.n	8009d0e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009cc6:	b29a      	uxth	r2, r3
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f042 0208 	orr.w	r2, r2, #8
 8009cd0:	b292      	uxth	r2, r2
 8009cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009ce8:	b292      	uxth	r2, r2
 8009cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f042 0204 	orr.w	r2, r2, #4
 8009d00:	b292      	uxth	r2, r2
 8009d02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f00e fde6 	bl	80188d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009d0c:	e06c      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d040      	beq.n	8009d9a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009d20:	b29a      	uxth	r2, r3
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d2a:	b292      	uxth	r2, r2
 8009d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d12b      	bne.n	8009d92 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f042 0204 	orr.w	r2, r2, #4
 8009d4c:	b292      	uxth	r2, r2
 8009d4e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f042 0208 	orr.w	r2, r2, #8
 8009d64:	b292      	uxth	r2, r2
 8009d66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	089b      	lsrs	r3, r3, #2
 8009d7e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009d88:	2101      	movs	r1, #1
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f00e ff4a 	bl	8018c24 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009d90:	e02a      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f00e fda0 	bl	80188d8 <HAL_PCD_SuspendCallback>
    return;
 8009d98:	e026      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00f      	beq.n	8009dc4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009db6:	b292      	uxth	r2, r2
 8009db8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f00e fd5e 	bl	801887e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009dc2:	e011      	b.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00c      	beq.n	8009de8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009de0:	b292      	uxth	r2, r2
 8009de2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009de6:	bf00      	nop
  }
}
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d101      	bne.n	8009e08 <HAL_PCD_SetAddress+0x1a>
 8009e04:	2302      	movs	r3, #2
 8009e06:	e012      	b.n	8009e2e <HAL_PCD_SetAddress+0x40>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	78fa      	ldrb	r2, [r7, #3]
 8009e1c:	4611      	mov	r1, r2
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f007 fd1d 	bl	801185e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b084      	sub	sp, #16
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	4608      	mov	r0, r1
 8009e40:	4611      	mov	r1, r2
 8009e42:	461a      	mov	r2, r3
 8009e44:	4603      	mov	r3, r0
 8009e46:	70fb      	strb	r3, [r7, #3]
 8009e48:	460b      	mov	r3, r1
 8009e4a:	803b      	strh	r3, [r7, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da0e      	bge.n	8009e7a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	f003 0207 	and.w	r2, r3, #7
 8009e62:	4613      	mov	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	4413      	add	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	3310      	adds	r3, #16
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	4413      	add	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	705a      	strb	r2, [r3, #1]
 8009e78:	e00e      	b.n	8009e98 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	f003 0207 	and.w	r2, r3, #7
 8009e80:	4613      	mov	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	00db      	lsls	r3, r3, #3
 8009e88:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	4413      	add	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009ea4:	883b      	ldrh	r3, [r7, #0]
 8009ea6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	78ba      	ldrb	r2, [r7, #2]
 8009eb2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009eb4:	78bb      	ldrb	r3, [r7, #2]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d102      	bne.n	8009ec0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d101      	bne.n	8009ece <HAL_PCD_EP_Open+0x98>
 8009eca:	2302      	movs	r3, #2
 8009ecc:	e00e      	b.n	8009eec <HAL_PCD_EP_Open+0xb6>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68f9      	ldr	r1, [r7, #12]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f006 f92d 	bl	801013c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8009eea:	7afb      	ldrb	r3, [r7, #11]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	607a      	str	r2, [r7, #4]
 8009efe:	603b      	str	r3, [r7, #0]
 8009f00:	460b      	mov	r3, r1
 8009f02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009f04:	7afb      	ldrb	r3, [r7, #11]
 8009f06:	f003 0207 	and.w	r2, r3, #7
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	00db      	lsls	r3, r3, #3
 8009f12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	4413      	add	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	683a      	ldr	r2, [r7, #0]
 8009f26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2200      	movs	r2, #0
 8009f32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	f003 0307 	and.w	r3, r3, #7
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	4618      	mov	r0, r3
 8009f48:	f006 fde0 	bl	8010b0c <USB_EPStartXfer>

  return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
 8009f62:	460b      	mov	r3, r1
 8009f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	f003 0207 	and.w	r2, r3, #7
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	00db      	lsls	r3, r3, #3
 8009f74:	3310      	adds	r3, #16
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fa2:	7afb      	ldrb	r3, [r7, #11]
 8009fa4:	f003 0307 	and.w	r3, r3, #7
 8009fa8:	b2da      	uxtb	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6979      	ldr	r1, [r7, #20]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f006 fda9 	bl	8010b0c <USB_EPStartXfer>

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fd0:	78fb      	ldrb	r3, [r7, #3]
 8009fd2:	f003 0307 	and.w	r3, r3, #7
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	7912      	ldrb	r2, [r2, #4]
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e03e      	b.n	800a060 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da0e      	bge.n	800a008 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	f003 0207 	and.w	r2, r3, #7
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	3310      	adds	r3, #16
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	705a      	strb	r2, [r3, #1]
 800a006:	e00c      	b.n	800a022 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a008:	78fa      	ldrb	r2, [r7, #3]
 800a00a:	4613      	mov	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	4413      	add	r3, r2
 800a010:	00db      	lsls	r3, r3, #3
 800a012:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	4413      	add	r3, r2
 800a01a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	b2da      	uxtb	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <HAL_PCD_EP_SetStall+0x7e>
 800a03e:	2302      	movs	r3, #2
 800a040:	e00e      	b.n	800a060 <HAL_PCD_EP_SetStall+0x9c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	4618      	mov	r0, r3
 800a052:	f007 fb0a 	bl	801166a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	f003 030f 	and.w	r3, r3, #15
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	7912      	ldrb	r2, [r2, #4]
 800a07e:	4293      	cmp	r3, r2
 800a080:	d901      	bls.n	800a086 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e040      	b.n	800a108 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	da0e      	bge.n	800a0ac <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	f003 0207 	and.w	r2, r3, #7
 800a094:	4613      	mov	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	4413      	add	r3, r2
 800a09a:	00db      	lsls	r3, r3, #3
 800a09c:	3310      	adds	r3, #16
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	705a      	strb	r2, [r3, #1]
 800a0aa:	e00e      	b.n	800a0ca <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	f003 0207 	and.w	r2, r3, #7
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	4413      	add	r3, r2
 800a0b8:	00db      	lsls	r3, r3, #3
 800a0ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d101      	bne.n	800a0ea <HAL_PCD_EP_ClrStall+0x82>
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e00e      	b.n	800a108 <HAL_PCD_EP_ClrStall+0xa0>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f007 fb07 	bl	801170c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b092      	sub	sp, #72	@ 0x48
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a118:	e333      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a122:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a124:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a130:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 8108 	bne.w	800a34a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a13a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b00      	cmp	r3, #0
 800a142:	d14c      	bne.n	800a1de <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a154:	813b      	strh	r3, [r7, #8]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	893b      	ldrh	r3, [r7, #8]
 800a15c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a164:	b29b      	uxth	r3, r3
 800a166:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	3310      	adds	r3, #16
 800a16c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a176:	b29b      	uxth	r3, r3
 800a178:	461a      	mov	r2, r3
 800a17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	00db      	lsls	r3, r3, #3
 800a180:	4413      	add	r3, r2
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	6812      	ldr	r2, [r2, #0]
 800a186:	4413      	add	r3, r2
 800a188:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a18c:	881b      	ldrh	r3, [r3, #0]
 800a18e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a194:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a198:	695a      	ldr	r2, [r3, #20]
 800a19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	441a      	add	r2, r3
 800a1a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f00e fb4f 	bl	801884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7b1b      	ldrb	r3, [r3, #12]
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 82e5 	beq.w	800a782 <PCD_EP_ISR_Handler+0x672>
 800a1b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f040 82e0 	bne.w	800a782 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7b1b      	ldrb	r3, [r3, #12]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	731a      	strb	r2, [r3, #12]
 800a1dc:	e2d1      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1e4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a1ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a1f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d032      	beq.n	800a25e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	00db      	lsls	r3, r3, #3
 800a20a:	4413      	add	r3, r2
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	4413      	add	r3, r2
 800a212:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a216:	881b      	ldrh	r3, [r3, #0]
 800a218:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a21c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a21e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6818      	ldr	r0, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a22a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a22c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a22e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a230:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a232:	b29b      	uxth	r3, r3
 800a234:	f007 fba6 	bl	8011984 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a244:	4013      	ands	r3, r2
 800a246:	817b      	strh	r3, [r7, #10]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	897a      	ldrh	r2, [r7, #10]
 800a24e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a252:	b292      	uxth	r2, r2
 800a254:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f00e faca 	bl	80187f0 <HAL_PCD_SetupStageCallback>
 800a25c:	e291      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a25e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a262:	2b00      	cmp	r3, #0
 800a264:	f280 828d 	bge.w	800a782 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b29a      	uxth	r2, r3
 800a270:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a274:	4013      	ands	r3, r2
 800a276:	81fb      	strh	r3, [r7, #14]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	89fa      	ldrh	r2, [r7, #14]
 800a27e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a282:	b292      	uxth	r2, r2
 800a284:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a28e:	b29b      	uxth	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	4413      	add	r3, r2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a2aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2ac:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b0:	69db      	ldr	r3, [r3, #28]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d019      	beq.n	800a2ea <PCD_EP_ISR_Handler+0x1da>
 800a2b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
 800a2c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c4:	6959      	ldr	r1, [r3, #20]
 800a2c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2cc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	f007 fb58 	bl	8011984 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2d6:	695a      	ldr	r2, [r3, #20]
 800a2d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2da:	69db      	ldr	r3, [r3, #28]
 800a2dc:	441a      	add	r2, r3
 800a2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2e0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6878      	ldr	r0, [r7, #4]
 800a2e6:	f00e fa95 	bl	8018814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	881b      	ldrh	r3, [r3, #0]
 800a2f0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a2f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a2f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f040 8242 	bne.w	800a782 <PCD_EP_ISR_Handler+0x672>
 800a2fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a300:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a304:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a308:	f000 823b 	beq.w	800a782 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	881b      	ldrh	r3, [r3, #0]
 800a312:	b29b      	uxth	r3, r3
 800a314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a31c:	81bb      	strh	r3, [r7, #12]
 800a31e:	89bb      	ldrh	r3, [r7, #12]
 800a320:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a324:	81bb      	strh	r3, [r7, #12]
 800a326:	89bb      	ldrh	r3, [r7, #12]
 800a328:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a32c:	81bb      	strh	r3, [r7, #12]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	89bb      	ldrh	r3, [r7, #12]
 800a334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a33c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a344:	b29b      	uxth	r3, r3
 800a346:	8013      	strh	r3, [r2, #0]
 800a348:	e21b      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a35c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a360:	2b00      	cmp	r3, #0
 800a362:	f280 80f1 	bge.w	800a548 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4413      	add	r3, r2
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	b29a      	uxth	r2, r3
 800a378:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a37c:	4013      	ands	r3, r2
 800a37e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	461a      	mov	r2, r3
 800a386:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a390:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a394:	b292      	uxth	r2, r2
 800a396:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a398:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a39c:	4613      	mov	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a3ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b0:	7b1b      	ldrb	r3, [r3, #12]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d123      	bne.n	800a3fe <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	6812      	ldr	r2, [r2, #0]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3d4:	881b      	ldrh	r3, [r3, #0]
 800a3d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800a3de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 808b 	beq.w	800a4fe <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6818      	ldr	r0, [r3, #0]
 800a3ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3ee:	6959      	ldr	r1, [r3, #20]
 800a3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3f2:	88da      	ldrh	r2, [r3, #6]
 800a3f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a3f8:	f007 fac4 	bl	8011984 <USB_ReadPMA>
 800a3fc:	e07f      	b.n	800a4fe <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a400:	78db      	ldrb	r3, [r3, #3]
 800a402:	2b02      	cmp	r3, #2
 800a404:	d109      	bne.n	800a41a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a406:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a408:	461a      	mov	r2, r3
 800a40a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f9c6 	bl	800a79e <HAL_PCD_EP_DB_Receive>
 800a412:	4603      	mov	r3, r0
 800a414:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a418:	e071      	b.n	800a4fe <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	461a      	mov	r2, r3
 800a420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	4413      	add	r3, r2
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a434:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	441a      	add	r2, r3
 800a444:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a446:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a44a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a44e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a452:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a456:	b29b      	uxth	r3, r3
 800a458:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d022      	beq.n	800a4ba <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	461a      	mov	r2, r3
 800a480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	00db      	lsls	r3, r3, #3
 800a486:	4413      	add	r3, r2
 800a488:	687a      	ldr	r2, [r7, #4]
 800a48a:	6812      	ldr	r2, [r2, #0]
 800a48c:	4413      	add	r3, r2
 800a48e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a498:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a49c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d02c      	beq.n	800a4fe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6818      	ldr	r0, [r3, #0]
 800a4a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4aa:	6959      	ldr	r1, [r3, #20]
 800a4ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4ae:	891a      	ldrh	r2, [r3, #8]
 800a4b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4b4:	f007 fa66 	bl	8011984 <USB_ReadPMA>
 800a4b8:	e021      	b.n	800a4fe <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	00db      	lsls	r3, r3, #3
 800a4cc:	4413      	add	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4d8:	881b      	ldrh	r3, [r3, #0]
 800a4da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4de:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800a4e2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6818      	ldr	r0, [r3, #0]
 800a4ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f0:	6959      	ldr	r1, [r3, #20]
 800a4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4f4:	895a      	ldrh	r2, [r3, #10]
 800a4f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a4fa:	f007 fa43 	bl	8011984 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a500:	69da      	ldr	r2, [r3, #28]
 800a502:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a506:	441a      	add	r2, r3
 800a508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a50a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a50e:	695a      	ldr	r2, [r3, #20]
 800a510:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a514:	441a      	add	r2, r3
 800a516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a518:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a51c:	699b      	ldr	r3, [r3, #24]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <PCD_EP_ISR_Handler+0x41e>
 800a522:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a528:	691b      	ldr	r3, [r3, #16]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d206      	bcs.n	800a53c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f00e f96d 	bl	8018814 <HAL_PCD_DataOutStageCallback>
 800a53a:	e005      	b.n	800a548 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a542:	4618      	mov	r0, r3
 800a544:	f006 fae2 	bl	8010b0c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a548:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a54a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 8117 	beq.w	800a782 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800a554:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800a558:	4613      	mov	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4413      	add	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	3310      	adds	r3, #16
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	4413      	add	r3, r2
 800a566:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a57e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a582:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a594:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a598:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a5a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5a2:	78db      	ldrb	r3, [r3, #3]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	f040 80a1 	bne.w	800a6ec <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800a5aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a5b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5b2:	7b1b      	ldrb	r3, [r3, #12]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 8092 	beq.w	800a6de <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a5ba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a5bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d046      	beq.n	800a652 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a5c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d126      	bne.n	800a61a <PCD_EP_ISR_Handler+0x50a>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	617b      	str	r3, [r7, #20]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	461a      	mov	r2, r3
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	00da      	lsls	r2, r3, #3
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	4413      	add	r3, r2
 800a5ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5f2:	613b      	str	r3, [r7, #16]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	b29b      	uxth	r3, r3
 800a60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a612:	b29a      	uxth	r2, r3
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	e061      	b.n	800a6de <PCD_EP_ISR_Handler+0x5ce>
 800a61a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d15d      	bne.n	800a6de <PCD_EP_ISR_Handler+0x5ce>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	61fb      	str	r3, [r7, #28]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a630:	b29b      	uxth	r3, r3
 800a632:	461a      	mov	r2, r3
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	4413      	add	r3, r2
 800a638:	61fb      	str	r3, [r7, #28]
 800a63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	00da      	lsls	r2, r3, #3
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	4413      	add	r3, r2
 800a644:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a648:	61bb      	str	r3, [r7, #24]
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	2200      	movs	r2, #0
 800a64e:	801a      	strh	r2, [r3, #0]
 800a650:	e045      	b.n	800a6de <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d126      	bne.n	800a6ae <PCD_EP_ISR_Handler+0x59e>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	627b      	str	r3, [r7, #36]	@ 0x24
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a66e:	b29b      	uxth	r3, r3
 800a670:	461a      	mov	r2, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a674:	4413      	add	r3, r2
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24
 800a678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	00da      	lsls	r2, r3, #3
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	4413      	add	r3, r2
 800a682:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a686:	623b      	str	r3, [r7, #32]
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a692:	b29a      	uxth	r2, r3
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	801a      	strh	r2, [r3, #0]
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	801a      	strh	r2, [r3, #0]
 800a6ac:	e017      	b.n	800a6de <PCD_EP_ISR_Handler+0x5ce>
 800a6ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6b0:	785b      	ldrb	r3, [r3, #1]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d113      	bne.n	800a6de <PCD_EP_ISR_Handler+0x5ce>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c4:	4413      	add	r3, r2
 800a6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	00da      	lsls	r2, r3, #3
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a6d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6da:	2200      	movs	r2, #0
 800a6dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a6de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f00e f8b0 	bl	801884a <HAL_PCD_DataInStageCallback>
 800a6ea:	e04a      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a6ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d13f      	bne.n	800a776 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	00db      	lsls	r3, r3, #3
 800a708:	4413      	add	r3, r2
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	6812      	ldr	r2, [r2, #0]
 800a70e:	4413      	add	r3, r2
 800a710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a71a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800a71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a71e:	699a      	ldr	r2, [r3, #24]
 800a720:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a722:	429a      	cmp	r2, r3
 800a724:	d906      	bls.n	800a734 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800a726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a728:	699a      	ldr	r2, [r3, #24]
 800a72a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a72c:	1ad2      	subs	r2, r2, r3
 800a72e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a730:	619a      	str	r2, [r3, #24]
 800a732:	e002      	b.n	800a73a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a734:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a736:	2200      	movs	r2, #0
 800a738:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a73a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a73c:	699b      	ldr	r3, [r3, #24]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f00e f87e 	bl	801884a <HAL_PCD_DataInStageCallback>
 800a74e:	e018      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a752:	695a      	ldr	r2, [r3, #20]
 800a754:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a756:	441a      	add	r2, r3
 800a758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a75a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a75e:	69da      	ldr	r2, [r3, #28]
 800a760:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a762:	441a      	add	r2, r3
 800a764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a766:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a76e:	4618      	mov	r0, r3
 800a770:	f006 f9cc 	bl	8010b0c <USB_EPStartXfer>
 800a774:	e005      	b.n	800a782 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a778:	461a      	mov	r2, r3
 800a77a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f917 	bl	800a9b0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	b21b      	sxth	r3, r3
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f6ff acc3 	blt.w	800a11a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3748      	adds	r7, #72	@ 0x48
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b088      	sub	sp, #32
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	4613      	mov	r3, r2
 800a7aa:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a7ac:	88fb      	ldrh	r3, [r7, #6]
 800a7ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d07c      	beq.n	800a8b0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	6812      	ldr	r2, [r2, #0]
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7d4:	881b      	ldrh	r3, [r3, #0]
 800a7d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	699a      	ldr	r2, [r3, #24]
 800a7e0:	8b7b      	ldrh	r3, [r7, #26]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d306      	bcc.n	800a7f4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	699a      	ldr	r2, [r3, #24]
 800a7ea:	8b7b      	ldrh	r3, [r7, #26]
 800a7ec:	1ad2      	subs	r2, r2, r3
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	619a      	str	r2, [r3, #24]
 800a7f2:	e002      	b.n	800a7fa <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d123      	bne.n	800a84a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	461a      	mov	r2, r3
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a81c:	833b      	strh	r3, [r7, #24]
 800a81e:	8b3b      	ldrh	r3, [r7, #24]
 800a820:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a824:	833b      	strh	r3, [r7, #24]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	441a      	add	r2, r3
 800a834:	8b3b      	ldrh	r3, [r7, #24]
 800a836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a83a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a83e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a846:	b29b      	uxth	r3, r3
 800a848:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a84a:	88fb      	ldrh	r3, [r7, #6]
 800a84c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01f      	beq.n	800a894 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	4413      	add	r3, r2
 800a862:	881b      	ldrh	r3, [r3, #0]
 800a864:	b29b      	uxth	r3, r3
 800a866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a86a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a86e:	82fb      	strh	r3, [r7, #22]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	441a      	add	r2, r3
 800a87e:	8afb      	ldrh	r3, [r7, #22]
 800a880:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a884:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a888:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a88c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a890:	b29b      	uxth	r3, r3
 800a892:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a894:	8b7b      	ldrh	r3, [r7, #26]
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 8085 	beq.w	800a9a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6818      	ldr	r0, [r3, #0]
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	6959      	ldr	r1, [r3, #20]
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	891a      	ldrh	r2, [r3, #8]
 800a8a8:	8b7b      	ldrh	r3, [r7, #26]
 800a8aa:	f007 f86b 	bl	8011984 <USB_ReadPMA>
 800a8ae:	e07a      	b.n	800a9a6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	00db      	lsls	r3, r3, #3
 800a8c2:	4413      	add	r3, r2
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	6812      	ldr	r2, [r2, #0]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8d4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	699a      	ldr	r2, [r3, #24]
 800a8da:	8b7b      	ldrh	r3, [r7, #26]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d306      	bcc.n	800a8ee <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	8b7b      	ldrh	r3, [r7, #26]
 800a8e6:	1ad2      	subs	r2, r2, r3
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	619a      	str	r2, [r3, #24]
 800a8ec:	e002      	b.n	800a8f4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d123      	bne.n	800a944 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a916:	83fb      	strh	r3, [r7, #30]
 800a918:	8bfb      	ldrh	r3, [r7, #30]
 800a91a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a91e:	83fb      	strh	r3, [r7, #30]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	781b      	ldrb	r3, [r3, #0]
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	441a      	add	r2, r3
 800a92e:	8bfb      	ldrh	r3, [r7, #30]
 800a930:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a934:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a93c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a940:	b29b      	uxth	r3, r3
 800a942:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a944:	88fb      	ldrh	r3, [r7, #6]
 800a946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d11f      	bne.n	800a98e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	461a      	mov	r2, r3
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	b29b      	uxth	r3, r3
 800a960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a964:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a968:	83bb      	strh	r3, [r7, #28]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	441a      	add	r2, r3
 800a978:	8bbb      	ldrh	r3, [r7, #28]
 800a97a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a97e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a986:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a98e:	8b7b      	ldrh	r3, [r7, #26]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d008      	beq.n	800a9a6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6818      	ldr	r0, [r3, #0]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	6959      	ldr	r1, [r3, #20]
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	895a      	ldrh	r2, [r3, #10]
 800a9a0:	8b7b      	ldrh	r3, [r7, #26]
 800a9a2:	f006 ffef 	bl	8011984 <USB_ReadPMA>
    }
  }

  return count;
 800a9a6:	8b7b      	ldrh	r3, [r7, #26]
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3720      	adds	r7, #32
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b0a6      	sub	sp, #152	@ 0x98
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9be:	88fb      	ldrh	r3, [r7, #6]
 800a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f000 81f7 	beq.w	800adb8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	4413      	add	r3, r2
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	6812      	ldr	r2, [r2, #0]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9ee:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d907      	bls.n	800aa0e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	699a      	ldr	r2, [r3, #24]
 800aa02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	619a      	str	r2, [r3, #24]
 800aa0c:	e002      	b.n	800aa14 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2200      	movs	r2, #0
 800aa12:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 80e1 	bne.w	800abe0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	785b      	ldrb	r3, [r3, #1]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d126      	bne.n	800aa74 <HAL_PCD_EP_DB_Transmit+0xc4>
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	4413      	add	r3, r2
 800aa3c:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	00da      	lsls	r2, r3, #3
 800aa44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa46:	4413      	add	r3, r2
 800aa48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	801a      	strh	r2, [r3, #0]
 800aa72:	e01a      	b.n	800aaaa <HAL_PCD_EP_DB_Transmit+0xfa>
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d116      	bne.n	800aaaa <HAL_PCD_EP_DB_Transmit+0xfa>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	4413      	add	r3, r2
 800aa92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00da      	lsls	r2, r3, #3
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aaa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	785b      	ldrb	r3, [r3, #1]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d126      	bne.n	800ab06 <HAL_PCD_EP_DB_Transmit+0x156>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	623b      	str	r3, [r7, #32]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	461a      	mov	r2, r3
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	4413      	add	r3, r2
 800aace:	623b      	str	r3, [r7, #32]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	00da      	lsls	r2, r3, #3
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	4413      	add	r3, r2
 800aada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aade:	61fb      	str	r3, [r7, #28]
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aafa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	801a      	strh	r2, [r3, #0]
 800ab04:	e017      	b.n	800ab36 <HAL_PCD_EP_DB_Transmit+0x186>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	785b      	ldrb	r3, [r3, #1]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d113      	bne.n	800ab36 <HAL_PCD_EP_DB_Transmit+0x186>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab16:	b29b      	uxth	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1c:	4413      	add	r3, r2
 800ab1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00da      	lsls	r2, r3, #3
 800ab26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab28:	4413      	add	r3, r2
 800ab2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab32:	2200      	movs	r2, #0
 800ab34:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	78db      	ldrb	r3, [r3, #3]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d123      	bne.n	800ab86 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	461a      	mov	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab58:	837b      	strh	r3, [r7, #26]
 800ab5a:	8b7b      	ldrh	r3, [r7, #26]
 800ab5c:	f083 0320 	eor.w	r3, r3, #32
 800ab60:	837b      	strh	r3, [r7, #26]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	009b      	lsls	r3, r3, #2
 800ab6e:	441a      	add	r2, r3
 800ab70:	8b7b      	ldrh	r3, [r7, #26]
 800ab72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f00d fe5c 	bl	801884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d01f      	beq.n	800abdc <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	461a      	mov	r2, r3
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	4413      	add	r3, r2
 800abaa:	881b      	ldrh	r3, [r3, #0]
 800abac:	b29b      	uxth	r3, r3
 800abae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abb6:	833b      	strh	r3, [r7, #24]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	441a      	add	r2, r3
 800abc6:	8b3b      	ldrh	r3, [r7, #24]
 800abc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800abd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd8:	b29b      	uxth	r3, r3
 800abda:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	e31f      	b.n	800b220 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d021      	beq.n	800ac2e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac04:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	441a      	add	r2, r3
 800ac16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ac1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	f040 82ca 	bne.w	800b1ce <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	695a      	ldr	r2, [r3, #20]
 800ac3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac42:	441a      	add	r2, r3
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	69da      	ldr	r2, [r3, #28]
 800ac4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac50:	441a      	add	r2, r3
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	6a1a      	ldr	r2, [r3, #32]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	691b      	ldr	r3, [r3, #16]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d309      	bcc.n	800ac76 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	6a1a      	ldr	r2, [r3, #32]
 800ac6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac6e:	1ad2      	subs	r2, r2, r3
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	621a      	str	r2, [r3, #32]
 800ac74:	e015      	b.n	800aca2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d107      	bne.n	800ac8e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800ac7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ac82:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2200      	movs	r2, #0
 800ac88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800ac8c:	e009      	b.n	800aca2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	785b      	ldrb	r3, [r3, #1]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d15f      	bne.n	800ad6a <HAL_PCD_EP_DB_Transmit+0x3ba>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	643b      	str	r3, [r7, #64]	@ 0x40
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acb8:	b29b      	uxth	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acbe:	4413      	add	r3, r2
 800acc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	00da      	lsls	r2, r3, #3
 800acc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acca:	4413      	add	r3, r2
 800accc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800acd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acdc:	b29a      	uxth	r2, r3
 800acde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10a      	bne.n	800acfe <HAL_PCD_EP_DB_Transmit+0x34e>
 800ace8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	b29b      	uxth	r3, r3
 800acee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acf6:	b29a      	uxth	r2, r3
 800acf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfa:	801a      	strh	r2, [r3, #0]
 800acfc:	e051      	b.n	800ada2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800acfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad00:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad02:	d816      	bhi.n	800ad32 <HAL_PCD_EP_DB_Transmit+0x382>
 800ad04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad06:	085b      	lsrs	r3, r3, #1
 800ad08:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad0c:	f003 0301 	and.w	r3, r3, #1
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d002      	beq.n	800ad1a <HAL_PCD_EP_DB_Transmit+0x36a>
 800ad14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad16:	3301      	adds	r3, #1
 800ad18:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad1c:	881b      	ldrh	r3, [r3, #0]
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	029b      	lsls	r3, r3, #10
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad2e:	801a      	strh	r2, [r3, #0]
 800ad30:	e037      	b.n	800ada2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ad32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad34:	095b      	lsrs	r3, r3, #5
 800ad36:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad3a:	f003 031f 	and.w	r3, r3, #31
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <HAL_PCD_EP_DB_Transmit+0x398>
 800ad42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad44:	3b01      	subs	r3, #1
 800ad46:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad4a:	881b      	ldrh	r3, [r3, #0]
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	029b      	lsls	r3, r3, #10
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	4313      	orrs	r3, r2
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad62:	b29a      	uxth	r2, r3
 800ad64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad66:	801a      	strh	r2, [r3, #0]
 800ad68:	e01b      	b.n	800ada2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d117      	bne.n	800ada2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	461a      	mov	r2, r3
 800ad84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad86:	4413      	add	r3, r2
 800ad88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	00da      	lsls	r2, r3, #3
 800ad90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad92:	4413      	add	r3, r2
 800ad94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad98:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ad9c:	b29a      	uxth	r2, r3
 800ad9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ada0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6818      	ldr	r0, [r3, #0]
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	6959      	ldr	r1, [r3, #20]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	891a      	ldrh	r2, [r3, #8]
 800adae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	f006 fda4 	bl	80118fe <USB_WritePMA>
 800adb6:	e20a      	b.n	800b1ce <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	461a      	mov	r2, r3
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	4413      	add	r3, r2
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	6812      	ldr	r2, [r2, #0]
 800add0:	4413      	add	r3, r2
 800add2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800add6:	881b      	ldrh	r3, [r3, #0]
 800add8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800addc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	699a      	ldr	r2, [r3, #24]
 800ade4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ade8:	429a      	cmp	r2, r3
 800adea:	d307      	bcc.n	800adfc <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	699a      	ldr	r2, [r3, #24]
 800adf0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800adf4:	1ad2      	subs	r2, r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	619a      	str	r2, [r3, #24]
 800adfa:	e002      	b.n	800ae02 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2200      	movs	r2, #0
 800ae00:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	699b      	ldr	r3, [r3, #24]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f040 80f6 	bne.w	800aff8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	785b      	ldrb	r3, [r3, #1]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d126      	bne.n	800ae62 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	461a      	mov	r2, r3
 800ae26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae28:	4413      	add	r3, r2
 800ae2a:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	00da      	lsls	r2, r3, #3
 800ae32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae34:	4413      	add	r3, r2
 800ae36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae3a:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae4a:	801a      	strh	r2, [r3, #0]
 800ae4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae5e:	801a      	strh	r2, [r3, #0]
 800ae60:	e01a      	b.n	800ae98 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d116      	bne.n	800ae98 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae7e:	4413      	add	r3, r2
 800ae80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	00da      	lsls	r2, r3, #3
 800ae88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae90:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae94:	2200      	movs	r2, #0
 800ae96:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	785b      	ldrb	r3, [r3, #1]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d12f      	bne.n	800af08 <HAL_PCD_EP_DB_Transmit+0x558>
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aeb8:	b29b      	uxth	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aec0:	4413      	add	r3, r2
 800aec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	00da      	lsls	r2, r3, #3
 800aecc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aed0:	4413      	add	r3, r2
 800aed2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aed6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aeda:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aede:	881b      	ldrh	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aeec:	801a      	strh	r2, [r3, #0]
 800aeee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aefa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aefe:	b29a      	uxth	r2, r3
 800af00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800af04:	801a      	strh	r2, [r3, #0]
 800af06:	e01c      	b.n	800af42 <HAL_PCD_EP_DB_Transmit+0x592>
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	785b      	ldrb	r3, [r3, #1]
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d118      	bne.n	800af42 <HAL_PCD_EP_DB_Transmit+0x592>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af18:	b29b      	uxth	r3, r3
 800af1a:	461a      	mov	r2, r3
 800af1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af20:	4413      	add	r3, r2
 800af22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	00da      	lsls	r2, r3, #3
 800af2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af30:	4413      	add	r3, r2
 800af32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800af36:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af3e:	2200      	movs	r2, #0
 800af40:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	78db      	ldrb	r3, [r3, #3]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d127      	bne.n	800af9a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	881b      	ldrh	r3, [r3, #0]
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af64:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800af68:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800af6c:	f083 0320 	eor.w	r3, r3, #32
 800af70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	461a      	mov	r2, r3
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	441a      	add	r2, r3
 800af82:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800af86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af96:	b29b      	uxth	r3, r3
 800af98:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	4619      	mov	r1, r3
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f00d fc52 	bl	801884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800afa6:	88fb      	ldrh	r3, [r7, #6]
 800afa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d121      	bne.n	800aff4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afca:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	461a      	mov	r2, r3
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	441a      	add	r2, r3
 800afdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800afe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	e113      	b.n	800b220 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800affe:	2b00      	cmp	r3, #0
 800b000:	d121      	bne.n	800b046 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	461a      	mov	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29b      	uxth	r3, r3
 800b014:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b01c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	461a      	mov	r2, r3
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	441a      	add	r2, r3
 800b02e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b03a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b042:	b29b      	uxth	r3, r3
 800b044:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	f040 80be 	bne.w	800b1ce <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	695a      	ldr	r2, [r3, #20]
 800b056:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b05a:	441a      	add	r2, r3
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	69da      	ldr	r2, [r3, #28]
 800b064:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b068:	441a      	add	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6a1a      	ldr	r2, [r3, #32]
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	429a      	cmp	r2, r3
 800b078:	d309      	bcc.n	800b08e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	6a1a      	ldr	r2, [r3, #32]
 800b084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b086:	1ad2      	subs	r2, r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	621a      	str	r2, [r3, #32]
 800b08c:	e015      	b.n	800b0ba <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	6a1b      	ldr	r3, [r3, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d107      	bne.n	800b0a6 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b096:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b09a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b0a4:	e009      	b.n	800b0ba <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d15f      	bne.n	800b188 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	461a      	mov	r2, r3
 800b0da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0dc:	4413      	add	r3, r2
 800b0de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	00da      	lsls	r2, r3, #3
 800b0e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b0ee:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0f2:	881b      	ldrh	r3, [r3, #0]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b0fe:	801a      	strh	r2, [r3, #0]
 800b100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <HAL_PCD_EP_DB_Transmit+0x76c>
 800b106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b108:	881b      	ldrh	r3, [r3, #0]
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b114:	b29a      	uxth	r2, r3
 800b116:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b118:	801a      	strh	r2, [r3, #0]
 800b11a:	e04e      	b.n	800b1ba <HAL_PCD_EP_DB_Transmit+0x80a>
 800b11c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b11e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b120:	d816      	bhi.n	800b150 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b124:	085b      	lsrs	r3, r3, #1
 800b126:	663b      	str	r3, [r7, #96]	@ 0x60
 800b128:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b12a:	f003 0301 	and.w	r3, r3, #1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d002      	beq.n	800b138 <HAL_PCD_EP_DB_Transmit+0x788>
 800b132:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b134:	3301      	adds	r3, #1
 800b136:	663b      	str	r3, [r7, #96]	@ 0x60
 800b138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b140:	b29b      	uxth	r3, r3
 800b142:	029b      	lsls	r3, r3, #10
 800b144:	b29b      	uxth	r3, r3
 800b146:	4313      	orrs	r3, r2
 800b148:	b29a      	uxth	r2, r3
 800b14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b14c:	801a      	strh	r2, [r3, #0]
 800b14e:	e034      	b.n	800b1ba <HAL_PCD_EP_DB_Transmit+0x80a>
 800b150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b152:	095b      	lsrs	r3, r3, #5
 800b154:	663b      	str	r3, [r7, #96]	@ 0x60
 800b156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b158:	f003 031f 	and.w	r3, r3, #31
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b160:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b162:	3b01      	subs	r3, #1
 800b164:	663b      	str	r3, [r7, #96]	@ 0x60
 800b166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29a      	uxth	r2, r3
 800b16c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b16e:	b29b      	uxth	r3, r3
 800b170:	029b      	lsls	r3, r3, #10
 800b172:	b29b      	uxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b29b      	uxth	r3, r3
 800b178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b17c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b180:	b29a      	uxth	r2, r3
 800b182:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b184:	801a      	strh	r2, [r3, #0]
 800b186:	e018      	b.n	800b1ba <HAL_PCD_EP_DB_Transmit+0x80a>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	785b      	ldrb	r3, [r3, #1]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d114      	bne.n	800b1ba <HAL_PCD_EP_DB_Transmit+0x80a>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b198:	b29b      	uxth	r3, r3
 800b19a:	461a      	mov	r2, r3
 800b19c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b19e:	4413      	add	r3, r2
 800b1a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	00da      	lsls	r2, r3, #3
 800b1a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b1b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b1b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1b8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	6959      	ldr	r1, [r3, #20]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	895a      	ldrh	r2, [r3, #10]
 800b1c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	f006 fb98 	bl	80118fe <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	881b      	ldrh	r3, [r3, #0]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1e8:	82fb      	strh	r3, [r7, #22]
 800b1ea:	8afb      	ldrh	r3, [r7, #22]
 800b1ec:	f083 0310 	eor.w	r3, r3, #16
 800b1f0:	82fb      	strh	r3, [r7, #22]
 800b1f2:	8afb      	ldrh	r3, [r7, #22]
 800b1f4:	f083 0320 	eor.w	r3, r3, #32
 800b1f8:	82fb      	strh	r3, [r7, #22]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	441a      	add	r2, r3
 800b208:	8afb      	ldrh	r3, [r7, #22]
 800b20a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b20e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b216:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3798      	adds	r7, #152	@ 0x98
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	607b      	str	r3, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	817b      	strh	r3, [r7, #10]
 800b236:	4613      	mov	r3, r2
 800b238:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b23a:	897b      	ldrh	r3, [r7, #10]
 800b23c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b240:	b29b      	uxth	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00b      	beq.n	800b25e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b246:	897b      	ldrh	r3, [r7, #10]
 800b248:	f003 0207 	and.w	r2, r3, #7
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	00db      	lsls	r3, r3, #3
 800b254:	3310      	adds	r3, #16
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4413      	add	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e009      	b.n	800b272 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b25e:	897a      	ldrh	r2, [r7, #10]
 800b260:	4613      	mov	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b272:	893b      	ldrh	r3, [r7, #8]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d107      	bne.n	800b288 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2200      	movs	r2, #0
 800b27c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	b29a      	uxth	r2, r3
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	80da      	strh	r2, [r3, #6]
 800b286:	e00b      	b.n	800b2a0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2201      	movs	r2, #1
 800b28c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	b29a      	uxth	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	0c1b      	lsrs	r3, r3, #16
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b2a0:	2300      	movs	r3, #0
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	f043 0301 	orr.w	r3, r3, #1
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	f043 0302 	orr.w	r3, r3, #2
 800b2ec:	b29a      	uxth	r2, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
	...

0800b304 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b304:	b480      	push	{r7}
 800b306:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b308:	4b05      	ldr	r3, [pc, #20]	@ (800b320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a04      	ldr	r2, [pc, #16]	@ (800b320 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b30e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b312:	6013      	str	r3, [r2, #0]
}
 800b314:	bf00      	nop
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	58000400 	.word	0x58000400

0800b324 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b328:	4b04      	ldr	r3, [pc, #16]	@ (800b33c <HAL_PWREx_GetVoltageRange+0x18>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b330:	4618      	mov	r0, r3
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	58000400 	.word	0x58000400

0800b340 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800b344:	4b05      	ldr	r3, [pc, #20]	@ (800b35c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	4a04      	ldr	r2, [pc, #16]	@ (800b35c <HAL_PWREx_EnableVddUSB+0x1c>)
 800b34a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b34e:	6053      	str	r3, [r2, #4]
}
 800b350:	bf00      	nop
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	58000400 	.word	0x58000400

0800b360 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b36e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b372:	d101      	bne.n	800b378 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <LL_RCC_HSE_Enable>:
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b396:	6013      	str	r3, [r2, #0]
}
 800b398:	bf00      	nop
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <LL_RCC_HSE_Disable>:
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b3a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3b4:	6013      	str	r3, [r2, #0]
}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <LL_RCC_HSE_IsReady>:
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3d2:	d101      	bne.n	800b3d8 <LL_RCC_HSE_IsReady+0x18>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e000      	b.n	800b3da <LL_RCC_HSE_IsReady+0x1a>
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <LL_RCC_HSI_Enable>:
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3f6:	6013      	str	r3, [r2, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <LL_RCC_HSI_Disable>:
{
 800b402:	b480      	push	{r7}
 800b404:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b414:	6013      	str	r3, [r2, #0]
}
 800b416:	bf00      	nop
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <LL_RCC_HSI_IsReady>:
{
 800b420:	b480      	push	{r7}
 800b422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b42e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b432:	d101      	bne.n	800b438 <LL_RCC_HSI_IsReady+0x18>
 800b434:	2301      	movs	r3, #1
 800b436:	e000      	b.n	800b43a <LL_RCC_HSI_IsReady+0x1a>
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	061b      	lsls	r3, r3, #24
 800b45a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b45e:	4313      	orrs	r3, r2
 800b460:	604b      	str	r3, [r1, #4]
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <LL_RCC_HSI48_Enable>:
{
 800b46e:	b480      	push	{r7}
 800b470:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b47a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b47e:	f043 0301 	orr.w	r3, r3, #1
 800b482:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b486:	bf00      	nop
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <LL_RCC_HSI48_Disable>:
{
 800b490:	b480      	push	{r7}
 800b492:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b49c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4a0:	f023 0301 	bic.w	r3, r3, #1
 800b4a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b4a8:	bf00      	nop
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <LL_RCC_HSI48_IsReady>:
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b4b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4be:	f003 0302 	and.w	r3, r3, #2
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d101      	bne.n	800b4ca <LL_RCC_HSI48_IsReady+0x18>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e000      	b.n	800b4cc <LL_RCC_HSI48_IsReady+0x1a>
 800b4ca:	2300      	movs	r3, #0
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <LL_RCC_LSE_Enable>:
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b4e6:	f043 0301 	orr.w	r3, r3, #1
 800b4ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b4ee:	bf00      	nop
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <LL_RCC_LSE_Disable>:
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b4fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b510:	bf00      	nop
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <LL_RCC_LSE_EnableBypass>:
{
 800b51a:	b480      	push	{r7}
 800b51c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b51e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b52a:	f043 0304 	orr.w	r3, r3, #4
 800b52e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b532:	bf00      	nop
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <LL_RCC_LSE_DisableBypass>:
{
 800b53c:	b480      	push	{r7}
 800b53e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b548:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b54c:	f023 0304 	bic.w	r3, r3, #4
 800b550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b554:	bf00      	nop
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr

0800b55e <LL_RCC_LSE_IsReady>:
{
 800b55e:	b480      	push	{r7}
 800b560:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b56a:	f003 0302 	and.w	r3, r3, #2
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d101      	bne.n	800b576 <LL_RCC_LSE_IsReady+0x18>
 800b572:	2301      	movs	r3, #1
 800b574:	e000      	b.n	800b578 <LL_RCC_LSE_IsReady+0x1a>
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <LL_RCC_LSI1_Enable>:
{
 800b582:	b480      	push	{r7}
 800b584:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b58e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b592:	f043 0301 	orr.w	r3, r3, #1
 800b596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b59a:	bf00      	nop
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <LL_RCC_LSI1_Disable>:
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b5a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b5b4:	f023 0301 	bic.w	r3, r3, #1
 800b5b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b5bc:	bf00      	nop
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <LL_RCC_LSI1_IsReady>:
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d101      	bne.n	800b5de <LL_RCC_LSI1_IsReady+0x18>
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <LL_RCC_LSI1_IsReady+0x1a>
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <LL_RCC_LSI2_Enable>:
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b5ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b5fa:	f043 0304 	orr.w	r3, r3, #4
 800b5fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b602:	bf00      	nop
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr

0800b60c <LL_RCC_LSI2_Disable>:
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b61c:	f023 0304 	bic.w	r3, r3, #4
 800b620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b624:	bf00      	nop
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <LL_RCC_LSI2_IsReady>:
{
 800b62e:	b480      	push	{r7}
 800b630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b63a:	f003 0308 	and.w	r3, r3, #8
 800b63e:	2b08      	cmp	r3, #8
 800b640:	d101      	bne.n	800b646 <LL_RCC_LSI2_IsReady+0x18>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <LL_RCC_LSI2_IsReady+0x1a>
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr

0800b652 <LL_RCC_LSI2_SetTrimming>:
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b65a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b65e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b662:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	021b      	lsls	r3, r3, #8
 800b66a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b66e:	4313      	orrs	r3, r2
 800b670:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <LL_RCC_MSI_Enable>:
{
 800b680:	b480      	push	{r7}
 800b682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b68e:	f043 0301 	orr.w	r3, r3, #1
 800b692:	6013      	str	r3, [r2, #0]
}
 800b694:	bf00      	nop
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <LL_RCC_MSI_Disable>:
{
 800b69e:	b480      	push	{r7}
 800b6a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b6a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6ac:	f023 0301 	bic.w	r3, r3, #1
 800b6b0:	6013      	str	r3, [r2, #0]
}
 800b6b2:	bf00      	nop
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <LL_RCC_MSI_IsReady>:
{
 800b6bc:	b480      	push	{r7}
 800b6be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b6c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d101      	bne.n	800b6d2 <LL_RCC_MSI_IsReady+0x16>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e000      	b.n	800b6d4 <LL_RCC_MSI_IsReady+0x18>
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <LL_RCC_MSI_SetRange>:
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b6e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b6f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	600b      	str	r3, [r1, #0]
}
 800b6fa:	bf00      	nop
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <LL_RCC_MSI_GetRange>:
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b70c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b716:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2bb0      	cmp	r3, #176	@ 0xb0
 800b71c:	d901      	bls.n	800b722 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b71e:	23b0      	movs	r3, #176	@ 0xb0
 800b720:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b722:	687b      	ldr	r3, [r7, #4]
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	021b      	lsls	r3, r3, #8
 800b746:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b74a:	4313      	orrs	r3, r2
 800b74c:	604b      	str	r3, [r1, #4]
}
 800b74e:	bf00      	nop
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <LL_RCC_SetSysClkSource>:
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f023 0203 	bic.w	r2, r3, #3
 800b76c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4313      	orrs	r3, r2
 800b774:	608b      	str	r3, [r1, #8]
}
 800b776:	bf00      	nop
 800b778:	370c      	adds	r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <LL_RCC_GetSysClkSource>:
{
 800b782:	b480      	push	{r7}
 800b784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f003 030c 	and.w	r3, r3, #12
}
 800b790:	4618      	mov	r0, r3
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr

0800b79a <LL_RCC_SetAHBPrescaler>:
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b7a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b7ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	608b      	str	r3, [r1, #8]
}
 800b7b6:	bf00      	nop
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <LL_C2_RCC_SetAHBPrescaler>:
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b7ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b7d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b7d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <LL_RCC_SetAHB4Prescaler>:
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b7f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b7fe:	f023 020f 	bic.w	r2, r3, #15
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	091b      	lsrs	r3, r3, #4
 800b806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b80a:	4313      	orrs	r3, r2
 800b80c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <LL_RCC_SetAPB1Prescaler>:
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b82e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4313      	orrs	r3, r2
 800b836:	608b      	str	r3, [r1, #8]
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <LL_RCC_SetAPB2Prescaler>:
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b84c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b856:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	608b      	str	r3, [r1, #8]
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <LL_RCC_GetAHBPrescaler>:
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <LL_RCC_GetAHB4Prescaler>:
{
 800b884:	b480      	push	{r7}
 800b886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b88c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b890:	011b      	lsls	r3, r3, #4
 800b892:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b896:	4618      	mov	r0, r3
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <LL_RCC_GetAPB1Prescaler>:
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b8a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <LL_RCC_GetAPB2Prescaler>:
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b8bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b8d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8e2:	6013      	str	r3, [r2, #0]
}
 800b8e4:	bf00      	nop
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b8f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b900:	6013      	str	r3, [r2, #0]
}
 800b902:	bf00      	nop
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b91a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b91e:	d101      	bne.n	800b924 <LL_RCC_PLL_IsReady+0x18>
 800b920:	2301      	movs	r3, #1
 800b922:	e000      	b.n	800b926 <LL_RCC_PLL_IsReady+0x1a>
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	0a1b      	lsrs	r3, r3, #8
 800b93c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b940:	4618      	mov	r0, r3
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b94a:	b480      	push	{r7}
 800b94c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b94e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b958:	4618      	mov	r0, r3
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b962:	b480      	push	{r7}
 800b964:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b970:	4618      	mov	r0, r3
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b97a:	b480      	push	{r7}
 800b97c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b97e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f003 0303 	and.w	r3, r3, #3
}
 800b988:	4618      	mov	r0, r3
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b992:	b480      	push	{r7}
 800b994:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9a4:	d101      	bne.n	800b9aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e000      	b.n	800b9ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b9ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b9c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ca:	d101      	bne.n	800b9d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e000      	b.n	800b9d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b9e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b9e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b9ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9f0:	d101      	bne.n	800b9f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e000      	b.n	800b9f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ba02:	b480      	push	{r7}
 800ba04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ba06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba14:	d101      	bne.n	800ba1a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800ba16:	2301      	movs	r3, #1
 800ba18:	e000      	b.n	800ba1c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800ba26:	b480      	push	{r7}
 800ba28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800ba2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ba34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba38:	d101      	bne.n	800ba3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e000      	b.n	800ba40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr
	...

0800ba4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ba4c:	b590      	push	{r4, r7, lr}
 800ba4e:	b08d      	sub	sp, #52	@ 0x34
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d101      	bne.n	800ba5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	e363      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0320 	and.w	r3, r3, #32
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f000 808d 	beq.w	800bb86 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba6c:	f7ff fe89 	bl	800b782 <LL_RCC_GetSysClkSource>
 800ba70:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ba72:	f7ff ff82 	bl	800b97a <LL_RCC_PLL_GetMainSource>
 800ba76:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <HAL_RCC_OscConfig+0x3e>
 800ba7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba80:	2b0c      	cmp	r3, #12
 800ba82:	d147      	bne.n	800bb14 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ba84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d144      	bne.n	800bb14 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e347      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ba9a:	f7ff fe34 	bl	800b706 <LL_RCC_MSI_GetRange>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	429c      	cmp	r4, r3
 800baa2:	d914      	bls.n	800bace <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fd2f 	bl	800c50c <RCC_SetFlashLatencyFromMSIRange>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e336      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff fe0e 	bl	800b6de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff fe32 	bl	800b730 <LL_RCC_MSI_SetCalibTrimming>
 800bacc:	e013      	b.n	800baf6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff fe03 	bl	800b6de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a1b      	ldr	r3, [r3, #32]
 800badc:	4618      	mov	r0, r3
 800bade:	f7ff fe27 	bl	800b730 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 fd10 	bl	800c50c <RCC_SetFlashLatencyFromMSIRange>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e317      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800baf6:	f000 fcc9 	bl	800c48c <HAL_RCC_GetHCLKFreq>
 800bafa:	4603      	mov	r3, r0
 800bafc:	4aa4      	ldr	r2, [pc, #656]	@ (800bd90 <HAL_RCC_OscConfig+0x344>)
 800bafe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bb00:	4ba4      	ldr	r3, [pc, #656]	@ (800bd94 <HAL_RCC_OscConfig+0x348>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fb ff51 	bl	80079ac <HAL_InitTick>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d039      	beq.n	800bb84 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e308      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	69db      	ldr	r3, [r3, #28]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d01e      	beq.n	800bb5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bb1c:	f7ff fdb0 	bl	800b680 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bb20:	f7fb ff92 	bl	8007a48 <HAL_GetTick>
 800bb24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bb26:	e008      	b.n	800bb3a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb28:	f7fb ff8e 	bl	8007a48 <HAL_GetTick>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d901      	bls.n	800bb3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bb36:	2303      	movs	r3, #3
 800bb38:	e2f5      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bb3a:	f7ff fdbf 	bl	800b6bc <LL_RCC_MSI_IsReady>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d0f1      	beq.n	800bb28 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7ff fdc8 	bl	800b6de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a1b      	ldr	r3, [r3, #32]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff fdec 	bl	800b730 <LL_RCC_MSI_SetCalibTrimming>
 800bb58:	e015      	b.n	800bb86 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bb5a:	f7ff fda0 	bl	800b69e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bb5e:	f7fb ff73 	bl	8007a48 <HAL_GetTick>
 800bb62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bb64:	e008      	b.n	800bb78 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb66:	f7fb ff6f 	bl	8007a48 <HAL_GetTick>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	2b02      	cmp	r3, #2
 800bb72:	d901      	bls.n	800bb78 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e2d6      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bb78:	f7ff fda0 	bl	800b6bc <LL_RCC_MSI_IsReady>
 800bb7c:	4603      	mov	r3, r0
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d1f1      	bne.n	800bb66 <HAL_RCC_OscConfig+0x11a>
 800bb82:	e000      	b.n	800bb86 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bb84:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d047      	beq.n	800bc22 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bb92:	f7ff fdf6 	bl	800b782 <LL_RCC_GetSysClkSource>
 800bb96:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bb98:	f7ff feef 	bl	800b97a <LL_RCC_PLL_GetMainSource>
 800bb9c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	2b08      	cmp	r3, #8
 800bba2:	d005      	beq.n	800bbb0 <HAL_RCC_OscConfig+0x164>
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	2b0c      	cmp	r3, #12
 800bba8:	d108      	bne.n	800bbbc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	2b03      	cmp	r3, #3
 800bbae:	d105      	bne.n	800bbbc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d134      	bne.n	800bc22 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e2b4      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bbc4:	d102      	bne.n	800bbcc <HAL_RCC_OscConfig+0x180>
 800bbc6:	f7ff fbdd 	bl	800b384 <LL_RCC_HSE_Enable>
 800bbca:	e001      	b.n	800bbd0 <HAL_RCC_OscConfig+0x184>
 800bbcc:	f7ff fbe9 	bl	800b3a2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d012      	beq.n	800bbfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbd8:	f7fb ff36 	bl	8007a48 <HAL_GetTick>
 800bbdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bbde:	e008      	b.n	800bbf2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbe0:	f7fb ff32 	bl	8007a48 <HAL_GetTick>
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	2b64      	cmp	r3, #100	@ 0x64
 800bbec:	d901      	bls.n	800bbf2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	e299      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bbf2:	f7ff fbe5 	bl	800b3c0 <LL_RCC_HSE_IsReady>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0f1      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x194>
 800bbfc:	e011      	b.n	800bc22 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbfe:	f7fb ff23 	bl	8007a48 <HAL_GetTick>
 800bc02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bc04:	e008      	b.n	800bc18 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc06:	f7fb ff1f 	bl	8007a48 <HAL_GetTick>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	1ad3      	subs	r3, r2, r3
 800bc10:	2b64      	cmp	r3, #100	@ 0x64
 800bc12:	d901      	bls.n	800bc18 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e286      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bc18:	f7ff fbd2 	bl	800b3c0 <LL_RCC_HSE_IsReady>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1f1      	bne.n	800bc06 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f003 0302 	and.w	r3, r3, #2
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d04c      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc2e:	f7ff fda8 	bl	800b782 <LL_RCC_GetSysClkSource>
 800bc32:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bc34:	f7ff fea1 	bl	800b97a <LL_RCC_PLL_GetMainSource>
 800bc38:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	2b04      	cmp	r3, #4
 800bc3e:	d005      	beq.n	800bc4c <HAL_RCC_OscConfig+0x200>
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	2b0c      	cmp	r3, #12
 800bc44:	d10e      	bne.n	800bc64 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d10b      	bne.n	800bc64 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e266      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7ff fbf1 	bl	800b444 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bc62:	e031      	b.n	800bcc8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d019      	beq.n	800bca0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc6c:	f7ff fbba 	bl	800b3e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc70:	f7fb feea 	bl	8007a48 <HAL_GetTick>
 800bc74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bc76:	e008      	b.n	800bc8a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc78:	f7fb fee6 	bl	8007a48 <HAL_GetTick>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc80:	1ad3      	subs	r3, r2, r3
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d901      	bls.n	800bc8a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e24d      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bc8a:	f7ff fbc9 	bl	800b420 <LL_RCC_HSI_IsReady>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d0f1      	beq.n	800bc78 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	691b      	ldr	r3, [r3, #16]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fbd3 	bl	800b444 <LL_RCC_HSI_SetCalibTrimming>
 800bc9e:	e013      	b.n	800bcc8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bca0:	f7ff fbaf 	bl	800b402 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca4:	f7fb fed0 	bl	8007a48 <HAL_GetTick>
 800bca8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800bcaa:	e008      	b.n	800bcbe <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcac:	f7fb fecc 	bl	8007a48 <HAL_GetTick>
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d901      	bls.n	800bcbe <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e233      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800bcbe:	f7ff fbaf 	bl	800b420 <LL_RCC_HSI_IsReady>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1f1      	bne.n	800bcac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0308 	and.w	r3, r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d106      	bne.n	800bce2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 80a3 	beq.w	800be28 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d076      	beq.n	800bdd8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0310 	and.w	r3, r3, #16
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d046      	beq.n	800bd84 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800bcf6:	f7ff fc66 	bl	800b5c6 <LL_RCC_LSI1_IsReady>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d113      	bne.n	800bd28 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800bd00:	f7ff fc3f 	bl	800b582 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bd04:	f7fb fea0 	bl	8007a48 <HAL_GetTick>
 800bd08:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800bd0a:	e008      	b.n	800bd1e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bd0c:	f7fb fe9c 	bl	8007a48 <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	2b02      	cmp	r3, #2
 800bd18:	d901      	bls.n	800bd1e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800bd1a:	2303      	movs	r3, #3
 800bd1c:	e203      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800bd1e:	f7ff fc52 	bl	800b5c6 <LL_RCC_LSI1_IsReady>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0f1      	beq.n	800bd0c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800bd28:	f7ff fc5f 	bl	800b5ea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd2c:	f7fb fe8c 	bl	8007a48 <HAL_GetTick>
 800bd30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800bd32:	e008      	b.n	800bd46 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bd34:	f7fb fe88 	bl	8007a48 <HAL_GetTick>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d901      	bls.n	800bd46 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800bd42:	2303      	movs	r3, #3
 800bd44:	e1ef      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800bd46:	f7ff fc72 	bl	800b62e <LL_RCC_LSI2_IsReady>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0f1      	beq.n	800bd34 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	699b      	ldr	r3, [r3, #24]
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7ff fc7c 	bl	800b652 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800bd5a:	f7ff fc23 	bl	800b5a4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5e:	f7fb fe73 	bl	8007a48 <HAL_GetTick>
 800bd62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800bd64:	e008      	b.n	800bd78 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bd66:	f7fb fe6f 	bl	8007a48 <HAL_GetTick>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6e:	1ad3      	subs	r3, r2, r3
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	d901      	bls.n	800bd78 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800bd74:	2303      	movs	r3, #3
 800bd76:	e1d6      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800bd78:	f7ff fc25 	bl	800b5c6 <LL_RCC_LSI1_IsReady>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f1      	bne.n	800bd66 <HAL_RCC_OscConfig+0x31a>
 800bd82:	e051      	b.n	800be28 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800bd84:	f7ff fbfd 	bl	800b582 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd88:	f7fb fe5e 	bl	8007a48 <HAL_GetTick>
 800bd8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800bd8e:	e00c      	b.n	800bdaa <HAL_RCC_OscConfig+0x35e>
 800bd90:	20000024 	.word	0x20000024
 800bd94:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800bd98:	f7fb fe56 	bl	8007a48 <HAL_GetTick>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d901      	bls.n	800bdaa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800bda6:	2303      	movs	r3, #3
 800bda8:	e1bd      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800bdaa:	f7ff fc0c 	bl	800b5c6 <LL_RCC_LSI1_IsReady>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d0f1      	beq.n	800bd98 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800bdb4:	f7ff fc2a 	bl	800b60c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800bdb8:	e008      	b.n	800bdcc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bdba:	f7fb fe45 	bl	8007a48 <HAL_GetTick>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d901      	bls.n	800bdcc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e1ac      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800bdcc:	f7ff fc2f 	bl	800b62e <LL_RCC_LSI2_IsReady>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1f1      	bne.n	800bdba <HAL_RCC_OscConfig+0x36e>
 800bdd6:	e027      	b.n	800be28 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800bdd8:	f7ff fc18 	bl	800b60c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bddc:	f7fb fe34 	bl	8007a48 <HAL_GetTick>
 800bde0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bde2:	e008      	b.n	800bdf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800bde4:	f7fb fe30 	bl	8007a48 <HAL_GetTick>
 800bde8:	4602      	mov	r2, r0
 800bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	2b03      	cmp	r3, #3
 800bdf0:	d901      	bls.n	800bdf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e197      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800bdf6:	f7ff fc1a 	bl	800b62e <LL_RCC_LSI2_IsReady>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1f1      	bne.n	800bde4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800be00:	f7ff fbd0 	bl	800b5a4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be04:	f7fb fe20 	bl	8007a48 <HAL_GetTick>
 800be08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800be0a:	e008      	b.n	800be1e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800be0c:	f7fb fe1c 	bl	8007a48 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2b02      	cmp	r3, #2
 800be18:	d901      	bls.n	800be1e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e183      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800be1e:	f7ff fbd2 	bl	800b5c6 <LL_RCC_LSI1_IsReady>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d1f1      	bne.n	800be0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0304 	and.w	r3, r3, #4
 800be30:	2b00      	cmp	r3, #0
 800be32:	d05b      	beq.n	800beec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be34:	4ba7      	ldr	r3, [pc, #668]	@ (800c0d4 <HAL_RCC_OscConfig+0x688>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d114      	bne.n	800be6a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800be40:	f7ff fa60 	bl	800b304 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be44:	f7fb fe00 	bl	8007a48 <HAL_GetTick>
 800be48:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be4a:	e008      	b.n	800be5e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be4c:	f7fb fdfc 	bl	8007a48 <HAL_GetTick>
 800be50:	4602      	mov	r2, r0
 800be52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	2b02      	cmp	r3, #2
 800be58:	d901      	bls.n	800be5e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e163      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800be5e:	4b9d      	ldr	r3, [pc, #628]	@ (800c0d4 <HAL_RCC_OscConfig+0x688>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0f0      	beq.n	800be4c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d102      	bne.n	800be78 <HAL_RCC_OscConfig+0x42c>
 800be72:	f7ff fb30 	bl	800b4d6 <LL_RCC_LSE_Enable>
 800be76:	e00c      	b.n	800be92 <HAL_RCC_OscConfig+0x446>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	2b05      	cmp	r3, #5
 800be7e:	d104      	bne.n	800be8a <HAL_RCC_OscConfig+0x43e>
 800be80:	f7ff fb4b 	bl	800b51a <LL_RCC_LSE_EnableBypass>
 800be84:	f7ff fb27 	bl	800b4d6 <LL_RCC_LSE_Enable>
 800be88:	e003      	b.n	800be92 <HAL_RCC_OscConfig+0x446>
 800be8a:	f7ff fb35 	bl	800b4f8 <LL_RCC_LSE_Disable>
 800be8e:	f7ff fb55 	bl	800b53c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d014      	beq.n	800bec4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800be9a:	f7fb fdd5 	bl	8007a48 <HAL_GetTick>
 800be9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800bea0:	e00a      	b.n	800beb8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bea2:	f7fb fdd1 	bl	8007a48 <HAL_GetTick>
 800bea6:	4602      	mov	r2, r0
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d901      	bls.n	800beb8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	e136      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800beb8:	f7ff fb51 	bl	800b55e <LL_RCC_LSE_IsReady>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d0ef      	beq.n	800bea2 <HAL_RCC_OscConfig+0x456>
 800bec2:	e013      	b.n	800beec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bec4:	f7fb fdc0 	bl	8007a48 <HAL_GetTick>
 800bec8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800beca:	e00a      	b.n	800bee2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800becc:	f7fb fdbc 	bl	8007a48 <HAL_GetTick>
 800bed0:	4602      	mov	r2, r0
 800bed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beda:	4293      	cmp	r3, r2
 800bedc:	d901      	bls.n	800bee2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800bede:	2303      	movs	r3, #3
 800bee0:	e121      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800bee2:	f7ff fb3c 	bl	800b55e <LL_RCC_LSE_IsReady>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1ef      	bne.n	800becc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d02c      	beq.n	800bf52 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befc:	2b00      	cmp	r3, #0
 800befe:	d014      	beq.n	800bf2a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bf00:	f7ff fab5 	bl	800b46e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf04:	f7fb fda0 	bl	8007a48 <HAL_GetTick>
 800bf08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bf0a:	e008      	b.n	800bf1e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf0c:	f7fb fd9c 	bl	8007a48 <HAL_GetTick>
 800bf10:	4602      	mov	r2, r0
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	1ad3      	subs	r3, r2, r3
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d901      	bls.n	800bf1e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	e103      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bf1e:	f7ff fac8 	bl	800b4b2 <LL_RCC_HSI48_IsReady>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d0f1      	beq.n	800bf0c <HAL_RCC_OscConfig+0x4c0>
 800bf28:	e013      	b.n	800bf52 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bf2a:	f7ff fab1 	bl	800b490 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf2e:	f7fb fd8b 	bl	8007a48 <HAL_GetTick>
 800bf32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bf34:	e008      	b.n	800bf48 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bf36:	f7fb fd87 	bl	8007a48 <HAL_GetTick>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3e:	1ad3      	subs	r3, r2, r3
 800bf40:	2b02      	cmp	r3, #2
 800bf42:	d901      	bls.n	800bf48 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e0ee      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bf48:	f7ff fab3 	bl	800b4b2 <LL_RCC_HSI48_IsReady>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1f1      	bne.n	800bf36 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	f000 80e4 	beq.w	800c124 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf5c:	f7ff fc11 	bl	800b782 <LL_RCC_GetSysClkSource>
 800bf60:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800bf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf6e:	2b02      	cmp	r3, #2
 800bf70:	f040 80b4 	bne.w	800c0dc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f003 0203 	and.w	r2, r3, #3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d123      	bne.n	800bfca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d11c      	bne.n	800bfca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	0a1b      	lsrs	r3, r3, #8
 800bf94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d114      	bne.n	800bfca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d10d      	bne.n	800bfca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d106      	bne.n	800bfca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d05d      	beq.n	800c086 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2b0c      	cmp	r3, #12
 800bfce:	d058      	beq.n	800c082 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bfd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e0a1      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bfe2:	f7ff fc84 	bl	800b8ee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bfe6:	f7fb fd2f 	bl	8007a48 <HAL_GetTick>
 800bfea:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfec:	e008      	b.n	800c000 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfee:	f7fb fd2b 	bl	8007a48 <HAL_GetTick>
 800bff2:	4602      	mov	r2, r0
 800bff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff6:	1ad3      	subs	r3, r2, r3
 800bff8:	2b02      	cmp	r3, #2
 800bffa:	d901      	bls.n	800c000 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800bffc:	2303      	movs	r3, #3
 800bffe:	e092      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1ef      	bne.n	800bfee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c00e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c012:	68da      	ldr	r2, [r3, #12]
 800c014:	4b30      	ldr	r3, [pc, #192]	@ (800c0d8 <HAL_RCC_OscConfig+0x68c>)
 800c016:	4013      	ands	r3, r2
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c020:	4311      	orrs	r1, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c026:	0212      	lsls	r2, r2, #8
 800c028:	4311      	orrs	r1, r2
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c02e:	4311      	orrs	r1, r2
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c034:	4311      	orrs	r1, r2
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c03a:	430a      	orrs	r2, r1
 800c03c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c040:	4313      	orrs	r3, r2
 800c042:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c044:	f7ff fc44 	bl	800b8d0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c056:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c058:	f7fb fcf6 	bl	8007a48 <HAL_GetTick>
 800c05c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c05e:	e008      	b.n	800c072 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c060:	f7fb fcf2 	bl	8007a48 <HAL_GetTick>
 800c064:	4602      	mov	r2, r0
 800c066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d901      	bls.n	800c072 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	e059      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d0ef      	beq.n	800c060 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c080:	e050      	b.n	800c124 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e04f      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d147      	bne.n	800c124 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c094:	f7ff fc1c 	bl	800b8d0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c0a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c0a8:	f7fb fcce 	bl	8007a48 <HAL_GetTick>
 800c0ac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0ae:	e008      	b.n	800c0c2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0b0:	f7fb fcca 	bl	8007a48 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d901      	bls.n	800c0c2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e031      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c0c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d0ef      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x664>
 800c0d0:	e028      	b.n	800c124 <HAL_RCC_OscConfig+0x6d8>
 800c0d2:	bf00      	nop
 800c0d4:	58000400 	.word	0x58000400
 800c0d8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	2b0c      	cmp	r3, #12
 800c0e0:	d01e      	beq.n	800c120 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0e2:	f7ff fc04 	bl	800b8ee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0e6:	f7fb fcaf 	bl	8007a48 <HAL_GetTick>
 800c0ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c0ec:	e008      	b.n	800c100 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0ee:	f7fb fcab 	bl	8007a48 <HAL_GetTick>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0f6:	1ad3      	subs	r3, r2, r3
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d901      	bls.n	800c100 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c0fc:	2303      	movs	r3, #3
 800c0fe:	e012      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1ef      	bne.n	800c0ee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c10e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c112:	68da      	ldr	r2, [r3, #12]
 800c114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c118:	4b05      	ldr	r3, [pc, #20]	@ (800c130 <HAL_RCC_OscConfig+0x6e4>)
 800c11a:	4013      	ands	r3, r2
 800c11c:	60cb      	str	r3, [r1, #12]
 800c11e:	e001      	b.n	800c124 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3734      	adds	r7, #52	@ 0x34
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd90      	pop	{r4, r7, pc}
 800c12e:	bf00      	nop
 800c130:	eefefffc 	.word	0xeefefffc

0800c134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e12d      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c148:	4b98      	ldr	r3, [pc, #608]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 0307 	and.w	r3, r3, #7
 800c150:	683a      	ldr	r2, [r7, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d91b      	bls.n	800c18e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c156:	4b95      	ldr	r3, [pc, #596]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f023 0207 	bic.w	r2, r3, #7
 800c15e:	4993      	ldr	r1, [pc, #588]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	4313      	orrs	r3, r2
 800c164:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c166:	f7fb fc6f 	bl	8007a48 <HAL_GetTick>
 800c16a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c16c:	e008      	b.n	800c180 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c16e:	f7fb fc6b 	bl	8007a48 <HAL_GetTick>
 800c172:	4602      	mov	r2, r0
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d901      	bls.n	800c180 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e111      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c180:	4b8a      	ldr	r3, [pc, #552]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0307 	and.w	r3, r3, #7
 800c188:	683a      	ldr	r2, [r7, #0]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d1ef      	bne.n	800c16e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 0302 	and.w	r3, r3, #2
 800c196:	2b00      	cmp	r3, #0
 800c198:	d016      	beq.n	800c1c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff fafb 	bl	800b79a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c1a4:	f7fb fc50 	bl	8007a48 <HAL_GetTick>
 800c1a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c1aa:	e008      	b.n	800c1be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c1ac:	f7fb fc4c 	bl	8007a48 <HAL_GetTick>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d901      	bls.n	800c1be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	e0f2      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c1be:	f7ff fbe8 	bl	800b992 <LL_RCC_IsActiveFlag_HPRE>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d0f1      	beq.n	800c1ac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f003 0320 	and.w	r3, r3, #32
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d016      	beq.n	800c202 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff faf2 	bl	800b7c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c1de:	f7fb fc33 	bl	8007a48 <HAL_GetTick>
 800c1e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c1e4:	e008      	b.n	800c1f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c1e6:	f7fb fc2f 	bl	8007a48 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e0d5      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c1f8:	f7ff fbdd 	bl	800b9b6 <LL_RCC_IsActiveFlag_C2HPRE>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d0f1      	beq.n	800c1e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d016      	beq.n	800c23c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	699b      	ldr	r3, [r3, #24]
 800c212:	4618      	mov	r0, r3
 800c214:	f7ff faeb 	bl	800b7ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c218:	f7fb fc16 	bl	8007a48 <HAL_GetTick>
 800c21c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c220:	f7fb fc12 	bl	8007a48 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e0b8      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c232:	f7ff fbd3 	bl	800b9dc <LL_RCC_IsActiveFlag_SHDHPRE>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d0f1      	beq.n	800c220 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d016      	beq.n	800c276 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7ff fae5 	bl	800b81c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c252:	f7fb fbf9 	bl	8007a48 <HAL_GetTick>
 800c256:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c258:	e008      	b.n	800c26c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c25a:	f7fb fbf5 	bl	8007a48 <HAL_GetTick>
 800c25e:	4602      	mov	r2, r0
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d901      	bls.n	800c26c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e09b      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c26c:	f7ff fbc9 	bl	800ba02 <LL_RCC_IsActiveFlag_PPRE1>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0f1      	beq.n	800c25a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0308 	and.w	r3, r3, #8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d017      	beq.n	800c2b2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	4618      	mov	r0, r3
 800c28a:	f7ff fadb 	bl	800b844 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c28e:	f7fb fbdb 	bl	8007a48 <HAL_GetTick>
 800c292:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c294:	e008      	b.n	800c2a8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c296:	f7fb fbd7 	bl	8007a48 <HAL_GetTick>
 800c29a:	4602      	mov	r2, r0
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	1ad3      	subs	r3, r2, r3
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d901      	bls.n	800c2a8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e07d      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c2a8:	f7ff fbbd 	bl	800ba26 <LL_RCC_IsActiveFlag_PPRE2>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d0f1      	beq.n	800c296 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d043      	beq.n	800c346 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	2b02      	cmp	r3, #2
 800c2c4:	d106      	bne.n	800c2d4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c2c6:	f7ff f87b 	bl	800b3c0 <LL_RCC_HSE_IsReady>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d11e      	bne.n	800c30e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e067      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d106      	bne.n	800c2ea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c2dc:	f7ff fb16 	bl	800b90c <LL_RCC_PLL_IsReady>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d113      	bne.n	800c30e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e05c      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d106      	bne.n	800c300 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c2f2:	f7ff f9e3 	bl	800b6bc <LL_RCC_MSI_IsReady>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d108      	bne.n	800c30e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	e051      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c300:	f7ff f88e 	bl	800b420 <LL_RCC_HSI_IsReady>
 800c304:	4603      	mov	r3, r0
 800c306:	2b00      	cmp	r3, #0
 800c308:	d101      	bne.n	800c30e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e04a      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fa21 	bl	800b75a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c318:	f7fb fb96 	bl	8007a48 <HAL_GetTick>
 800c31c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c31e:	e00a      	b.n	800c336 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c320:	f7fb fb92 	bl	8007a48 <HAL_GetTick>
 800c324:	4602      	mov	r2, r0
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1ad3      	subs	r3, r2, r3
 800c32a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c32e:	4293      	cmp	r3, r2
 800c330:	d901      	bls.n	800c336 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c332:	2303      	movs	r3, #3
 800c334:	e036      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c336:	f7ff fa24 	bl	800b782 <LL_RCC_GetSysClkSource>
 800c33a:	4602      	mov	r2, r0
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	429a      	cmp	r2, r3
 800c344:	d1ec      	bne.n	800c320 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c346:	4b19      	ldr	r3, [pc, #100]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	683a      	ldr	r2, [r7, #0]
 800c350:	429a      	cmp	r2, r3
 800c352:	d21b      	bcs.n	800c38c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c354:	4b15      	ldr	r3, [pc, #84]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f023 0207 	bic.w	r2, r3, #7
 800c35c:	4913      	ldr	r1, [pc, #76]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	4313      	orrs	r3, r2
 800c362:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c364:	f7fb fb70 	bl	8007a48 <HAL_GetTick>
 800c368:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c36a:	e008      	b.n	800c37e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c36c:	f7fb fb6c 	bl	8007a48 <HAL_GetTick>
 800c370:	4602      	mov	r2, r0
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d901      	bls.n	800c37e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e012      	b.n	800c3a4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c37e:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ac <HAL_RCC_ClockConfig+0x278>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d1ef      	bne.n	800c36c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c38c:	f000 f87e 	bl	800c48c <HAL_RCC_GetHCLKFreq>
 800c390:	4603      	mov	r3, r0
 800c392:	4a07      	ldr	r2, [pc, #28]	@ (800c3b0 <HAL_RCC_ClockConfig+0x27c>)
 800c394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c396:	f7fb fb63 	bl	8007a60 <HAL_GetTickPrio>
 800c39a:	4603      	mov	r3, r0
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fb fb05 	bl	80079ac <HAL_InitTick>
 800c3a2:	4603      	mov	r3, r0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	58004000 	.word	0x58004000
 800c3b0:	20000024 	.word	0x20000024

0800c3b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c3b4:	b590      	push	{r4, r7, lr}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3ba:	f7ff f9e2 	bl	800b782 <LL_RCC_GetSysClkSource>
 800c3be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d10a      	bne.n	800c3dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c3c6:	f7ff f99e 	bl	800b706 <LL_RCC_MSI_GetRange>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	091b      	lsrs	r3, r3, #4
 800c3ce:	f003 030f 	and.w	r3, r3, #15
 800c3d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c480 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e04b      	b.n	800c474 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b04      	cmp	r3, #4
 800c3e0:	d102      	bne.n	800c3e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c3e2:	4b28      	ldr	r3, [pc, #160]	@ (800c484 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c3e4:	60fb      	str	r3, [r7, #12]
 800c3e6:	e045      	b.n	800c474 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b08      	cmp	r3, #8
 800c3ec:	d10a      	bne.n	800c404 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c3ee:	f7fe ffb7 	bl	800b360 <LL_RCC_HSE_IsEnabledDiv2>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d102      	bne.n	800c3fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c3f8:	4b22      	ldr	r3, [pc, #136]	@ (800c484 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	e03a      	b.n	800c474 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c3fe:	4b22      	ldr	r3, [pc, #136]	@ (800c488 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c400:	60fb      	str	r3, [r7, #12]
 800c402:	e037      	b.n	800c474 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c404:	f7ff fab9 	bl	800b97a <LL_RCC_PLL_GetMainSource>
 800c408:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d003      	beq.n	800c418 <HAL_RCC_GetSysClockFreq+0x64>
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	2b03      	cmp	r3, #3
 800c414:	d003      	beq.n	800c41e <HAL_RCC_GetSysClockFreq+0x6a>
 800c416:	e00d      	b.n	800c434 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c418:	4b1a      	ldr	r3, [pc, #104]	@ (800c484 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c41a:	60bb      	str	r3, [r7, #8]
        break;
 800c41c:	e015      	b.n	800c44a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c41e:	f7fe ff9f 	bl	800b360 <LL_RCC_HSE_IsEnabledDiv2>
 800c422:	4603      	mov	r3, r0
 800c424:	2b01      	cmp	r3, #1
 800c426:	d102      	bne.n	800c42e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c428:	4b16      	ldr	r3, [pc, #88]	@ (800c484 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c42a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c42c:	e00d      	b.n	800c44a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c42e:	4b16      	ldr	r3, [pc, #88]	@ (800c488 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c430:	60bb      	str	r3, [r7, #8]
        break;
 800c432:	e00a      	b.n	800c44a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c434:	f7ff f967 	bl	800b706 <LL_RCC_MSI_GetRange>
 800c438:	4603      	mov	r3, r0
 800c43a:	091b      	lsrs	r3, r3, #4
 800c43c:	f003 030f 	and.w	r3, r3, #15
 800c440:	4a0f      	ldr	r2, [pc, #60]	@ (800c480 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c446:	60bb      	str	r3, [r7, #8]
        break;
 800c448:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c44a:	f7ff fa71 	bl	800b930 <LL_RCC_PLL_GetN>
 800c44e:	4602      	mov	r2, r0
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	fb03 f402 	mul.w	r4, r3, r2
 800c456:	f7ff fa84 	bl	800b962 <LL_RCC_PLL_GetDivider>
 800c45a:	4603      	mov	r3, r0
 800c45c:	091b      	lsrs	r3, r3, #4
 800c45e:	3301      	adds	r3, #1
 800c460:	fbb4 f4f3 	udiv	r4, r4, r3
 800c464:	f7ff fa71 	bl	800b94a <LL_RCC_PLL_GetR>
 800c468:	4603      	mov	r3, r0
 800c46a:	0f5b      	lsrs	r3, r3, #29
 800c46c:	3301      	adds	r3, #1
 800c46e:	fbb4 f3f3 	udiv	r3, r4, r3
 800c472:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd90      	pop	{r4, r7, pc}
 800c47e:	bf00      	nop
 800c480:	0801d514 	.word	0x0801d514
 800c484:	00f42400 	.word	0x00f42400
 800c488:	01e84800 	.word	0x01e84800

0800c48c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c48c:	b598      	push	{r3, r4, r7, lr}
 800c48e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c490:	f7ff ff90 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800c494:	4604      	mov	r4, r0
 800c496:	f7ff f9e9 	bl	800b86c <LL_RCC_GetAHBPrescaler>
 800c49a:	4603      	mov	r3, r0
 800c49c:	091b      	lsrs	r3, r3, #4
 800c49e:	f003 030f 	and.w	r3, r3, #15
 800c4a2:	4a03      	ldr	r2, [pc, #12]	@ (800c4b0 <HAL_RCC_GetHCLKFreq+0x24>)
 800c4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	bd98      	pop	{r3, r4, r7, pc}
 800c4b0:	0801d4b4 	.word	0x0801d4b4

0800c4b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4b4:	b598      	push	{r3, r4, r7, lr}
 800c4b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c4b8:	f7ff ffe8 	bl	800c48c <HAL_RCC_GetHCLKFreq>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	f7ff f9ef 	bl	800b8a0 <LL_RCC_GetAPB1Prescaler>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	0a1b      	lsrs	r3, r3, #8
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	4a04      	ldr	r2, [pc, #16]	@ (800c4dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800c4cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d0:	f003 031f 	and.w	r3, r3, #31
 800c4d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	bd98      	pop	{r3, r4, r7, pc}
 800c4dc:	0801d4f4 	.word	0x0801d4f4

0800c4e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4e0:	b598      	push	{r3, r4, r7, lr}
 800c4e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c4e4:	f7ff ffd2 	bl	800c48c <HAL_RCC_GetHCLKFreq>
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	f7ff f9e5 	bl	800b8b8 <LL_RCC_GetAPB2Prescaler>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	0adb      	lsrs	r3, r3, #11
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	4a04      	ldr	r2, [pc, #16]	@ (800c508 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4fc:	f003 031f 	and.w	r3, r3, #31
 800c500:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c504:	4618      	mov	r0, r3
 800c506:	bd98      	pop	{r3, r4, r7, pc}
 800c508:	0801d4f4 	.word	0x0801d4f4

0800c50c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c50c:	b590      	push	{r4, r7, lr}
 800c50e:	b085      	sub	sp, #20
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2bb0      	cmp	r3, #176	@ 0xb0
 800c518:	d903      	bls.n	800c522 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c51a:	4b15      	ldr	r3, [pc, #84]	@ (800c570 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c51e:	60fb      	str	r3, [r7, #12]
 800c520:	e007      	b.n	800c532 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	091b      	lsrs	r3, r3, #4
 800c526:	f003 030f 	and.w	r3, r3, #15
 800c52a:	4a11      	ldr	r2, [pc, #68]	@ (800c570 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c530:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c532:	f7ff f9a7 	bl	800b884 <LL_RCC_GetAHB4Prescaler>
 800c536:	4603      	mov	r3, r0
 800c538:	091b      	lsrs	r3, r3, #4
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	4a0d      	ldr	r2, [pc, #52]	@ (800c574 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	fbb2 f3f3 	udiv	r3, r2, r3
 800c54a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	4a0a      	ldr	r2, [pc, #40]	@ (800c578 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c550:	fba2 2303 	umull	r2, r3, r2, r3
 800c554:	0c9c      	lsrs	r4, r3, #18
 800c556:	f7fe fee5 	bl	800b324 <HAL_PWREx_GetVoltageRange>
 800c55a:	4603      	mov	r3, r0
 800c55c:	4619      	mov	r1, r3
 800c55e:	4620      	mov	r0, r4
 800c560:	f000 f80c 	bl	800c57c <RCC_SetFlashLatency>
 800c564:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd90      	pop	{r4, r7, pc}
 800c56e:	bf00      	nop
 800c570:	0801d514 	.word	0x0801d514
 800c574:	0801d4b4 	.word	0x0801d4b4
 800c578:	431bde83 	.word	0x431bde83

0800c57c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c57c:	b590      	push	{r4, r7, lr}
 800c57e:	b093      	sub	sp, #76	@ 0x4c
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c586:	4b37      	ldr	r3, [pc, #220]	@ (800c664 <RCC_SetFlashLatency+0xe8>)
 800c588:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c58c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c58e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c592:	4a35      	ldr	r2, [pc, #212]	@ (800c668 <RCC_SetFlashLatency+0xec>)
 800c594:	f107 031c 	add.w	r3, r7, #28
 800c598:	ca07      	ldmia	r2, {r0, r1, r2}
 800c59a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c59e:	4b33      	ldr	r3, [pc, #204]	@ (800c66c <RCC_SetFlashLatency+0xf0>)
 800c5a0:	f107 040c 	add.w	r4, r7, #12
 800c5a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c5a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5b4:	d11a      	bne.n	800c5ec <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5ba:	e013      	b.n	800c5e4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c5bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	3348      	adds	r3, #72	@ 0x48
 800c5c2:	443b      	add	r3, r7
 800c5c4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d807      	bhi.n	800c5de <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	3348      	adds	r3, #72	@ 0x48
 800c5d4:	443b      	add	r3, r7
 800c5d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c5da:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c5dc:	e020      	b.n	800c620 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c5de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d9e8      	bls.n	800c5bc <RCC_SetFlashLatency+0x40>
 800c5ea:	e019      	b.n	800c620 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5f0:	e013      	b.n	800c61a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	3348      	adds	r3, #72	@ 0x48
 800c5f8:	443b      	add	r3, r7
 800c5fa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d807      	bhi.n	800c614 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	3348      	adds	r3, #72	@ 0x48
 800c60a:	443b      	add	r3, r7
 800c60c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c610:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c612:	e005      	b.n	800c620 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c616:	3301      	adds	r3, #1
 800c618:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c61a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d9e8      	bls.n	800c5f2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c620:	4b13      	ldr	r3, [pc, #76]	@ (800c670 <RCC_SetFlashLatency+0xf4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f023 0207 	bic.w	r2, r3, #7
 800c628:	4911      	ldr	r1, [pc, #68]	@ (800c670 <RCC_SetFlashLatency+0xf4>)
 800c62a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c62c:	4313      	orrs	r3, r2
 800c62e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c630:	f7fb fa0a 	bl	8007a48 <HAL_GetTick>
 800c634:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c636:	e008      	b.n	800c64a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c638:	f7fb fa06 	bl	8007a48 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b02      	cmp	r3, #2
 800c644:	d901      	bls.n	800c64a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e007      	b.n	800c65a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c64a:	4b09      	ldr	r3, [pc, #36]	@ (800c670 <RCC_SetFlashLatency+0xf4>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0307 	and.w	r3, r3, #7
 800c652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c654:	429a      	cmp	r2, r3
 800c656:	d1ef      	bne.n	800c638 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c658:	2300      	movs	r3, #0
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	374c      	adds	r7, #76	@ 0x4c
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd90      	pop	{r4, r7, pc}
 800c662:	bf00      	nop
 800c664:	0801cbb0 	.word	0x0801cbb0
 800c668:	0801cbc0 	.word	0x0801cbc0
 800c66c:	0801cbcc 	.word	0x0801cbcc
 800c670:	58004000 	.word	0x58004000

0800c674 <LL_RCC_LSE_IsEnabled>:
{
 800c674:	b480      	push	{r7}
 800c676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c67c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c680:	f003 0301 	and.w	r3, r3, #1
 800c684:	2b01      	cmp	r3, #1
 800c686:	d101      	bne.n	800c68c <LL_RCC_LSE_IsEnabled+0x18>
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <LL_RCC_LSE_IsEnabled+0x1a>
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <LL_RCC_LSE_IsReady>:
{
 800c698:	b480      	push	{r7}
 800c69a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c69c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6a4:	f003 0302 	and.w	r3, r3, #2
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d101      	bne.n	800c6b0 <LL_RCC_LSE_IsReady+0x18>
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e000      	b.n	800c6b2 <LL_RCC_LSE_IsReady+0x1a>
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <LL_RCC_MSI_EnablePLLMode>:
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800c6c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c6ca:	f043 0304 	orr.w	r3, r3, #4
 800c6ce:	6013      	str	r3, [r2, #0]
}
 800c6d0:	bf00      	nop
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr

0800c6da <LL_RCC_SetRFWKPClockSource>:
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b083      	sub	sp, #12
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c6e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c6ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c6ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <LL_RCC_SetSMPSClockSource>:
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c70e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c714:	f023 0203 	bic.w	r2, r3, #3
 800c718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4313      	orrs	r3, r2
 800c720:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c722:	bf00      	nop
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <LL_RCC_SetSMPSPrescaler>:
{
 800c72e:	b480      	push	{r7}
 800c730:	b083      	sub	sp, #12
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4313      	orrs	r3, r2
 800c748:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c74a:	bf00      	nop
 800c74c:	370c      	adds	r7, #12
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <LL_RCC_SetUSARTClockSource>:
{
 800c756:	b480      	push	{r7}
 800c758:	b083      	sub	sp, #12
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c766:	f023 0203 	bic.w	r2, r3, #3
 800c76a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	4313      	orrs	r3, r2
 800c772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <LL_RCC_SetLPUARTClockSource>:
{
 800c782:	b480      	push	{r7}
 800c784:	b083      	sub	sp, #12
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c78a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c78e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c796:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c7a2:	bf00      	nop
 800c7a4:	370c      	adds	r7, #12
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ac:	4770      	bx	lr

0800c7ae <LL_RCC_SetI2CClockSource>:
{
 800c7ae:	b480      	push	{r7}
 800c7b0:	b083      	sub	sp, #12
 800c7b2:	af00      	add	r7, sp, #0
 800c7b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	091b      	lsrs	r3, r3, #4
 800c7c2:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c7c6:	43db      	mvns	r3, r3
 800c7c8:	401a      	ands	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	011b      	lsls	r3, r3, #4
 800c7ce:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c7d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c7dc:	bf00      	nop
 800c7de:	370c      	adds	r7, #12
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <LL_RCC_SetLPTIMClockSource>:
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c7f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	0c1b      	lsrs	r3, r3, #16
 800c7fc:	041b      	lsls	r3, r3, #16
 800c7fe:	43db      	mvns	r3, r3
 800c800:	401a      	ands	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	041b      	lsls	r3, r3, #16
 800c806:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c80a:	4313      	orrs	r3, r2
 800c80c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <LL_RCC_SetSAIClockSource>:
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c82c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4313      	orrs	r3, r2
 800c838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <LL_RCC_SetRNGClockSource>:
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c858:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c85c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4313      	orrs	r3, r2
 800c864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c868:	bf00      	nop
 800c86a:	370c      	adds	r7, #12
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <LL_RCC_SetCLK48ClockSource>:
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c884:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	4313      	orrs	r3, r2
 800c890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c894:	bf00      	nop
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <LL_RCC_SetUSBClockSource>:
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff ffe3 	bl	800c874 <LL_RCC_SetCLK48ClockSource>
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <LL_RCC_SetADCClockSource>:
{
 800c8b6:	b480      	push	{r7}
 800c8b8:	b083      	sub	sp, #12
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c8be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c8ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <LL_RCC_SetRTCClockSource>:
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c8ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c8f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c902:	bf00      	nop
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <LL_RCC_GetRTCClockSource>:
{
 800c90e:	b480      	push	{r7}
 800c910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c91a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c91e:	4618      	mov	r0, r3
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <LL_RCC_ForceBackupDomainReset>:
{
 800c928:	b480      	push	{r7}
 800c92a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c92c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c934:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c93c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c940:	bf00      	nop
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <LL_RCC_ReleaseBackupDomainReset>:
{
 800c94a:	b480      	push	{r7}
 800c94c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c94e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c95a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c95e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c962:	bf00      	nop
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <LL_RCC_PLLSAI1_Enable>:
{
 800c96c:	b480      	push	{r7}
 800c96e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c97a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c97e:	6013      	str	r3, [r2, #0]
}
 800c980:	bf00      	nop
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <LL_RCC_PLLSAI1_Disable>:
{
 800c98a:	b480      	push	{r7}
 800c98c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c98e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c998:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c99c:	6013      	str	r3, [r2, #0]
}
 800c99e:	bf00      	nop
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <LL_RCC_PLLSAI1_IsReady>:
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c9ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c9ba:	d101      	bne.n	800c9c0 <LL_RCC_PLLSAI1_IsReady+0x18>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e000      	b.n	800c9c2 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c9d8:	2300      	movs	r3, #0
 800c9da:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d034      	beq.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c9f0:	d021      	beq.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c9f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c9f6:	d81b      	bhi.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c9f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c9fc:	d01d      	beq.n	800ca3a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c9fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca02:	d815      	bhi.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00b      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ca08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca0c:	d110      	bne.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800ca0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca12:	68db      	ldr	r3, [r3, #12]
 800ca14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca1c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800ca1e:	e00d      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3304      	adds	r3, #4
 800ca24:	4618      	mov	r0, r3
 800ca26:	f000 f94d 	bl	800ccc4 <RCCEx_PLLSAI1_ConfigNP>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ca2e:	e005      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	77fb      	strb	r3, [r7, #31]
        break;
 800ca34:	e002      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ca36:	bf00      	nop
 800ca38:	e000      	b.n	800ca3c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ca3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca3c:	7ffb      	ldrb	r3, [r7, #31]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff fee8 	bl	800c81c <LL_RCC_SetSAIClockSource>
 800ca4c:	e001      	b.n	800ca52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca4e:	7ffb      	ldrb	r3, [r7, #31]
 800ca50:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d046      	beq.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800ca5e:	f7ff ff56 	bl	800c90e <LL_RCC_GetRTCClockSource>
 800ca62:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d03c      	beq.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ca6e:	f7fe fc49 	bl	800b304 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d105      	bne.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7ff ff30 	bl	800c8e2 <LL_RCC_SetRTCClockSource>
 800ca82:	e02e      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800ca84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca8c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ca8e:	f7ff ff4b 	bl	800c928 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800ca92:	f7ff ff5a 	bl	800c94a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa0:	4313      	orrs	r3, r2
 800caa2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800caa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800caae:	f7ff fde1 	bl	800c674 <LL_RCC_LSE_IsEnabled>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d114      	bne.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cab8:	f7fa ffc6 	bl	8007a48 <HAL_GetTick>
 800cabc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cabe:	e00b      	b.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cac0:	f7fa ffc2 	bl	8007a48 <HAL_GetTick>
 800cac4:	4602      	mov	r2, r0
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cace:	4293      	cmp	r3, r2
 800cad0:	d902      	bls.n	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	77fb      	strb	r3, [r7, #31]
              break;
 800cad6:	e004      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cad8:	f7ff fdde 	bl	800c698 <LL_RCC_LSE_IsReady>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b01      	cmp	r3, #1
 800cae0:	d1ee      	bne.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800cae2:	7ffb      	ldrb	r3, [r7, #31]
 800cae4:	77bb      	strb	r3, [r7, #30]
 800cae6:	e001      	b.n	800caec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae8:	7ffb      	ldrb	r3, [r7, #31]
 800caea:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7ff fe2a 	bl	800c756 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	f003 0302 	and.w	r3, r3, #2
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	69db      	ldr	r3, [r3, #28]
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7ff fe35 	bl	800c782 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 0310 	and.w	r3, r3, #16
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d004      	beq.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f7ff fe5d 	bl	800c7e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f003 0320 	and.w	r3, r3, #32
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7ff fe52 	bl	800c7e8 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0304 	and.w	r3, r3, #4
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d004      	beq.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6a1b      	ldr	r3, [r3, #32]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff fe2a 	bl	800c7ae <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f003 0308 	and.w	r3, r3, #8
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d004      	beq.n	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fe1f 	bl	800c7ae <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d022      	beq.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7ff fe8d 	bl	800c8a0 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cb8e:	d107      	bne.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cb90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cb9e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cba8:	d10b      	bne.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3304      	adds	r3, #4
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 f8e3 	bl	800cd7a <RCCEx_PLLSAI1_ConfigNQ>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cbb8:	7ffb      	ldrb	r3, [r7, #31]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d001      	beq.n	800cbc2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cbbe:	7ffb      	ldrb	r3, [r7, #31]
 800cbc0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d02b      	beq.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbd6:	d008      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cbe0:	d003      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d105      	bne.n	800cbf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fe2a 	bl	800c848 <LL_RCC_SetRNGClockSource>
 800cbf4:	e00a      	b.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cbfe:	60fb      	str	r3, [r7, #12]
 800cc00:	2000      	movs	r0, #0
 800cc02:	f7ff fe21 	bl	800c848 <LL_RCC_SetRNGClockSource>
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff fe34 	bl	800c874 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc10:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800cc14:	d107      	bne.n	800cc26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cc16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cc24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d022      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7ff fe3d 	bl	800c8b6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc44:	d107      	bne.n	800cc56 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cc46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc4a:	68db      	ldr	r3, [r3, #12]
 800cc4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc54:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc5e:	d10b      	bne.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	3304      	adds	r3, #4
 800cc64:	4618      	mov	r0, r3
 800cc66:	f000 f8e3 	bl	800ce30 <RCCEx_PLLSAI1_ConfigNR>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cc6e:	7ffb      	ldrb	r3, [r7, #31]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800cc74:	7ffb      	ldrb	r3, [r7, #31]
 800cc76:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d004      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff fd26 	bl	800c6da <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d009      	beq.n	800ccae <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7ff fd45 	bl	800c72e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7ff fd2c 	bl	800c706 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ccae:	7fbb      	ldrb	r3, [r7, #30]
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3720      	adds	r7, #32
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800ccbc:	f7ff fcfe 	bl	800c6bc <LL_RCC_MSI_EnablePLLMode>
}
 800ccc0:	bf00      	nop
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ccd0:	f7ff fe5b 	bl	800c98a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ccd4:	f7fa feb8 	bl	8007a48 <HAL_GetTick>
 800ccd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ccda:	e009      	b.n	800ccf0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ccdc:	f7fa feb4 	bl	8007a48 <HAL_GetTick>
 800cce0:	4602      	mov	r2, r0
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d902      	bls.n	800ccf0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ccea:	2303      	movs	r3, #3
 800ccec:	73fb      	strb	r3, [r7, #15]
      break;
 800ccee:	e004      	b.n	800ccfa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ccf0:	f7ff fe5a 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1f0      	bne.n	800ccdc <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d137      	bne.n	800cd70 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cd00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd04:	691b      	ldr	r3, [r3, #16]
 800cd06:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	021b      	lsls	r3, r3, #8
 800cd10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd14:	4313      	orrs	r3, r2
 800cd16:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800cd18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd1c:	691b      	ldr	r3, [r3, #16]
 800cd1e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cd2e:	f7ff fe1d 	bl	800c96c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd32:	f7fa fe89 	bl	8007a48 <HAL_GetTick>
 800cd36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cd38:	e009      	b.n	800cd4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd3a:	f7fa fe85 	bl	8007a48 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d902      	bls.n	800cd4e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	73fb      	strb	r3, [r7, #15]
        break;
 800cd4c:	e004      	b.n	800cd58 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cd4e:	f7ff fe2b 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d1f0      	bne.n	800cd3a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d108      	bne.n	800cd70 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800cd5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd62:	691a      	ldr	r2, [r3, #16]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	691b      	ldr	r3, [r3, #16]
 800cd68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd6c:	4313      	orrs	r3, r2
 800cd6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cd70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3710      	adds	r7, #16
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b084      	sub	sp, #16
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800cd86:	f7ff fe00 	bl	800c98a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cd8a:	f7fa fe5d 	bl	8007a48 <HAL_GetTick>
 800cd8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cd90:	e009      	b.n	800cda6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cd92:	f7fa fe59 	bl	8007a48 <HAL_GetTick>
 800cd96:	4602      	mov	r2, r0
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	2b02      	cmp	r3, #2
 800cd9e:	d902      	bls.n	800cda6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	73fb      	strb	r3, [r7, #15]
      break;
 800cda4:	e004      	b.n	800cdb0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800cda6:	f7ff fdff 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1f0      	bne.n	800cd92 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d137      	bne.n	800ce26 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800cdb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdba:	691b      	ldr	r3, [r3, #16]
 800cdbc:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	021b      	lsls	r3, r3, #8
 800cdc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800cdce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cde0:	4313      	orrs	r3, r2
 800cde2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800cde4:	f7ff fdc2 	bl	800c96c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cde8:	f7fa fe2e 	bl	8007a48 <HAL_GetTick>
 800cdec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cdee:	e009      	b.n	800ce04 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cdf0:	f7fa fe2a 	bl	8007a48 <HAL_GetTick>
 800cdf4:	4602      	mov	r2, r0
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d902      	bls.n	800ce04 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800cdfe:	2303      	movs	r3, #3
 800ce00:	73fb      	strb	r3, [r7, #15]
        break;
 800ce02:	e004      	b.n	800ce0e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ce04:	f7ff fdd0 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d1f0      	bne.n	800cdf0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d108      	bne.n	800ce26 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ce14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce18:	691a      	ldr	r2, [r3, #16]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce22:	4313      	orrs	r3, r2
 800ce24:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ce3c:	f7ff fda5 	bl	800c98a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ce40:	f7fa fe02 	bl	8007a48 <HAL_GetTick>
 800ce44:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce46:	e009      	b.n	800ce5c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ce48:	f7fa fdfe 	bl	8007a48 <HAL_GetTick>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d902      	bls.n	800ce5c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ce56:	2303      	movs	r3, #3
 800ce58:	73fb      	strb	r3, [r7, #15]
      break;
 800ce5a:	e004      	b.n	800ce66 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ce5c:	f7ff fda4 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d1f0      	bne.n	800ce48 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d137      	bne.n	800cedc <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ce6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	021b      	lsls	r3, r3, #8
 800ce7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce80:	4313      	orrs	r3, r2
 800ce82:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ce84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce96:	4313      	orrs	r3, r2
 800ce98:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ce9a:	f7ff fd67 	bl	800c96c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce9e:	f7fa fdd3 	bl	8007a48 <HAL_GetTick>
 800cea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800cea4:	e009      	b.n	800ceba <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800cea6:	f7fa fdcf 	bl	8007a48 <HAL_GetTick>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d902      	bls.n	800ceba <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ceb4:	2303      	movs	r3, #3
 800ceb6:	73fb      	strb	r3, [r7, #15]
        break;
 800ceb8:	e004      	b.n	800cec4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ceba:	f7ff fd75 	bl	800c9a8 <LL_RCC_PLLSAI1_IsReady>
 800cebe:	4603      	mov	r3, r0
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d1f0      	bne.n	800cea6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d108      	bne.n	800cedc <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ceca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cece:	691a      	ldr	r2, [r3, #16]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ced8:	4313      	orrs	r3, r2
 800ceda:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800cedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b084      	sub	sp, #16
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ceee:	2301      	movs	r3, #1
 800cef0:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e07a      	b.n	800cff2 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800cf02:	b2db      	uxtb	r3, r3
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d106      	bne.n	800cf16 <HAL_RTC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7f9 ffc5 	bl	8006ea0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2202      	movs	r2, #2
 800cf1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	f003 0310 	and.w	r3, r3, #16
 800cf28:	2b10      	cmp	r3, #16
 800cf2a:	d058      	beq.n	800cfde <HAL_RTC_Init+0xf8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	22ca      	movs	r2, #202	@ 0xca
 800cf32:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2253      	movs	r2, #83	@ 0x53
 800cf3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f883 	bl	800d048 <RTC_EnterInitMode>
 800cf42:	4603      	mov	r3, r0
 800cf44:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d12c      	bne.n	800cfa6 <HAL_RTC_Init+0xc0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cf5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf5e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	6899      	ldr	r1, [r3, #8]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	431a      	orrs	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	699b      	ldr	r3, [r3, #24]
 800cf74:	431a      	orrs	r2, r3
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	68d2      	ldr	r2, [r2, #12]
 800cf86:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6919      	ldr	r1, [r3, #16]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	041a      	lsls	r2, r3, #16
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	430a      	orrs	r2, r1
 800cf9a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 f88b 	bl	800d0b8 <RTC_ExitInitMode>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800cfa6:	7bfb      	ldrb	r3, [r7, #15]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d113      	bne.n	800cfd4 <HAL_RTC_Init+0xee>
    {
#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0203 	bic.w	r2, r2, #3
 800cfba:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	69da      	ldr	r2, [r3, #28]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	430a      	orrs	r2, r1
 800cfd2:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutRemap);
#endif /* RTC_OR_ALARMOUTTYPE */
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	22ff      	movs	r2, #255	@ 0xff
 800cfda:	625a      	str	r2, [r3, #36]	@ 0x24
 800cfdc:	e001      	b.n	800cfe2 <HAL_RTC_Init+0xfc>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cfe2:	7bfb      	ldrb	r3, [r7, #15]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d103      	bne.n	800cff0 <HAL_RTC_Init+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800cff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
	...

0800cffc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d004:	2300      	movs	r3, #0
 800d006:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a0d      	ldr	r2, [pc, #52]	@ (800d044 <HAL_RTC_WaitForSynchro+0x48>)
 800d00e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d010:	f7fa fd1a 	bl	8007a48 <HAL_GetTick>
 800d014:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d016:	e009      	b.n	800d02c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d018:	f7fa fd16 	bl	8007a48 <HAL_GetTick>
 800d01c:	4602      	mov	r2, r0
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d026:	d901      	bls.n	800d02c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800d028:	2303      	movs	r3, #3
 800d02a:	e007      	b.n	800d03c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f003 0320 	and.w	r3, r3, #32
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0ee      	beq.n	800d018 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	0001ff5f 	.word	0x0001ff5f

0800d048 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d050:	2300      	movs	r3, #0
 800d052:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800d054:	2300      	movs	r3, #0
 800d056:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68db      	ldr	r3, [r3, #12]
 800d05e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d062:	2b00      	cmp	r3, #0
 800d064:	d123      	bne.n	800d0ae <RTC_EnterInitMode+0x66>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	68da      	ldr	r2, [r3, #12]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d074:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d076:	f7fa fce7 	bl	8007a48 <HAL_GetTick>
 800d07a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d07c:	e00d      	b.n	800d09a <RTC_EnterInitMode+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d07e:	f7fa fce3 	bl	8007a48 <HAL_GetTick>
 800d082:	4602      	mov	r2, r0
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	1ad3      	subs	r3, r2, r3
 800d088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d08c:	d905      	bls.n	800d09a <RTC_EnterInitMode+0x52>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2204      	movs	r2, #4
 800d092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        status = HAL_ERROR;
 800d096:	2301      	movs	r3, #1
 800d098:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d102      	bne.n	800d0ae <RTC_EnterInitMode+0x66>
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d1e7      	bne.n	800d07e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68da      	ldr	r2, [r3, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d0d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	f003 0320 	and.w	r3, r3, #32
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff ff8a 	bl	800cffc <HAL_RTC_WaitForSynchro>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d005      	beq.n	800d0fa <RTC_ExitInitMode+0x42>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2204      	movs	r2, #4
 800d0f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d104:	b480      	push	{r7}
 800d106:	b087      	sub	sp, #28
 800d108:	af00      	add	r7, sp, #0
 800d10a:	60f8      	str	r0, [r7, #12]
 800d10c:	60b9      	str	r1, [r7, #8]
 800d10e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d110:	4b5f      	ldr	r3, [pc, #380]	@ (800d290 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a5f      	ldr	r2, [pc, #380]	@ (800d294 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d116:	fba2 2303 	umull	r2, r3, r2, r3
 800d11a:	0adb      	lsrs	r3, r3, #11
 800d11c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d120:	fb02 f303 	mul.w	r3, r2, r3
 800d124:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d101      	bne.n	800d134 <HAL_RTCEx_SetWakeUpTimer_IT+0x30>
 800d130:	2302      	movs	r3, #2
 800d132:	e0a7      	b.n	800d284 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2201      	movs	r2, #1
 800d138:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2202      	movs	r2, #2
 800d140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	22ca      	movs	r2, #202	@ 0xca
 800d14a:	625a      	str	r2, [r3, #36]	@ 0x24
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2253      	movs	r2, #83	@ 0x53
 800d152:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d01a      	beq.n	800d198 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	3b01      	subs	r3, #1
 800d166:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10d      	bne.n	800d18a <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	22ff      	movs	r2, #255	@ 0xff
 800d174:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2203      	movs	r2, #3
 800d17a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d186:	2303      	movs	r3, #3
 800d188:	e07c      	b.n	800d284 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	f003 0304 	and.w	r3, r3, #4
 800d194:	2b00      	cmp	r3, #0
 800d196:	d1e4      	bne.n	800d162 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	689a      	ldr	r2, [r3, #8]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d1a6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d1b8:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800d1ba:	4b35      	ldr	r3, [pc, #212]	@ (800d290 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	4a35      	ldr	r2, [pc, #212]	@ (800d294 <HAL_RTCEx_SetWakeUpTimer_IT+0x190>)
 800d1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1c4:	0adb      	lsrs	r3, r3, #11
 800d1c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d1ca:	fb02 f303 	mul.w	r3, r2, r3
 800d1ce:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10d      	bne.n	800d1f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	22ff      	movs	r2, #255	@ 0xff
 800d1e2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e045      	b.n	800d284 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68db      	ldr	r3, [r3, #12]
 800d1fe:	f003 0304 	and.w	r3, r3, #4
 800d202:	2b00      	cmp	r3, #0
 800d204:	d0e4      	beq.n	800d1d0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	689a      	ldr	r2, [r3, #8]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0207 	bic.w	r2, r2, #7
 800d214:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6899      	ldr	r1, [r3, #8]
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	687a      	ldr	r2, [r7, #4]
 800d222:	430a      	orrs	r2, r1
 800d224:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d22e:	4b1a      	ldr	r3, [pc, #104]	@ (800d298 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d234:	4a18      	ldr	r2, [pc, #96]	@ (800d298 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d236:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d23a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d23e:	4b16      	ldr	r3, [pc, #88]	@ (800d298 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4a15      	ldr	r2, [pc, #84]	@ (800d298 <HAL_RTCEx_SetWakeUpTimer_IT+0x194>)
 800d244:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d248:	6013      	str	r3, [r2, #0]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d258:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	689a      	ldr	r2, [r3, #8]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d268:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	22ff      	movs	r2, #255	@ 0xff
 800d270:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d282:	2300      	movs	r3, #0
}
 800d284:	4618      	mov	r0, r3
 800d286:	371c      	adds	r7, #28
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr
 800d290:	20000024 	.word	0x20000024
 800d294:	10624dd3 	.word	0x10624dd3
 800d298:	58000800 	.word	0x58000800

0800d29c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d101      	bne.n	800d2ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e095      	b.n	800d3da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d108      	bne.n	800d2c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d2be:	d009      	beq.n	800d2d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	61da      	str	r2, [r3, #28]
 800d2c6:	e005      	b.n	800d2d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7f9 fed2 	bl	8007098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	681a      	ldr	r2, [r3, #0]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d30a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d314:	d902      	bls.n	800d31c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d316:	2300      	movs	r3, #0
 800d318:	60fb      	str	r3, [r7, #12]
 800d31a:	e002      	b.n	800d322 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d31c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d320:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	68db      	ldr	r3, [r3, #12]
 800d326:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d32a:	d007      	beq.n	800d33c <HAL_SPI_Init+0xa0>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d334:	d002      	beq.n	800d33c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	f003 0302 	and.w	r3, r3, #2
 800d356:	431a      	orrs	r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	695b      	ldr	r3, [r3, #20]
 800d35c:	f003 0301 	and.w	r3, r3, #1
 800d360:	431a      	orrs	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d36a:	431a      	orrs	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	69db      	ldr	r3, [r3, #28]
 800d370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d374:	431a      	orrs	r2, r3
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d37e:	ea42 0103 	orr.w	r1, r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d386:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	699b      	ldr	r3, [r3, #24]
 800d396:	0c1b      	lsrs	r3, r3, #16
 800d398:	f003 0204 	and.w	r2, r3, #4
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a0:	f003 0310 	and.w	r3, r3, #16
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3aa:	f003 0308 	and.w	r3, r3, #8
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d3b8:	ea42 0103 	orr.w	r1, r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	430a      	orrs	r2, r1
 800d3c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b088      	sub	sp, #32
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	603b      	str	r3, [r7, #0]
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3f2:	f7fa fb29 	bl	8007a48 <HAL_GetTick>
 800d3f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d3f8:	88fb      	ldrh	r3, [r7, #6]
 800d3fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b01      	cmp	r3, #1
 800d406:	d001      	beq.n	800d40c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d408:	2302      	movs	r3, #2
 800d40a:	e15c      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d002      	beq.n	800d418 <HAL_SPI_Transmit+0x36>
 800d412:	88fb      	ldrh	r3, [r7, #6]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	e154      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d422:	2b01      	cmp	r3, #1
 800d424:	d101      	bne.n	800d42a <HAL_SPI_Transmit+0x48>
 800d426:	2302      	movs	r3, #2
 800d428:	e14d      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2203      	movs	r2, #3
 800d436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	88fa      	ldrh	r2, [r7, #6]
 800d450:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2200      	movs	r2, #0
 800d464:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d47c:	d10f      	bne.n	800d49e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d48c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	681a      	ldr	r2, [r3, #0]
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d49c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4a8:	2b40      	cmp	r3, #64	@ 0x40
 800d4aa:	d007      	beq.n	800d4bc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d4c4:	d952      	bls.n	800d56c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d002      	beq.n	800d4d4 <HAL_SPI_Transmit+0xf2>
 800d4ce:	8b7b      	ldrh	r3, [r7, #26]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d145      	bne.n	800d560 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d8:	881a      	ldrh	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4e4:	1c9a      	adds	r2, r3, #2
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d4f8:	e032      	b.n	800d560 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f003 0302 	and.w	r3, r3, #2
 800d504:	2b02      	cmp	r3, #2
 800d506:	d112      	bne.n	800d52e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d50c:	881a      	ldrh	r2, [r3, #0]
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d518:	1c9a      	adds	r2, r3, #2
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d522:	b29b      	uxth	r3, r3
 800d524:	3b01      	subs	r3, #1
 800d526:	b29a      	uxth	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d52c:	e018      	b.n	800d560 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d52e:	f7fa fa8b 	bl	8007a48 <HAL_GetTick>
 800d532:	4602      	mov	r2, r0
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d803      	bhi.n	800d546 <HAL_SPI_Transmit+0x164>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d544:	d102      	bne.n	800d54c <HAL_SPI_Transmit+0x16a>
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d109      	bne.n	800d560 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e0b2      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d564:	b29b      	uxth	r3, r3
 800d566:	2b00      	cmp	r3, #0
 800d568:	d1c7      	bne.n	800d4fa <HAL_SPI_Transmit+0x118>
 800d56a:	e083      	b.n	800d674 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d002      	beq.n	800d57a <HAL_SPI_Transmit+0x198>
 800d574:	8b7b      	ldrh	r3, [r7, #26]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d177      	bne.n	800d66a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d57e:	b29b      	uxth	r3, r3
 800d580:	2b01      	cmp	r3, #1
 800d582:	d912      	bls.n	800d5aa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d588:	881a      	ldrh	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d594:	1c9a      	adds	r2, r3, #2
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b02      	subs	r3, #2
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d5a8:	e05f      	b.n	800d66a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	330c      	adds	r3, #12
 800d5b4:	7812      	ldrb	r2, [r2, #0]
 800d5b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d5d0:	e04b      	b.n	800d66a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d12b      	bne.n	800d638 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d912      	bls.n	800d610 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ee:	881a      	ldrh	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fa:	1c9a      	adds	r2, r3, #2
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d604:	b29b      	uxth	r3, r3
 800d606:	3b02      	subs	r3, #2
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d60e:	e02c      	b.n	800d66a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	330c      	adds	r3, #12
 800d61a:	7812      	ldrb	r2, [r2, #0]
 800d61c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d622:	1c5a      	adds	r2, r3, #1
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	3b01      	subs	r3, #1
 800d630:	b29a      	uxth	r2, r3
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d636:	e018      	b.n	800d66a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d638:	f7fa fa06 	bl	8007a48 <HAL_GetTick>
 800d63c:	4602      	mov	r2, r0
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	1ad3      	subs	r3, r2, r3
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	d803      	bhi.n	800d650 <HAL_SPI_Transmit+0x26e>
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64e:	d102      	bne.n	800d656 <HAL_SPI_Transmit+0x274>
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d109      	bne.n	800d66a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2200      	movs	r2, #0
 800d662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d666:	2303      	movs	r3, #3
 800d668:	e02d      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d66e:	b29b      	uxth	r3, r3
 800d670:	2b00      	cmp	r3, #0
 800d672:	d1ae      	bne.n	800d5d2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d674:	69fa      	ldr	r2, [r7, #28]
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 fdfd 	bl	800e278 <SPI_EndRxTxTransaction>
 800d67e:	4603      	mov	r3, r0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d002      	beq.n	800d68a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2220      	movs	r2, #32
 800d688:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10a      	bne.n	800d6a8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	617b      	str	r3, [r7, #20]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	e000      	b.n	800d6c6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
  }
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3720      	adds	r7, #32
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}

0800d6ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b08a      	sub	sp, #40	@ 0x28
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d6e0:	f7fa f9b2 	bl	8007a48 <HAL_GetTick>
 800d6e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d6ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d6f4:	887b      	ldrh	r3, [r7, #2]
 800d6f6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d6f8:	887b      	ldrh	r3, [r7, #2]
 800d6fa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d6fc:	7ffb      	ldrb	r3, [r7, #31]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d00c      	beq.n	800d71c <HAL_SPI_TransmitReceive+0x4e>
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d708:	d106      	bne.n	800d718 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	689b      	ldr	r3, [r3, #8]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d102      	bne.n	800d718 <HAL_SPI_TransmitReceive+0x4a>
 800d712:	7ffb      	ldrb	r3, [r7, #31]
 800d714:	2b04      	cmp	r3, #4
 800d716:	d001      	beq.n	800d71c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d718:	2302      	movs	r3, #2
 800d71a:	e1f3      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_SPI_TransmitReceive+0x60>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d002      	beq.n	800d72e <HAL_SPI_TransmitReceive+0x60>
 800d728:	887b      	ldrh	r3, [r7, #2]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d101      	bne.n	800d732 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	e1e8      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d101      	bne.n	800d740 <HAL_SPI_TransmitReceive+0x72>
 800d73c:	2302      	movs	r3, #2
 800d73e:	e1e1      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b04      	cmp	r3, #4
 800d752:	d003      	beq.n	800d75c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2205      	movs	r2, #5
 800d758:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	2200      	movs	r2, #0
 800d760:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	887a      	ldrh	r2, [r7, #2]
 800d76c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	887a      	ldrh	r2, [r7, #2]
 800d774:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	68ba      	ldr	r2, [r7, #8]
 800d77c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	887a      	ldrh	r2, [r7, #2]
 800d782:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	887a      	ldrh	r2, [r7, #2]
 800d788:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d79e:	d802      	bhi.n	800d7a6 <HAL_SPI_TransmitReceive+0xd8>
 800d7a0:	8abb      	ldrh	r3, [r7, #20]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d908      	bls.n	800d7b8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	685a      	ldr	r2, [r3, #4]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d7b4:	605a      	str	r2, [r3, #4]
 800d7b6:	e007      	b.n	800d7c8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685a      	ldr	r2, [r3, #4]
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d7c6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7d2:	2b40      	cmp	r3, #64	@ 0x40
 800d7d4:	d007      	beq.n	800d7e6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d7e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d7ee:	f240 8083 	bls.w	800d8f8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	685b      	ldr	r3, [r3, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d002      	beq.n	800d800 <HAL_SPI_TransmitReceive+0x132>
 800d7fa:	8afb      	ldrh	r3, [r7, #22]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d16f      	bne.n	800d8e0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d804:	881a      	ldrh	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d810:	1c9a      	adds	r2, r3, #2
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	3b01      	subs	r3, #1
 800d81e:	b29a      	uxth	r2, r3
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d824:	e05c      	b.n	800d8e0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	689b      	ldr	r3, [r3, #8]
 800d82c:	f003 0302 	and.w	r3, r3, #2
 800d830:	2b02      	cmp	r3, #2
 800d832:	d11b      	bne.n	800d86c <HAL_SPI_TransmitReceive+0x19e>
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d838:	b29b      	uxth	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d016      	beq.n	800d86c <HAL_SPI_TransmitReceive+0x19e>
 800d83e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d840:	2b01      	cmp	r3, #1
 800d842:	d113      	bne.n	800d86c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d848:	881a      	ldrh	r2, [r3, #0]
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d854:	1c9a      	adds	r2, r3, #2
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d85e:	b29b      	uxth	r3, r3
 800d860:	3b01      	subs	r3, #1
 800d862:	b29a      	uxth	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d868:	2300      	movs	r3, #0
 800d86a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	2b01      	cmp	r3, #1
 800d878:	d11c      	bne.n	800d8b4 <HAL_SPI_TransmitReceive+0x1e6>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d880:	b29b      	uxth	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d016      	beq.n	800d8b4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d890:	b292      	uxth	r2, r2
 800d892:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d898:	1c9a      	adds	r2, r3, #2
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d8b4:	f7fa f8c8 	bl	8007a48 <HAL_GetTick>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	6a3b      	ldr	r3, [r7, #32]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d80d      	bhi.n	800d8e0 <HAL_SPI_TransmitReceive+0x212>
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ca:	d009      	beq.n	800d8e0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d8dc:	2303      	movs	r3, #3
 800d8de:	e111      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d19d      	bne.n	800d826 <HAL_SPI_TransmitReceive+0x158>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d197      	bne.n	800d826 <HAL_SPI_TransmitReceive+0x158>
 800d8f6:	e0e5      	b.n	800dac4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d003      	beq.n	800d908 <HAL_SPI_TransmitReceive+0x23a>
 800d900:	8afb      	ldrh	r3, [r7, #22]
 800d902:	2b01      	cmp	r3, #1
 800d904:	f040 80d1 	bne.w	800daaa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d912      	bls.n	800d938 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d916:	881a      	ldrh	r2, [r3, #0]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d922:	1c9a      	adds	r2, r3, #2
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	3b02      	subs	r3, #2
 800d930:	b29a      	uxth	r2, r3
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d936:	e0b8      	b.n	800daaa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	330c      	adds	r3, #12
 800d942:	7812      	ldrb	r2, [r2, #0]
 800d944:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d94a:	1c5a      	adds	r2, r3, #1
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d954:	b29b      	uxth	r3, r3
 800d956:	3b01      	subs	r3, #1
 800d958:	b29a      	uxth	r2, r3
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d95e:	e0a4      	b.n	800daaa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	f003 0302 	and.w	r3, r3, #2
 800d96a:	2b02      	cmp	r3, #2
 800d96c:	d134      	bne.n	800d9d8 <HAL_SPI_TransmitReceive+0x30a>
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d972:	b29b      	uxth	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d02f      	beq.n	800d9d8 <HAL_SPI_TransmitReceive+0x30a>
 800d978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d12c      	bne.n	800d9d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d982:	b29b      	uxth	r3, r3
 800d984:	2b01      	cmp	r3, #1
 800d986:	d912      	bls.n	800d9ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98c:	881a      	ldrh	r2, [r3, #0]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d998:	1c9a      	adds	r2, r3, #2
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	3b02      	subs	r3, #2
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d9ac:	e012      	b.n	800d9d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	330c      	adds	r3, #12
 800d9b8:	7812      	ldrb	r2, [r2, #0]
 800d9ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9c0:	1c5a      	adds	r2, r3, #1
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	2b01      	cmp	r3, #1
 800d9e4:	d148      	bne.n	800da78 <HAL_SPI_TransmitReceive+0x3aa>
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9ec:	b29b      	uxth	r3, r3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d042      	beq.n	800da78 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d923      	bls.n	800da46 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da08:	b292      	uxth	r2, r2
 800da0a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da10:	1c9a      	adds	r2, r3, #2
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	3b02      	subs	r3, #2
 800da20:	b29a      	uxth	r2, r3
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da2e:	b29b      	uxth	r3, r3
 800da30:	2b01      	cmp	r3, #1
 800da32:	d81f      	bhi.n	800da74 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685a      	ldr	r2, [r3, #4]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800da42:	605a      	str	r2, [r3, #4]
 800da44:	e016      	b.n	800da74 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f103 020c 	add.w	r2, r3, #12
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da52:	7812      	ldrb	r2, [r2, #0]
 800da54:	b2d2      	uxtb	r2, r2
 800da56:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da68:	b29b      	uxth	r3, r3
 800da6a:	3b01      	subs	r3, #1
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800da74:	2301      	movs	r3, #1
 800da76:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800da78:	f7f9 ffe6 	bl	8007a48 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	6a3b      	ldr	r3, [r7, #32]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da84:	429a      	cmp	r2, r3
 800da86:	d803      	bhi.n	800da90 <HAL_SPI_TransmitReceive+0x3c2>
 800da88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da8e:	d102      	bne.n	800da96 <HAL_SPI_TransmitReceive+0x3c8>
 800da90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da92:	2b00      	cmp	r3, #0
 800da94:	d109      	bne.n	800daaa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2201      	movs	r2, #1
 800da9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800daa6:	2303      	movs	r3, #3
 800daa8:	e02c      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800daae:	b29b      	uxth	r3, r3
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f47f af55 	bne.w	800d960 <HAL_SPI_TransmitReceive+0x292>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	f47f af4e 	bne.w	800d960 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dac4:	6a3a      	ldr	r2, [r7, #32]
 800dac6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f000 fbd5 	bl	800e278 <SPI_EndRxTxTransaction>
 800dace:	4603      	mov	r3, r0
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d008      	beq.n	800dae6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2220      	movs	r2, #32
 800dad8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e00e      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2201      	movs	r2, #1
 800daea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e000      	b.n	800db04 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800db02:	2300      	movs	r3, #0
  }
}
 800db04:	4618      	mov	r0, r3
 800db06:	3728      	adds	r7, #40	@ 0x28
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	4613      	mov	r3, r2
 800db18:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b01      	cmp	r3, #1
 800db24:	d001      	beq.n	800db2a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800db26:	2302      	movs	r3, #2
 800db28:	e0d4      	b.n	800dcd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <HAL_SPI_Transmit_DMA+0x2a>
 800db30:	88fb      	ldrh	r3, [r7, #6]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800db36:	2301      	movs	r3, #1
 800db38:	e0cc      	b.n	800dcd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800db40:	2b01      	cmp	r3, #1
 800db42:	d101      	bne.n	800db48 <HAL_SPI_Transmit_DMA+0x3c>
 800db44:	2302      	movs	r3, #2
 800db46:	e0c5      	b.n	800dcd4 <HAL_SPI_Transmit_DMA+0x1c8>
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2203      	movs	r2, #3
 800db54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	88fa      	ldrh	r2, [r7, #6]
 800db68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2200      	movs	r2, #0
 800db74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	2200      	movs	r2, #0
 800db7a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2200      	movs	r2, #0
 800db80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db9a:	d10f      	bne.n	800dbbc <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dbaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dbba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc0:	4a46      	ldr	r2, [pc, #280]	@ (800dcdc <HAL_SPI_Transmit_DMA+0x1d0>)
 800dbc2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbc8:	4a45      	ldr	r2, [pc, #276]	@ (800dce0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800dbca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbd0:	4a44      	ldr	r2, [pc, #272]	@ (800dce4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800dbd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbd8:	2200      	movs	r2, #0
 800dbda:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dbea:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	68db      	ldr	r3, [r3, #12]
 800dbf0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dbf4:	d82d      	bhi.n	800dc52 <HAL_SPI_Transmit_DMA+0x146>
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbfa:	699b      	ldr	r3, [r3, #24]
 800dbfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc00:	d127      	bne.n	800dc52 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	f003 0301 	and.w	r3, r3, #1
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d10f      	bne.n	800dc30 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800dc1e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	085b      	lsrs	r3, r3, #1
 800dc28:	b29a      	uxth	r2, r3
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dc2e:	e010      	b.n	800dc52 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc3e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	085b      	lsrs	r3, r3, #1
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	330c      	adds	r3, #12
 800dc62:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800dc6a:	f7fa f953 	bl	8007f14 <HAL_DMA_Start_IT>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc78:	f043 0210 	orr.w	r2, r3, #16
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e023      	b.n	800dcd4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc96:	2b40      	cmp	r3, #64	@ 0x40
 800dc98:	d007      	beq.n	800dcaa <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dca8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	685a      	ldr	r2, [r3, #4]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f042 0220 	orr.w	r2, r2, #32
 800dcc0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	685a      	ldr	r2, [r3, #4]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f042 0202 	orr.w	r2, r2, #2
 800dcd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	0800dfb7 	.word	0x0800dfb7
 800dce0:	0800df11 	.word	0x0800df11
 800dce4:	0800dfd3 	.word	0x0800dfd3

0800dce8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	689b      	ldr	r3, [r3, #8]
 800dcfe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	099b      	lsrs	r3, r3, #6
 800dd04:	f003 0301 	and.w	r3, r3, #1
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10f      	bne.n	800dd2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d00a      	beq.n	800dd2c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	099b      	lsrs	r3, r3, #6
 800dd1a:	f003 0301 	and.w	r3, r3, #1
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d004      	beq.n	800dd2c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	4798      	blx	r3
    return;
 800dd2a:	e0d7      	b.n	800dedc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	085b      	lsrs	r3, r3, #1
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00a      	beq.n	800dd4e <HAL_SPI_IRQHandler+0x66>
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	09db      	lsrs	r3, r3, #7
 800dd3c:	f003 0301 	and.w	r3, r3, #1
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d004      	beq.n	800dd4e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	4798      	blx	r3
    return;
 800dd4c:	e0c6      	b.n	800dedc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dd4e:	69bb      	ldr	r3, [r7, #24]
 800dd50:	095b      	lsrs	r3, r3, #5
 800dd52:	f003 0301 	and.w	r3, r3, #1
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d10c      	bne.n	800dd74 <HAL_SPI_IRQHandler+0x8c>
 800dd5a:	69bb      	ldr	r3, [r7, #24]
 800dd5c:	099b      	lsrs	r3, r3, #6
 800dd5e:	f003 0301 	and.w	r3, r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dd66:	69bb      	ldr	r3, [r7, #24]
 800dd68:	0a1b      	lsrs	r3, r3, #8
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80b4 	beq.w	800dedc <HAL_SPI_IRQHandler+0x1f4>
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	095b      	lsrs	r3, r3, #5
 800dd78:	f003 0301 	and.w	r3, r3, #1
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f000 80ad 	beq.w	800dedc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	099b      	lsrs	r3, r3, #6
 800dd86:	f003 0301 	and.w	r3, r3, #1
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d023      	beq.n	800ddd6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d011      	beq.n	800ddbe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd9e:	f043 0204 	orr.w	r2, r3, #4
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dda6:	2300      	movs	r3, #0
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68db      	ldr	r3, [r3, #12]
 800ddb0:	617b      	str	r3, [r7, #20]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	689b      	ldr	r3, [r3, #8]
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	e00b      	b.n	800ddd6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	613b      	str	r3, [r7, #16]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	613b      	str	r3, [r7, #16]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	613b      	str	r3, [r7, #16]
 800ddd2:	693b      	ldr	r3, [r7, #16]
        return;
 800ddd4:	e082      	b.n	800dedc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	095b      	lsrs	r3, r3, #5
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d014      	beq.n	800de0c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dde6:	f043 0201 	orr.w	r2, r3, #1
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de08:	601a      	str	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	0a1b      	lsrs	r3, r3, #8
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00c      	beq.n	800de32 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de1c:	f043 0208 	orr.w	r2, r3, #8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800de24:	2300      	movs	r3, #0
 800de26:	60bb      	str	r3, [r7, #8]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	60bb      	str	r3, [r7, #8]
 800de30:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de36:	2b00      	cmp	r3, #0
 800de38:	d04f      	beq.n	800deda <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	685a      	ldr	r2, [r3, #4]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800de48:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2201      	movs	r2, #1
 800de4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	f003 0302 	and.w	r3, r3, #2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d104      	bne.n	800de66 <HAL_SPI_IRQHandler+0x17e>
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	2b00      	cmp	r3, #0
 800de64:	d034      	beq.n	800ded0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f022 0203 	bic.w	r2, r2, #3
 800de74:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d011      	beq.n	800dea2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de82:	4a18      	ldr	r2, [pc, #96]	@ (800dee4 <HAL_SPI_IRQHandler+0x1fc>)
 800de84:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fa f8bd 	bl	800800a <HAL_DMA_Abort_IT>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d005      	beq.n	800dea2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de9a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d016      	beq.n	800ded8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deae:	4a0d      	ldr	r2, [pc, #52]	@ (800dee4 <HAL_SPI_IRQHandler+0x1fc>)
 800deb0:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fa f8a7 	bl	800800a <HAL_DMA_Abort_IT>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00a      	beq.n	800ded8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dec6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800dece:	e003      	b.n	800ded8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f813 	bl	800defc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ded6:	e000      	b.n	800deda <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ded8:	bf00      	nop
    return;
 800deda:	bf00      	nop
  }
}
 800dedc:	3720      	adds	r7, #32
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	0800e013 	.word	0x0800e013

0800dee8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800dee8:	b480      	push	{r7}
 800deea:	b083      	sub	sp, #12
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800defc:	b480      	push	{r7}
 800defe:	b083      	sub	sp, #12
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800df04:	bf00      	nop
 800df06:	370c      	adds	r7, #12
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df1c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800df1e:	f7f9 fd93 	bl	8007a48 <HAL_GetTick>
 800df22:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f003 0320 	and.w	r3, r3, #32
 800df2e:	2b20      	cmp	r3, #32
 800df30:	d03b      	beq.n	800dfaa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	f022 0220 	bic.w	r2, r2, #32
 800df40:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	685a      	ldr	r2, [r3, #4]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f022 0202 	bic.w	r2, r2, #2
 800df50:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	2164      	movs	r1, #100	@ 0x64
 800df56:	6978      	ldr	r0, [r7, #20]
 800df58:	f000 f98e 	bl	800e278 <SPI_EndRxTxTransaction>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d005      	beq.n	800df6e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df66:	f043 0220 	orr.w	r2, r3, #32
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d10a      	bne.n	800df8c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	60fb      	str	r3, [r7, #12]
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	689b      	ldr	r3, [r3, #8]
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	2200      	movs	r2, #0
 800df90:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2201      	movs	r2, #1
 800df96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800dfa2:	6978      	ldr	r0, [r7, #20]
 800dfa4:	f7ff ffaa 	bl	800defc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800dfa8:	e002      	b.n	800dfb0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800dfaa:	6978      	ldr	r0, [r7, #20]
 800dfac:	f7f8 fd90 	bl	8006ad0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dfb0:	3718      	adds	r7, #24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b084      	sub	sp, #16
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7ff ff8f 	bl	800dee8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dfca:	bf00      	nop
 800dfcc:	3710      	adds	r7, #16
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}

0800dfd2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b084      	sub	sp, #16
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfde:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685a      	ldr	r2, [r3, #4]
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f022 0203 	bic.w	r2, r2, #3
 800dfee:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dff4:	f043 0210 	orr.w	r2, r3, #16
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2201      	movs	r2, #1
 800e000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f7ff ff79 	bl	800defc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e00a:	bf00      	nop
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b084      	sub	sp, #16
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f7ff ff64 	bl	800defc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e034:	bf00      	nop
 800e036:	3710      	adds	r7, #16
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b088      	sub	sp, #32
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	603b      	str	r3, [r7, #0]
 800e048:	4613      	mov	r3, r2
 800e04a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e04c:	f7f9 fcfc 	bl	8007a48 <HAL_GetTick>
 800e050:	4602      	mov	r2, r0
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	1a9b      	subs	r3, r3, r2
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	4413      	add	r3, r2
 800e05a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e05c:	f7f9 fcf4 	bl	8007a48 <HAL_GetTick>
 800e060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e062:	4b39      	ldr	r3, [pc, #228]	@ (800e148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	015b      	lsls	r3, r3, #5
 800e068:	0d1b      	lsrs	r3, r3, #20
 800e06a:	69fa      	ldr	r2, [r7, #28]
 800e06c:	fb02 f303 	mul.w	r3, r2, r3
 800e070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e072:	e054      	b.n	800e11e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07a:	d050      	beq.n	800e11e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e07c:	f7f9 fce4 	bl	8007a48 <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	69fa      	ldr	r2, [r7, #28]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d902      	bls.n	800e092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d13d      	bne.n	800e10e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	685a      	ldr	r2, [r3, #4]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e0a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e0aa:	d111      	bne.n	800e0d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	689b      	ldr	r3, [r3, #8]
 800e0b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e0b4:	d004      	beq.n	800e0c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	689b      	ldr	r3, [r3, #8]
 800e0ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0be:	d107      	bne.n	800e0d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e0ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e0d8:	d10f      	bne.n	800e0fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e0e8:	601a      	str	r2, [r3, #0]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e0f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e10a:	2303      	movs	r3, #3
 800e10c:	e017      	b.n	800e13e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d101      	bne.n	800e118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	3b01      	subs	r3, #1
 800e11c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	689a      	ldr	r2, [r3, #8]
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	4013      	ands	r3, r2
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	bf0c      	ite	eq
 800e12e:	2301      	moveq	r3, #1
 800e130:	2300      	movne	r3, #0
 800e132:	b2db      	uxtb	r3, r3
 800e134:	461a      	mov	r2, r3
 800e136:	79fb      	ldrb	r3, [r7, #7]
 800e138:	429a      	cmp	r2, r3
 800e13a:	d19b      	bne.n	800e074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3720      	adds	r7, #32
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	20000024 	.word	0x20000024

0800e14c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b08a      	sub	sp, #40	@ 0x28
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
 800e158:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e15e:	f7f9 fc73 	bl	8007a48 <HAL_GetTick>
 800e162:	4602      	mov	r2, r0
 800e164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e166:	1a9b      	subs	r3, r3, r2
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	4413      	add	r3, r2
 800e16c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e16e:	f7f9 fc6b 	bl	8007a48 <HAL_GetTick>
 800e172:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	330c      	adds	r3, #12
 800e17a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e17c:	4b3d      	ldr	r3, [pc, #244]	@ (800e274 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e17e:	681a      	ldr	r2, [r3, #0]
 800e180:	4613      	mov	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	00da      	lsls	r2, r3, #3
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	0d1b      	lsrs	r3, r3, #20
 800e18c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e18e:	fb02 f303 	mul.w	r3, r2, r3
 800e192:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e194:	e060      	b.n	800e258 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e19c:	d107      	bne.n	800e1ae <SPI_WaitFifoStateUntilTimeout+0x62>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d104      	bne.n	800e1ae <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e1a4:	69fb      	ldr	r3, [r7, #28]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1b4:	d050      	beq.n	800e258 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e1b6:	f7f9 fc47 	bl	8007a48 <HAL_GetTick>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	6a3b      	ldr	r3, [r7, #32]
 800e1be:	1ad3      	subs	r3, r2, r3
 800e1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d902      	bls.n	800e1cc <SPI_WaitFifoStateUntilTimeout+0x80>
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d13d      	bne.n	800e248 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	685a      	ldr	r2, [r3, #4]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e1da:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1e4:	d111      	bne.n	800e20a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1ee:	d004      	beq.n	800e1fa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e1f8:	d107      	bne.n	800e20a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e208:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e20e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e212:	d10f      	bne.n	800e234 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e232:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2201      	movs	r2, #1
 800e238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2200      	movs	r2, #0
 800e240:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e244:	2303      	movs	r3, #3
 800e246:	e010      	b.n	800e26a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e24e:	2300      	movs	r3, #0
 800e250:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	3b01      	subs	r3, #1
 800e256:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	689a      	ldr	r2, [r3, #8]
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	4013      	ands	r3, r2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	d196      	bne.n	800e196 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3728      	adds	r7, #40	@ 0x28
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	20000024 	.word	0x20000024

0800e278 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b086      	sub	sp, #24
 800e27c:	af02      	add	r7, sp, #8
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f7ff ff5b 	bl	800e14c <SPI_WaitFifoStateUntilTimeout>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2a0:	f043 0220 	orr.w	r2, r3, #32
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e027      	b.n	800e2fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	2180      	movs	r1, #128	@ 0x80
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fec0 	bl	800e03c <SPI_WaitFlagStateUntilTimeout>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d007      	beq.n	800e2d2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2c6:	f043 0220 	orr.w	r2, r3, #32
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e2ce:	2303      	movs	r3, #3
 800e2d0:	e014      	b.n	800e2fc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7ff ff34 	bl	800e14c <SPI_WaitFifoStateUntilTimeout>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d007      	beq.n	800e2fa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e2ee:	f043 0220 	orr.w	r2, r3, #32
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e2f6:	2303      	movs	r3, #3
 800e2f8:	e000      	b.n	800e2fc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3710      	adds	r7, #16
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e312:	2301      	movs	r3, #1
 800e314:	e049      	b.n	800e3aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d106      	bne.n	800e330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7f9 f9da 	bl	80076e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2202      	movs	r2, #2
 800e334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681a      	ldr	r2, [r3, #0]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3304      	adds	r3, #4
 800e340:	4619      	mov	r1, r3
 800e342:	4610      	mov	r0, r2
 800e344:	f000 fbfa 	bl	800eb3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2201      	movs	r2, #1
 800e354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2201      	movs	r2, #1
 800e36c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2201      	movs	r2, #1
 800e374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2201      	movs	r2, #1
 800e384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2201      	movs	r2, #1
 800e394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3708      	adds	r7, #8
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b085      	sub	sp, #20
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d001      	beq.n	800e3cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e036      	b.n	800e43a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68da      	ldr	r2, [r3, #12]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	f042 0201 	orr.w	r2, r2, #1
 800e3e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	4a17      	ldr	r2, [pc, #92]	@ (800e448 <HAL_TIM_Base_Start_IT+0x94>)
 800e3ea:	4293      	cmp	r3, r2
 800e3ec:	d004      	beq.n	800e3f8 <HAL_TIM_Base_Start_IT+0x44>
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3f6:	d115      	bne.n	800e424 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	689a      	ldr	r2, [r3, #8]
 800e3fe:	4b13      	ldr	r3, [pc, #76]	@ (800e44c <HAL_TIM_Base_Start_IT+0x98>)
 800e400:	4013      	ands	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2b06      	cmp	r3, #6
 800e408:	d015      	beq.n	800e436 <HAL_TIM_Base_Start_IT+0x82>
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e410:	d011      	beq.n	800e436 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f042 0201 	orr.w	r2, r2, #1
 800e420:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e422:	e008      	b.n	800e436 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f042 0201 	orr.w	r2, r2, #1
 800e432:	601a      	str	r2, [r3, #0]
 800e434:	e000      	b.n	800e438 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e436:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3714      	adds	r7, #20
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
 800e446:	bf00      	nop
 800e448:	40012c00 	.word	0x40012c00
 800e44c:	00010007 	.word	0x00010007

0800e450 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d101      	bne.n	800e462 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e45e:	2301      	movs	r3, #1
 800e460:	e049      	b.n	800e4f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d106      	bne.n	800e47c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7f9 f924 	bl	80076c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2202      	movs	r2, #2
 800e480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3304      	adds	r3, #4
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f000 fb54 	bl	800eb3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3708      	adds	r7, #8
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
	...

0800e500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d109      	bne.n	800e524 <HAL_TIM_PWM_Start+0x24>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b01      	cmp	r3, #1
 800e51a:	bf14      	ite	ne
 800e51c:	2301      	movne	r3, #1
 800e51e:	2300      	moveq	r3, #0
 800e520:	b2db      	uxtb	r3, r3
 800e522:	e03c      	b.n	800e59e <HAL_TIM_PWM_Start+0x9e>
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	2b04      	cmp	r3, #4
 800e528:	d109      	bne.n	800e53e <HAL_TIM_PWM_Start+0x3e>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e530:	b2db      	uxtb	r3, r3
 800e532:	2b01      	cmp	r3, #1
 800e534:	bf14      	ite	ne
 800e536:	2301      	movne	r3, #1
 800e538:	2300      	moveq	r3, #0
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	e02f      	b.n	800e59e <HAL_TIM_PWM_Start+0x9e>
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	2b08      	cmp	r3, #8
 800e542:	d109      	bne.n	800e558 <HAL_TIM_PWM_Start+0x58>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b01      	cmp	r3, #1
 800e54e:	bf14      	ite	ne
 800e550:	2301      	movne	r3, #1
 800e552:	2300      	moveq	r3, #0
 800e554:	b2db      	uxtb	r3, r3
 800e556:	e022      	b.n	800e59e <HAL_TIM_PWM_Start+0x9e>
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	2b0c      	cmp	r3, #12
 800e55c:	d109      	bne.n	800e572 <HAL_TIM_PWM_Start+0x72>
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e564:	b2db      	uxtb	r3, r3
 800e566:	2b01      	cmp	r3, #1
 800e568:	bf14      	ite	ne
 800e56a:	2301      	movne	r3, #1
 800e56c:	2300      	moveq	r3, #0
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	e015      	b.n	800e59e <HAL_TIM_PWM_Start+0x9e>
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	2b10      	cmp	r3, #16
 800e576:	d109      	bne.n	800e58c <HAL_TIM_PWM_Start+0x8c>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	2b01      	cmp	r3, #1
 800e582:	bf14      	ite	ne
 800e584:	2301      	movne	r3, #1
 800e586:	2300      	moveq	r3, #0
 800e588:	b2db      	uxtb	r3, r3
 800e58a:	e008      	b.n	800e59e <HAL_TIM_PWM_Start+0x9e>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b01      	cmp	r3, #1
 800e596:	bf14      	ite	ne
 800e598:	2301      	movne	r3, #1
 800e59a:	2300      	moveq	r3, #0
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	e079      	b.n	800e69a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d104      	bne.n	800e5b6 <HAL_TIM_PWM_Start+0xb6>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5b4:	e023      	b.n	800e5fe <HAL_TIM_PWM_Start+0xfe>
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	2b04      	cmp	r3, #4
 800e5ba:	d104      	bne.n	800e5c6 <HAL_TIM_PWM_Start+0xc6>
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2202      	movs	r2, #2
 800e5c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5c4:	e01b      	b.n	800e5fe <HAL_TIM_PWM_Start+0xfe>
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	2b08      	cmp	r3, #8
 800e5ca:	d104      	bne.n	800e5d6 <HAL_TIM_PWM_Start+0xd6>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2202      	movs	r2, #2
 800e5d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5d4:	e013      	b.n	800e5fe <HAL_TIM_PWM_Start+0xfe>
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b0c      	cmp	r3, #12
 800e5da:	d104      	bne.n	800e5e6 <HAL_TIM_PWM_Start+0xe6>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2202      	movs	r2, #2
 800e5e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5e4:	e00b      	b.n	800e5fe <HAL_TIM_PWM_Start+0xfe>
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	2b10      	cmp	r3, #16
 800e5ea:	d104      	bne.n	800e5f6 <HAL_TIM_PWM_Start+0xf6>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2202      	movs	r2, #2
 800e5f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5f4:	e003      	b.n	800e5fe <HAL_TIM_PWM_Start+0xfe>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2202      	movs	r2, #2
 800e5fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2201      	movs	r2, #1
 800e604:	6839      	ldr	r1, [r7, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f000 fd80 	bl	800f10c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a24      	ldr	r2, [pc, #144]	@ (800e6a4 <HAL_TIM_PWM_Start+0x1a4>)
 800e612:	4293      	cmp	r3, r2
 800e614:	d009      	beq.n	800e62a <HAL_TIM_PWM_Start+0x12a>
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4a23      	ldr	r2, [pc, #140]	@ (800e6a8 <HAL_TIM_PWM_Start+0x1a8>)
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d004      	beq.n	800e62a <HAL_TIM_PWM_Start+0x12a>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	4a21      	ldr	r2, [pc, #132]	@ (800e6ac <HAL_TIM_PWM_Start+0x1ac>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d101      	bne.n	800e62e <HAL_TIM_PWM_Start+0x12e>
 800e62a:	2301      	movs	r3, #1
 800e62c:	e000      	b.n	800e630 <HAL_TIM_PWM_Start+0x130>
 800e62e:	2300      	movs	r3, #0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d007      	beq.n	800e644 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e642:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4a16      	ldr	r2, [pc, #88]	@ (800e6a4 <HAL_TIM_PWM_Start+0x1a4>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d004      	beq.n	800e658 <HAL_TIM_PWM_Start+0x158>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e656:	d115      	bne.n	800e684 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689a      	ldr	r2, [r3, #8]
 800e65e:	4b14      	ldr	r3, [pc, #80]	@ (800e6b0 <HAL_TIM_PWM_Start+0x1b0>)
 800e660:	4013      	ands	r3, r2
 800e662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b06      	cmp	r3, #6
 800e668:	d015      	beq.n	800e696 <HAL_TIM_PWM_Start+0x196>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e670:	d011      	beq.n	800e696 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	681a      	ldr	r2, [r3, #0]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f042 0201 	orr.w	r2, r2, #1
 800e680:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e682:	e008      	b.n	800e696 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	681a      	ldr	r2, [r3, #0]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f042 0201 	orr.w	r2, r2, #1
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	e000      	b.n	800e698 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e696:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	40012c00 	.word	0x40012c00
 800e6a8:	40014400 	.word	0x40014400
 800e6ac:	40014800 	.word	0x40014800
 800e6b0:	00010007 	.word	0x00010007

0800e6b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	691b      	ldr	r3, [r3, #16]
 800e6ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	f003 0302 	and.w	r3, r3, #2
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d020      	beq.n	800e718 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	f003 0302 	and.w	r3, r3, #2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01b      	beq.n	800e718 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f06f 0202 	mvn.w	r2, #2
 800e6e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2201      	movs	r2, #1
 800e6ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	699b      	ldr	r3, [r3, #24]
 800e6f6:	f003 0303 	and.w	r3, r3, #3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d003      	beq.n	800e706 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f9fe 	bl	800eb00 <HAL_TIM_IC_CaptureCallback>
 800e704:	e005      	b.n	800e712 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f9f0 	bl	800eaec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f000 fa01 	bl	800eb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	2200      	movs	r2, #0
 800e716:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	f003 0304 	and.w	r3, r3, #4
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d020      	beq.n	800e764 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d01b      	beq.n	800e764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f06f 0204 	mvn.w	r2, #4
 800e734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2202      	movs	r2, #2
 800e73a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e746:	2b00      	cmp	r3, #0
 800e748:	d003      	beq.n	800e752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 f9d8 	bl	800eb00 <HAL_TIM_IC_CaptureCallback>
 800e750:	e005      	b.n	800e75e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f9ca 	bl	800eaec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	f000 f9db 	bl	800eb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f003 0308 	and.w	r3, r3, #8
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d020      	beq.n	800e7b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f003 0308 	and.w	r3, r3, #8
 800e774:	2b00      	cmp	r3, #0
 800e776:	d01b      	beq.n	800e7b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f06f 0208 	mvn.w	r2, #8
 800e780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2204      	movs	r2, #4
 800e786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	69db      	ldr	r3, [r3, #28]
 800e78e:	f003 0303 	and.w	r3, r3, #3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d003      	beq.n	800e79e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 f9b2 	bl	800eb00 <HAL_TIM_IC_CaptureCallback>
 800e79c:	e005      	b.n	800e7aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 f9a4 	bl	800eaec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f000 f9b5 	bl	800eb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	f003 0310 	and.w	r3, r3, #16
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d020      	beq.n	800e7fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f003 0310 	and.w	r3, r3, #16
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d01b      	beq.n	800e7fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f06f 0210 	mvn.w	r2, #16
 800e7cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2208      	movs	r2, #8
 800e7d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	69db      	ldr	r3, [r3, #28]
 800e7da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d003      	beq.n	800e7ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f98c 	bl	800eb00 <HAL_TIM_IC_CaptureCallback>
 800e7e8:	e005      	b.n	800e7f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f97e 	bl	800eaec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f98f 	bl	800eb14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00c      	beq.n	800e820 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d007      	beq.n	800e820 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0201 	mvn.w	r2, #1
 800e818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7f8 f88e 	bl	800693c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e826:	2b00      	cmp	r3, #0
 800e828:	d104      	bne.n	800e834 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00c      	beq.n	800e84e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d007      	beq.n	800e84e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 fcef 	bl	800f22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00c      	beq.n	800e872 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fce7 	bl	800f240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00c      	beq.n	800e896 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e88e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 f949 	bl	800eb28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e896:	68bb      	ldr	r3, [r7, #8]
 800e898:	f003 0320 	and.w	r3, r3, #32
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d00c      	beq.n	800e8ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f003 0320 	and.w	r3, r3, #32
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d007      	beq.n	800e8ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f06f 0220 	mvn.w	r2, #32
 800e8b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f000 fcaf 	bl	800f218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8ba:	bf00      	nop
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
	...

0800e8c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d101      	bne.n	800e8e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8de:	2302      	movs	r3, #2
 800e8e0:	e0ff      	b.n	800eae2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	2201      	movs	r2, #1
 800e8e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b14      	cmp	r3, #20
 800e8ee:	f200 80f0 	bhi.w	800ead2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800e8f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f8:	0800e94d 	.word	0x0800e94d
 800e8fc:	0800ead3 	.word	0x0800ead3
 800e900:	0800ead3 	.word	0x0800ead3
 800e904:	0800ead3 	.word	0x0800ead3
 800e908:	0800e98d 	.word	0x0800e98d
 800e90c:	0800ead3 	.word	0x0800ead3
 800e910:	0800ead3 	.word	0x0800ead3
 800e914:	0800ead3 	.word	0x0800ead3
 800e918:	0800e9cf 	.word	0x0800e9cf
 800e91c:	0800ead3 	.word	0x0800ead3
 800e920:	0800ead3 	.word	0x0800ead3
 800e924:	0800ead3 	.word	0x0800ead3
 800e928:	0800ea0f 	.word	0x0800ea0f
 800e92c:	0800ead3 	.word	0x0800ead3
 800e930:	0800ead3 	.word	0x0800ead3
 800e934:	0800ead3 	.word	0x0800ead3
 800e938:	0800ea51 	.word	0x0800ea51
 800e93c:	0800ead3 	.word	0x0800ead3
 800e940:	0800ead3 	.word	0x0800ead3
 800e944:	0800ead3 	.word	0x0800ead3
 800e948:	0800ea91 	.word	0x0800ea91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68b9      	ldr	r1, [r7, #8]
 800e952:	4618      	mov	r0, r3
 800e954:	f000 f95c 	bl	800ec10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	699a      	ldr	r2, [r3, #24]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f042 0208 	orr.w	r2, r2, #8
 800e966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	699a      	ldr	r2, [r3, #24]
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	f022 0204 	bic.w	r2, r2, #4
 800e976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6999      	ldr	r1, [r3, #24]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	430a      	orrs	r2, r1
 800e988:	619a      	str	r2, [r3, #24]
      break;
 800e98a:	e0a5      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68b9      	ldr	r1, [r7, #8]
 800e992:	4618      	mov	r0, r3
 800e994:	f000 f9b8 	bl	800ed08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	699a      	ldr	r2, [r3, #24]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e9a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	699a      	ldr	r2, [r3, #24]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e9b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6999      	ldr	r1, [r3, #24]
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	021a      	lsls	r2, r3, #8
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	430a      	orrs	r2, r1
 800e9ca:	619a      	str	r2, [r3, #24]
      break;
 800e9cc:	e084      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	68b9      	ldr	r1, [r7, #8]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f000 fa11 	bl	800edfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	69da      	ldr	r2, [r3, #28]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f042 0208 	orr.w	r2, r2, #8
 800e9e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	69da      	ldr	r2, [r3, #28]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f022 0204 	bic.w	r2, r2, #4
 800e9f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	69d9      	ldr	r1, [r3, #28]
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	691a      	ldr	r2, [r3, #16]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	430a      	orrs	r2, r1
 800ea0a:	61da      	str	r2, [r3, #28]
      break;
 800ea0c:	e064      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68b9      	ldr	r1, [r7, #8]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f000 fa69 	bl	800eeec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	69da      	ldr	r2, [r3, #28]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	69da      	ldr	r2, [r3, #28]
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	69d9      	ldr	r1, [r3, #28]
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	021a      	lsls	r2, r3, #8
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	61da      	str	r2, [r3, #28]
      break;
 800ea4e:	e043      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	4618      	mov	r0, r3
 800ea58:	f000 faa6 	bl	800efa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f042 0208 	orr.w	r2, r2, #8
 800ea6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 0204 	bic.w	r2, r2, #4
 800ea7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	691a      	ldr	r2, [r3, #16]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	430a      	orrs	r2, r1
 800ea8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea8e:	e023      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68b9      	ldr	r1, [r7, #8]
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 fade 	bl	800f058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eaaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eaba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	691b      	ldr	r3, [r3, #16]
 800eac6:	021a      	lsls	r2, r3, #8
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	430a      	orrs	r2, r1
 800eace:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ead0:	e002      	b.n	800ead8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	75fb      	strb	r3, [r7, #23]
      break;
 800ead6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop

0800eaec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb30:	bf00      	nop
 800eb32:	370c      	adds	r7, #12
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a2d      	ldr	r2, [pc, #180]	@ (800ec04 <TIM_Base_SetConfig+0xc8>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d003      	beq.n	800eb5c <TIM_Base_SetConfig+0x20>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb5a:	d108      	bne.n	800eb6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	4a24      	ldr	r2, [pc, #144]	@ (800ec04 <TIM_Base_SetConfig+0xc8>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d00b      	beq.n	800eb8e <TIM_Base_SetConfig+0x52>
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb7c:	d007      	beq.n	800eb8e <TIM_Base_SetConfig+0x52>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	4a21      	ldr	r2, [pc, #132]	@ (800ec08 <TIM_Base_SetConfig+0xcc>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d003      	beq.n	800eb8e <TIM_Base_SetConfig+0x52>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a20      	ldr	r2, [pc, #128]	@ (800ec0c <TIM_Base_SetConfig+0xd0>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d108      	bne.n	800eba0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	68db      	ldr	r3, [r3, #12]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	695b      	ldr	r3, [r3, #20]
 800ebaa:	4313      	orrs	r3, r2
 800ebac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	4a10      	ldr	r2, [pc, #64]	@ (800ec04 <TIM_Base_SetConfig+0xc8>)
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d007      	beq.n	800ebd6 <TIM_Base_SetConfig+0x9a>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	4a0f      	ldr	r2, [pc, #60]	@ (800ec08 <TIM_Base_SetConfig+0xcc>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d003      	beq.n	800ebd6 <TIM_Base_SetConfig+0x9a>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4a0e      	ldr	r2, [pc, #56]	@ (800ec0c <TIM_Base_SetConfig+0xd0>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d103      	bne.n	800ebde <TIM_Base_SetConfig+0xa2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	691a      	ldr	r2, [r3, #16]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f043 0204 	orr.w	r2, r3, #4
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	601a      	str	r2, [r3, #0]
}
 800ebf6:	bf00      	nop
 800ebf8:	3714      	adds	r7, #20
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	40012c00 	.word	0x40012c00
 800ec08:	40014400 	.word	0x40014400
 800ec0c:	40014800 	.word	0x40014800

0800ec10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b087      	sub	sp, #28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6a1b      	ldr	r3, [r3, #32]
 800ec24:	f023 0201 	bic.w	r2, r3, #1
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 0303 	bic.w	r3, r3, #3
 800ec4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f023 0302 	bic.w	r3, r3, #2
 800ec5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a24      	ldr	r2, [pc, #144]	@ (800ecfc <TIM_OC1_SetConfig+0xec>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d007      	beq.n	800ec80 <TIM_OC1_SetConfig+0x70>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a23      	ldr	r2, [pc, #140]	@ (800ed00 <TIM_OC1_SetConfig+0xf0>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d003      	beq.n	800ec80 <TIM_OC1_SetConfig+0x70>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a22      	ldr	r2, [pc, #136]	@ (800ed04 <TIM_OC1_SetConfig+0xf4>)
 800ec7c:	4293      	cmp	r3, r2
 800ec7e:	d10c      	bne.n	800ec9a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f023 0308 	bic.w	r3, r3, #8
 800ec86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f023 0304 	bic.w	r3, r3, #4
 800ec98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a17      	ldr	r2, [pc, #92]	@ (800ecfc <TIM_OC1_SetConfig+0xec>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d007      	beq.n	800ecb2 <TIM_OC1_SetConfig+0xa2>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a17      	ldr	r2, [pc, #92]	@ (800ed04 <TIM_OC1_SetConfig+0xf4>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d003      	beq.n	800ecb2 <TIM_OC1_SetConfig+0xa2>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a14      	ldr	r2, [pc, #80]	@ (800ed00 <TIM_OC1_SetConfig+0xf0>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d111      	bne.n	800ecd6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ecc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	693a      	ldr	r2, [r7, #16]
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	693a      	ldr	r2, [r7, #16]
 800ecda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	697a      	ldr	r2, [r7, #20]
 800ecee:	621a      	str	r2, [r3, #32]
}
 800ecf0:	bf00      	nop
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	40012c00 	.word	0x40012c00
 800ed00:	40014800 	.word	0x40014800
 800ed04:	40014400 	.word	0x40014400

0800ed08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6a1b      	ldr	r3, [r3, #32]
 800ed16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a1b      	ldr	r3, [r3, #32]
 800ed1c:	f023 0210 	bic.w	r2, r3, #16
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	021b      	lsls	r3, r3, #8
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	f023 0320 	bic.w	r3, r3, #32
 800ed56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	689b      	ldr	r3, [r3, #8]
 800ed5c:	011b      	lsls	r3, r3, #4
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	4313      	orrs	r3, r2
 800ed62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a22      	ldr	r2, [pc, #136]	@ (800edf0 <TIM_OC2_SetConfig+0xe8>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d10d      	bne.n	800ed88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ed72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	68db      	ldr	r3, [r3, #12]
 800ed78:	011b      	lsls	r3, r3, #4
 800ed7a:	697a      	ldr	r2, [r7, #20]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a19      	ldr	r2, [pc, #100]	@ (800edf0 <TIM_OC2_SetConfig+0xe8>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d007      	beq.n	800eda0 <TIM_OC2_SetConfig+0x98>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a18      	ldr	r2, [pc, #96]	@ (800edf4 <TIM_OC2_SetConfig+0xec>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d003      	beq.n	800eda0 <TIM_OC2_SetConfig+0x98>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a17      	ldr	r2, [pc, #92]	@ (800edf8 <TIM_OC2_SetConfig+0xf0>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d113      	bne.n	800edc8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eda6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800edae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	695b      	ldr	r3, [r3, #20]
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	4313      	orrs	r3, r2
 800edba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	699b      	ldr	r3, [r3, #24]
 800edc0:	009b      	lsls	r3, r3, #2
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	4313      	orrs	r3, r2
 800edc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	693a      	ldr	r2, [r7, #16]
 800edcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	68fa      	ldr	r2, [r7, #12]
 800edd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	685a      	ldr	r2, [r3, #4]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	697a      	ldr	r2, [r7, #20]
 800ede0:	621a      	str	r2, [r3, #32]
}
 800ede2:	bf00      	nop
 800ede4:	371c      	adds	r7, #28
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	40012c00 	.word	0x40012c00
 800edf4:	40014400 	.word	0x40014400
 800edf8:	40014800 	.word	0x40014800

0800edfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b087      	sub	sp, #28
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6a1b      	ldr	r3, [r3, #32]
 800ee0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6a1b      	ldr	r3, [r3, #32]
 800ee10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	69db      	ldr	r3, [r3, #28]
 800ee22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	f023 0303 	bic.w	r3, r3, #3
 800ee36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ee48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	689b      	ldr	r3, [r3, #8]
 800ee4e:	021b      	lsls	r3, r3, #8
 800ee50:	697a      	ldr	r2, [r7, #20]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	4a21      	ldr	r2, [pc, #132]	@ (800eee0 <TIM_OC3_SetConfig+0xe4>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d10d      	bne.n	800ee7a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	021b      	lsls	r3, r3, #8
 800ee6c:	697a      	ldr	r2, [r7, #20]
 800ee6e:	4313      	orrs	r3, r2
 800ee70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a18      	ldr	r2, [pc, #96]	@ (800eee0 <TIM_OC3_SetConfig+0xe4>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d007      	beq.n	800ee92 <TIM_OC3_SetConfig+0x96>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	4a17      	ldr	r2, [pc, #92]	@ (800eee4 <TIM_OC3_SetConfig+0xe8>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d003      	beq.n	800ee92 <TIM_OC3_SetConfig+0x96>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4a16      	ldr	r2, [pc, #88]	@ (800eee8 <TIM_OC3_SetConfig+0xec>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d113      	bne.n	800eeba <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ee98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	011b      	lsls	r3, r3, #4
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	011b      	lsls	r3, r3, #4
 800eeb4:	693a      	ldr	r2, [r7, #16]
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	693a      	ldr	r2, [r7, #16]
 800eebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	697a      	ldr	r2, [r7, #20]
 800eed2:	621a      	str	r2, [r3, #32]
}
 800eed4:	bf00      	nop
 800eed6:	371c      	adds	r7, #28
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr
 800eee0:	40012c00 	.word	0x40012c00
 800eee4:	40014400 	.word	0x40014400
 800eee8:	40014800 	.word	0x40014800

0800eeec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a1b      	ldr	r3, [r3, #32]
 800eefa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	69db      	ldr	r3, [r3, #28]
 800ef12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ef1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	031b      	lsls	r3, r3, #12
 800ef42:	693a      	ldr	r2, [r7, #16]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a14      	ldr	r2, [pc, #80]	@ (800ef9c <TIM_OC4_SetConfig+0xb0>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d007      	beq.n	800ef60 <TIM_OC4_SetConfig+0x74>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a13      	ldr	r2, [pc, #76]	@ (800efa0 <TIM_OC4_SetConfig+0xb4>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d003      	beq.n	800ef60 <TIM_OC4_SetConfig+0x74>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a12      	ldr	r2, [pc, #72]	@ (800efa4 <TIM_OC4_SetConfig+0xb8>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d109      	bne.n	800ef74 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ef60:	697b      	ldr	r3, [r7, #20]
 800ef62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ef66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	695b      	ldr	r3, [r3, #20]
 800ef6c:	019b      	lsls	r3, r3, #6
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	4313      	orrs	r3, r2
 800ef72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	68fa      	ldr	r2, [r7, #12]
 800ef7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	685a      	ldr	r2, [r3, #4]
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	621a      	str	r2, [r3, #32]
}
 800ef8e:	bf00      	nop
 800ef90:	371c      	adds	r7, #28
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr
 800ef9a:	bf00      	nop
 800ef9c:	40012c00 	.word	0x40012c00
 800efa0:	40014400 	.word	0x40014400
 800efa4:	40014800 	.word	0x40014800

0800efa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a1b      	ldr	r3, [r3, #32]
 800efb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a1b      	ldr	r3, [r3, #32]
 800efbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800efce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800efec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	041b      	lsls	r3, r3, #16
 800eff4:	693a      	ldr	r2, [r7, #16]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4a13      	ldr	r2, [pc, #76]	@ (800f04c <TIM_OC5_SetConfig+0xa4>)
 800effe:	4293      	cmp	r3, r2
 800f000:	d007      	beq.n	800f012 <TIM_OC5_SetConfig+0x6a>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	4a12      	ldr	r2, [pc, #72]	@ (800f050 <TIM_OC5_SetConfig+0xa8>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d003      	beq.n	800f012 <TIM_OC5_SetConfig+0x6a>
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a11      	ldr	r2, [pc, #68]	@ (800f054 <TIM_OC5_SetConfig+0xac>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d109      	bne.n	800f026 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f018:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	021b      	lsls	r3, r3, #8
 800f020:	697a      	ldr	r2, [r7, #20]
 800f022:	4313      	orrs	r3, r2
 800f024:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	697a      	ldr	r2, [r7, #20]
 800f02a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	685a      	ldr	r2, [r3, #4]
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	693a      	ldr	r2, [r7, #16]
 800f03e:	621a      	str	r2, [r3, #32]
}
 800f040:	bf00      	nop
 800f042:	371c      	adds	r7, #28
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	40012c00 	.word	0x40012c00
 800f050:	40014400 	.word	0x40014400
 800f054:	40014800 	.word	0x40014800

0800f058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a1b      	ldr	r3, [r3, #32]
 800f066:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a1b      	ldr	r3, [r3, #32]
 800f06c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f08a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	021b      	lsls	r3, r3, #8
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	4313      	orrs	r3, r2
 800f096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f09e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	051b      	lsls	r3, r3, #20
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a14      	ldr	r2, [pc, #80]	@ (800f100 <TIM_OC6_SetConfig+0xa8>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d007      	beq.n	800f0c4 <TIM_OC6_SetConfig+0x6c>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a13      	ldr	r2, [pc, #76]	@ (800f104 <TIM_OC6_SetConfig+0xac>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d003      	beq.n	800f0c4 <TIM_OC6_SetConfig+0x6c>
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	4a12      	ldr	r2, [pc, #72]	@ (800f108 <TIM_OC6_SetConfig+0xb0>)
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d109      	bne.n	800f0d8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f0ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f0cc:	683b      	ldr	r3, [r7, #0]
 800f0ce:	695b      	ldr	r3, [r3, #20]
 800f0d0:	029b      	lsls	r3, r3, #10
 800f0d2:	697a      	ldr	r2, [r7, #20]
 800f0d4:	4313      	orrs	r3, r2
 800f0d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	697a      	ldr	r2, [r7, #20]
 800f0dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	685a      	ldr	r2, [r3, #4]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	693a      	ldr	r2, [r7, #16]
 800f0f0:	621a      	str	r2, [r3, #32]
}
 800f0f2:	bf00      	nop
 800f0f4:	371c      	adds	r7, #28
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	40012c00 	.word	0x40012c00
 800f104:	40014400 	.word	0x40014400
 800f108:	40014800 	.word	0x40014800

0800f10c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b087      	sub	sp, #28
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	f003 031f 	and.w	r3, r3, #31
 800f11e:	2201      	movs	r2, #1
 800f120:	fa02 f303 	lsl.w	r3, r2, r3
 800f124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	6a1a      	ldr	r2, [r3, #32]
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	43db      	mvns	r3, r3
 800f12e:	401a      	ands	r2, r3
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6a1a      	ldr	r2, [r3, #32]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	f003 031f 	and.w	r3, r3, #31
 800f13e:	6879      	ldr	r1, [r7, #4]
 800f140:	fa01 f303 	lsl.w	r3, r1, r3
 800f144:	431a      	orrs	r2, r3
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	621a      	str	r2, [r3, #32]
}
 800f14a:	bf00      	nop
 800f14c:	371c      	adds	r7, #28
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
	...

0800f158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d101      	bne.n	800f170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f16c:	2302      	movs	r3, #2
 800f16e:	e04a      	b.n	800f206 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2201      	movs	r2, #1
 800f174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2202      	movs	r2, #2
 800f17c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a1f      	ldr	r2, [pc, #124]	@ (800f214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d108      	bne.n	800f1ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f1a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	4313      	orrs	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	68fa      	ldr	r2, [r7, #12]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a12      	ldr	r2, [pc, #72]	@ (800f214 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d004      	beq.n	800f1da <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1d8:	d10c      	bne.n	800f1f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f1e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	68ba      	ldr	r2, [r7, #8]
 800f1f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
 800f212:	bf00      	nop
 800f214:	40012c00 	.word	0x40012c00

0800f218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f218:	b480      	push	{r7}
 800f21a:	b083      	sub	sp, #12
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f220:	bf00      	nop
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr

0800f22c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f22c:	b480      	push	{r7}
 800f22e:	b083      	sub	sp, #12
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f248:	bf00      	nop
 800f24a:	370c      	adds	r7, #12
 800f24c:	46bd      	mov	sp, r7
 800f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f252:	4770      	bx	lr

0800f254 <LL_RCC_GetUSARTClockSource>:
{
 800f254:	b480      	push	{r7}
 800f256:	b083      	sub	sp, #12
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f25c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f260:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4013      	ands	r3, r2
}
 800f268:	4618      	mov	r0, r3
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <LL_RCC_GetLPUARTClockSource>:
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f27c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f280:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	4013      	ands	r3, r2
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b082      	sub	sp, #8
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e050      	b.n	800f348 <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d114      	bne.n	800f2da <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 f935 	bl	800f528 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d103      	bne.n	800f2d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	4a21      	ldr	r2, [pc, #132]	@ (800f350 <HAL_UART_Init+0xbc>)
 800f2cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2224      	movs	r2, #36	@ 0x24
 800f2de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	f022 0201 	bic.w	r2, r2, #1
 800f2f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d002      	beq.n	800f300 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fb8e 	bl	800fa1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 f963 	bl	800f5cc <UART_SetConfig>
 800f306:	4603      	mov	r3, r0
 800f308:	2b01      	cmp	r3, #1
 800f30a:	d101      	bne.n	800f310 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f30c:	2301      	movs	r3, #1
 800f30e:	e01b      	b.n	800f348 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f31e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	689a      	ldr	r2, [r3, #8]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f32e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	681a      	ldr	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f042 0201 	orr.w	r2, r2, #1
 800f33e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 fc0d 	bl	800fb60 <UART_CheckIdleState>
 800f346:	4603      	mov	r3, r0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}
 800f350:	0800786d 	.word	0x0800786d

0800f354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b08a      	sub	sp, #40	@ 0x28
 800f358:	af02      	add	r7, sp, #8
 800f35a:	60f8      	str	r0, [r7, #12]
 800f35c:	60b9      	str	r1, [r7, #8]
 800f35e:	603b      	str	r3, [r7, #0]
 800f360:	4613      	mov	r3, r2
 800f362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f36a:	2b20      	cmp	r3, #32
 800f36c:	d17b      	bne.n	800f466 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <HAL_UART_Transmit+0x26>
 800f374:	88fb      	ldrh	r3, [r7, #6]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	e074      	b.n	800f468 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	2200      	movs	r2, #0
 800f382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2221      	movs	r2, #33	@ 0x21
 800f38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f38e:	f7f8 fb5b 	bl	8007a48 <HAL_GetTick>
 800f392:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	88fa      	ldrh	r2, [r7, #6]
 800f398:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	88fa      	ldrh	r2, [r7, #6]
 800f3a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	689b      	ldr	r3, [r3, #8]
 800f3a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3ac:	d108      	bne.n	800f3c0 <HAL_UART_Transmit+0x6c>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	691b      	ldr	r3, [r3, #16]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d104      	bne.n	800f3c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	61bb      	str	r3, [r7, #24]
 800f3be:	e003      	b.n	800f3c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f3c8:	e030      	b.n	800f42c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	9300      	str	r3, [sp, #0]
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	2180      	movs	r1, #128	@ 0x80
 800f3d4:	68f8      	ldr	r0, [r7, #12]
 800f3d6:	f000 fc6d 	bl	800fcb4 <UART_WaitOnFlagUntilTimeout>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d005      	beq.n	800f3ec <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2220      	movs	r2, #32
 800f3e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f3e8:	2303      	movs	r3, #3
 800f3ea:	e03d      	b.n	800f468 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d10b      	bne.n	800f40a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f3f2:	69bb      	ldr	r3, [r7, #24]
 800f3f4:	881b      	ldrh	r3, [r3, #0]
 800f3f6:	461a      	mov	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f400:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	3302      	adds	r3, #2
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e007      	b.n	800f41a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	781a      	ldrb	r2, [r3, #0]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	3301      	adds	r3, #1
 800f418:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f420:	b29b      	uxth	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	b29a      	uxth	r2, r3
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f432:	b29b      	uxth	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d1c8      	bne.n	800f3ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	2200      	movs	r2, #0
 800f440:	2140      	movs	r1, #64	@ 0x40
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f000 fc36 	bl	800fcb4 <UART_WaitOnFlagUntilTimeout>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d005      	beq.n	800f45a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2220      	movs	r2, #32
 800f452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e006      	b.n	800f468 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2220      	movs	r2, #32
 800f45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f462:	2300      	movs	r3, #0
 800f464:	e000      	b.n	800f468 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f466:	2302      	movs	r3, #2
  }
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3720      	adds	r7, #32
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f478:	bf00      	nop
 800f47a:	370c      	adds	r7, #12
 800f47c:	46bd      	mov	sp, r7
 800f47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f482:	4770      	bx	lr

0800f484 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f484:	b480      	push	{r7}
 800f486:	b083      	sub	sp, #12
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f48c:	bf00      	nop
 800f48e:	370c      	adds	r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f496:	4770      	bx	lr

0800f498 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800f4dc:	bf00      	nop
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b083      	sub	sp, #12
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800f4f0:	bf00      	nop
 800f4f2:	370c      	adds	r7, #12
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800f504:	bf00      	nop
 800f506:	370c      	adds	r7, #12
 800f508:	46bd      	mov	sp, r7
 800f50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50e:	4770      	bx	lr

0800f510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	460b      	mov	r3, r1
 800f51a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f51c:	bf00      	nop
 800f51e:	370c      	adds	r7, #12
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr

0800f528 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	4a1a      	ldr	r2, [pc, #104]	@ (800f59c <UART_InitCallbacksToDefault+0x74>)
 800f534:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4a19      	ldr	r2, [pc, #100]	@ (800f5a0 <UART_InitCallbacksToDefault+0x78>)
 800f53c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	4a18      	ldr	r2, [pc, #96]	@ (800f5a4 <UART_InitCallbacksToDefault+0x7c>)
 800f544:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	4a17      	ldr	r2, [pc, #92]	@ (800f5a8 <UART_InitCallbacksToDefault+0x80>)
 800f54c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4a16      	ldr	r2, [pc, #88]	@ (800f5ac <UART_InitCallbacksToDefault+0x84>)
 800f554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	4a15      	ldr	r2, [pc, #84]	@ (800f5b0 <UART_InitCallbacksToDefault+0x88>)
 800f55c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a14      	ldr	r2, [pc, #80]	@ (800f5b4 <UART_InitCallbacksToDefault+0x8c>)
 800f564:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	4a13      	ldr	r2, [pc, #76]	@ (800f5b8 <UART_InitCallbacksToDefault+0x90>)
 800f56c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	4a12      	ldr	r2, [pc, #72]	@ (800f5bc <UART_InitCallbacksToDefault+0x94>)
 800f574:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	4a11      	ldr	r2, [pc, #68]	@ (800f5c0 <UART_InitCallbacksToDefault+0x98>)
 800f57c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	4a10      	ldr	r2, [pc, #64]	@ (800f5c4 <UART_InitCallbacksToDefault+0x9c>)
 800f584:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a0f      	ldr	r2, [pc, #60]	@ (800f5c8 <UART_InitCallbacksToDefault+0xa0>)
 800f58c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800f590:	bf00      	nop
 800f592:	370c      	adds	r7, #12
 800f594:	46bd      	mov	sp, r7
 800f596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59a:	4770      	bx	lr
 800f59c:	0800f485 	.word	0x0800f485
 800f5a0:	0800f471 	.word	0x0800f471
 800f5a4:	0800f4ad 	.word	0x0800f4ad
 800f5a8:	0800f499 	.word	0x0800f499
 800f5ac:	0800f4c1 	.word	0x0800f4c1
 800f5b0:	0800f4d5 	.word	0x0800f4d5
 800f5b4:	0800f4e9 	.word	0x0800f4e9
 800f5b8:	0800f4fd 	.word	0x0800f4fd
 800f5bc:	0800fe5b 	.word	0x0800fe5b
 800f5c0:	0800fe6f 	.word	0x0800fe6f
 800f5c4:	0800fe83 	.word	0x0800fe83
 800f5c8:	0800f511 	.word	0x0800f511

0800f5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5d0:	b08c      	sub	sp, #48	@ 0x30
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5dc:	697b      	ldr	r3, [r7, #20]
 800f5de:	689a      	ldr	r2, [r3, #8]
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	691b      	ldr	r3, [r3, #16]
 800f5e4:	431a      	orrs	r2, r3
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	431a      	orrs	r2, r3
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	69db      	ldr	r3, [r3, #28]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	4baf      	ldr	r3, [pc, #700]	@ (800f8b8 <UART_SetConfig+0x2ec>)
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	6812      	ldr	r2, [r2, #0]
 800f602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f604:	430b      	orrs	r3, r1
 800f606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f608:	697b      	ldr	r3, [r7, #20]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	68da      	ldr	r2, [r3, #12]
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	430a      	orrs	r2, r1
 800f61c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	699b      	ldr	r3, [r3, #24]
 800f622:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4aa4      	ldr	r2, [pc, #656]	@ (800f8bc <UART_SetConfig+0x2f0>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d004      	beq.n	800f638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f634:	4313      	orrs	r3, r2
 800f636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f642:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	6812      	ldr	r2, [r2, #0]
 800f64a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f64c:	430b      	orrs	r3, r1
 800f64e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f656:	f023 010f 	bic.w	r1, r3, #15
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4a95      	ldr	r2, [pc, #596]	@ (800f8c0 <UART_SetConfig+0x2f4>)
 800f66c:	4293      	cmp	r3, r2
 800f66e:	d125      	bne.n	800f6bc <UART_SetConfig+0xf0>
 800f670:	2003      	movs	r0, #3
 800f672:	f7ff fdef 	bl	800f254 <LL_RCC_GetUSARTClockSource>
 800f676:	4603      	mov	r3, r0
 800f678:	2b03      	cmp	r3, #3
 800f67a:	d81b      	bhi.n	800f6b4 <UART_SetConfig+0xe8>
 800f67c:	a201      	add	r2, pc, #4	@ (adr r2, 800f684 <UART_SetConfig+0xb8>)
 800f67e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f682:	bf00      	nop
 800f684:	0800f695 	.word	0x0800f695
 800f688:	0800f6a5 	.word	0x0800f6a5
 800f68c:	0800f69d 	.word	0x0800f69d
 800f690:	0800f6ad 	.word	0x0800f6ad
 800f694:	2301      	movs	r3, #1
 800f696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f69a:	e042      	b.n	800f722 <UART_SetConfig+0x156>
 800f69c:	2302      	movs	r3, #2
 800f69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6a2:	e03e      	b.n	800f722 <UART_SetConfig+0x156>
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6aa:	e03a      	b.n	800f722 <UART_SetConfig+0x156>
 800f6ac:	2308      	movs	r3, #8
 800f6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6b2:	e036      	b.n	800f722 <UART_SetConfig+0x156>
 800f6b4:	2310      	movs	r3, #16
 800f6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6ba:	e032      	b.n	800f722 <UART_SetConfig+0x156>
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	4a7e      	ldr	r2, [pc, #504]	@ (800f8bc <UART_SetConfig+0x2f0>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d12a      	bne.n	800f71c <UART_SetConfig+0x150>
 800f6c6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800f6ca:	f7ff fdd3 	bl	800f274 <LL_RCC_GetLPUARTClockSource>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f6d4:	d01a      	beq.n	800f70c <UART_SetConfig+0x140>
 800f6d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f6da:	d81b      	bhi.n	800f714 <UART_SetConfig+0x148>
 800f6dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f6e0:	d00c      	beq.n	800f6fc <UART_SetConfig+0x130>
 800f6e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f6e6:	d815      	bhi.n	800f714 <UART_SetConfig+0x148>
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d003      	beq.n	800f6f4 <UART_SetConfig+0x128>
 800f6ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f6f0:	d008      	beq.n	800f704 <UART_SetConfig+0x138>
 800f6f2:	e00f      	b.n	800f714 <UART_SetConfig+0x148>
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6fa:	e012      	b.n	800f722 <UART_SetConfig+0x156>
 800f6fc:	2302      	movs	r3, #2
 800f6fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f702:	e00e      	b.n	800f722 <UART_SetConfig+0x156>
 800f704:	2304      	movs	r3, #4
 800f706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f70a:	e00a      	b.n	800f722 <UART_SetConfig+0x156>
 800f70c:	2308      	movs	r3, #8
 800f70e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f712:	e006      	b.n	800f722 <UART_SetConfig+0x156>
 800f714:	2310      	movs	r3, #16
 800f716:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f71a:	e002      	b.n	800f722 <UART_SetConfig+0x156>
 800f71c:	2310      	movs	r3, #16
 800f71e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a65      	ldr	r2, [pc, #404]	@ (800f8bc <UART_SetConfig+0x2f0>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	f040 8097 	bne.w	800f85c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f72e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f732:	2b08      	cmp	r3, #8
 800f734:	d823      	bhi.n	800f77e <UART_SetConfig+0x1b2>
 800f736:	a201      	add	r2, pc, #4	@ (adr r2, 800f73c <UART_SetConfig+0x170>)
 800f738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f73c:	0800f761 	.word	0x0800f761
 800f740:	0800f77f 	.word	0x0800f77f
 800f744:	0800f769 	.word	0x0800f769
 800f748:	0800f77f 	.word	0x0800f77f
 800f74c:	0800f76f 	.word	0x0800f76f
 800f750:	0800f77f 	.word	0x0800f77f
 800f754:	0800f77f 	.word	0x0800f77f
 800f758:	0800f77f 	.word	0x0800f77f
 800f75c:	0800f777 	.word	0x0800f777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f760:	f7fc fea8 	bl	800c4b4 <HAL_RCC_GetPCLK1Freq>
 800f764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f766:	e010      	b.n	800f78a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f768:	4b56      	ldr	r3, [pc, #344]	@ (800f8c4 <UART_SetConfig+0x2f8>)
 800f76a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f76c:	e00d      	b.n	800f78a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f76e:	f7fc fe21 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800f772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f774:	e009      	b.n	800f78a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f77a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f77c:	e005      	b.n	800f78a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f77e:	2300      	movs	r3, #0
 800f780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f782:	2301      	movs	r3, #1
 800f784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 812b 	beq.w	800f9e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f796:	4a4c      	ldr	r2, [pc, #304]	@ (800f8c8 <UART_SetConfig+0x2fc>)
 800f798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f79c:	461a      	mov	r2, r3
 800f79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	685a      	ldr	r2, [r3, #4]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	005b      	lsls	r3, r3, #1
 800f7ae:	4413      	add	r3, r2
 800f7b0:	69ba      	ldr	r2, [r7, #24]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d305      	bcc.n	800f7c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	685b      	ldr	r3, [r3, #4]
 800f7ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d903      	bls.n	800f7ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f7c8:	e10e      	b.n	800f9e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	60bb      	str	r3, [r7, #8]
 800f7d0:	60fa      	str	r2, [r7, #12]
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7d6:	4a3c      	ldr	r2, [pc, #240]	@ (800f8c8 <UART_SetConfig+0x2fc>)
 800f7d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	2200      	movs	r2, #0
 800f7e0:	603b      	str	r3, [r7, #0]
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f7ec:	f7f1 fa14 	bl	8000c18 <__aeabi_uldivmod>
 800f7f0:	4602      	mov	r2, r0
 800f7f2:	460b      	mov	r3, r1
 800f7f4:	4610      	mov	r0, r2
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	f04f 0200 	mov.w	r2, #0
 800f7fc:	f04f 0300 	mov.w	r3, #0
 800f800:	020b      	lsls	r3, r1, #8
 800f802:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f806:	0202      	lsls	r2, r0, #8
 800f808:	6979      	ldr	r1, [r7, #20]
 800f80a:	6849      	ldr	r1, [r1, #4]
 800f80c:	0849      	lsrs	r1, r1, #1
 800f80e:	2000      	movs	r0, #0
 800f810:	460c      	mov	r4, r1
 800f812:	4605      	mov	r5, r0
 800f814:	eb12 0804 	adds.w	r8, r2, r4
 800f818:	eb43 0905 	adc.w	r9, r3, r5
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	469a      	mov	sl, r3
 800f824:	4693      	mov	fp, r2
 800f826:	4652      	mov	r2, sl
 800f828:	465b      	mov	r3, fp
 800f82a:	4640      	mov	r0, r8
 800f82c:	4649      	mov	r1, r9
 800f82e:	f7f1 f9f3 	bl	8000c18 <__aeabi_uldivmod>
 800f832:	4602      	mov	r2, r0
 800f834:	460b      	mov	r3, r1
 800f836:	4613      	mov	r3, r2
 800f838:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f840:	d308      	bcc.n	800f854 <UART_SetConfig+0x288>
 800f842:	6a3b      	ldr	r3, [r7, #32]
 800f844:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f848:	d204      	bcs.n	800f854 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6a3a      	ldr	r2, [r7, #32]
 800f850:	60da      	str	r2, [r3, #12]
 800f852:	e0c9      	b.n	800f9e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800f854:	2301      	movs	r3, #1
 800f856:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f85a:	e0c5      	b.n	800f9e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	69db      	ldr	r3, [r3, #28]
 800f860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f864:	d16d      	bne.n	800f942 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800f866:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f86a:	3b01      	subs	r3, #1
 800f86c:	2b07      	cmp	r3, #7
 800f86e:	d82d      	bhi.n	800f8cc <UART_SetConfig+0x300>
 800f870:	a201      	add	r2, pc, #4	@ (adr r2, 800f878 <UART_SetConfig+0x2ac>)
 800f872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f876:	bf00      	nop
 800f878:	0800f899 	.word	0x0800f899
 800f87c:	0800f8a1 	.word	0x0800f8a1
 800f880:	0800f8cd 	.word	0x0800f8cd
 800f884:	0800f8a7 	.word	0x0800f8a7
 800f888:	0800f8cd 	.word	0x0800f8cd
 800f88c:	0800f8cd 	.word	0x0800f8cd
 800f890:	0800f8cd 	.word	0x0800f8cd
 800f894:	0800f8af 	.word	0x0800f8af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f898:	f7fc fe22 	bl	800c4e0 <HAL_RCC_GetPCLK2Freq>
 800f89c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f89e:	e01b      	b.n	800f8d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f8a0:	4b08      	ldr	r3, [pc, #32]	@ (800f8c4 <UART_SetConfig+0x2f8>)
 800f8a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f8a4:	e018      	b.n	800f8d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f8a6:	f7fc fd85 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800f8aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f8ac:	e014      	b.n	800f8d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f8ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f8b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f8b4:	e010      	b.n	800f8d8 <UART_SetConfig+0x30c>
 800f8b6:	bf00      	nop
 800f8b8:	cfff69f3 	.word	0xcfff69f3
 800f8bc:	40008000 	.word	0x40008000
 800f8c0:	40013800 	.word	0x40013800
 800f8c4:	00f42400 	.word	0x00f42400
 800f8c8:	0801d554 	.word	0x0801d554
      default:
        pclk = 0U;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f8d0:	2301      	movs	r3, #1
 800f8d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f8d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 8084 	beq.w	800f9e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8e4:	4a4b      	ldr	r2, [pc, #300]	@ (800fa14 <UART_SetConfig+0x448>)
 800f8e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8f2:	005a      	lsls	r2, r3, #1
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	085b      	lsrs	r3, r3, #1
 800f8fa:	441a      	add	r2, r3
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	fbb2 f3f3 	udiv	r3, r2, r3
 800f904:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	2b0f      	cmp	r3, #15
 800f90a:	d916      	bls.n	800f93a <UART_SetConfig+0x36e>
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f912:	d212      	bcs.n	800f93a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f914:	6a3b      	ldr	r3, [r7, #32]
 800f916:	b29b      	uxth	r3, r3
 800f918:	f023 030f 	bic.w	r3, r3, #15
 800f91c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f91e:	6a3b      	ldr	r3, [r7, #32]
 800f920:	085b      	lsrs	r3, r3, #1
 800f922:	b29b      	uxth	r3, r3
 800f924:	f003 0307 	and.w	r3, r3, #7
 800f928:	b29a      	uxth	r2, r3
 800f92a:	8bfb      	ldrh	r3, [r7, #30]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	8bfa      	ldrh	r2, [r7, #30]
 800f936:	60da      	str	r2, [r3, #12]
 800f938:	e056      	b.n	800f9e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f940:	e052      	b.n	800f9e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f942:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f946:	3b01      	subs	r3, #1
 800f948:	2b07      	cmp	r3, #7
 800f94a:	d822      	bhi.n	800f992 <UART_SetConfig+0x3c6>
 800f94c:	a201      	add	r2, pc, #4	@ (adr r2, 800f954 <UART_SetConfig+0x388>)
 800f94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f952:	bf00      	nop
 800f954:	0800f975 	.word	0x0800f975
 800f958:	0800f97d 	.word	0x0800f97d
 800f95c:	0800f993 	.word	0x0800f993
 800f960:	0800f983 	.word	0x0800f983
 800f964:	0800f993 	.word	0x0800f993
 800f968:	0800f993 	.word	0x0800f993
 800f96c:	0800f993 	.word	0x0800f993
 800f970:	0800f98b 	.word	0x0800f98b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f974:	f7fc fdb4 	bl	800c4e0 <HAL_RCC_GetPCLK2Freq>
 800f978:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f97a:	e010      	b.n	800f99e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f97c:	4b26      	ldr	r3, [pc, #152]	@ (800fa18 <UART_SetConfig+0x44c>)
 800f97e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f980:	e00d      	b.n	800f99e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f982:	f7fc fd17 	bl	800c3b4 <HAL_RCC_GetSysClockFreq>
 800f986:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f988:	e009      	b.n	800f99e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f98a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f98e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f990:	e005      	b.n	800f99e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f992:	2300      	movs	r3, #0
 800f994:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f996:	2301      	movs	r3, #1
 800f998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f99c:	bf00      	nop
    }

    if (pclk != 0U)
 800f99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d021      	beq.n	800f9e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9a8:	4a1a      	ldr	r2, [pc, #104]	@ (800fa14 <UART_SetConfig+0x448>)
 800f9aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b2:	fbb3 f2f2 	udiv	r2, r3, r2
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	085b      	lsrs	r3, r3, #1
 800f9bc:	441a      	add	r2, r3
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	2b0f      	cmp	r3, #15
 800f9cc:	d909      	bls.n	800f9e2 <UART_SetConfig+0x416>
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f9d4:	d205      	bcs.n	800f9e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f9d6:	6a3b      	ldr	r3, [r7, #32]
 800f9d8:	b29a      	uxth	r2, r3
 800f9da:	697b      	ldr	r3, [r7, #20]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	60da      	str	r2, [r3, #12]
 800f9e0:	e002      	b.n	800f9e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f9fe:	697b      	ldr	r3, [r7, #20]
 800fa00:	2200      	movs	r2, #0
 800fa02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fa04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3730      	adds	r7, #48	@ 0x30
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa12:	bf00      	nop
 800fa14:	0801d554 	.word	0x0801d554
 800fa18:	00f42400 	.word	0x00f42400

0800fa1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b083      	sub	sp, #12
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa28:	f003 0308 	and.w	r3, r3, #8
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d00a      	beq.n	800fa46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	430a      	orrs	r2, r1
 800fa44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa4a:	f003 0301 	and.w	r3, r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00a      	beq.n	800fa68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	430a      	orrs	r2, r1
 800fa66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa6c:	f003 0302 	and.w	r3, r3, #2
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00a      	beq.n	800fa8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	430a      	orrs	r2, r1
 800fa88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa8e:	f003 0304 	and.w	r3, r3, #4
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d00a      	beq.n	800faac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	430a      	orrs	r2, r1
 800faaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fab0:	f003 0310 	and.w	r3, r3, #16
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d00a      	beq.n	800face <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	689b      	ldr	r3, [r3, #8]
 800fabe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	430a      	orrs	r2, r1
 800facc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fad2:	f003 0320 	and.w	r3, r3, #32
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00a      	beq.n	800faf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	430a      	orrs	r2, r1
 800faee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d01a      	beq.n	800fb32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	430a      	orrs	r2, r1
 800fb10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb1a:	d10a      	bne.n	800fb32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	430a      	orrs	r2, r1
 800fb30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00a      	beq.n	800fb54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	430a      	orrs	r2, r1
 800fb52:	605a      	str	r2, [r3, #4]
  }
}
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b098      	sub	sp, #96	@ 0x60
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fb70:	f7f7 ff6a 	bl	8007a48 <HAL_GetTick>
 800fb74:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f003 0308 	and.w	r3, r3, #8
 800fb80:	2b08      	cmp	r3, #8
 800fb82:	d12f      	bne.n	800fbe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb84:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 f88e 	bl	800fcb4 <UART_WaitOnFlagUntilTimeout>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d022      	beq.n	800fbe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fba6:	e853 3f00 	ldrex	r3, [r3]
 800fbaa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fbac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fbb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbbc:	647b      	str	r3, [r7, #68]	@ 0x44
 800fbbe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fbc4:	e841 2300 	strex	r3, r2, [r1]
 800fbc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fbca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1e6      	bne.n	800fb9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2220      	movs	r2, #32
 800fbd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e063      	b.n	800fcac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	f003 0304 	and.w	r3, r3, #4
 800fbee:	2b04      	cmp	r3, #4
 800fbf0:	d149      	bne.n	800fc86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbf2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fc00:	6878      	ldr	r0, [r7, #4]
 800fc02:	f000 f857 	bl	800fcb4 <UART_WaitOnFlagUntilTimeout>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d03c      	beq.n	800fc86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc14:	e853 3f00 	ldrex	r3, [r3]
 800fc18:	623b      	str	r3, [r7, #32]
   return(result);
 800fc1a:	6a3b      	ldr	r3, [r7, #32]
 800fc1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e6      	bne.n	800fc0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3308      	adds	r3, #8
 800fc44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	e853 3f00 	ldrex	r3, [r3]
 800fc4c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f023 0301 	bic.w	r3, r3, #1
 800fc54:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	3308      	adds	r3, #8
 800fc5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc5e:	61fa      	str	r2, [r7, #28]
 800fc60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc62:	69b9      	ldr	r1, [r7, #24]
 800fc64:	69fa      	ldr	r2, [r7, #28]
 800fc66:	e841 2300 	strex	r3, r2, [r1]
 800fc6a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1e5      	bne.n	800fc3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2220      	movs	r2, #32
 800fc76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc82:	2303      	movs	r3, #3
 800fc84:	e012      	b.n	800fcac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2220      	movs	r2, #32
 800fc8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2220      	movs	r2, #32
 800fc92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3758      	adds	r7, #88	@ 0x58
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	603b      	str	r3, [r7, #0]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcc4:	e04f      	b.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fccc:	d04b      	beq.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcce:	f7f7 febb 	bl	8007a48 <HAL_GetTick>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	69ba      	ldr	r2, [r7, #24]
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d302      	bcc.n	800fce4 <UART_WaitOnFlagUntilTimeout+0x30>
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d101      	bne.n	800fce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fce4:	2303      	movs	r3, #3
 800fce6:	e04e      	b.n	800fd86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	f003 0304 	and.w	r3, r3, #4
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d037      	beq.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b80      	cmp	r3, #128	@ 0x80
 800fcfa:	d034      	beq.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	2b40      	cmp	r3, #64	@ 0x40
 800fd00:	d031      	beq.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	69db      	ldr	r3, [r3, #28]
 800fd08:	f003 0308 	and.w	r3, r3, #8
 800fd0c:	2b08      	cmp	r3, #8
 800fd0e:	d110      	bne.n	800fd32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2208      	movs	r2, #8
 800fd16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd18:	68f8      	ldr	r0, [r7, #12]
 800fd1a:	f000 f838 	bl	800fd8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2208      	movs	r2, #8
 800fd22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e029      	b.n	800fd86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	69db      	ldr	r3, [r3, #28]
 800fd38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd40:	d111      	bne.n	800fd66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd4c:	68f8      	ldr	r0, [r7, #12]
 800fd4e:	f000 f81e 	bl	800fd8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2220      	movs	r2, #32
 800fd56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e00f      	b.n	800fd86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	69da      	ldr	r2, [r3, #28]
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	4013      	ands	r3, r2
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	429a      	cmp	r2, r3
 800fd74:	bf0c      	ite	eq
 800fd76:	2301      	moveq	r3, #1
 800fd78:	2300      	movne	r3, #0
 800fd7a:	b2db      	uxtb	r3, r3
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	79fb      	ldrb	r3, [r7, #7]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d0a0      	beq.n	800fcc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd8e:	b480      	push	{r7}
 800fd90:	b095      	sub	sp, #84	@ 0x54
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd9e:	e853 3f00 	ldrex	r3, [r3]
 800fda2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fda4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fda6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fdaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdb4:	643b      	str	r3, [r7, #64]	@ 0x40
 800fdb6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fdba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fdbc:	e841 2300 	strex	r3, r2, [r1]
 800fdc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d1e6      	bne.n	800fd96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3308      	adds	r3, #8
 800fdce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd0:	6a3b      	ldr	r3, [r7, #32]
 800fdd2:	e853 3f00 	ldrex	r3, [r3]
 800fdd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fdde:	f023 0301 	bic.w	r3, r3, #1
 800fde2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	3308      	adds	r3, #8
 800fdea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fdee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fdf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdf4:	e841 2300 	strex	r3, r2, [r1]
 800fdf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d1e3      	bne.n	800fdc8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d118      	bne.n	800fe3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	e853 3f00 	ldrex	r3, [r3]
 800fe14:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	f023 0310 	bic.w	r3, r3, #16
 800fe1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe26:	61bb      	str	r3, [r7, #24]
 800fe28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe2a:	6979      	ldr	r1, [r7, #20]
 800fe2c:	69ba      	ldr	r2, [r7, #24]
 800fe2e:	e841 2300 	strex	r3, r2, [r1]
 800fe32:	613b      	str	r3, [r7, #16]
   return(result);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d1e6      	bne.n	800fe08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2220      	movs	r2, #32
 800fe3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	2200      	movs	r2, #0
 800fe46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fe4e:	bf00      	nop
 800fe50:	3754      	adds	r7, #84	@ 0x54
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b083      	sub	sp, #12
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fe62:	bf00      	nop
 800fe64:	370c      	adds	r7, #12
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr

0800fe6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fe6e:	b480      	push	{r7}
 800fe70:	b083      	sub	sp, #12
 800fe72:	af00      	add	r7, sp, #0
 800fe74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fe76:	bf00      	nop
 800fe78:	370c      	adds	r7, #12
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr

0800fe82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fe82:	b480      	push	{r7}
 800fe84:	b083      	sub	sp, #12
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fe8a:	bf00      	nop
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr

0800fe96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fe96:	b480      	push	{r7}
 800fe98:	b085      	sub	sp, #20
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d101      	bne.n	800feac <HAL_UARTEx_DisableFifoMode+0x16>
 800fea8:	2302      	movs	r3, #2
 800feaa:	e027      	b.n	800fefc <HAL_UARTEx_DisableFifoMode+0x66>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2201      	movs	r2, #1
 800feb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2224      	movs	r2, #36	@ 0x24
 800feb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	f022 0201 	bic.w	r2, r2, #1
 800fed2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800feda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68fa      	ldr	r2, [r7, #12]
 800fee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	2220      	movs	r2, #32
 800feee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2200      	movs	r2, #0
 800fef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3714      	adds	r7, #20
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d101      	bne.n	800ff20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ff1c:	2302      	movs	r3, #2
 800ff1e:	e02d      	b.n	800ff7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2201      	movs	r2, #1
 800ff24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	2224      	movs	r2, #36	@ 0x24
 800ff2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	681a      	ldr	r2, [r3, #0]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f022 0201 	bic.w	r2, r2, #1
 800ff46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	430a      	orrs	r2, r1
 800ff5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f84f 	bl	8010000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2220      	movs	r2, #32
 800ff6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ff7a:	2300      	movs	r3, #0
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3710      	adds	r7, #16
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d101      	bne.n	800ff9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ff98:	2302      	movs	r3, #2
 800ff9a:	e02d      	b.n	800fff8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	2224      	movs	r2, #36	@ 0x24
 800ffa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	f022 0201 	bic.w	r2, r2, #1
 800ffc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	689b      	ldr	r3, [r3, #8]
 800ffca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	430a      	orrs	r2, r1
 800ffd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 f811 	bl	8010000 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2220      	movs	r2, #32
 800ffea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3710      	adds	r7, #16
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801000c:	2b00      	cmp	r3, #0
 801000e:	d108      	bne.n	8010022 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2201      	movs	r2, #1
 8010014:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2201      	movs	r2, #1
 801001c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010020:	e031      	b.n	8010086 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010022:	2308      	movs	r3, #8
 8010024:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010026:	2308      	movs	r3, #8
 8010028:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	689b      	ldr	r3, [r3, #8]
 8010030:	0e5b      	lsrs	r3, r3, #25
 8010032:	b2db      	uxtb	r3, r3
 8010034:	f003 0307 	and.w	r3, r3, #7
 8010038:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	689b      	ldr	r3, [r3, #8]
 8010040:	0f5b      	lsrs	r3, r3, #29
 8010042:	b2db      	uxtb	r3, r3
 8010044:	f003 0307 	and.w	r3, r3, #7
 8010048:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801004a:	7bbb      	ldrb	r3, [r7, #14]
 801004c:	7b3a      	ldrb	r2, [r7, #12]
 801004e:	4911      	ldr	r1, [pc, #68]	@ (8010094 <UARTEx_SetNbDataToProcess+0x94>)
 8010050:	5c8a      	ldrb	r2, [r1, r2]
 8010052:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010056:	7b3a      	ldrb	r2, [r7, #12]
 8010058:	490f      	ldr	r1, [pc, #60]	@ (8010098 <UARTEx_SetNbDataToProcess+0x98>)
 801005a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801005c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010060:	b29a      	uxth	r2, r3
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010068:	7bfb      	ldrb	r3, [r7, #15]
 801006a:	7b7a      	ldrb	r2, [r7, #13]
 801006c:	4909      	ldr	r1, [pc, #36]	@ (8010094 <UARTEx_SetNbDataToProcess+0x94>)
 801006e:	5c8a      	ldrb	r2, [r1, r2]
 8010070:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010074:	7b7a      	ldrb	r2, [r7, #13]
 8010076:	4908      	ldr	r1, [pc, #32]	@ (8010098 <UARTEx_SetNbDataToProcess+0x98>)
 8010078:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801007a:	fb93 f3f2 	sdiv	r3, r3, r2
 801007e:	b29a      	uxth	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010086:	bf00      	nop
 8010088:	3714      	adds	r7, #20
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr
 8010092:	bf00      	nop
 8010094:	0801d56c 	.word	0x0801d56c
 8010098:	0801d574 	.word	0x0801d574

0801009c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801009c:	b480      	push	{r7}
 801009e:	b085      	sub	sp, #20
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2200      	movs	r2, #0
 80100a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80100ac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80100b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80100bc:	2300      	movs	r3, #0
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c8:	4770      	bx	lr

080100ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80100ca:	b480      	push	{r7}
 80100cc:	b085      	sub	sp, #20
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80100d2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80100d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80100de:	b29a      	uxth	r2, r3
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	43db      	mvns	r3, r3
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	4013      	ands	r3, r2
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3714      	adds	r7, #20
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	1d3b      	adds	r3, r7, #4
 801010a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2201      	movs	r2, #1
 8010112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	2200      	movs	r2, #0
 801011a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2200      	movs	r2, #0
 801012a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 801012e:	2300      	movs	r3, #0
}
 8010130:	4618      	mov	r0, r3
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801013c:	b480      	push	{r7}
 801013e:	b0a7      	sub	sp, #156	@ 0x9c
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8010146:	2300      	movs	r3, #0
 8010148:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801014c:	687a      	ldr	r2, [r7, #4]
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	009b      	lsls	r3, r3, #2
 8010154:	4413      	add	r3, r2
 8010156:	881b      	ldrh	r3, [r3, #0]
 8010158:	b29b      	uxth	r3, r3
 801015a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 801015e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010162:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	78db      	ldrb	r3, [r3, #3]
 801016a:	2b03      	cmp	r3, #3
 801016c:	d81f      	bhi.n	80101ae <USB_ActivateEndpoint+0x72>
 801016e:	a201      	add	r2, pc, #4	@ (adr r2, 8010174 <USB_ActivateEndpoint+0x38>)
 8010170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010174:	08010185 	.word	0x08010185
 8010178:	080101a1 	.word	0x080101a1
 801017c:	080101b7 	.word	0x080101b7
 8010180:	08010193 	.word	0x08010193
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8010184:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801018c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8010190:	e012      	b.n	80101b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8010192:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8010196:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 801019a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801019e:	e00b      	b.n	80101b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80101a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80101a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80101a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80101ac:	e004      	b.n	80101b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80101ae:	2301      	movs	r3, #1
 80101b0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80101b4:	e000      	b.n	80101b8 <USB_ActivateEndpoint+0x7c>
      break;
 80101b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	009b      	lsls	r3, r3, #2
 80101c0:	441a      	add	r2, r3
 80101c2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80101c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80101ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80101ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80101d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	683b      	ldr	r3, [r7, #0]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	009b      	lsls	r3, r3, #2
 80101e2:	4413      	add	r3, r2
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	b21b      	sxth	r3, r3
 80101ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80101ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80101f2:	b21a      	sxth	r2, r3
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	b21b      	sxth	r3, r3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	b21b      	sxth	r3, r3
 80101fe:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	441a      	add	r2, r3
 801020c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801021c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010220:	b29b      	uxth	r3, r3
 8010222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	7b1b      	ldrb	r3, [r3, #12]
 8010228:	2b00      	cmp	r3, #0
 801022a:	f040 8180 	bne.w	801052e <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	785b      	ldrb	r3, [r3, #1]
 8010232:	2b00      	cmp	r3, #0
 8010234:	f000 8084 	beq.w	8010340 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	61bb      	str	r3, [r7, #24]
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010242:	b29b      	uxth	r3, r3
 8010244:	461a      	mov	r2, r3
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	4413      	add	r3, r2
 801024a:	61bb      	str	r3, [r7, #24]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	00da      	lsls	r2, r3, #3
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	4413      	add	r3, r2
 8010256:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801025a:	617b      	str	r3, [r7, #20]
 801025c:	683b      	ldr	r3, [r7, #0]
 801025e:	88db      	ldrh	r3, [r3, #6]
 8010260:	085b      	lsrs	r3, r3, #1
 8010262:	b29b      	uxth	r3, r3
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	b29a      	uxth	r2, r3
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	827b      	strh	r3, [r7, #18]
 801027a:	8a7b      	ldrh	r3, [r7, #18]
 801027c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010280:	2b00      	cmp	r3, #0
 8010282:	d01b      	beq.n	80102bc <USB_ActivateEndpoint+0x180>
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	781b      	ldrb	r3, [r3, #0]
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	4413      	add	r3, r2
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	b29b      	uxth	r3, r3
 8010292:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801029a:	823b      	strh	r3, [r7, #16]
 801029c:	687a      	ldr	r2, [r7, #4]
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	009b      	lsls	r3, r3, #2
 80102a4:	441a      	add	r2, r3
 80102a6:	8a3b      	ldrh	r3, [r7, #16]
 80102a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80102ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80102b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80102b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	78db      	ldrb	r3, [r3, #3]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d020      	beq.n	8010306 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4413      	add	r3, r2
 80102ce:	881b      	ldrh	r3, [r3, #0]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80102d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102da:	81bb      	strh	r3, [r7, #12]
 80102dc:	89bb      	ldrh	r3, [r7, #12]
 80102de:	f083 0320 	eor.w	r3, r3, #32
 80102e2:	81bb      	strh	r3, [r7, #12]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	009b      	lsls	r3, r3, #2
 80102ec:	441a      	add	r2, r3
 80102ee:	89bb      	ldrh	r3, [r7, #12]
 80102f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80102f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80102f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80102fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010300:	b29b      	uxth	r3, r3
 8010302:	8013      	strh	r3, [r2, #0]
 8010304:	e3f9      	b.n	8010afa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	b29b      	uxth	r3, r3
 8010314:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010318:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801031c:	81fb      	strh	r3, [r7, #14]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	441a      	add	r2, r3
 8010328:	89fb      	ldrh	r3, [r7, #14]
 801032a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801032e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801033a:	b29b      	uxth	r3, r3
 801033c:	8013      	strh	r3, [r2, #0]
 801033e:	e3dc      	b.n	8010afa <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	633b      	str	r3, [r7, #48]	@ 0x30
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801034a:	b29b      	uxth	r3, r3
 801034c:	461a      	mov	r2, r3
 801034e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010350:	4413      	add	r3, r2
 8010352:	633b      	str	r3, [r7, #48]	@ 0x30
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	00da      	lsls	r2, r3, #3
 801035a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801035c:	4413      	add	r3, r2
 801035e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8010362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	88db      	ldrh	r3, [r3, #6]
 8010368:	085b      	lsrs	r3, r3, #1
 801036a:	b29b      	uxth	r3, r3
 801036c:	005b      	lsls	r3, r3, #1
 801036e:	b29a      	uxth	r2, r3
 8010370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010372:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801037e:	b29b      	uxth	r3, r3
 8010380:	461a      	mov	r2, r3
 8010382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010384:	4413      	add	r3, r2
 8010386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	00da      	lsls	r2, r3, #3
 801038e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010390:	4413      	add	r3, r2
 8010392:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010396:	627b      	str	r3, [r7, #36]	@ 0x24
 8010398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	b29b      	uxth	r3, r3
 801039e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80103a2:	b29a      	uxth	r2, r3
 80103a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a6:	801a      	strh	r2, [r3, #0]
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	691b      	ldr	r3, [r3, #16]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d10a      	bne.n	80103c6 <USB_ActivateEndpoint+0x28a>
 80103b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80103ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80103be:	b29a      	uxth	r2, r3
 80103c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c2:	801a      	strh	r2, [r3, #0]
 80103c4:	e041      	b.n	801044a <USB_ActivateEndpoint+0x30e>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	691b      	ldr	r3, [r3, #16]
 80103ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80103cc:	d81c      	bhi.n	8010408 <USB_ActivateEndpoint+0x2cc>
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	085b      	lsrs	r3, r3, #1
 80103d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	691b      	ldr	r3, [r3, #16]
 80103dc:	f003 0301 	and.w	r3, r3, #1
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d004      	beq.n	80103ee <USB_ActivateEndpoint+0x2b2>
 80103e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80103e8:	3301      	adds	r3, #1
 80103ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80103ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f0:	881b      	ldrh	r3, [r3, #0]
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80103f8:	b29b      	uxth	r3, r3
 80103fa:	029b      	lsls	r3, r3, #10
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	4313      	orrs	r3, r2
 8010400:	b29a      	uxth	r2, r3
 8010402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010404:	801a      	strh	r2, [r3, #0]
 8010406:	e020      	b.n	801044a <USB_ActivateEndpoint+0x30e>
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	095b      	lsrs	r3, r3, #5
 801040e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	691b      	ldr	r3, [r3, #16]
 8010416:	f003 031f 	and.w	r3, r3, #31
 801041a:	2b00      	cmp	r3, #0
 801041c:	d104      	bne.n	8010428 <USB_ActivateEndpoint+0x2ec>
 801041e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010422:	3b01      	subs	r3, #1
 8010424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	b29a      	uxth	r2, r3
 801042e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010432:	b29b      	uxth	r3, r3
 8010434:	029b      	lsls	r3, r3, #10
 8010436:	b29b      	uxth	r3, r3
 8010438:	4313      	orrs	r3, r2
 801043a:	b29b      	uxth	r3, r3
 801043c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010444:	b29a      	uxth	r2, r3
 8010446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010448:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	4413      	add	r3, r2
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010458:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801045a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801045e:	2b00      	cmp	r3, #0
 8010460:	d01b      	beq.n	801049a <USB_ActivateEndpoint+0x35e>
 8010462:	687a      	ldr	r2, [r7, #4]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	009b      	lsls	r3, r3, #2
 801046a:	4413      	add	r3, r2
 801046c:	881b      	ldrh	r3, [r3, #0]
 801046e:	b29b      	uxth	r3, r3
 8010470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010478:	843b      	strh	r3, [r7, #32]
 801047a:	687a      	ldr	r2, [r7, #4]
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	441a      	add	r2, r3
 8010484:	8c3b      	ldrh	r3, [r7, #32]
 8010486:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801048a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801048e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010492:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010496:	b29b      	uxth	r3, r3
 8010498:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d124      	bne.n	80104ec <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80104a2:	687a      	ldr	r2, [r7, #4]
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	009b      	lsls	r3, r3, #2
 80104aa:	4413      	add	r3, r2
 80104ac:	881b      	ldrh	r3, [r3, #0]
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104b8:	83bb      	strh	r3, [r7, #28]
 80104ba:	8bbb      	ldrh	r3, [r7, #28]
 80104bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80104c0:	83bb      	strh	r3, [r7, #28]
 80104c2:	8bbb      	ldrh	r3, [r7, #28]
 80104c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80104c8:	83bb      	strh	r3, [r7, #28]
 80104ca:	687a      	ldr	r2, [r7, #4]
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	009b      	lsls	r3, r3, #2
 80104d2:	441a      	add	r2, r3
 80104d4:	8bbb      	ldrh	r3, [r7, #28]
 80104d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	8013      	strh	r3, [r2, #0]
 80104ea:	e306      	b.n	8010afa <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	4413      	add	r3, r2
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80104fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010502:	83fb      	strh	r3, [r7, #30]
 8010504:	8bfb      	ldrh	r3, [r7, #30]
 8010506:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801050a:	83fb      	strh	r3, [r7, #30]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	441a      	add	r2, r3
 8010516:	8bfb      	ldrh	r3, [r7, #30]
 8010518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801051c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010528:	b29b      	uxth	r3, r3
 801052a:	8013      	strh	r3, [r2, #0]
 801052c:	e2e5      	b.n	8010afa <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	78db      	ldrb	r3, [r3, #3]
 8010532:	2b02      	cmp	r3, #2
 8010534:	d11e      	bne.n	8010574 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	009b      	lsls	r3, r3, #2
 801053e:	4413      	add	r3, r2
 8010540:	881b      	ldrh	r3, [r3, #0]
 8010542:	b29b      	uxth	r3, r3
 8010544:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801054c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	441a      	add	r2, r3
 801055a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801055e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010562:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010566:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801056a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801056e:	b29b      	uxth	r3, r3
 8010570:	8013      	strh	r3, [r2, #0]
 8010572:	e01d      	b.n	80105b0 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	4413      	add	r3, r2
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	b29b      	uxth	r3, r3
 8010582:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801058a:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801058e:	687a      	ldr	r2, [r7, #4]
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	781b      	ldrb	r3, [r3, #0]
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	441a      	add	r2, r3
 8010598:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 801059c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80105a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80105a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80105a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	461a      	mov	r2, r3
 80105be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105c0:	4413      	add	r3, r2
 80105c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	781b      	ldrb	r3, [r3, #0]
 80105c8:	00da      	lsls	r2, r3, #3
 80105ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80105d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	891b      	ldrh	r3, [r3, #8]
 80105d8:	085b      	lsrs	r3, r3, #1
 80105da:	b29b      	uxth	r3, r3
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	b29a      	uxth	r2, r3
 80105e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80105e2:	801a      	strh	r2, [r3, #0]
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	461a      	mov	r2, r3
 80105f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80105f4:	4413      	add	r3, r2
 80105f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	00da      	lsls	r2, r3, #3
 80105fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010600:	4413      	add	r3, r2
 8010602:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8010606:	673b      	str	r3, [r7, #112]	@ 0x70
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	895b      	ldrh	r3, [r3, #10]
 801060c:	085b      	lsrs	r3, r3, #1
 801060e:	b29b      	uxth	r3, r3
 8010610:	005b      	lsls	r3, r3, #1
 8010612:	b29a      	uxth	r2, r3
 8010614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010616:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	785b      	ldrb	r3, [r3, #1]
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 81af 	bne.w	8010980 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4413      	add	r3, r2
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8010632:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8010636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801063a:	2b00      	cmp	r3, #0
 801063c:	d01d      	beq.n	801067a <USB_ActivateEndpoint+0x53e>
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	4413      	add	r3, r2
 8010648:	881b      	ldrh	r3, [r3, #0]
 801064a:	b29b      	uxth	r3, r3
 801064c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010654:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8010658:	687a      	ldr	r2, [r7, #4]
 801065a:	683b      	ldr	r3, [r7, #0]
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	009b      	lsls	r3, r3, #2
 8010660:	441a      	add	r2, r3
 8010662:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8010666:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801066a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010676:	b29b      	uxth	r3, r3
 8010678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	009b      	lsls	r3, r3, #2
 8010682:	4413      	add	r3, r2
 8010684:	881b      	ldrh	r3, [r3, #0]
 8010686:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 801068a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801068e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010692:	2b00      	cmp	r3, #0
 8010694:	d01d      	beq.n	80106d2 <USB_ActivateEndpoint+0x596>
 8010696:	687a      	ldr	r2, [r7, #4]
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	4413      	add	r3, r2
 80106a0:	881b      	ldrh	r3, [r3, #0]
 80106a2:	b29b      	uxth	r3, r3
 80106a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80106a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106ac:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80106b0:	687a      	ldr	r2, [r7, #4]
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	441a      	add	r2, r3
 80106ba:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80106be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80106ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	785b      	ldrb	r3, [r3, #1]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d16b      	bne.n	80107b2 <USB_ActivateEndpoint+0x676>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	461a      	mov	r2, r3
 80106e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ea:	4413      	add	r3, r2
 80106ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	00da      	lsls	r2, r3, #3
 80106f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106f6:	4413      	add	r3, r2
 80106f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80106fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010700:	881b      	ldrh	r3, [r3, #0]
 8010702:	b29b      	uxth	r3, r3
 8010704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010708:	b29a      	uxth	r2, r3
 801070a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801070c:	801a      	strh	r2, [r3, #0]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d10a      	bne.n	801072c <USB_ActivateEndpoint+0x5f0>
 8010716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010718:	881b      	ldrh	r3, [r3, #0]
 801071a:	b29b      	uxth	r3, r3
 801071c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010724:	b29a      	uxth	r2, r3
 8010726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010728:	801a      	strh	r2, [r3, #0]
 801072a:	e05d      	b.n	80107e8 <USB_ActivateEndpoint+0x6ac>
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	691b      	ldr	r3, [r3, #16]
 8010730:	2b3e      	cmp	r3, #62	@ 0x3e
 8010732:	d81c      	bhi.n	801076e <USB_ActivateEndpoint+0x632>
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	085b      	lsrs	r3, r3, #1
 801073a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	f003 0301 	and.w	r3, r3, #1
 8010746:	2b00      	cmp	r3, #0
 8010748:	d004      	beq.n	8010754 <USB_ActivateEndpoint+0x618>
 801074a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801074e:	3301      	adds	r3, #1
 8010750:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010756:	881b      	ldrh	r3, [r3, #0]
 8010758:	b29a      	uxth	r2, r3
 801075a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801075e:	b29b      	uxth	r3, r3
 8010760:	029b      	lsls	r3, r3, #10
 8010762:	b29b      	uxth	r3, r3
 8010764:	4313      	orrs	r3, r2
 8010766:	b29a      	uxth	r2, r3
 8010768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801076a:	801a      	strh	r2, [r3, #0]
 801076c:	e03c      	b.n	80107e8 <USB_ActivateEndpoint+0x6ac>
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	095b      	lsrs	r3, r3, #5
 8010774:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	f003 031f 	and.w	r3, r3, #31
 8010780:	2b00      	cmp	r3, #0
 8010782:	d104      	bne.n	801078e <USB_ActivateEndpoint+0x652>
 8010784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010788:	3b01      	subs	r3, #1
 801078a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801078e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010790:	881b      	ldrh	r3, [r3, #0]
 8010792:	b29a      	uxth	r2, r3
 8010794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010798:	b29b      	uxth	r3, r3
 801079a:	029b      	lsls	r3, r3, #10
 801079c:	b29b      	uxth	r3, r3
 801079e:	4313      	orrs	r3, r2
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80107a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80107ae:	801a      	strh	r2, [r3, #0]
 80107b0:	e01a      	b.n	80107e8 <USB_ActivateEndpoint+0x6ac>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	785b      	ldrb	r3, [r3, #1]
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d116      	bne.n	80107e8 <USB_ActivateEndpoint+0x6ac>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	461a      	mov	r2, r3
 80107c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107ca:	4413      	add	r3, r2
 80107cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	781b      	ldrb	r3, [r3, #0]
 80107d2:	00da      	lsls	r2, r3, #3
 80107d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107d6:	4413      	add	r3, r2
 80107d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80107dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	b29a      	uxth	r2, r3
 80107e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107e6:	801a      	strh	r2, [r3, #0]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	785b      	ldrb	r3, [r3, #1]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d16b      	bne.n	80108cc <USB_ActivateEndpoint+0x790>
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80107fe:	b29b      	uxth	r3, r3
 8010800:	461a      	mov	r2, r3
 8010802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010804:	4413      	add	r3, r2
 8010806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	781b      	ldrb	r3, [r3, #0]
 801080c:	00da      	lsls	r2, r3, #3
 801080e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010810:	4413      	add	r3, r2
 8010812:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010816:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801081a:	881b      	ldrh	r3, [r3, #0]
 801081c:	b29b      	uxth	r3, r3
 801081e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010822:	b29a      	uxth	r2, r3
 8010824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010826:	801a      	strh	r2, [r3, #0]
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d10a      	bne.n	8010846 <USB_ActivateEndpoint+0x70a>
 8010830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010832:	881b      	ldrh	r3, [r3, #0]
 8010834:	b29b      	uxth	r3, r3
 8010836:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801083a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801083e:	b29a      	uxth	r2, r3
 8010840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010842:	801a      	strh	r2, [r3, #0]
 8010844:	e05b      	b.n	80108fe <USB_ActivateEndpoint+0x7c2>
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	691b      	ldr	r3, [r3, #16]
 801084a:	2b3e      	cmp	r3, #62	@ 0x3e
 801084c:	d81c      	bhi.n	8010888 <USB_ActivateEndpoint+0x74c>
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	085b      	lsrs	r3, r3, #1
 8010854:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	f003 0301 	and.w	r3, r3, #1
 8010860:	2b00      	cmp	r3, #0
 8010862:	d004      	beq.n	801086e <USB_ActivateEndpoint+0x732>
 8010864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010868:	3301      	adds	r3, #1
 801086a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801086e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	b29a      	uxth	r2, r3
 8010874:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010878:	b29b      	uxth	r3, r3
 801087a:	029b      	lsls	r3, r3, #10
 801087c:	b29b      	uxth	r3, r3
 801087e:	4313      	orrs	r3, r2
 8010880:	b29a      	uxth	r2, r3
 8010882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010884:	801a      	strh	r2, [r3, #0]
 8010886:	e03a      	b.n	80108fe <USB_ActivateEndpoint+0x7c2>
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	691b      	ldr	r3, [r3, #16]
 801088c:	095b      	lsrs	r3, r3, #5
 801088e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	691b      	ldr	r3, [r3, #16]
 8010896:	f003 031f 	and.w	r3, r3, #31
 801089a:	2b00      	cmp	r3, #0
 801089c:	d104      	bne.n	80108a8 <USB_ActivateEndpoint+0x76c>
 801089e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80108a2:	3b01      	subs	r3, #1
 80108a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80108a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108aa:	881b      	ldrh	r3, [r3, #0]
 80108ac:	b29a      	uxth	r2, r3
 80108ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	029b      	lsls	r3, r3, #10
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	4313      	orrs	r3, r2
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108c4:	b29a      	uxth	r2, r3
 80108c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108c8:	801a      	strh	r2, [r3, #0]
 80108ca:	e018      	b.n	80108fe <USB_ActivateEndpoint+0x7c2>
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	785b      	ldrb	r3, [r3, #1]
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d114      	bne.n	80108fe <USB_ActivateEndpoint+0x7c2>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80108da:	b29b      	uxth	r3, r3
 80108dc:	461a      	mov	r2, r3
 80108de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108e0:	4413      	add	r3, r2
 80108e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	00da      	lsls	r2, r3, #3
 80108ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108ec:	4413      	add	r3, r2
 80108ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80108f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	b29a      	uxth	r2, r3
 80108fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80108fc:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	009b      	lsls	r3, r3, #2
 8010906:	4413      	add	r3, r2
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	b29b      	uxth	r3, r3
 801090c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010914:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010916:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010918:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801091c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801091e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010920:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010924:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010926:	687a      	ldr	r2, [r7, #4]
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	009b      	lsls	r3, r3, #2
 801092e:	441a      	add	r2, r3
 8010930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801093a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801093e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010942:	b29b      	uxth	r3, r3
 8010944:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	781b      	ldrb	r3, [r3, #0]
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	4413      	add	r3, r2
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	b29b      	uxth	r3, r3
 8010954:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801095c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801095e:	687a      	ldr	r2, [r7, #4]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	009b      	lsls	r3, r3, #2
 8010966:	441a      	add	r2, r3
 8010968:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801096a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801096e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801097a:	b29b      	uxth	r3, r3
 801097c:	8013      	strh	r3, [r2, #0]
 801097e:	e0bc      	b.n	8010afa <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	881b      	ldrh	r3, [r3, #0]
 801098c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010990:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01d      	beq.n	80109d8 <USB_ActivateEndpoint+0x89c>
 801099c:	687a      	ldr	r2, [r7, #4]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4413      	add	r3, r2
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109b2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	441a      	add	r2, r3
 80109c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80109c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80109d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109d4:	b29b      	uxth	r3, r3
 80109d6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4413      	add	r3, r2
 80109e2:	881b      	ldrh	r3, [r3, #0]
 80109e4:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80109e8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80109ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d01d      	beq.n	8010a30 <USB_ActivateEndpoint+0x8f4>
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	4413      	add	r3, r2
 80109fe:	881b      	ldrh	r3, [r3, #0]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a0a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	441a      	add	r2, r3
 8010a18:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010a1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010a2c:	b29b      	uxth	r3, r3
 8010a2e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	78db      	ldrb	r3, [r3, #3]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d024      	beq.n	8010a82 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	4413      	add	r3, r2
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a4e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010a52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010a56:	f083 0320 	eor.w	r3, r3, #32
 8010a5a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	781b      	ldrb	r3, [r3, #0]
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	441a      	add	r2, r3
 8010a68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010a6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	8013      	strh	r3, [r2, #0]
 8010a80:	e01d      	b.n	8010abe <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010a82:	687a      	ldr	r2, [r7, #4]
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	4413      	add	r3, r2
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a98:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	441a      	add	r2, r3
 8010aa6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010aba:	b29b      	uxth	r3, r3
 8010abc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	781b      	ldrb	r3, [r3, #0]
 8010ac4:	009b      	lsls	r3, r3, #2
 8010ac6:	4413      	add	r3, r2
 8010ac8:	881b      	ldrh	r3, [r3, #0]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ad4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	441a      	add	r2, r3
 8010ae2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010af2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010afa:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010afe:	4618      	mov	r0, r3
 8010b00:	379c      	adds	r7, #156	@ 0x9c
 8010b02:	46bd      	mov	sp, r7
 8010b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop

08010b0c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b0ac      	sub	sp, #176	@ 0xb0
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	785b      	ldrb	r3, [r3, #1]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	f040 84ca 	bne.w	80114b4 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8010b20:	683b      	ldr	r3, [r7, #0]
 8010b22:	699a      	ldr	r2, [r3, #24]
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d904      	bls.n	8010b36 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	691b      	ldr	r3, [r3, #16]
 8010b30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010b34:	e003      	b.n	8010b3e <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	699b      	ldr	r3, [r3, #24]
 8010b3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	7b1b      	ldrb	r3, [r3, #12]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d122      	bne.n	8010b8c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	6959      	ldr	r1, [r3, #20]
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	88da      	ldrh	r2, [r3, #6]
 8010b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 fed2 	bl	80118fe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	613b      	str	r3, [r7, #16]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b64:	b29b      	uxth	r3, r3
 8010b66:	461a      	mov	r2, r3
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	4413      	add	r3, r2
 8010b6c:	613b      	str	r3, [r7, #16]
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	781b      	ldrb	r3, [r3, #0]
 8010b72:	00da      	lsls	r2, r3, #3
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	4413      	add	r3, r2
 8010b78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b82:	b29a      	uxth	r2, r3
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	801a      	strh	r2, [r3, #0]
 8010b88:	f000 bc6f 	b.w	801146a <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	78db      	ldrb	r3, [r3, #3]
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	f040 831e 	bne.w	80111d2 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	6a1a      	ldr	r2, [r3, #32]
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	691b      	ldr	r3, [r3, #16]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	f240 82cf 	bls.w	8011142 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	4413      	add	r3, r2
 8010bae:	881b      	ldrh	r3, [r3, #0]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bba:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	441a      	add	r2, r3
 8010bc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8010bcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bd4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	6a1a      	ldr	r2, [r3, #32]
 8010be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010be8:	1ad2      	subs	r2, r2, r3
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	781b      	ldrb	r3, [r3, #0]
 8010bf4:	009b      	lsls	r3, r3, #2
 8010bf6:	4413      	add	r3, r2
 8010bf8:	881b      	ldrh	r3, [r3, #0]
 8010bfa:	b29b      	uxth	r3, r3
 8010bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	f000 814f 	beq.w	8010ea4 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	785b      	ldrb	r3, [r3, #1]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d16b      	bne.n	8010cea <USB_EPStartXfer+0x1de>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	461a      	mov	r2, r3
 8010c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c22:	4413      	add	r3, r2
 8010c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	00da      	lsls	r2, r3, #3
 8010c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c2e:	4413      	add	r3, r2
 8010c30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c38:	881b      	ldrh	r3, [r3, #0]
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c40:	b29a      	uxth	r2, r3
 8010c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c44:	801a      	strh	r2, [r3, #0]
 8010c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10a      	bne.n	8010c64 <USB_EPStartXfer+0x158>
 8010c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c60:	801a      	strh	r2, [r3, #0]
 8010c62:	e05b      	b.n	8010d1c <USB_EPStartXfer+0x210>
 8010c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c68:	2b3e      	cmp	r3, #62	@ 0x3e
 8010c6a:	d81c      	bhi.n	8010ca6 <USB_EPStartXfer+0x19a>
 8010c6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c70:	085b      	lsrs	r3, r3, #1
 8010c72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d004      	beq.n	8010c8c <USB_EPStartXfer+0x180>
 8010c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010c86:	3301      	adds	r3, #1
 8010c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c8e:	881b      	ldrh	r3, [r3, #0]
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	029b      	lsls	r3, r3, #10
 8010c9a:	b29b      	uxth	r3, r3
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	b29a      	uxth	r2, r3
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ca2:	801a      	strh	r2, [r3, #0]
 8010ca4:	e03a      	b.n	8010d1c <USB_EPStartXfer+0x210>
 8010ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010caa:	095b      	lsrs	r3, r3, #5
 8010cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010cb4:	f003 031f 	and.w	r3, r3, #31
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d104      	bne.n	8010cc6 <USB_EPStartXfer+0x1ba>
 8010cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010cc0:	3b01      	subs	r3, #1
 8010cc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	029b      	lsls	r3, r3, #10
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	4313      	orrs	r3, r2
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce6:	801a      	strh	r2, [r3, #0]
 8010ce8:	e018      	b.n	8010d1c <USB_EPStartXfer+0x210>
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	785b      	ldrb	r3, [r3, #1]
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	d114      	bne.n	8010d1c <USB_EPStartXfer+0x210>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	461a      	mov	r2, r3
 8010cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfe:	4413      	add	r3, r2
 8010d00:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	00da      	lsls	r2, r3, #3
 8010d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d0a:	4413      	add	r3, r2
 8010d0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d1a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010d1c:	683b      	ldr	r3, [r7, #0]
 8010d1e:	895b      	ldrh	r3, [r3, #10]
 8010d20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	6959      	ldr	r1, [r3, #20]
 8010d28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d2c:	b29b      	uxth	r3, r3
 8010d2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 fde3 	bl	80118fe <USB_WritePMA>
            ep->xfer_buff += len;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	695a      	ldr	r2, [r3, #20]
 8010d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d40:	441a      	add	r2, r3
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	6a1a      	ldr	r2, [r3, #32]
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	691b      	ldr	r3, [r3, #16]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d907      	bls.n	8010d62 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	6a1a      	ldr	r2, [r3, #32]
 8010d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010d5a:	1ad2      	subs	r2, r2, r3
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	621a      	str	r2, [r3, #32]
 8010d60:	e006      	b.n	8010d70 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	6a1b      	ldr	r3, [r3, #32]
 8010d66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	785b      	ldrb	r3, [r3, #1]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d16b      	bne.n	8010e50 <USB_EPStartXfer+0x344>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	61bb      	str	r3, [r7, #24]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	461a      	mov	r2, r3
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	4413      	add	r3, r2
 8010d8a:	61bb      	str	r3, [r7, #24]
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	00da      	lsls	r2, r3, #3
 8010d92:	69bb      	ldr	r3, [r7, #24]
 8010d94:	4413      	add	r3, r2
 8010d96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010d9a:	617b      	str	r3, [r7, #20]
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	697b      	ldr	r3, [r7, #20]
 8010daa:	801a      	strh	r2, [r3, #0]
 8010dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d10a      	bne.n	8010dca <USB_EPStartXfer+0x2be>
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	881b      	ldrh	r3, [r3, #0]
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010dc2:	b29a      	uxth	r2, r3
 8010dc4:	697b      	ldr	r3, [r7, #20]
 8010dc6:	801a      	strh	r2, [r3, #0]
 8010dc8:	e05d      	b.n	8010e86 <USB_EPStartXfer+0x37a>
 8010dca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010dce:	2b3e      	cmp	r3, #62	@ 0x3e
 8010dd0:	d81c      	bhi.n	8010e0c <USB_EPStartXfer+0x300>
 8010dd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010dd6:	085b      	lsrs	r3, r3, #1
 8010dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010ddc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <USB_EPStartXfer+0x2e6>
 8010de8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010dec:	3301      	adds	r3, #1
 8010dee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	881b      	ldrh	r3, [r3, #0]
 8010df6:	b29a      	uxth	r2, r3
 8010df8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	029b      	lsls	r3, r3, #10
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	4313      	orrs	r3, r2
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	801a      	strh	r2, [r3, #0]
 8010e0a:	e03c      	b.n	8010e86 <USB_EPStartXfer+0x37a>
 8010e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e10:	095b      	lsrs	r3, r3, #5
 8010e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e1a:	f003 031f 	and.w	r3, r3, #31
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d104      	bne.n	8010e2c <USB_EPStartXfer+0x320>
 8010e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010e26:	3b01      	subs	r3, #1
 8010e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8010e2c:	697b      	ldr	r3, [r7, #20]
 8010e2e:	881b      	ldrh	r3, [r3, #0]
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	029b      	lsls	r3, r3, #10
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	697b      	ldr	r3, [r7, #20]
 8010e4c:	801a      	strh	r2, [r3, #0]
 8010e4e:	e01a      	b.n	8010e86 <USB_EPStartXfer+0x37a>
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	785b      	ldrb	r3, [r3, #1]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d116      	bne.n	8010e86 <USB_EPStartXfer+0x37a>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	623b      	str	r3, [r7, #32]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	461a      	mov	r2, r3
 8010e66:	6a3b      	ldr	r3, [r7, #32]
 8010e68:	4413      	add	r3, r2
 8010e6a:	623b      	str	r3, [r7, #32]
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	00da      	lsls	r2, r3, #3
 8010e72:	6a3b      	ldr	r3, [r7, #32]
 8010e74:	4413      	add	r3, r2
 8010e76:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010e7a:	61fb      	str	r3, [r7, #28]
 8010e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	891b      	ldrh	r3, [r3, #8]
 8010e8a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	6959      	ldr	r1, [r3, #20]
 8010e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	f000 fd2e 	bl	80118fe <USB_WritePMA>
 8010ea2:	e2e2      	b.n	801146a <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	785b      	ldrb	r3, [r3, #1]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d16b      	bne.n	8010f84 <USB_EPStartXfer+0x478>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	461a      	mov	r2, r3
 8010eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ebc:	4413      	add	r3, r2
 8010ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	00da      	lsls	r2, r3, #3
 8010ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ec8:	4413      	add	r3, r2
 8010eca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ed2:	881b      	ldrh	r3, [r3, #0]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ede:	801a      	strh	r2, [r3, #0]
 8010ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10a      	bne.n	8010efe <USB_EPStartXfer+0x3f2>
 8010ee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ef2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010efa:	801a      	strh	r2, [r3, #0]
 8010efc:	e05d      	b.n	8010fba <USB_EPStartXfer+0x4ae>
 8010efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f02:	2b3e      	cmp	r3, #62	@ 0x3e
 8010f04:	d81c      	bhi.n	8010f40 <USB_EPStartXfer+0x434>
 8010f06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f0a:	085b      	lsrs	r3, r3, #1
 8010f0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <USB_EPStartXfer+0x41a>
 8010f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f20:	3301      	adds	r3, #1
 8010f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f28:	881b      	ldrh	r3, [r3, #0]
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	029b      	lsls	r3, r3, #10
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	4313      	orrs	r3, r2
 8010f38:	b29a      	uxth	r2, r3
 8010f3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f3c:	801a      	strh	r2, [r3, #0]
 8010f3e:	e03c      	b.n	8010fba <USB_EPStartXfer+0x4ae>
 8010f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f44:	095b      	lsrs	r3, r3, #5
 8010f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f4e:	f003 031f 	and.w	r3, r3, #31
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d104      	bne.n	8010f60 <USB_EPStartXfer+0x454>
 8010f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f62:	881b      	ldrh	r3, [r3, #0]
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	029b      	lsls	r3, r3, #10
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	4313      	orrs	r3, r2
 8010f72:	b29b      	uxth	r3, r3
 8010f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f80:	801a      	strh	r2, [r3, #0]
 8010f82:	e01a      	b.n	8010fba <USB_EPStartXfer+0x4ae>
 8010f84:	683b      	ldr	r3, [r7, #0]
 8010f86:	785b      	ldrb	r3, [r3, #1]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	d116      	bne.n	8010fba <USB_EPStartXfer+0x4ae>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010f96:	b29b      	uxth	r3, r3
 8010f98:	461a      	mov	r2, r3
 8010f9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f9c:	4413      	add	r3, r2
 8010f9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	00da      	lsls	r2, r3, #3
 8010fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fa8:	4413      	add	r3, r2
 8010faa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010fb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	891b      	ldrh	r3, [r3, #8]
 8010fbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010fc2:	683b      	ldr	r3, [r7, #0]
 8010fc4:	6959      	ldr	r1, [r3, #20]
 8010fc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f000 fc94 	bl	80118fe <USB_WritePMA>
            ep->xfer_buff += len;
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	695a      	ldr	r2, [r3, #20]
 8010fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010fde:	441a      	add	r2, r3
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	6a1a      	ldr	r2, [r3, #32]
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	691b      	ldr	r3, [r3, #16]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d907      	bls.n	8011000 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	6a1a      	ldr	r2, [r3, #32]
 8010ff4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010ff8:	1ad2      	subs	r2, r2, r3
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	621a      	str	r2, [r3, #32]
 8010ffe:	e006      	b.n	801100e <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	6a1b      	ldr	r3, [r3, #32]
 8011004:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	2200      	movs	r2, #0
 801100c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	643b      	str	r3, [r7, #64]	@ 0x40
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d16b      	bne.n	80110f2 <USB_EPStartXfer+0x5e6>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011024:	b29b      	uxth	r3, r3
 8011026:	461a      	mov	r2, r3
 8011028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102a:	4413      	add	r3, r2
 801102c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	00da      	lsls	r2, r3, #3
 8011034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011036:	4413      	add	r3, r2
 8011038:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801103c:	637b      	str	r3, [r7, #52]	@ 0x34
 801103e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	b29b      	uxth	r3, r3
 8011044:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011048:	b29a      	uxth	r2, r3
 801104a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801104c:	801a      	strh	r2, [r3, #0]
 801104e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10a      	bne.n	801106c <USB_EPStartXfer+0x560>
 8011056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011058:	881b      	ldrh	r3, [r3, #0]
 801105a:	b29b      	uxth	r3, r3
 801105c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011064:	b29a      	uxth	r2, r3
 8011066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011068:	801a      	strh	r2, [r3, #0]
 801106a:	e05b      	b.n	8011124 <USB_EPStartXfer+0x618>
 801106c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011070:	2b3e      	cmp	r3, #62	@ 0x3e
 8011072:	d81c      	bhi.n	80110ae <USB_EPStartXfer+0x5a2>
 8011074:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011078:	085b      	lsrs	r3, r3, #1
 801107a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801107e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011082:	f003 0301 	and.w	r3, r3, #1
 8011086:	2b00      	cmp	r3, #0
 8011088:	d004      	beq.n	8011094 <USB_EPStartXfer+0x588>
 801108a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801108e:	3301      	adds	r3, #1
 8011090:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011096:	881b      	ldrh	r3, [r3, #0]
 8011098:	b29a      	uxth	r2, r3
 801109a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801109e:	b29b      	uxth	r3, r3
 80110a0:	029b      	lsls	r3, r3, #10
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4313      	orrs	r3, r2
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110aa:	801a      	strh	r2, [r3, #0]
 80110ac:	e03a      	b.n	8011124 <USB_EPStartXfer+0x618>
 80110ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110b2:	095b      	lsrs	r3, r3, #5
 80110b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80110b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80110bc:	f003 031f 	and.w	r3, r3, #31
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d104      	bne.n	80110ce <USB_EPStartXfer+0x5c2>
 80110c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110c8:	3b01      	subs	r3, #1
 80110ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80110ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80110d8:	b29b      	uxth	r3, r3
 80110da:	029b      	lsls	r3, r3, #10
 80110dc:	b29b      	uxth	r3, r3
 80110de:	4313      	orrs	r3, r2
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110ea:	b29a      	uxth	r2, r3
 80110ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ee:	801a      	strh	r2, [r3, #0]
 80110f0:	e018      	b.n	8011124 <USB_EPStartXfer+0x618>
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	785b      	ldrb	r3, [r3, #1]
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d114      	bne.n	8011124 <USB_EPStartXfer+0x618>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011100:	b29b      	uxth	r3, r3
 8011102:	461a      	mov	r2, r3
 8011104:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011106:	4413      	add	r3, r2
 8011108:	643b      	str	r3, [r7, #64]	@ 0x40
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	00da      	lsls	r2, r3, #3
 8011110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011112:	4413      	add	r3, r2
 8011114:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801111a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801111e:	b29a      	uxth	r2, r3
 8011120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011122:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	895b      	ldrh	r3, [r3, #10]
 8011128:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	6959      	ldr	r1, [r3, #20]
 8011130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011134:	b29b      	uxth	r3, r3
 8011136:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fbdf 	bl	80118fe <USB_WritePMA>
 8011140:	e193      	b.n	801146a <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	6a1b      	ldr	r3, [r3, #32]
 8011146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	781b      	ldrb	r3, [r3, #0]
 8011150:	009b      	lsls	r3, r3, #2
 8011152:	4413      	add	r3, r2
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	b29b      	uxth	r3, r3
 8011158:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801115c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011160:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011164:	687a      	ldr	r2, [r7, #4]
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	009b      	lsls	r3, r3, #2
 801116c:	441a      	add	r2, r3
 801116e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011172:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801117a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801117e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011182:	b29b      	uxth	r3, r3
 8011184:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011190:	b29b      	uxth	r3, r3
 8011192:	461a      	mov	r2, r3
 8011194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011196:	4413      	add	r3, r2
 8011198:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	00da      	lsls	r2, r3, #3
 80111a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111a2:	4413      	add	r3, r2
 80111a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80111a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80111aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111ae:	b29a      	uxth	r2, r3
 80111b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	891b      	ldrh	r3, [r3, #8]
 80111b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	6959      	ldr	r1, [r3, #20]
 80111c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111c4:	b29b      	uxth	r3, r3
 80111c6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 fb97 	bl	80118fe <USB_WritePMA>
 80111d0:	e14b      	b.n	801146a <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	6a1a      	ldr	r2, [r3, #32]
 80111d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111da:	1ad2      	subs	r2, r2, r3
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	881b      	ldrh	r3, [r3, #0]
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	f000 809a 	beq.w	801132c <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	785b      	ldrb	r3, [r3, #1]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d16b      	bne.n	80112dc <USB_EPStartXfer+0x7d0>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801120e:	b29b      	uxth	r3, r3
 8011210:	461a      	mov	r2, r3
 8011212:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011214:	4413      	add	r3, r2
 8011216:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	00da      	lsls	r2, r3, #3
 801121e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011220:	4413      	add	r3, r2
 8011222:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011226:	667b      	str	r3, [r7, #100]	@ 0x64
 8011228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801122a:	881b      	ldrh	r3, [r3, #0]
 801122c:	b29b      	uxth	r3, r3
 801122e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011232:	b29a      	uxth	r2, r3
 8011234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011236:	801a      	strh	r2, [r3, #0]
 8011238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10a      	bne.n	8011256 <USB_EPStartXfer+0x74a>
 8011240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	b29b      	uxth	r3, r3
 8011246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801124a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801124e:	b29a      	uxth	r2, r3
 8011250:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011252:	801a      	strh	r2, [r3, #0]
 8011254:	e05b      	b.n	801130e <USB_EPStartXfer+0x802>
 8011256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801125a:	2b3e      	cmp	r3, #62	@ 0x3e
 801125c:	d81c      	bhi.n	8011298 <USB_EPStartXfer+0x78c>
 801125e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011262:	085b      	lsrs	r3, r3, #1
 8011264:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	2b00      	cmp	r3, #0
 8011272:	d004      	beq.n	801127e <USB_EPStartXfer+0x772>
 8011274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011278:	3301      	adds	r3, #1
 801127a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801127e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	b29a      	uxth	r2, r3
 8011284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011288:	b29b      	uxth	r3, r3
 801128a:	029b      	lsls	r3, r3, #10
 801128c:	b29b      	uxth	r3, r3
 801128e:	4313      	orrs	r3, r2
 8011290:	b29a      	uxth	r2, r3
 8011292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011294:	801a      	strh	r2, [r3, #0]
 8011296:	e03a      	b.n	801130e <USB_EPStartXfer+0x802>
 8011298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801129c:	095b      	lsrs	r3, r3, #5
 801129e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80112a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112a6:	f003 031f 	and.w	r3, r3, #31
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d104      	bne.n	80112b8 <USB_EPStartXfer+0x7ac>
 80112ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80112b2:	3b01      	subs	r3, #1
 80112b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80112b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112ba:	881b      	ldrh	r3, [r3, #0]
 80112bc:	b29a      	uxth	r2, r3
 80112be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	029b      	lsls	r3, r3, #10
 80112c6:	b29b      	uxth	r3, r3
 80112c8:	4313      	orrs	r3, r2
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80112d8:	801a      	strh	r2, [r3, #0]
 80112da:	e018      	b.n	801130e <USB_EPStartXfer+0x802>
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	785b      	ldrb	r3, [r3, #1]
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d114      	bne.n	801130e <USB_EPStartXfer+0x802>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	461a      	mov	r2, r3
 80112ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80112f0:	4413      	add	r3, r2
 80112f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	781b      	ldrb	r3, [r3, #0]
 80112f8:	00da      	lsls	r2, r3, #3
 80112fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80112fc:	4413      	add	r3, r2
 80112fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011308:	b29a      	uxth	r2, r3
 801130a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801130c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	895b      	ldrh	r3, [r3, #10]
 8011312:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	6959      	ldr	r1, [r3, #20]
 801131a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801131e:	b29b      	uxth	r3, r3
 8011320:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f000 faea 	bl	80118fe <USB_WritePMA>
 801132a:	e09e      	b.n	801146a <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	785b      	ldrb	r3, [r3, #1]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d16b      	bne.n	801140c <USB_EPStartXfer+0x900>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801133e:	b29b      	uxth	r3, r3
 8011340:	461a      	mov	r2, r3
 8011342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011344:	4413      	add	r3, r2
 8011346:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	00da      	lsls	r2, r3, #3
 801134e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011350:	4413      	add	r3, r2
 8011352:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011356:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801135a:	881b      	ldrh	r3, [r3, #0]
 801135c:	b29b      	uxth	r3, r3
 801135e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011362:	b29a      	uxth	r2, r3
 8011364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011366:	801a      	strh	r2, [r3, #0]
 8011368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801136c:	2b00      	cmp	r3, #0
 801136e:	d10a      	bne.n	8011386 <USB_EPStartXfer+0x87a>
 8011370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	b29b      	uxth	r3, r3
 8011376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801137a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801137e:	b29a      	uxth	r2, r3
 8011380:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011382:	801a      	strh	r2, [r3, #0]
 8011384:	e063      	b.n	801144e <USB_EPStartXfer+0x942>
 8011386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801138a:	2b3e      	cmp	r3, #62	@ 0x3e
 801138c:	d81c      	bhi.n	80113c8 <USB_EPStartXfer+0x8bc>
 801138e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011392:	085b      	lsrs	r3, r3, #1
 8011394:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801139c:	f003 0301 	and.w	r3, r3, #1
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d004      	beq.n	80113ae <USB_EPStartXfer+0x8a2>
 80113a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113a8:	3301      	adds	r3, #1
 80113aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	029b      	lsls	r3, r3, #10
 80113bc:	b29b      	uxth	r3, r3
 80113be:	4313      	orrs	r3, r2
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113c4:	801a      	strh	r2, [r3, #0]
 80113c6:	e042      	b.n	801144e <USB_EPStartXfer+0x942>
 80113c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113cc:	095b      	lsrs	r3, r3, #5
 80113ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113d6:	f003 031f 	and.w	r3, r3, #31
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d104      	bne.n	80113e8 <USB_EPStartXfer+0x8dc>
 80113de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113e2:	3b01      	subs	r3, #1
 80113e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80113e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	b29a      	uxth	r2, r3
 80113ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	029b      	lsls	r3, r3, #10
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4313      	orrs	r3, r2
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011404:	b29a      	uxth	r2, r3
 8011406:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011408:	801a      	strh	r2, [r3, #0]
 801140a:	e020      	b.n	801144e <USB_EPStartXfer+0x942>
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	785b      	ldrb	r3, [r3, #1]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d11c      	bne.n	801144e <USB_EPStartXfer+0x942>
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011420:	b29b      	uxth	r3, r3
 8011422:	461a      	mov	r2, r3
 8011424:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011428:	4413      	add	r3, r2
 801142a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	00da      	lsls	r2, r3, #3
 8011434:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011438:	4413      	add	r3, r2
 801143a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801143e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011446:	b29a      	uxth	r2, r3
 8011448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801144c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	891b      	ldrh	r3, [r3, #8]
 8011452:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	6959      	ldr	r1, [r3, #20]
 801145a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801145e:	b29b      	uxth	r3, r3
 8011460:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fa4a 	bl	80118fe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	4413      	add	r3, r2
 8011474:	881b      	ldrh	r3, [r3, #0]
 8011476:	b29b      	uxth	r3, r3
 8011478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801147c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011480:	817b      	strh	r3, [r7, #10]
 8011482:	897b      	ldrh	r3, [r7, #10]
 8011484:	f083 0310 	eor.w	r3, r3, #16
 8011488:	817b      	strh	r3, [r7, #10]
 801148a:	897b      	ldrh	r3, [r7, #10]
 801148c:	f083 0320 	eor.w	r3, r3, #32
 8011490:	817b      	strh	r3, [r7, #10]
 8011492:	687a      	ldr	r2, [r7, #4]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	781b      	ldrb	r3, [r3, #0]
 8011498:	009b      	lsls	r3, r3, #2
 801149a:	441a      	add	r2, r3
 801149c:	897b      	ldrh	r3, [r7, #10]
 801149e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	8013      	strh	r3, [r2, #0]
 80114b2:	e0d5      	b.n	8011660 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	7b1b      	ldrb	r3, [r3, #12]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d156      	bne.n	801156a <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	699b      	ldr	r3, [r3, #24]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d122      	bne.n	801150a <USB_EPStartXfer+0x9fe>
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	78db      	ldrb	r3, [r3, #3]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d11e      	bne.n	801150a <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	4413      	add	r3, r2
 80114d6:	881b      	ldrh	r3, [r3, #0]
 80114d8:	b29b      	uxth	r3, r3
 80114da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114e2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80114e6:	687a      	ldr	r2, [r7, #4]
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	781b      	ldrb	r3, [r3, #0]
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	441a      	add	r2, r3
 80114f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80114f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114fc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011504:	b29b      	uxth	r3, r3
 8011506:	8013      	strh	r3, [r2, #0]
 8011508:	e01d      	b.n	8011546 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	4413      	add	r3, r2
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	b29b      	uxth	r3, r3
 8011518:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801151c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011520:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011524:	687a      	ldr	r2, [r7, #4]
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	781b      	ldrb	r3, [r3, #0]
 801152a:	009b      	lsls	r3, r3, #2
 801152c:	441a      	add	r2, r3
 801152e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011532:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011536:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801153a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801153e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011542:	b29b      	uxth	r3, r3
 8011544:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	699a      	ldr	r2, [r3, #24]
 801154a:	683b      	ldr	r3, [r7, #0]
 801154c:	691b      	ldr	r3, [r3, #16]
 801154e:	429a      	cmp	r2, r3
 8011550:	d907      	bls.n	8011562 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	699a      	ldr	r2, [r3, #24]
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	691b      	ldr	r3, [r3, #16]
 801155a:	1ad2      	subs	r2, r2, r3
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	619a      	str	r2, [r3, #24]
 8011560:	e054      	b.n	801160c <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	2200      	movs	r2, #0
 8011566:	619a      	str	r2, [r3, #24]
 8011568:	e050      	b.n	801160c <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	78db      	ldrb	r3, [r3, #3]
 801156e:	2b02      	cmp	r3, #2
 8011570:	d142      	bne.n	80115f8 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	69db      	ldr	r3, [r3, #28]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d048      	beq.n	801160c <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 801158a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801158e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011592:	2b00      	cmp	r3, #0
 8011594:	d005      	beq.n	80115a2 <USB_EPStartXfer+0xa96>
 8011596:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801159a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d10b      	bne.n	80115ba <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80115a2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80115a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d12e      	bne.n	801160c <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80115ae:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80115b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d128      	bne.n	801160c <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	781b      	ldrb	r3, [r3, #0]
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	4413      	add	r3, r2
 80115c4:	881b      	ldrh	r3, [r3, #0]
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80115cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115d0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	781b      	ldrb	r3, [r3, #0]
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	441a      	add	r2, r3
 80115de:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 80115e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	8013      	strh	r3, [r2, #0]
 80115f6:	e009      	b.n	801160c <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	78db      	ldrb	r3, [r3, #3]
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d103      	bne.n	8011608 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	2200      	movs	r2, #0
 8011604:	619a      	str	r2, [r3, #24]
 8011606:	e001      	b.n	801160c <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011608:	2301      	movs	r3, #1
 801160a:	e02a      	b.n	8011662 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801160c:	687a      	ldr	r2, [r7, #4]
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	009b      	lsls	r3, r3, #2
 8011614:	4413      	add	r3, r2
 8011616:	881b      	ldrh	r3, [r3, #0]
 8011618:	b29b      	uxth	r3, r3
 801161a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801161e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011622:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011626:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801162a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801162e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011632:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011636:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801163a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 801163e:	687a      	ldr	r2, [r7, #4]
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	009b      	lsls	r3, r3, #2
 8011646:	441a      	add	r2, r3
 8011648:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801164c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011650:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801165c:	b29b      	uxth	r3, r3
 801165e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011660:	2300      	movs	r3, #0
}
 8011662:	4618      	mov	r0, r3
 8011664:	37b0      	adds	r7, #176	@ 0xb0
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}

0801166a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801166a:	b480      	push	{r7}
 801166c:	b085      	sub	sp, #20
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	785b      	ldrb	r3, [r3, #1]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d020      	beq.n	80116be <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	4413      	add	r3, r2
 8011686:	881b      	ldrh	r3, [r3, #0]
 8011688:	b29b      	uxth	r3, r3
 801168a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801168e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011692:	81bb      	strh	r3, [r7, #12]
 8011694:	89bb      	ldrh	r3, [r7, #12]
 8011696:	f083 0310 	eor.w	r3, r3, #16
 801169a:	81bb      	strh	r3, [r7, #12]
 801169c:	687a      	ldr	r2, [r7, #4]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	781b      	ldrb	r3, [r3, #0]
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	441a      	add	r2, r3
 80116a6:	89bb      	ldrh	r3, [r7, #12]
 80116a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	8013      	strh	r3, [r2, #0]
 80116bc:	e01f      	b.n	80116fe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80116be:	687a      	ldr	r2, [r7, #4]
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	881b      	ldrh	r3, [r3, #0]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80116d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80116d4:	81fb      	strh	r3, [r7, #14]
 80116d6:	89fb      	ldrh	r3, [r7, #14]
 80116d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80116dc:	81fb      	strh	r3, [r7, #14]
 80116de:	687a      	ldr	r2, [r7, #4]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	441a      	add	r2, r3
 80116e8:	89fb      	ldrh	r3, [r7, #14]
 80116ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80116ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80116f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80116f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80116fe:	2300      	movs	r3, #0
}
 8011700:	4618      	mov	r0, r3
 8011702:	3714      	adds	r7, #20
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr

0801170c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801170c:	b480      	push	{r7}
 801170e:	b087      	sub	sp, #28
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
 8011714:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	785b      	ldrb	r3, [r3, #1]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d04c      	beq.n	80117b8 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	781b      	ldrb	r3, [r3, #0]
 8011724:	009b      	lsls	r3, r3, #2
 8011726:	4413      	add	r3, r2
 8011728:	881b      	ldrh	r3, [r3, #0]
 801172a:	823b      	strh	r3, [r7, #16]
 801172c:	8a3b      	ldrh	r3, [r7, #16]
 801172e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011732:	2b00      	cmp	r3, #0
 8011734:	d01b      	beq.n	801176e <USB_EPClearStall+0x62>
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	4413      	add	r3, r2
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	b29b      	uxth	r3, r3
 8011744:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801174c:	81fb      	strh	r3, [r7, #14]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	441a      	add	r2, r3
 8011758:	89fb      	ldrh	r3, [r7, #14]
 801175a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801175e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011766:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801176a:	b29b      	uxth	r3, r3
 801176c:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	78db      	ldrb	r3, [r3, #3]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d06c      	beq.n	8011850 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	781b      	ldrb	r3, [r3, #0]
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4413      	add	r3, r2
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	b29b      	uxth	r3, r3
 8011784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801178c:	81bb      	strh	r3, [r7, #12]
 801178e:	89bb      	ldrh	r3, [r7, #12]
 8011790:	f083 0320 	eor.w	r3, r3, #32
 8011794:	81bb      	strh	r3, [r7, #12]
 8011796:	687a      	ldr	r2, [r7, #4]
 8011798:	683b      	ldr	r3, [r7, #0]
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	441a      	add	r2, r3
 80117a0:	89bb      	ldrh	r3, [r7, #12]
 80117a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	8013      	strh	r3, [r2, #0]
 80117b6:	e04b      	b.n	8011850 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	4413      	add	r3, r2
 80117c2:	881b      	ldrh	r3, [r3, #0]
 80117c4:	82fb      	strh	r3, [r7, #22]
 80117c6:	8afb      	ldrh	r3, [r7, #22]
 80117c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d01b      	beq.n	8011808 <USB_EPClearStall+0xfc>
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	009b      	lsls	r3, r3, #2
 80117d8:	4413      	add	r3, r2
 80117da:	881b      	ldrh	r3, [r3, #0]
 80117dc:	b29b      	uxth	r3, r3
 80117de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80117e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80117e6:	82bb      	strh	r3, [r7, #20]
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	009b      	lsls	r3, r3, #2
 80117f0:	441a      	add	r2, r3
 80117f2:	8abb      	ldrh	r3, [r7, #20]
 80117f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011804:	b29b      	uxth	r3, r3
 8011806:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	009b      	lsls	r3, r3, #2
 8011810:	4413      	add	r3, r2
 8011812:	881b      	ldrh	r3, [r3, #0]
 8011814:	b29b      	uxth	r3, r3
 8011816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801181a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801181e:	827b      	strh	r3, [r7, #18]
 8011820:	8a7b      	ldrh	r3, [r7, #18]
 8011822:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011826:	827b      	strh	r3, [r7, #18]
 8011828:	8a7b      	ldrh	r3, [r7, #18]
 801182a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801182e:	827b      	strh	r3, [r7, #18]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	009b      	lsls	r3, r3, #2
 8011838:	441a      	add	r2, r3
 801183a:	8a7b      	ldrh	r3, [r7, #18]
 801183c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011840:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011844:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801184c:	b29b      	uxth	r3, r3
 801184e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	371c      	adds	r7, #28
 8011856:	46bd      	mov	sp, r7
 8011858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185c:	4770      	bx	lr

0801185e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801185e:	b480      	push	{r7}
 8011860:	b083      	sub	sp, #12
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
 8011866:	460b      	mov	r3, r1
 8011868:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 801186a:	78fb      	ldrb	r3, [r7, #3]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d103      	bne.n	8011878 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	2280      	movs	r2, #128	@ 0x80
 8011874:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	370c      	adds	r7, #12
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011886:	b480      	push	{r7}
 8011888:	b083      	sub	sp, #12
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011894:	b29b      	uxth	r3, r3
 8011896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801189a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80118a6:	2300      	movs	r3, #0
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr

080118b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80118d0:	2300      	movs	r3, #0
}
 80118d2:	4618      	mov	r0, r3
 80118d4:	370c      	adds	r7, #12
 80118d6:	46bd      	mov	sp, r7
 80118d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118dc:	4770      	bx	lr

080118de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80118de:	b480      	push	{r7}
 80118e0:	b085      	sub	sp, #20
 80118e2:	af00      	add	r7, sp, #0
 80118e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80118f0:	68fb      	ldr	r3, [r7, #12]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr

080118fe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80118fe:	b480      	push	{r7}
 8011900:	b08b      	sub	sp, #44	@ 0x2c
 8011902:	af00      	add	r7, sp, #0
 8011904:	60f8      	str	r0, [r7, #12]
 8011906:	60b9      	str	r1, [r7, #8]
 8011908:	4611      	mov	r1, r2
 801190a:	461a      	mov	r2, r3
 801190c:	460b      	mov	r3, r1
 801190e:	80fb      	strh	r3, [r7, #6]
 8011910:	4613      	mov	r3, r2
 8011912:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011914:	88bb      	ldrh	r3, [r7, #4]
 8011916:	3301      	adds	r3, #1
 8011918:	085b      	lsrs	r3, r3, #1
 801191a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011924:	88fa      	ldrh	r2, [r7, #6]
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	4413      	add	r3, r2
 801192a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801192e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011930:	69bb      	ldr	r3, [r7, #24]
 8011932:	627b      	str	r3, [r7, #36]	@ 0x24
 8011934:	e01c      	b.n	8011970 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 8011936:	69fb      	ldr	r3, [r7, #28]
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801193c:	69fb      	ldr	r3, [r7, #28]
 801193e:	3301      	adds	r3, #1
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	b21b      	sxth	r3, r3
 8011944:	021b      	lsls	r3, r3, #8
 8011946:	b21a      	sxth	r2, r3
 8011948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801194c:	4313      	orrs	r3, r2
 801194e:	b21b      	sxth	r3, r3
 8011950:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	8a7a      	ldrh	r2, [r7, #18]
 8011956:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011958:	6a3b      	ldr	r3, [r7, #32]
 801195a:	3302      	adds	r3, #2
 801195c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	3301      	adds	r3, #1
 8011962:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011964:	69fb      	ldr	r3, [r7, #28]
 8011966:	3301      	adds	r3, #1
 8011968:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196c:	3b01      	subs	r3, #1
 801196e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011972:	2b00      	cmp	r3, #0
 8011974:	d1df      	bne.n	8011936 <USB_WritePMA+0x38>
  }
}
 8011976:	bf00      	nop
 8011978:	bf00      	nop
 801197a:	372c      	adds	r7, #44	@ 0x2c
 801197c:	46bd      	mov	sp, r7
 801197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011982:	4770      	bx	lr

08011984 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011984:	b480      	push	{r7}
 8011986:	b08b      	sub	sp, #44	@ 0x2c
 8011988:	af00      	add	r7, sp, #0
 801198a:	60f8      	str	r0, [r7, #12]
 801198c:	60b9      	str	r1, [r7, #8]
 801198e:	4611      	mov	r1, r2
 8011990:	461a      	mov	r2, r3
 8011992:	460b      	mov	r3, r1
 8011994:	80fb      	strh	r3, [r7, #6]
 8011996:	4613      	mov	r3, r2
 8011998:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801199a:	88bb      	ldrh	r3, [r7, #4]
 801199c:	085b      	lsrs	r3, r3, #1
 801199e:	b29b      	uxth	r3, r3
 80119a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80119aa:	88fa      	ldrh	r2, [r7, #6]
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80119b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80119ba:	e018      	b.n	80119ee <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80119bc:	6a3b      	ldr	r3, [r7, #32]
 80119be:	881b      	ldrh	r3, [r3, #0]
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80119c4:	6a3b      	ldr	r3, [r7, #32]
 80119c6:	3302      	adds	r3, #2
 80119c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	3301      	adds	r3, #1
 80119d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	0a1b      	lsrs	r3, r3, #8
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	3301      	adds	r3, #1
 80119e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80119e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ea:	3b01      	subs	r3, #1
 80119ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80119ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1e3      	bne.n	80119bc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80119f4:	88bb      	ldrh	r3, [r7, #4]
 80119f6:	f003 0301 	and.w	r3, r3, #1
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d007      	beq.n	8011a10 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	881b      	ldrh	r3, [r3, #0]
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	b2da      	uxtb	r2, r3
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	701a      	strb	r2, [r3, #0]
  }
}
 8011a10:	bf00      	nop
 8011a12:	372c      	adds	r7, #44	@ 0x2c
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <__NVIC_SystemReset>:
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8011a20:	f3bf 8f4f 	dsb	sy
}
 8011a24:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8011a26:	4b06      	ldr	r3, [pc, #24]	@ (8011a40 <__NVIC_SystemReset+0x24>)
 8011a28:	68db      	ldr	r3, [r3, #12]
 8011a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8011a2e:	4904      	ldr	r1, [pc, #16]	@ (8011a40 <__NVIC_SystemReset+0x24>)
 8011a30:	4b04      	ldr	r3, [pc, #16]	@ (8011a44 <__NVIC_SystemReset+0x28>)
 8011a32:	4313      	orrs	r3, r2
 8011a34:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011a36:	f3bf 8f4f 	dsb	sy
}
 8011a3a:	bf00      	nop
    __NOP();
 8011a3c:	bf00      	nop
 8011a3e:	e7fd      	b.n	8011a3c <__NVIC_SystemReset+0x20>
 8011a40:	e000ed00 	.word	0xe000ed00
 8011a44:	05fa0004 	.word	0x05fa0004

08011a48 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
 8011a50:	460b      	mov	r3, r1
 8011a52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = (USBD_DFU_HandleTypeDef *)USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8011a54:	f44f 6084 	mov.w	r0, #1056	@ 0x420
 8011a58:	f007 f91a 	bl	8018c90 <USBD_static_malloc>
 8011a5c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d109      	bne.n	8011a78 <USBD_DFU_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	32b0      	adds	r2, #176	@ 0xb0
 8011a6e:	2100      	movs	r1, #0
 8011a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011a74:	2302      	movs	r3, #2
 8011a76:	e052      	b.n	8011b1e <USBD_DFU_Init+0xd6>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hdfu;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	32b0      	adds	r2, #176	@ 0xb0
 8011a82:	68f9      	ldr	r1, [r7, #12]
 8011a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	32b0      	adds	r2, #176	@ 0xb0
 8011a92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  hdfu->alt_setting = 0U;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8011aaa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  hdfu->wblock_num = 0U;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
  hdfu->dev_state = DFU_STATE_IDLE;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	2202      	movs	r2, #2
 8011aca:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[1] = 0U;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
  hdfu->dev_status[2] = 0U;
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2200      	movs	r2, #0
 8011ae2:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
  hdfu->dev_status[3] = 0U;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	2200      	movs	r2, #0
 8011aea:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	2202      	movs	r2, #2
 8011af2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
  hdfu->dev_status[5] = 0U;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->Init() != USBD_OK)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	33b0      	adds	r3, #176	@ 0xb0
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	4413      	add	r3, r2
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	4798      	blx	r3
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <USBD_DFU_Init+0xd4>
  {
    return (uint8_t)USBD_FAIL;
 8011b18:	2303      	movs	r3, #3
 8011b1a:	e000      	b.n	8011b1e <USBD_DFU_Init+0xd6>
  }

  return (uint8_t)USBD_OK;
 8011b1c:	2300      	movs	r3, #0
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}

08011b26 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b26:	b580      	push	{r7, lr}
 8011b28:	b084      	sub	sp, #16
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
 8011b2e:	460b      	mov	r3, r1
 8011b30:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	32b0      	adds	r2, #176	@ 0xb0
 8011b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d101      	bne.n	8011b48 <USBD_DFU_DeInit+0x22>
  {
    return (uint8_t)USBD_EMEM;
 8011b44:	2302      	movs	r3, #2
 8011b46:	e03c      	b.n	8011bc2 <USBD_DFU_DeInit+0x9c>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	32b0      	adds	r2, #176	@ 0xb0
 8011b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b56:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdfu->wlength = 0U;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2200      	movs	r2, #0
 8011b64:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2202      	movs	r2, #2
 8011b7c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	33b0      	adds	r3, #176	@ 0xb0
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	4413      	add	r3, r2
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	689b      	ldr	r3, [r3, #8]
 8011b92:	4798      	blx	r3
  USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	32b0      	adds	r2, #176	@ 0xb0
 8011b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f007 f882 	bl	8018cac <USBD_static_free>
  pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	32b0      	adds	r2, #176	@ 0xb0
 8011bb2:	2100      	movs	r1, #0
 8011bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = NULL;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  return (uint8_t)USBD_OK;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3710      	adds	r7, #16
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
	...

08011bcc <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b086      	sub	sp, #24
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
 8011bd4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	32b0      	adds	r2, #176	@ 0xb0
 8011be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011be4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011be6:	2300      	movs	r3, #0
 8011be8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pbuf;
  uint16_t len;
  uint16_t status_info = 0U;
 8011bea:	2300      	movs	r3, #0
 8011bec:	813b      	strh	r3, [r7, #8]

  if (hdfu == NULL)
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d101      	bne.n	8011bf8 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011bf4:	2303      	movs	r3, #3
 8011bf6:	e0e8      	b.n	8011dca <USBD_DFU_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d03e      	beq.n	8011c82 <USBD_DFU_Setup+0xb6>
 8011c04:	2b20      	cmp	r3, #32
 8011c06:	f040 80d8 	bne.w	8011dba <USBD_DFU_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	785b      	ldrb	r3, [r3, #1]
 8011c0e:	2b06      	cmp	r3, #6
 8011c10:	d82f      	bhi.n	8011c72 <USBD_DFU_Setup+0xa6>
 8011c12:	a201      	add	r2, pc, #4	@ (adr r2, 8011c18 <USBD_DFU_Setup+0x4c>)
 8011c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c18:	08011c69 	.word	0x08011c69
 8011c1c:	08011c35 	.word	0x08011c35
 8011c20:	08011c3f 	.word	0x08011c3f
 8011c24:	08011c49 	.word	0x08011c49
 8011c28:	08011c51 	.word	0x08011c51
 8011c2c:	08011c59 	.word	0x08011c59
 8011c30:	08011c61 	.word	0x08011c61
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8011c34:	6839      	ldr	r1, [r7, #0]
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f000 fac2 	bl	80121c0 <DFU_Download>
          break;
 8011c3c:	e020      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8011c3e:	6839      	ldr	r1, [r7, #0]
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f000 fb33 	bl	80122ac <DFU_Upload>
          break;
 8011c46:	e01b      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fc37 	bl	80124bc <DFU_GetStatus>
          break;
 8011c4e:	e017      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f000 fcff 	bl	8012654 <DFU_ClearStatus>
          break;
 8011c56:	e013      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 fd53 	bl	8012704 <DFU_GetState>
          break;
 8011c5e:	e00f      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f000 fd6b 	bl	801273c <DFU_Abort>
          break;
 8011c66:	e00b      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8011c68:	6839      	ldr	r1, [r7, #0]
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f000 fa38 	bl	80120e0 <DFU_Detach>
          break;
 8011c70:	e006      	b.n	8011c80 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f001 fff0 	bl	8013c5a <USBD_CtlError>
          ret = USBD_FAIL;
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011c7e:	bf00      	nop
      }
      break;
 8011c80:	e0a2      	b.n	8011dc8 <USBD_DFU_Setup+0x1fc>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	785b      	ldrb	r3, [r3, #1]
 8011c86:	2b0b      	cmp	r3, #11
 8011c88:	f200 808c 	bhi.w	8011da4 <USBD_DFU_Setup+0x1d8>
 8011c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8011c94 <USBD_DFU_Setup+0xc8>)
 8011c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c92:	bf00      	nop
 8011c94:	08011cc5 	.word	0x08011cc5
 8011c98:	08011db3 	.word	0x08011db3
 8011c9c:	08011da5 	.word	0x08011da5
 8011ca0:	08011da5 	.word	0x08011da5
 8011ca4:	08011da5 	.word	0x08011da5
 8011ca8:	08011da5 	.word	0x08011da5
 8011cac:	08011cef 	.word	0x08011cef
 8011cb0:	08011da5 	.word	0x08011da5
 8011cb4:	08011da5 	.word	0x08011da5
 8011cb8:	08011da5 	.word	0x08011da5
 8011cbc:	08011d37 	.word	0x08011d37
 8011cc0:	08011d63 	.word	0x08011d63
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b03      	cmp	r3, #3
 8011cce:	d107      	bne.n	8011ce0 <USBD_DFU_Setup+0x114>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011cd0:	f107 0308 	add.w	r3, r7, #8
 8011cd4:	2202      	movs	r2, #2
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f002 f83b 	bl	8013d54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011cde:	e06b      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011ce0:	6839      	ldr	r1, [r7, #0]
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f001 ffb9 	bl	8013c5a <USBD_CtlError>
            ret = USBD_FAIL;
 8011ce8:	2303      	movs	r3, #3
 8011cea:	75fb      	strb	r3, [r7, #23]
          break;
 8011cec:	e064      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8011cee:	683b      	ldr	r3, [r7, #0]
 8011cf0:	885b      	ldrh	r3, [r3, #2]
 8011cf2:	0a1b      	lsrs	r3, r3, #8
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	2b21      	cmp	r3, #33	@ 0x21
 8011cf8:	d15d      	bne.n	8011db6 <USBD_DFU_Setup+0x1ea>
          {
            pbuf = (uint8_t *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8011d00:	4618      	mov	r0, r3
 8011d02:	f000 fdd5 	bl	80128b0 <USBD_DFU_GetDfuFuncDesc>
 8011d06:	60f8      	str	r0, [r7, #12]

            if (pbuf != NULL)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d00c      	beq.n	8011d28 <USBD_DFU_Setup+0x15c>
            {
              len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	88db      	ldrh	r3, [r3, #6]
 8011d12:	2b09      	cmp	r3, #9
 8011d14:	bf28      	it	cs
 8011d16:	2309      	movcs	r3, #9
 8011d18:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d1a:	897b      	ldrh	r3, [r7, #10]
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	68f9      	ldr	r1, [r7, #12]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f002 f817 	bl	8013d54 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 8011d26:	e046      	b.n	8011db6 <USBD_DFU_Setup+0x1ea>
              USBD_CtlError(pdev, req);
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	f001 ff95 	bl	8013c5a <USBD_CtlError>
              ret = USBD_FAIL;
 8011d30:	2303      	movs	r3, #3
 8011d32:	75fb      	strb	r3, [r7, #23]
          break;
 8011d34:	e03f      	b.n	8011db6 <USBD_DFU_Setup+0x1ea>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d3c:	b2db      	uxtb	r3, r3
 8011d3e:	2b03      	cmp	r3, #3
 8011d40:	d108      	bne.n	8011d54 <USBD_DFU_Setup+0x188>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8011d48:	2201      	movs	r2, #1
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f002 f801 	bl	8013d54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d52:	e031      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f001 ff7f 	bl	8013c5a <USBD_CtlError>
            ret = USBD_FAIL;
 8011d5c:	2303      	movs	r3, #3
 8011d5e:	75fb      	strb	r3, [r7, #23]
          break;
 8011d60:	e02a      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	885b      	ldrh	r3, [r3, #2]
 8011d66:	b2db      	uxtb	r3, r3
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d114      	bne.n	8011d96 <USBD_DFU_Setup+0x1ca>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	2b03      	cmp	r3, #3
 8011d76:	d107      	bne.n	8011d88 <USBD_DFU_Setup+0x1bc>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	885b      	ldrh	r3, [r3, #2]
 8011d7c:	b2db      	uxtb	r3, r3
 8011d7e:	461a      	mov	r2, r3
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d86:	e017      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>
              USBD_CtlError(pdev, req);
 8011d88:	6839      	ldr	r1, [r7, #0]
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f001 ff65 	bl	8013c5a <USBD_CtlError>
              ret = USBD_FAIL;
 8011d90:	2303      	movs	r3, #3
 8011d92:	75fb      	strb	r3, [r7, #23]
          break;
 8011d94:	e010      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8011d96:	6839      	ldr	r1, [r7, #0]
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f001 ff5e 	bl	8013c5a <USBD_CtlError>
            ret = USBD_FAIL;
 8011d9e:	2303      	movs	r3, #3
 8011da0:	75fb      	strb	r3, [r7, #23]
          break;
 8011da2:	e009      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f001 ff57 	bl	8013c5a <USBD_CtlError>
          ret = USBD_FAIL;
 8011dac:	2303      	movs	r3, #3
 8011dae:	75fb      	strb	r3, [r7, #23]
          break;
 8011db0:	e002      	b.n	8011db8 <USBD_DFU_Setup+0x1ec>
          break;
 8011db2:	bf00      	nop
 8011db4:	e008      	b.n	8011dc8 <USBD_DFU_Setup+0x1fc>
          break;
 8011db6:	bf00      	nop
      }
      break;
 8011db8:	e006      	b.n	8011dc8 <USBD_DFU_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8011dba:	6839      	ldr	r1, [r7, #0]
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f001 ff4c 	bl	8013c5a <USBD_CtlError>
      ret = USBD_FAIL;
 8011dc2:	2303      	movs	r3, #3
 8011dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8011dc6:	bf00      	nop
  }

  return (uint8_t)ret;
 8011dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop

08011dd4 <USBD_DFU_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b083      	sub	sp, #12
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	221b      	movs	r2, #27
 8011de0:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8011de2:	4b03      	ldr	r3, [pc, #12]	@ (8011df0 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	370c      	adds	r7, #12
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr
 8011df0:	2000006c 	.word	0x2000006c

08011df4 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011df4:	b480      	push	{r7}
 8011df6:	b083      	sub	sp, #12
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8011dfc:	2300      	movs	r3, #0
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	370c      	adds	r7, #12
 8011e02:	46bd      	mov	sp, r7
 8011e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e08:	4770      	bx	lr

08011e0a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b088      	sub	sp, #32
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t app_addr_ptr;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	32b0      	adds	r2, #176	@ 0xb0
 8011e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e20:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	33b0      	adds	r3, #176	@ 0xb0
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	4413      	add	r3, r2
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	61bb      	str	r3, [r7, #24]
#if (USBD_DFU_VENDOR_CMD_ENABLED == 1U) || (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 8011e34:	69fb      	ldr	r3, [r7, #28]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d101      	bne.n	8011e3e <USBD_DFU_EP0_TxReady+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	e0f1      	b.n	8012022 <USBD_DFU_EP0_TxReady+0x218>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011e44:	2b04      	cmp	r3, #4
 8011e46:	f040 80e0 	bne.w	801200a <USBD_DFU_EP0_TxReady+0x200>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8011e4a:	69fb      	ldr	r3, [r7, #28]
 8011e4c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	f040 8085 	bne.w	8011f60 <USBD_DFU_EP0_TxReady+0x156>
    {
      if (hdfu->wlength == 1U)
 8011e56:	69fb      	ldr	r3, [r7, #28]
 8011e58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	f000 80b5 	beq.w	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
            return (uint8_t)USBD_FAIL;
          }
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
      }
      else if (hdfu->wlength == 5U)
 8011e62:	69fb      	ldr	r3, [r7, #28]
 8011e64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8011e68:	2b05      	cmp	r3, #5
 8011e6a:	d166      	bne.n	8011f3a <USBD_DFU_EP0_TxReady+0x130>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	2b21      	cmp	r3, #33	@ 0x21
 8011e72:	d124      	bne.n	8011ebe <USBD_DFU_EP0_TxReady+0xb4>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          hdfu->data_ptr = hdfu->buffer.d8[1];
 8011e74:	69fb      	ldr	r3, [r7, #28]
 8011e76:	785b      	ldrb	r3, [r3, #1]
 8011e78:	461a      	mov	r2, r3
 8011e7a:	69fb      	ldr	r3, [r7, #28]
 8011e7c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8011e80:	69fb      	ldr	r3, [r7, #28]
 8011e82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	789b      	ldrb	r3, [r3, #2]
 8011e8a:	021b      	lsls	r3, r3, #8
 8011e8c:	441a      	add	r2, r3
 8011e8e:	69fb      	ldr	r3, [r7, #28]
 8011e90:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8011e94:	69fb      	ldr	r3, [r7, #28]
 8011e96:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	78db      	ldrb	r3, [r3, #3]
 8011e9e:	041b      	lsls	r3, r3, #16
 8011ea0:	441a      	add	r2, r3
 8011ea2:	69fb      	ldr	r3, [r7, #28]
 8011ea4:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8011ea8:	69fb      	ldr	r3, [r7, #28]
 8011eaa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	791b      	ldrb	r3, [r3, #4]
 8011eb2:	061b      	lsls	r3, r3, #24
 8011eb4:	441a      	add	r2, r3
 8011eb6:	69fb      	ldr	r3, [r7, #28]
 8011eb8:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8011ebc:	e086      	b.n	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	2b41      	cmp	r3, #65	@ 0x41
 8011ec4:	d137      	bne.n	8011f36 <USBD_DFU_EP0_TxReady+0x12c>
            hdfu->dev_status[4] = hdfu->dev_state;
            return (uint8_t)USBD_FAIL;
          }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

          app_addr_ptr = hdfu->buffer.d8[1];
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	785b      	ldrb	r3, [r3, #1]
 8011eca:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	789b      	ldrb	r3, [r3, #2]
 8011ed0:	021b      	lsls	r3, r3, #8
 8011ed2:	693a      	ldr	r2, [r7, #16]
 8011ed4:	4413      	add	r3, r2
 8011ed6:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8011ed8:	69fb      	ldr	r3, [r7, #28]
 8011eda:	78db      	ldrb	r3, [r3, #3]
 8011edc:	041b      	lsls	r3, r3, #16
 8011ede:	693a      	ldr	r2, [r7, #16]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	613b      	str	r3, [r7, #16]
          app_addr_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8011ee4:	69fb      	ldr	r3, [r7, #28]
 8011ee6:	791b      	ldrb	r3, [r3, #4]
 8011ee8:	061b      	lsls	r3, r3, #24
 8011eea:	693a      	ldr	r2, [r7, #16]
 8011eec:	4413      	add	r3, r2
 8011eee:	613b      	str	r3, [r7, #16]

          if (DfuInterface->Erase(app_addr_ptr) != USBD_OK)
 8011ef0:	69bb      	ldr	r3, [r7, #24]
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	6938      	ldr	r0, [r7, #16]
 8011ef6:	4798      	blx	r3
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d066      	beq.n	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
          {
            /* Update the state machine */
            hdfu->dev_state = DFU_STATE_ERROR;
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	220a      	movs	r2, #10
 8011f02:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	220b      	movs	r2, #11
 8011f0a:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
            hdfu->dev_status[1] = 0U;
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	2200      	movs	r2, #0
 8011f12:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	2200      	movs	r2, #0
 8011f22:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            return (uint8_t)USBD_FAIL;
 8011f32:	2303      	movs	r3, #3
 8011f34:	e075      	b.n	8012022 <USBD_DFU_EP0_TxReady+0x218>
          }
        }
#else
        else
        {
          return (uint8_t)USBD_FAIL;
 8011f36:	2303      	movs	r3, #3
 8011f38:	e073      	b.n	8012022 <USBD_DFU_EP0_TxReady+0x218>
          req.wLength = 1U;
          USBD_CtlError(pdev, &req);
        }
#else
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
        hdfu->wblock_num = 0U;
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	723b      	strb	r3, [r7, #8]
        req.wLength = 1U;
 8011f4e:	2301      	movs	r3, #1
 8011f50:	81fb      	strh	r3, [r7, #14]
        USBD_CtlError(pdev, &req);
 8011f52:	f107 0308 	add.w	r3, r7, #8
 8011f56:	4619      	mov	r1, r3
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f001 fe7e 	bl	8013c5a <USBD_CtlError>
 8011f5e:	e035      	b.n	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8011f60:	69fb      	ldr	r3, [r7, #28]
 8011f62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d930      	bls.n	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
          return (uint8_t)USBD_FAIL;
        }
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8011f70:	3b02      	subs	r3, #2
 8011f72:	029a      	lsls	r2, r3, #10
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8011f7a:	4413      	add	r3, r2
 8011f7c:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	691b      	ldr	r3, [r3, #16]
 8011f82:	69f8      	ldr	r0, [r7, #28]
 8011f84:	6979      	ldr	r1, [r7, #20]
 8011f86:	69fa      	ldr	r2, [r7, #28]
 8011f88:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 8011f8c:	4798      	blx	r3
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d01b      	beq.n	8011fcc <USBD_DFU_EP0_TxReady+0x1c2>
        {
          /* Update the state machine */
          hdfu->dev_state = DFU_STATE_ERROR;
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	220a      	movs	r2, #10
 8011f98:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[0] = DFU_ERROR_VENDOR;
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	220b      	movs	r2, #11
 8011fa0:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
          hdfu->dev_status[1] = 0U;
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
          return (uint8_t)USBD_FAIL;
 8011fc8:	2303      	movs	r3, #3
 8011fca:	e02a      	b.n	8012022 <USBD_DFU_EP0_TxReady+0x218>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
    hdfu->wblock_num = 0U;
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	2203      	movs	r2, #3
 8011fe0:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 8011fe4:	69fb      	ldr	r3, [r7, #28]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8011fec:	69fb      	ldr	r3, [r7, #28]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 8011ff4:	69fb      	ldr	r3, [r7, #28]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012002:	69fb      	ldr	r3, [r7, #28]
 8012004:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8012008:	e00a      	b.n	8012020 <USBD_DFU_EP0_TxReady+0x216>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 801200a:	69fb      	ldr	r3, [r7, #28]
 801200c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012010:	2b07      	cmp	r3, #7
 8012012:	d103      	bne.n	801201c <USBD_DFU_EP0_TxReady+0x212>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 fbe6 	bl	80127e6 <DFU_Leave>
 801201a:	e001      	b.n	8012020 <USBD_DFU_EP0_TxReady+0x216>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 801201c:	2303      	movs	r3, #3
 801201e:	e000      	b.n	8012022 <USBD_DFU_EP0_TxReady+0x218>
  }

  return (uint8_t)USBD_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	3720      	adds	r7, #32
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}

0801202a <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 801202a:	b480      	push	{r7}
 801202c:	b083      	sub	sp, #12
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8012032:	2300      	movs	r3, #0
}
 8012034:	4618      	mov	r0, r3
 8012036:	370c      	adds	r7, #12
 8012038:	46bd      	mov	sp, r7
 801203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203e:	4770      	bx	lr

08012040 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8012040:	b480      	push	{r7}
 8012042:	b083      	sub	sp, #12
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	220a      	movs	r2, #10
 801204c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 801204e:	4b03      	ldr	r3, [pc, #12]	@ (801205c <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8012050:	4618      	mov	r0, r3
 8012052:	370c      	adds	r7, #12
 8012054:	46bd      	mov	sp, r7
 8012056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205a:	4770      	bx	lr
 801205c:	20000088 	.word	0x20000088

08012060 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af00      	add	r7, sp, #0
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	460b      	mov	r3, r1
 801206a:	607a      	str	r2, [r7, #4]
 801206c:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	33b0      	adds	r3, #176	@ 0xb0
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8012080:	7afb      	ldrb	r3, [r7, #11]
 8012082:	2b06      	cmp	r3, #6
 8012084:	d808      	bhi.n	8012098 <USBD_DFU_GetUsrStringDesc+0x38>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	4906      	ldr	r1, [pc, #24]	@ (80120a8 <USBD_DFU_GetUsrStringDesc+0x48>)
 801208e:	4618      	mov	r0, r3
 8012090:	f001 fdf4 	bl	8013c7c <USBD_GetString>
    return USBD_StrDesc;
 8012094:	4b04      	ldr	r3, [pc, #16]	@ (80120a8 <USBD_DFU_GetUsrStringDesc+0x48>)
 8012096:	e003      	b.n	80120a0 <USBD_DFU_GetUsrStringDesc+0x40>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    *length = 0U;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	801a      	strh	r2, [r3, #0]
    return NULL;
 801209e:	2300      	movs	r3, #0
  }
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3718      	adds	r7, #24
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20000b30 	.word	0x20000b30

080120ac <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d101      	bne.n	80120c0 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80120bc:	2303      	movs	r3, #3
 80120be:	e009      	b.n	80120d4 <USBD_DFU_RegisterMedia+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	33b0      	adds	r3, #176	@ 0xb0
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	4413      	add	r3, r2
 80120ce:	683a      	ldr	r2, [r7, #0]
 80120d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80120d2:	2300      	movs	r3, #0
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	370c      	adds	r7, #12
 80120d8:	46bd      	mov	sp, r7
 80120da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120de:	4770      	bx	lr

080120e0 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	32b0      	adds	r2, #176	@ 0xb0
 80120f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120f8:	60fb      	str	r3, [r7, #12]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8012100:	4618      	mov	r0, r3
 8012102:	f000 fbd5 	bl	80128b0 <USBD_DFU_GetDfuFuncDesc>
 8012106:	60b8      	str	r0, [r7, #8]

  if ((hdfu == NULL) || (pDfuFunc == NULL))
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d054      	beq.n	80121b8 <DFU_Detach+0xd8>
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d051      	beq.n	80121b8 <DFU_Detach+0xd8>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 801211a:	2b02      	cmp	r3, #2
 801211c:	d013      	beq.n	8012146 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8012124:	2b03      	cmp	r3, #3
 8012126:	d00e      	beq.n	8012146 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801212e:	2b05      	cmp	r3, #5
 8012130:	d009      	beq.n	8012146 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8012138:	2b06      	cmp	r3, #6
 801213a:	d004      	beq.n	8012146 <DFU_Detach+0x66>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8012142:	2b09      	cmp	r3, #9
 8012144:	d125      	bne.n	8012192 <DFU_Detach+0xb2>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2202      	movs	r2, #2
 801214a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2200      	movs	r2, #0
 8012162:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	2200      	movs	r2, #0
 801216a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /*iString*/
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	2200      	movs	r2, #0
 8012186:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	2200      	movs	r2, #0
 801218e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if ((pDfuFunc->bmAttributes & DFU_DETACH_MASK) != 0U)
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	789b      	ldrb	r3, [r3, #2]
 8012196:	f003 0308 	and.w	r3, r3, #8
 801219a:	2b00      	cmp	r3, #0
 801219c:	d006      	beq.n	80121ac <DFU_Detach+0xcc>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 fc26 	bl	80129f0 <USBD_Stop>
    (void)USBD_Start(pdev);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 fc17 	bl	80129d8 <USBD_Start>
 80121aa:	e006      	b.n	80121ba <DFU_Detach+0xda>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	885b      	ldrh	r3, [r3, #2]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7f3 f97c 	bl	80054ae <HAL_Delay>
 80121b6:	e000      	b.n	80121ba <DFU_Detach+0xda>
    return;
 80121b8:	bf00      	nop
  }
}
 80121ba:	3710      	adds	r7, #16
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	32b0      	adds	r2, #176	@ 0xb0
 80121d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121d8:	60fb      	str	r3, [r7, #12]
#if (USBD_DFU_VENDOR_CHECK_ENABLED == 1U)
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
  uint32_t VendorStatus = 0U;
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */

  if (hdfu == NULL)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d061      	beq.n	80122a4 <DFU_Download+0xe4>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	88db      	ldrh	r3, [r3, #6]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d033      	beq.n	8012250 <DFU_Download+0x90>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d004      	beq.n	80121fc <DFU_Download+0x3c>
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80121f8:	2b05      	cmp	r3, #5
 80121fa:	d124      	bne.n	8012246 <DFU_Download+0x86>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	885b      	ldrh	r3, [r3, #2]
 8012200:	461a      	mov	r2, r3
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	88db      	ldrh	r3, [r3, #6]
 801220c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012210:	bf28      	it	cs
 8012212:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8012216:	b29b      	uxth	r3, r3
 8012218:	461a      	mov	r2, r3
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2203      	movs	r2, #3
 8012224:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
      hdfu->dev_status[4] = hdfu->dev_state;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8012234:	68f9      	ldr	r1, [r7, #12]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801223c:	461a      	mov	r2, r3
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f001 fdb4 	bl	8013dac <USBD_CtlPrepareRx>
 8012244:	e02f      	b.n	80122a6 <DFU_Download+0xe6>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8012246:	6839      	ldr	r1, [r7, #0]
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f001 fd06 	bl	8013c5a <USBD_CtlError>
 801224e:	e02a      	b.n	80122a6 <DFU_Download+0xe6>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation */
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012256:	2b05      	cmp	r3, #5
 8012258:	d004      	beq.n	8012264 <DFU_Download+0xa4>
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012260:	2b02      	cmp	r3, #2
 8012262:	d11a      	bne.n	801229a <DFU_Download+0xda>
        hdfu->dev_status[4] = hdfu->dev_state;
      }
      else
#endif /* USBD_DFU_VENDOR_CHECK_ENABLED */
      {
        hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2201      	movs	r2, #1
 8012268:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
        hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2206      	movs	r2, #6
 8012270:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2200      	movs	r2, #0
 8012278:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2200      	movs	r2, #0
 8012288:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 8012298:	e005      	b.n	80122a6 <DFU_Download+0xe6>
      }
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801229a:	6839      	ldr	r1, [r7, #0]
 801229c:	6878      	ldr	r0, [r7, #4]
 801229e:	f001 fcdc 	bl	8013c5a <USBD_CtlError>
 80122a2:	e000      	b.n	80122a6 <DFU_Download+0xe6>
    return;
 80122a4:	bf00      	nop
    }
  }
}
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b088      	sub	sp, #32
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	32b0      	adds	r2, #176	@ 0xb0
 80122c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122c4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122cc:	687a      	ldr	r2, [r7, #4]
 80122ce:	33b0      	adds	r3, #176	@ 0xb0
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	4413      	add	r3, r2
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	61bb      	str	r3, [r7, #24]
  uint8_t VendorCmdLength = 0U;
  uint8_t VendorCmdBuffer[DFU_VENDOR_CMD_MAX];
  uint8_t idx;
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

  if (hdfu == NULL)
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	f000 80ea 	beq.w	80124b4 <DFU_Upload+0x208>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	88db      	ldrh	r3, [r3, #6]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	f000 80ce 	beq.w	8012486 <DFU_Upload+0x1da>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80122ea:	69fb      	ldr	r3, [r7, #28]
 80122ec:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80122f0:	2b02      	cmp	r3, #2
 80122f2:	d005      	beq.n	8012300 <DFU_Upload+0x54>
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80122fa:	2b09      	cmp	r3, #9
 80122fc:	f040 80b6 	bne.w	801246c <DFU_Upload+0x1c0>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	885b      	ldrh	r3, [r3, #2]
 8012304:	461a      	mov	r2, r3
 8012306:	69fb      	ldr	r3, [r7, #28]
 8012308:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	88db      	ldrh	r3, [r3, #6]
 8012310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012314:	bf28      	it	cs
 8012316:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 801231a:	b29b      	uxth	r3, r3
 801231c:	461a      	mov	r2, r3
 801231e:	69fb      	ldr	r3, [r7, #28]
 8012320:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8012324:	69fb      	ldr	r3, [r7, #28]
 8012326:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 801232a:	2b00      	cmp	r3, #0
 801232c:	d12e      	bne.n	801238c <DFU_Upload+0xe0>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012334:	2b03      	cmp	r3, #3
 8012336:	d901      	bls.n	801233c <DFU_Upload+0x90>
 8012338:	2202      	movs	r2, #2
 801233a:	e000      	b.n	801233e <DFU_Upload+0x92>
 801233c:	2209      	movs	r2, #9
 801233e:	69fb      	ldr	r3, [r7, #28]
 8012340:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	2200      	movs	r2, #0
 8012348:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	2200      	movs	r2, #0
 8012350:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	2200      	movs	r2, #0
 8012358:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 801235c:	69fb      	ldr	r3, [r7, #28]
 801235e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012362:	69fb      	ldr	r3, [r7, #28]
 8012364:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2200      	movs	r2, #0
 801236c:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 801236e:	69fb      	ldr	r3, [r7, #28]
 8012370:	2221      	movs	r2, #33	@ 0x21
 8012372:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	2241      	movs	r2, #65	@ 0x41
 8012378:	709a      	strb	r2, [r3, #2]

        CmdLength = 3U;
 801237a:	2303      	movs	r3, #3
 801237c:	60fb      	str	r3, [r7, #12]
          CmdLength += MIN(VendorCmdLength, DFU_VENDOR_CMD_MAX);
        }
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), CmdLength);
 801237e:	69fb      	ldr	r3, [r7, #28]
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	4619      	mov	r1, r3
 8012384:	6878      	ldr	r0, [r7, #4]
 8012386:	f001 fce5 	bl	8013d54 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 801238a:	e094      	b.n	80124b6 <DFU_Upload+0x20a>
      }
      else if (hdfu->wblock_num > 1U)
 801238c:	69fb      	ldr	r3, [r7, #28]
 801238e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012392:	2b01      	cmp	r3, #1
 8012394:	d94f      	bls.n	8012436 <DFU_Upload+0x18a>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	2209      	movs	r2, #9
 801239a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	2200      	movs	r2, #0
 80123a2:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80123a6:	69fb      	ldr	r3, [r7, #28]
 80123a8:	2200      	movs	r2, #0
 80123aa:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80123ae:	69fb      	ldr	r3, [r7, #28]
 80123b0:	2200      	movs	r2, #0
 80123b2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80123b6:	69fb      	ldr	r3, [r7, #28]
 80123b8:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        }

        if (VendorStatus == IS_DFU_PHY_ADDRESS)
#endif /* USBD_DFU_VENDOR_CMD_ENABLED */
        {
          addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80123c8:	3b02      	subs	r3, #2
 80123ca:	029a      	lsls	r2, r3, #10
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80123d2:	4413      	add	r3, r2
 80123d4:	617b      	str	r3, [r7, #20]

          /* Return the physical address where data are stored */
          phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80123d6:	69bb      	ldr	r3, [r7, #24]
 80123d8:	695b      	ldr	r3, [r3, #20]
 80123da:	6978      	ldr	r0, [r7, #20]
 80123dc:	69f9      	ldr	r1, [r7, #28]
 80123de:	69fa      	ldr	r2, [r7, #28]
 80123e0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404
 80123e4:	4798      	blx	r3
 80123e6:	6138      	str	r0, [r7, #16]

          if (phaddr == NULL)
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d11a      	bne.n	8012424 <DFU_Upload+0x178>
          {
            hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80123ee:	69fb      	ldr	r3, [r7, #28]
 80123f0:	220f      	movs	r2, #15
 80123f2:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

            hdfu->dev_status[1] = 0U;
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
            hdfu->dev_status[2] = 0U;
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	2200      	movs	r2, #0
 8012402:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
            hdfu->dev_status[3] = 0U;
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	2200      	movs	r2, #0
 801240a:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
            hdfu->dev_status[4] = hdfu->dev_state;
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012414:	69fb      	ldr	r3, [r7, #28]
 8012416:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

            /* Call the error management function (command will be NAKed) */
            USBD_CtlError(pdev, req);
 801241a:	6839      	ldr	r1, [r7, #0]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f001 fc1c 	bl	8013c5a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8012422:	e048      	b.n	80124b6 <DFU_Upload+0x20a>
          }
          else
          {
            /* Send the status data over EP0 */
            (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8012424:	69fb      	ldr	r3, [r7, #28]
 8012426:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 801242a:	461a      	mov	r2, r3
 801242c:	6939      	ldr	r1, [r7, #16]
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f001 fc90 	bl	8013d54 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8012434:	e03f      	b.n	80124b6 <DFU_Upload+0x20a>
          }
        }
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	220f      	movs	r2, #15
 801243a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

        hdfu->dev_status[1] = 0U;
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	2200      	movs	r2, #0
 8012442:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	2200      	movs	r2, #0
 801244a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 801244e:	69fb      	ldr	r3, [r7, #28]
 8012450:	2200      	movs	r2, #0
 8012452:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8012456:	69fb      	ldr	r3, [r7, #28]
 8012458:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801245c:	69fb      	ldr	r3, [r7, #28]
 801245e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

        /* Call the error management function (command will be NAKed) */
        USBD_CtlError(pdev, req);
 8012462:	6839      	ldr	r1, [r7, #0]
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f001 fbf8 	bl	8013c5a <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 801246a:	e024      	b.n	80124b6 <DFU_Upload+0x20a>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2200      	movs	r2, #0
 8012470:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
      hdfu->wblock_num = 0U;
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	2200      	movs	r2, #0
 8012478:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

      /* Call the error management function (command will be NAKed) */
      USBD_CtlError(pdev, req);
 801247c:	6839      	ldr	r1, [r7, #0]
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f001 fbeb 	bl	8013c5a <USBD_CtlError>
 8012484:	e017      	b.n	80124b6 <DFU_Upload+0x20a>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8012486:	69fb      	ldr	r3, [r7, #28]
 8012488:	2202      	movs	r2, #2
 801248a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	2200      	movs	r2, #0
 8012492:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	2200      	movs	r2, #0
 801249a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	2200      	movs	r2, #0
 80124a2:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 80124b2:	e000      	b.n	80124b6 <DFU_Upload+0x20a>
    return;
 80124b4:	bf00      	nop
  }
}
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b086      	sub	sp, #24
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	32b0      	adds	r2, #176	@ 0xb0
 80124ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124d2:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	33b0      	adds	r3, #176	@ 0xb0
 80124de:	009b      	lsls	r3, r3, #2
 80124e0:	4413      	add	r3, r2
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 80124ec:	4618      	mov	r0, r3
 80124ee:	f000 f9df 	bl	80128b0 <USBD_DFU_GetDfuFuncDesc>
 80124f2:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	f000 80a8 	beq.w	801264c <DFU_GetStatus+0x190>
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f000 80a4 	beq.w	801264c <DFU_GetStatus+0x190>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f000 80a0 	beq.w	801264c <DFU_GetStatus+0x190>
  {
    return;
  }

  switch (hdfu->dev_state)
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012512:	2b03      	cmp	r3, #3
 8012514:	d002      	beq.n	801251c <DFU_GetStatus+0x60>
 8012516:	2b06      	cmp	r3, #6
 8012518:	d051      	beq.n	80125be <DFU_GetStatus+0x102>
        }
      }
      break;

    default:
      break;
 801251a:	e08e      	b.n	801263a <DFU_GetStatus+0x17e>
      if (hdfu->wlength != 0U)
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8012522:	2b00      	cmp	r3, #0
 8012524:	d034      	beq.n	8012590 <DFU_GetStatus+0xd4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	2204      	movs	r2, #4
 801252a:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 801252e:	697b      	ldr	r3, [r7, #20]
 8012530:	2200      	movs	r2, #0
 8012532:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	2200      	movs	r2, #0
 801253a:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 801253e:	697b      	ldr	r3, [r7, #20]
 8012540:	2200      	movs	r2, #0
 8012542:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 8012546:	697b      	ldr	r3, [r7, #20]
 8012548:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 8012558:	2b00      	cmp	r3, #0
 801255a:	d10e      	bne.n	801257a <DFU_GetStatus+0xbe>
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	2b41      	cmp	r3, #65	@ 0x41
 8012562:	d10a      	bne.n	801257a <DFU_GetStatus+0xbe>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	699b      	ldr	r3, [r3, #24]
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 801256e:	697a      	ldr	r2, [r7, #20]
 8012570:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 8012574:	2100      	movs	r1, #0
 8012576:	4798      	blx	r3
      break;
 8012578:	e05f      	b.n	801263a <DFU_GetStatus+0x17e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	699b      	ldr	r3, [r3, #24]
 801257e:	697a      	ldr	r2, [r7, #20]
 8012580:	f8d2 0408 	ldr.w	r0, [r2, #1032]	@ 0x408
 8012584:	697a      	ldr	r2, [r7, #20]
 8012586:	f202 4214 	addw	r2, r2, #1044	@ 0x414
 801258a:	2101      	movs	r1, #1
 801258c:	4798      	blx	r3
      break;
 801258e:	e054      	b.n	801263a <DFU_GetStatus+0x17e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	2205      	movs	r2, #5
 8012594:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 0U;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	2200      	movs	r2, #0
 801259c:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2200      	movs	r2, #0
 80125a4:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	2200      	movs	r2, #0
 80125ac:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 80125bc:	e03d      	b.n	801263a <DFU_GetStatus+0x17e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80125c4:	2b01      	cmp	r3, #1
 80125c6:	d116      	bne.n	80125f6 <DFU_GetStatus+0x13a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	2207      	movs	r2, #7
 80125cc:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
        hdfu->dev_status[1] = 1U;             /* bwPollTimeout = 1ms */
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	2201      	movs	r2, #1
 80125d4:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
        hdfu->dev_status[2] = 0U;
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2200      	movs	r2, #0
 80125dc:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
        hdfu->dev_status[3] = 0U;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	2200      	movs	r2, #0
 80125e4:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
        hdfu->dev_status[4] = hdfu->dev_state;
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 80125f4:	e020      	b.n	8012638 <DFU_GetStatus+0x17c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 80125f6:	697b      	ldr	r3, [r7, #20]
 80125f8:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d11b      	bne.n	8012638 <DFU_GetStatus+0x17c>
            ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U))
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	789b      	ldrb	r3, [r3, #2]
 8012604:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8012608:	2b00      	cmp	r3, #0
 801260a:	d015      	beq.n	8012638 <DFU_GetStatus+0x17c>
          hdfu->dev_state = DFU_STATE_IDLE;
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	2202      	movs	r2, #2
 8012610:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
          hdfu->dev_status[1] = 0U;
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
          hdfu->dev_status[2] = 0U;
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	2200      	movs	r2, #0
 8012620:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
          hdfu->dev_status[3] = 0U;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	2200      	movs	r2, #0
 8012628:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
          hdfu->dev_status[4] = hdfu->dev_state;
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
      break;
 8012638:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	f203 4314 	addw	r3, r3, #1044	@ 0x414
 8012640:	2206      	movs	r2, #6
 8012642:	4619      	mov	r1, r3
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f001 fb85 	bl	8013d54 <USBD_CtlSendData>
 801264a:	e000      	b.n	801264e <DFU_GetStatus+0x192>
    return;
 801264c:	bf00      	nop
}
 801264e:	3718      	adds	r7, #24
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	32b0      	adds	r2, #176	@ 0xb0
 8012666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801266a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d042      	beq.n	80126f8 <DFU_ClearStatus+0xa4>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012678:	2b0a      	cmp	r3, #10
 801267a:	d11e      	bne.n	80126ba <DFU_ClearStatus+0x66>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	2202      	movs	r2, #2
 8012680:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2200      	movs	r2, #0
 8012690:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	2200      	movs	r2, #0
 8012698:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2200      	movs	r2, #0
 80126a0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 80126b8:	e01f      	b.n	80126fa <DFU_ClearStatus+0xa6>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	220a      	movs	r2, #10
 80126be:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	220e      	movs	r2, #14
 80126c6:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2200      	movs	r2, #0
 80126ce:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	2200      	movs	r2, #0
 80126d6:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 80126f6:	e000      	b.n	80126fa <DFU_ClearStatus+0xa6>
    return;
 80126f8:	bf00      	nop
  }
}
 80126fa:	3714      	adds	r7, #20
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr

08012704 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	32b0      	adds	r2, #176	@ 0xb0
 8012716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801271a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d008      	beq.n	8012734 <DFU_GetState+0x30>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8012728:	2201      	movs	r2, #1
 801272a:	4619      	mov	r1, r3
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f001 fb11 	bl	8013d54 <USBD_CtlSendData>
 8012732:	e000      	b.n	8012736 <DFU_GetState+0x32>
    return;
 8012734:	bf00      	nop
}
 8012736:	3710      	adds	r7, #16
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}

0801273c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	32b0      	adds	r2, #176	@ 0xb0
 801274e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012752:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d03f      	beq.n	80127da <DFU_Abort+0x9e>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8012760:	2b02      	cmp	r3, #2
 8012762:	d013      	beq.n	801278c <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 801276a:	2b03      	cmp	r3, #3
 801276c:	d00e      	beq.n	801278c <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8012774:	2b05      	cmp	r3, #5
 8012776:	d009      	beq.n	801278c <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 801277e:	2b06      	cmp	r3, #6
 8012780:	d004      	beq.n	801278c <DFU_Abort+0x50>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8012788:	2b09      	cmp	r3, #9
 801278a:	d127      	bne.n	80127dc <DFU_Abort+0xa0>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2202      	movs	r2, #2
 8012790:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	2200      	movs	r2, #0
 8012798:	f883 2414 	strb.w	r2, [r3, #1044]	@ 0x414
    hdfu->dev_status[1] = 0U;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    hdfu->dev_status[5] = 0U; /* iString */
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	2200      	movs	r2, #0
 80127c4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    hdfu->wblock_num = 0U;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
    hdfu->wlength = 0U;
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2200      	movs	r2, #0
 80127d4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80127d8:	e000      	b.n	80127dc <DFU_Abort+0xa0>
    return;
 80127da:	bf00      	nop
  }
}
 80127dc:	3714      	adds	r7, #20
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80127e6:	b580      	push	{r7, lr}
 80127e8:	b086      	sub	sp, #24
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	32b0      	adds	r2, #176	@ 0xb0
 80127f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127fc:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData[pdev->classId];
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	33b0      	adds	r3, #176	@ 0xb0
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	613b      	str	r3, [r7, #16]
  USBD_DFUFuncDescTypeDef *pDfuFunc = (USBD_DFUFuncDescTypeDef *)USBD_DFU_GetDfuFuncDesc(pdev->pConfDesc);
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8012816:	4618      	mov	r0, r3
 8012818:	f000 f84a 	bl	80128b0 <USBD_DFU_GetDfuFuncDesc>
 801281c:	60f8      	str	r0, [r7, #12]

  if ((hdfu == NULL) || (DfuInterface == NULL) || (pDfuFunc == NULL))
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d041      	beq.n	80128a8 <DFU_Leave+0xc2>
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d03e      	beq.n	80128a8 <DFU_Leave+0xc2>
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d03b      	beq.n	80128a8 <DFU_Leave+0xc2>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	2200      	movs	r2, #0
 8012834:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d

  if ((pDfuFunc->bmAttributes & DFU_MANIFEST_MASK) != 0U)
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	789b      	ldrb	r3, [r3, #2]
 801283c:	f003 0304 	and.w	r3, r3, #4
 8012840:	2b00      	cmp	r3, #0
 8012842:	d016      	beq.n	8012872 <DFU_Leave+0x8c>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2206      	movs	r2, #6
 8012848:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	2200      	movs	r2, #0
 8012850:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	2200      	movs	r2, #0
 8012858:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	2200      	movs	r2, #0
 8012860:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    return;
 8012870:	e01b      	b.n	80128aa <DFU_Leave+0xc4>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2208      	movs	r2, #8
 8012876:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c

    hdfu->dev_status[1] = 0U;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2200      	movs	r2, #0
 801287e:	f883 2415 	strb.w	r2, [r3, #1045]	@ 0x415
    hdfu->dev_status[2] = 0U;
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	2200      	movs	r2, #0
 8012886:	f883 2416 	strb.w	r2, [r3, #1046]	@ 0x416
    hdfu->dev_status[3] = 0U;
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	2200      	movs	r2, #0
 801288e:	f883 2417 	strb.w	r2, [r3, #1047]	@ 0x417
    hdfu->dev_status[4] = hdfu->dev_state;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 f8a6 	bl	80129f0 <USBD_Stop>
#if (USBD_DFU_VENDOR_EXIT_ENABLED == 1U)
    /* Jump should be ensured by user application */
    DfuInterface->LeaveDFU(hdfu->data_ptr);
#else
    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80128a4:	f7ff f8ba 	bl	8011a1c <__NVIC_SystemReset>
    return;
 80128a8:	bf00      	nop
#endif /* USBD_DFU_VENDOR_EXIT_ENABLED */

    /* The next instructions will not be reached (system reset) */
  }
}
 80128aa:	3718      	adds	r7, #24
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <USBD_DFU_GetDfuFuncDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the DFU descriptor
  */
static void *USBD_DFU_GetDfuFuncDesc(uint8_t *pConfDesc)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b086      	sub	sp, #24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	617b      	str	r3, [r7, #20]
  uint8_t *pDfuDesc = NULL;
 80128c0:	2300      	movs	r3, #0
 80128c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	885b      	ldrh	r3, [r3, #2]
 80128c8:	b29b      	uxth	r3, r3
 80128ca:	68fa      	ldr	r2, [r7, #12]
 80128cc:	7812      	ldrb	r2, [r2, #0]
 80128ce:	4293      	cmp	r3, r2
 80128d0:	d917      	bls.n	8012902 <USBD_DFU_GetDfuFuncDesc+0x52>
  {
    ptr = desc->bLength;
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	781b      	ldrb	r3, [r3, #0]
 80128d6:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80128d8:	e00d      	b.n	80128f6 <USBD_DFU_GetDfuFuncDesc+0x46>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80128da:	f107 030a 	add.w	r3, r7, #10
 80128de:	4619      	mov	r1, r3
 80128e0:	6978      	ldr	r0, [r7, #20]
 80128e2:	f000 fb6b 	bl	8012fbc <USBD_GetNextDesc>
 80128e6:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == DFU_DESCRIPTOR_TYPE)
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	785b      	ldrb	r3, [r3, #1]
 80128ec:	2b21      	cmp	r3, #33	@ 0x21
 80128ee:	d102      	bne.n	80128f6 <USBD_DFU_GetDfuFuncDesc+0x46>
      {
        pDfuDesc = (uint8_t *)pdesc;
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	613b      	str	r3, [r7, #16]
        break;
 80128f4:	e005      	b.n	8012902 <USBD_DFU_GetDfuFuncDesc+0x52>
    while (ptr < desc->wTotalLength)
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	885b      	ldrh	r3, [r3, #2]
 80128fa:	b29a      	uxth	r2, r3
 80128fc:	897b      	ldrh	r3, [r7, #10]
 80128fe:	429a      	cmp	r2, r3
 8012900:	d8eb      	bhi.n	80128da <USBD_DFU_GetDfuFuncDesc+0x2a>
      }
    }
  }
  return pDfuDesc;
 8012902:	693b      	ldr	r3, [r7, #16]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3718      	adds	r7, #24
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	4613      	mov	r3, r2
 8012918:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d101      	bne.n	8012924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012920:	2303      	movs	r3, #3
 8012922:	e01f      	b.n	8012964 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	2200      	movs	r2, #0
 8012928:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2200      	movs	r2, #0
 8012930:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2200      	movs	r2, #0
 8012938:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d003      	beq.n	801294a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	68ba      	ldr	r2, [r7, #8]
 8012946:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2201      	movs	r2, #1
 801294e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	79fa      	ldrb	r2, [r7, #7]
 8012956:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f005 fff3 	bl	8018944 <USBD_LL_Init>
 801295e:	4603      	mov	r3, r0
 8012960:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012962:	7dfb      	ldrb	r3, [r7, #23]
}
 8012964:	4618      	mov	r0, r3
 8012966:	3718      	adds	r7, #24
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}

0801296c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b084      	sub	sp, #16
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012976:	2300      	movs	r3, #0
 8012978:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d101      	bne.n	8012984 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012980:	2303      	movs	r3, #3
 8012982:	e025      	b.n	80129d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	683a      	ldr	r2, [r7, #0]
 8012988:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	32ae      	adds	r2, #174	@ 0xae
 8012996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801299a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801299c:	2b00      	cmp	r3, #0
 801299e:	d00f      	beq.n	80129c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	32ae      	adds	r2, #174	@ 0xae
 80129aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129b0:	f107 020e 	add.w	r2, r7, #14
 80129b4:	4610      	mov	r0, r2
 80129b6:	4798      	blx	r3
 80129b8:	4602      	mov	r2, r0
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80129c6:	1c5a      	adds	r2, r3, #1
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f005 fff7 	bl	80189d4 <USBD_LL_Start>
 80129e6:	4603      	mov	r3, r0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3708      	adds	r7, #8
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f006 f806 	bl	8018a0a <USBD_LL_Stop>
  }

  /* Reset the class ID */
  pdev->classId = 0U;
#else
  if (pdev->pClass[0] != NULL)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d009      	beq.n	8012a1c <USBD_Stop+0x2c>
  {
    (void)pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	6852      	ldr	r2, [r2, #4]
 8012a14:	b2d2      	uxtb	r2, r2
 8012a16:	4611      	mov	r1, r2
 8012a18:	6878      	ldr	r0, [r7, #4]
 8012a1a:	4798      	blx	r3
  }
#endif /* USE_USBD_COMPOSITE */

  return USBD_OK;
 8012a1c:	2300      	movs	r3, #0
}
 8012a1e:	4618      	mov	r0, r3
 8012a20:	3708      	adds	r7, #8
 8012a22:	46bd      	mov	sp, r7
 8012a24:	bd80      	pop	{r7, pc}

08012a26 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012a26:	b480      	push	{r7}
 8012a28:	b083      	sub	sp, #12
 8012a2a:	af00      	add	r7, sp, #0
 8012a2c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012a2e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
 8012a44:	460b      	mov	r3, r1
 8012a46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a48:	2300      	movs	r3, #0
 8012a4a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d009      	beq.n	8012a6a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	78fa      	ldrb	r2, [r7, #3]
 8012a60:	4611      	mov	r1, r2
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	4798      	blx	r3
 8012a66:	4603      	mov	r3, r0
 8012a68:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3710      	adds	r7, #16
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}

08012a74 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b084      	sub	sp, #16
 8012a78:	af00      	add	r7, sp, #0
 8012a7a:	6078      	str	r0, [r7, #4]
 8012a7c:	460b      	mov	r3, r1
 8012a7e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a80:	2300      	movs	r3, #0
 8012a82:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	78fa      	ldrb	r2, [r7, #3]
 8012a8e:	4611      	mov	r1, r2
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	4798      	blx	r3
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012a9a:	2303      	movs	r3, #3
 8012a9c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3710      	adds	r7, #16
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b084      	sub	sp, #16
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ab8:	6839      	ldr	r1, [r7, #0]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f001 f893 	bl	8013be6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012ace:	461a      	mov	r2, r3
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012adc:	f003 031f 	and.w	r3, r3, #31
 8012ae0:	2b02      	cmp	r3, #2
 8012ae2:	d01a      	beq.n	8012b1a <USBD_LL_SetupStage+0x72>
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	d822      	bhi.n	8012b2e <USBD_LL_SetupStage+0x86>
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <USBD_LL_SetupStage+0x4a>
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d00a      	beq.n	8012b06 <USBD_LL_SetupStage+0x5e>
 8012af0:	e01d      	b.n	8012b2e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012af8:	4619      	mov	r1, r3
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f000 fa9a 	bl	8013034 <USBD_StdDevReq>
 8012b00:	4603      	mov	r3, r0
 8012b02:	73fb      	strb	r3, [r7, #15]
      break;
 8012b04:	e020      	b.n	8012b48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f000 fb02 	bl	8013118 <USBD_StdItfReq>
 8012b14:	4603      	mov	r3, r0
 8012b16:	73fb      	strb	r3, [r7, #15]
      break;
 8012b18:	e016      	b.n	8012b48 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b20:	4619      	mov	r1, r3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fb64 	bl	80131f0 <USBD_StdEPReq>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8012b2c:	e00c      	b.n	8012b48 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b34:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f005 ffa5 	bl	8018a8c <USBD_LL_StallEP>
 8012b42:	4603      	mov	r3, r0
 8012b44:	73fb      	strb	r3, [r7, #15]
      break;
 8012b46:	bf00      	nop
  }

  return ret;
 8012b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b086      	sub	sp, #24
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	60f8      	str	r0, [r7, #12]
 8012b5a:	460b      	mov	r3, r1
 8012b5c:	607a      	str	r2, [r7, #4]
 8012b5e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012b60:	2300      	movs	r3, #0
 8012b62:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012b64:	7afb      	ldrb	r3, [r7, #11]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d16e      	bne.n	8012c48 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012b70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b78:	2b03      	cmp	r3, #3
 8012b7a:	f040 8098 	bne.w	8012cae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	689a      	ldr	r2, [r3, #8]
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d913      	bls.n	8012bb2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	689a      	ldr	r2, [r3, #8]
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	1ad2      	subs	r2, r2, r3
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	68da      	ldr	r2, [r3, #12]
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	689b      	ldr	r3, [r3, #8]
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	bf28      	it	cs
 8012ba4:	4613      	movcs	r3, r2
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	6879      	ldr	r1, [r7, #4]
 8012baa:	68f8      	ldr	r0, [r7, #12]
 8012bac:	f001 f91b 	bl	8013de6 <USBD_CtlContinueRx>
 8012bb0:	e07d      	b.n	8012cae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012bb8:	f003 031f 	and.w	r3, r3, #31
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d014      	beq.n	8012bea <USBD_LL_DataOutStage+0x98>
 8012bc0:	2b02      	cmp	r3, #2
 8012bc2:	d81d      	bhi.n	8012c00 <USBD_LL_DataOutStage+0xae>
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d002      	beq.n	8012bce <USBD_LL_DataOutStage+0x7c>
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d003      	beq.n	8012bd4 <USBD_LL_DataOutStage+0x82>
 8012bcc:	e018      	b.n	8012c00 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	75bb      	strb	r3, [r7, #22]
            break;
 8012bd2:	e018      	b.n	8012c06 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012bda:	b2db      	uxtb	r3, r3
 8012bdc:	4619      	mov	r1, r3
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f000 f9d2 	bl	8012f88 <USBD_CoreFindIF>
 8012be4:	4603      	mov	r3, r0
 8012be6:	75bb      	strb	r3, [r7, #22]
            break;
 8012be8:	e00d      	b.n	8012c06 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	4619      	mov	r1, r3
 8012bf4:	68f8      	ldr	r0, [r7, #12]
 8012bf6:	f000 f9d4 	bl	8012fa2 <USBD_CoreFindEP>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	75bb      	strb	r3, [r7, #22]
            break;
 8012bfe:	e002      	b.n	8012c06 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012c00:	2300      	movs	r3, #0
 8012c02:	75bb      	strb	r3, [r7, #22]
            break;
 8012c04:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012c06:	7dbb      	ldrb	r3, [r7, #22]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d119      	bne.n	8012c40 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	2b03      	cmp	r3, #3
 8012c16:	d113      	bne.n	8012c40 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012c18:	7dba      	ldrb	r2, [r7, #22]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	32ae      	adds	r2, #174	@ 0xae
 8012c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c22:	691b      	ldr	r3, [r3, #16]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00b      	beq.n	8012c40 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012c28:	7dba      	ldrb	r2, [r7, #22]
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012c30:	7dba      	ldrb	r2, [r7, #22]
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	32ae      	adds	r2, #174	@ 0xae
 8012c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c3a:	691b      	ldr	r3, [r3, #16]
 8012c3c:	68f8      	ldr	r0, [r7, #12]
 8012c3e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	f001 f8e1 	bl	8013e08 <USBD_CtlSendStatus>
 8012c46:	e032      	b.n	8012cae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012c48:	7afb      	ldrb	r3, [r7, #11]
 8012c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c4e:	b2db      	uxtb	r3, r3
 8012c50:	4619      	mov	r1, r3
 8012c52:	68f8      	ldr	r0, [r7, #12]
 8012c54:	f000 f9a5 	bl	8012fa2 <USBD_CoreFindEP>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012c5c:	7dbb      	ldrb	r3, [r7, #22]
 8012c5e:	2bff      	cmp	r3, #255	@ 0xff
 8012c60:	d025      	beq.n	8012cae <USBD_LL_DataOutStage+0x15c>
 8012c62:	7dbb      	ldrb	r3, [r7, #22]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d122      	bne.n	8012cae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c6e:	b2db      	uxtb	r3, r3
 8012c70:	2b03      	cmp	r3, #3
 8012c72:	d117      	bne.n	8012ca4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012c74:	7dba      	ldrb	r2, [r7, #22]
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	32ae      	adds	r2, #174	@ 0xae
 8012c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c7e:	699b      	ldr	r3, [r3, #24]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00f      	beq.n	8012ca4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012c84:	7dba      	ldrb	r2, [r7, #22]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012c8c:	7dba      	ldrb	r2, [r7, #22]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	32ae      	adds	r2, #174	@ 0xae
 8012c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c96:	699b      	ldr	r3, [r3, #24]
 8012c98:	7afa      	ldrb	r2, [r7, #11]
 8012c9a:	4611      	mov	r1, r2
 8012c9c:	68f8      	ldr	r0, [r7, #12]
 8012c9e:	4798      	blx	r3
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012ca4:	7dfb      	ldrb	r3, [r7, #23]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d001      	beq.n	8012cae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012caa:	7dfb      	ldrb	r3, [r7, #23]
 8012cac:	e000      	b.n	8012cb0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012cae:	2300      	movs	r3, #0
}
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	3718      	adds	r7, #24
 8012cb4:	46bd      	mov	sp, r7
 8012cb6:	bd80      	pop	{r7, pc}

08012cb8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b086      	sub	sp, #24
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	60f8      	str	r0, [r7, #12]
 8012cc0:	460b      	mov	r3, r1
 8012cc2:	607a      	str	r2, [r7, #4]
 8012cc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012cc6:	7afb      	ldrb	r3, [r7, #11]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d16f      	bne.n	8012dac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	3314      	adds	r3, #20
 8012cd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	d15a      	bne.n	8012d92 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	689a      	ldr	r2, [r3, #8]
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	68db      	ldr	r3, [r3, #12]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d914      	bls.n	8012d12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	689a      	ldr	r2, [r3, #8]
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	1ad2      	subs	r2, r2, r3
 8012cf2:	693b      	ldr	r3, [r7, #16]
 8012cf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	6879      	ldr	r1, [r7, #4]
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	f001 f843 	bl	8013d8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d04:	2300      	movs	r3, #0
 8012d06:	2200      	movs	r2, #0
 8012d08:	2100      	movs	r1, #0
 8012d0a:	68f8      	ldr	r0, [r7, #12]
 8012d0c:	f005 ff68 	bl	8018be0 <USBD_LL_PrepareReceive>
 8012d10:	e03f      	b.n	8012d92 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012d12:	693b      	ldr	r3, [r7, #16]
 8012d14:	68da      	ldr	r2, [r3, #12]
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d11c      	bne.n	8012d58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	685a      	ldr	r2, [r3, #4]
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d316      	bcc.n	8012d58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	685a      	ldr	r2, [r3, #4]
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d20f      	bcs.n	8012d58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012d38:	2200      	movs	r2, #0
 8012d3a:	2100      	movs	r1, #0
 8012d3c:	68f8      	ldr	r0, [r7, #12]
 8012d3e:	f001 f824 	bl	8013d8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	2200      	movs	r2, #0
 8012d46:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	2100      	movs	r1, #0
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f005 ff45 	bl	8018be0 <USBD_LL_PrepareReceive>
 8012d56:	e01c      	b.n	8012d92 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	2b03      	cmp	r3, #3
 8012d62:	d10f      	bne.n	8012d84 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d6a:	68db      	ldr	r3, [r3, #12]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d009      	beq.n	8012d84 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2200      	movs	r2, #0
 8012d74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	68f8      	ldr	r0, [r7, #12]
 8012d82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d84:	2180      	movs	r1, #128	@ 0x80
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f005 fe80 	bl	8018a8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012d8c:	68f8      	ldr	r0, [r7, #12]
 8012d8e:	f001 f84e 	bl	8013e2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d03a      	beq.n	8012e12 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012d9c:	68f8      	ldr	r0, [r7, #12]
 8012d9e:	f7ff fe42 	bl	8012a26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2200      	movs	r2, #0
 8012da6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012daa:	e032      	b.n	8012e12 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012dac:	7afb      	ldrb	r3, [r7, #11]
 8012dae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012db2:	b2db      	uxtb	r3, r3
 8012db4:	4619      	mov	r1, r3
 8012db6:	68f8      	ldr	r0, [r7, #12]
 8012db8:	f000 f8f3 	bl	8012fa2 <USBD_CoreFindEP>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012dc0:	7dfb      	ldrb	r3, [r7, #23]
 8012dc2:	2bff      	cmp	r3, #255	@ 0xff
 8012dc4:	d025      	beq.n	8012e12 <USBD_LL_DataInStage+0x15a>
 8012dc6:	7dfb      	ldrb	r3, [r7, #23]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d122      	bne.n	8012e12 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	2b03      	cmp	r3, #3
 8012dd6:	d11c      	bne.n	8012e12 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012dd8:	7dfa      	ldrb	r2, [r7, #23]
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	32ae      	adds	r2, #174	@ 0xae
 8012dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012de2:	695b      	ldr	r3, [r3, #20]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d014      	beq.n	8012e12 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012de8:	7dfa      	ldrb	r2, [r7, #23]
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012df0:	7dfa      	ldrb	r2, [r7, #23]
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	32ae      	adds	r2, #174	@ 0xae
 8012df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dfa:	695b      	ldr	r3, [r3, #20]
 8012dfc:	7afa      	ldrb	r2, [r7, #11]
 8012dfe:	4611      	mov	r1, r2
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	4798      	blx	r3
 8012e04:	4603      	mov	r3, r0
 8012e06:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012e08:	7dbb      	ldrb	r3, [r7, #22]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d001      	beq.n	8012e12 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012e0e:	7dbb      	ldrb	r3, [r7, #22]
 8012e10:	e000      	b.n	8012e14 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012e12:	2300      	movs	r3, #0
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3718      	adds	r7, #24
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	bd80      	pop	{r7, pc}

08012e1c <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b084      	sub	sp, #16
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e24:	2300      	movs	r3, #0
 8012e26:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2200      	movs	r2, #0
 8012e34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	2200      	movs	r2, #0
 8012e42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2200      	movs	r2, #0
 8012e4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d014      	beq.n	8012e82 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d00e      	beq.n	8012e82 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	6852      	ldr	r2, [r2, #4]
 8012e70:	b2d2      	uxtb	r2, r2
 8012e72:	4611      	mov	r1, r2
 8012e74:	6878      	ldr	r0, [r7, #4]
 8012e76:	4798      	blx	r3
 8012e78:	4603      	mov	r3, r0
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d001      	beq.n	8012e82 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012e7e:	2303      	movs	r3, #3
 8012e80:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012e82:	2340      	movs	r3, #64	@ 0x40
 8012e84:	2200      	movs	r2, #0
 8012e86:	2100      	movs	r1, #0
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f005 fdd9 	bl	8018a40 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2201      	movs	r2, #1
 8012e92:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2240      	movs	r2, #64	@ 0x40
 8012e9a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012e9e:	2340      	movs	r3, #64	@ 0x40
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	2180      	movs	r1, #128	@ 0x80
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f005 fdcb 	bl	8018a40 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2201      	movs	r2, #1
 8012eae:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2240      	movs	r2, #64	@ 0x40
 8012eb4:	621a      	str	r2, [r3, #32]

  return ret;
 8012eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}

08012ec0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b083      	sub	sp, #12
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	78fa      	ldrb	r2, [r7, #3]
 8012ed0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	370c      	adds	r7, #12
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b083      	sub	sp, #12
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012eee:	b2db      	uxtb	r3, r3
 8012ef0:	2b04      	cmp	r3, #4
 8012ef2:	d006      	beq.n	8012f02 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2204      	movs	r2, #4
 8012f06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012f0a:	2300      	movs	r3, #0
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	370c      	adds	r7, #12
 8012f10:	46bd      	mov	sp, r7
 8012f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f16:	4770      	bx	lr

08012f18 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b083      	sub	sp, #12
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	2b04      	cmp	r3, #4
 8012f2a:	d106      	bne.n	8012f3a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012f32:	b2da      	uxtb	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012f3a:	2300      	movs	r3, #0
}
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	370c      	adds	r7, #12
 8012f40:	46bd      	mov	sp, r7
 8012f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f46:	4770      	bx	lr

08012f48 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b03      	cmp	r3, #3
 8012f5a:	d110      	bne.n	8012f7e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00b      	beq.n	8012f7e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f6c:	69db      	ldr	r3, [r3, #28]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d005      	beq.n	8012f7e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f78:	69db      	ldr	r3, [r3, #28]
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3708      	adds	r7, #8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	460b      	mov	r3, r1
 8012f92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012f94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr

08012fa2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012fa2:	b480      	push	{r7}
 8012fa4:	b083      	sub	sp, #12
 8012fa6:	af00      	add	r7, sp, #0
 8012fa8:	6078      	str	r0, [r7, #4]
 8012faa:	460b      	mov	r3, r1
 8012fac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012fae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b085      	sub	sp, #20
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	881b      	ldrh	r3, [r3, #0]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	7812      	ldrb	r2, [r2, #0]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	b29a      	uxth	r2, r3
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	781b      	ldrb	r3, [r3, #0]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012fe6:	68fb      	ldr	r3, [r7, #12]
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	3714      	adds	r7, #20
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b087      	sub	sp, #28
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	3301      	adds	r3, #1
 801300a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013012:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8013016:	021b      	lsls	r3, r3, #8
 8013018:	b21a      	sxth	r2, r3
 801301a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801301e:	4313      	orrs	r3, r2
 8013020:	b21b      	sxth	r3, r3
 8013022:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013024:	89fb      	ldrh	r3, [r7, #14]
}
 8013026:	4618      	mov	r0, r3
 8013028:	371c      	adds	r7, #28
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
	...

08013034 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013034:	b580      	push	{r7, lr}
 8013036:	b084      	sub	sp, #16
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801303e:	2300      	movs	r3, #0
 8013040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801304a:	2b40      	cmp	r3, #64	@ 0x40
 801304c:	d005      	beq.n	801305a <USBD_StdDevReq+0x26>
 801304e:	2b40      	cmp	r3, #64	@ 0x40
 8013050:	d857      	bhi.n	8013102 <USBD_StdDevReq+0xce>
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00f      	beq.n	8013076 <USBD_StdDevReq+0x42>
 8013056:	2b20      	cmp	r3, #32
 8013058:	d153      	bne.n	8013102 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	32ae      	adds	r2, #174	@ 0xae
 8013064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013068:	689b      	ldr	r3, [r3, #8]
 801306a:	6839      	ldr	r1, [r7, #0]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	4798      	blx	r3
 8013070:	4603      	mov	r3, r0
 8013072:	73fb      	strb	r3, [r7, #15]
      break;
 8013074:	e04a      	b.n	801310c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	785b      	ldrb	r3, [r3, #1]
 801307a:	2b09      	cmp	r3, #9
 801307c:	d83b      	bhi.n	80130f6 <USBD_StdDevReq+0xc2>
 801307e:	a201      	add	r2, pc, #4	@ (adr r2, 8013084 <USBD_StdDevReq+0x50>)
 8013080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013084:	080130d9 	.word	0x080130d9
 8013088:	080130ed 	.word	0x080130ed
 801308c:	080130f7 	.word	0x080130f7
 8013090:	080130e3 	.word	0x080130e3
 8013094:	080130f7 	.word	0x080130f7
 8013098:	080130b7 	.word	0x080130b7
 801309c:	080130ad 	.word	0x080130ad
 80130a0:	080130f7 	.word	0x080130f7
 80130a4:	080130cf 	.word	0x080130cf
 80130a8:	080130c1 	.word	0x080130c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fa3c 	bl	801352c <USBD_GetDescriptor>
          break;
 80130b4:	e024      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80130b6:	6839      	ldr	r1, [r7, #0]
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f000 fbf1 	bl	80138a0 <USBD_SetAddress>
          break;
 80130be:	e01f      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80130c0:	6839      	ldr	r1, [r7, #0]
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 fc30 	bl	8013928 <USBD_SetConfig>
 80130c8:	4603      	mov	r3, r0
 80130ca:	73fb      	strb	r3, [r7, #15]
          break;
 80130cc:	e018      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80130ce:	6839      	ldr	r1, [r7, #0]
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	f000 fcd3 	bl	8013a7c <USBD_GetConfig>
          break;
 80130d6:	e013      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80130d8:	6839      	ldr	r1, [r7, #0]
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 fd04 	bl	8013ae8 <USBD_GetStatus>
          break;
 80130e0:	e00e      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80130e2:	6839      	ldr	r1, [r7, #0]
 80130e4:	6878      	ldr	r0, [r7, #4]
 80130e6:	f000 fd33 	bl	8013b50 <USBD_SetFeature>
          break;
 80130ea:	e009      	b.n	8013100 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80130ec:	6839      	ldr	r1, [r7, #0]
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f000 fd57 	bl	8013ba2 <USBD_ClrFeature>
          break;
 80130f4:	e004      	b.n	8013100 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80130f6:	6839      	ldr	r1, [r7, #0]
 80130f8:	6878      	ldr	r0, [r7, #4]
 80130fa:	f000 fdae 	bl	8013c5a <USBD_CtlError>
          break;
 80130fe:	bf00      	nop
      }
      break;
 8013100:	e004      	b.n	801310c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013102:	6839      	ldr	r1, [r7, #0]
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 fda8 	bl	8013c5a <USBD_CtlError>
      break;
 801310a:	bf00      	nop
  }

  return ret;
 801310c:	7bfb      	ldrb	r3, [r7, #15]
}
 801310e:	4618      	mov	r0, r3
 8013110:	3710      	adds	r7, #16
 8013112:	46bd      	mov	sp, r7
 8013114:	bd80      	pop	{r7, pc}
 8013116:	bf00      	nop

08013118 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013122:	2300      	movs	r3, #0
 8013124:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013126:	683b      	ldr	r3, [r7, #0]
 8013128:	781b      	ldrb	r3, [r3, #0]
 801312a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801312e:	2b40      	cmp	r3, #64	@ 0x40
 8013130:	d005      	beq.n	801313e <USBD_StdItfReq+0x26>
 8013132:	2b40      	cmp	r3, #64	@ 0x40
 8013134:	d852      	bhi.n	80131dc <USBD_StdItfReq+0xc4>
 8013136:	2b00      	cmp	r3, #0
 8013138:	d001      	beq.n	801313e <USBD_StdItfReq+0x26>
 801313a:	2b20      	cmp	r3, #32
 801313c:	d14e      	bne.n	80131dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013144:	b2db      	uxtb	r3, r3
 8013146:	3b01      	subs	r3, #1
 8013148:	2b02      	cmp	r3, #2
 801314a:	d840      	bhi.n	80131ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	889b      	ldrh	r3, [r3, #4]
 8013150:	b2db      	uxtb	r3, r3
 8013152:	2b01      	cmp	r3, #1
 8013154:	d836      	bhi.n	80131c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	889b      	ldrh	r3, [r3, #4]
 801315a:	b2db      	uxtb	r3, r3
 801315c:	4619      	mov	r1, r3
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff ff12 	bl	8012f88 <USBD_CoreFindIF>
 8013164:	4603      	mov	r3, r0
 8013166:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013168:	7bbb      	ldrb	r3, [r7, #14]
 801316a:	2bff      	cmp	r3, #255	@ 0xff
 801316c:	d01d      	beq.n	80131aa <USBD_StdItfReq+0x92>
 801316e:	7bbb      	ldrb	r3, [r7, #14]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d11a      	bne.n	80131aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013174:	7bba      	ldrb	r2, [r7, #14]
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	32ae      	adds	r2, #174	@ 0xae
 801317a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801317e:	689b      	ldr	r3, [r3, #8]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d00f      	beq.n	80131a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013184:	7bba      	ldrb	r2, [r7, #14]
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801318c:	7bba      	ldrb	r2, [r7, #14]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	32ae      	adds	r2, #174	@ 0xae
 8013192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013196:	689b      	ldr	r3, [r3, #8]
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	4798      	blx	r3
 801319e:	4603      	mov	r3, r0
 80131a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80131a2:	e004      	b.n	80131ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80131a4:	2303      	movs	r3, #3
 80131a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80131a8:	e001      	b.n	80131ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80131aa:	2303      	movs	r3, #3
 80131ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80131ae:	683b      	ldr	r3, [r7, #0]
 80131b0:	88db      	ldrh	r3, [r3, #6]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d110      	bne.n	80131d8 <USBD_StdItfReq+0xc0>
 80131b6:	7bfb      	ldrb	r3, [r7, #15]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d10d      	bne.n	80131d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 fe23 	bl	8013e08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80131c2:	e009      	b.n	80131d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80131c4:	6839      	ldr	r1, [r7, #0]
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 fd47 	bl	8013c5a <USBD_CtlError>
          break;
 80131cc:	e004      	b.n	80131d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80131ce:	6839      	ldr	r1, [r7, #0]
 80131d0:	6878      	ldr	r0, [r7, #4]
 80131d2:	f000 fd42 	bl	8013c5a <USBD_CtlError>
          break;
 80131d6:	e000      	b.n	80131da <USBD_StdItfReq+0xc2>
          break;
 80131d8:	bf00      	nop
      }
      break;
 80131da:	e004      	b.n	80131e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80131dc:	6839      	ldr	r1, [r7, #0]
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 fd3b 	bl	8013c5a <USBD_CtlError>
      break;
 80131e4:	bf00      	nop
  }

  return ret;
 80131e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3710      	adds	r7, #16
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b084      	sub	sp, #16
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	889b      	ldrh	r3, [r3, #4]
 8013202:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	781b      	ldrb	r3, [r3, #0]
 8013208:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801320c:	2b40      	cmp	r3, #64	@ 0x40
 801320e:	d007      	beq.n	8013220 <USBD_StdEPReq+0x30>
 8013210:	2b40      	cmp	r3, #64	@ 0x40
 8013212:	f200 817f 	bhi.w	8013514 <USBD_StdEPReq+0x324>
 8013216:	2b00      	cmp	r3, #0
 8013218:	d02a      	beq.n	8013270 <USBD_StdEPReq+0x80>
 801321a:	2b20      	cmp	r3, #32
 801321c:	f040 817a 	bne.w	8013514 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013220:	7bbb      	ldrb	r3, [r7, #14]
 8013222:	4619      	mov	r1, r3
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f7ff febc 	bl	8012fa2 <USBD_CoreFindEP>
 801322a:	4603      	mov	r3, r0
 801322c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801322e:	7b7b      	ldrb	r3, [r7, #13]
 8013230:	2bff      	cmp	r3, #255	@ 0xff
 8013232:	f000 8174 	beq.w	801351e <USBD_StdEPReq+0x32e>
 8013236:	7b7b      	ldrb	r3, [r7, #13]
 8013238:	2b00      	cmp	r3, #0
 801323a:	f040 8170 	bne.w	801351e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801323e:	7b7a      	ldrb	r2, [r7, #13]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013246:	7b7a      	ldrb	r2, [r7, #13]
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	32ae      	adds	r2, #174	@ 0xae
 801324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013250:	689b      	ldr	r3, [r3, #8]
 8013252:	2b00      	cmp	r3, #0
 8013254:	f000 8163 	beq.w	801351e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013258:	7b7a      	ldrb	r2, [r7, #13]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	32ae      	adds	r2, #174	@ 0xae
 801325e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	4798      	blx	r3
 801326a:	4603      	mov	r3, r0
 801326c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801326e:	e156      	b.n	801351e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	785b      	ldrb	r3, [r3, #1]
 8013274:	2b03      	cmp	r3, #3
 8013276:	d008      	beq.n	801328a <USBD_StdEPReq+0x9a>
 8013278:	2b03      	cmp	r3, #3
 801327a:	f300 8145 	bgt.w	8013508 <USBD_StdEPReq+0x318>
 801327e:	2b00      	cmp	r3, #0
 8013280:	f000 809b 	beq.w	80133ba <USBD_StdEPReq+0x1ca>
 8013284:	2b01      	cmp	r3, #1
 8013286:	d03c      	beq.n	8013302 <USBD_StdEPReq+0x112>
 8013288:	e13e      	b.n	8013508 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013290:	b2db      	uxtb	r3, r3
 8013292:	2b02      	cmp	r3, #2
 8013294:	d002      	beq.n	801329c <USBD_StdEPReq+0xac>
 8013296:	2b03      	cmp	r3, #3
 8013298:	d016      	beq.n	80132c8 <USBD_StdEPReq+0xd8>
 801329a:	e02c      	b.n	80132f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801329c:	7bbb      	ldrb	r3, [r7, #14]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00d      	beq.n	80132be <USBD_StdEPReq+0xce>
 80132a2:	7bbb      	ldrb	r3, [r7, #14]
 80132a4:	2b80      	cmp	r3, #128	@ 0x80
 80132a6:	d00a      	beq.n	80132be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80132a8:	7bbb      	ldrb	r3, [r7, #14]
 80132aa:	4619      	mov	r1, r3
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f005 fbed 	bl	8018a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80132b2:	2180      	movs	r1, #128	@ 0x80
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f005 fbe9 	bl	8018a8c <USBD_LL_StallEP>
 80132ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80132bc:	e020      	b.n	8013300 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80132be:	6839      	ldr	r1, [r7, #0]
 80132c0:	6878      	ldr	r0, [r7, #4]
 80132c2:	f000 fcca 	bl	8013c5a <USBD_CtlError>
              break;
 80132c6:	e01b      	b.n	8013300 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	885b      	ldrh	r3, [r3, #2]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10e      	bne.n	80132ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80132d0:	7bbb      	ldrb	r3, [r7, #14]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00b      	beq.n	80132ee <USBD_StdEPReq+0xfe>
 80132d6:	7bbb      	ldrb	r3, [r7, #14]
 80132d8:	2b80      	cmp	r3, #128	@ 0x80
 80132da:	d008      	beq.n	80132ee <USBD_StdEPReq+0xfe>
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	88db      	ldrh	r3, [r3, #6]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d104      	bne.n	80132ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80132e4:	7bbb      	ldrb	r3, [r7, #14]
 80132e6:	4619      	mov	r1, r3
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f005 fbcf 	bl	8018a8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 fd8a 	bl	8013e08 <USBD_CtlSendStatus>

              break;
 80132f4:	e004      	b.n	8013300 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80132f6:	6839      	ldr	r1, [r7, #0]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 fcae 	bl	8013c5a <USBD_CtlError>
              break;
 80132fe:	bf00      	nop
          }
          break;
 8013300:	e107      	b.n	8013512 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013308:	b2db      	uxtb	r3, r3
 801330a:	2b02      	cmp	r3, #2
 801330c:	d002      	beq.n	8013314 <USBD_StdEPReq+0x124>
 801330e:	2b03      	cmp	r3, #3
 8013310:	d016      	beq.n	8013340 <USBD_StdEPReq+0x150>
 8013312:	e04b      	b.n	80133ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013314:	7bbb      	ldrb	r3, [r7, #14]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00d      	beq.n	8013336 <USBD_StdEPReq+0x146>
 801331a:	7bbb      	ldrb	r3, [r7, #14]
 801331c:	2b80      	cmp	r3, #128	@ 0x80
 801331e:	d00a      	beq.n	8013336 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013320:	7bbb      	ldrb	r3, [r7, #14]
 8013322:	4619      	mov	r1, r3
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f005 fbb1 	bl	8018a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801332a:	2180      	movs	r1, #128	@ 0x80
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f005 fbad 	bl	8018a8c <USBD_LL_StallEP>
 8013332:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013334:	e040      	b.n	80133b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f000 fc8e 	bl	8013c5a <USBD_CtlError>
              break;
 801333e:	e03b      	b.n	80133b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013340:	683b      	ldr	r3, [r7, #0]
 8013342:	885b      	ldrh	r3, [r3, #2]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d136      	bne.n	80133b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013348:	7bbb      	ldrb	r3, [r7, #14]
 801334a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801334e:	2b00      	cmp	r3, #0
 8013350:	d004      	beq.n	801335c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013352:	7bbb      	ldrb	r3, [r7, #14]
 8013354:	4619      	mov	r1, r3
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f005 fbb7 	bl	8018aca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fd53 	bl	8013e08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013362:	7bbb      	ldrb	r3, [r7, #14]
 8013364:	4619      	mov	r1, r3
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7ff fe1b 	bl	8012fa2 <USBD_CoreFindEP>
 801336c:	4603      	mov	r3, r0
 801336e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013370:	7b7b      	ldrb	r3, [r7, #13]
 8013372:	2bff      	cmp	r3, #255	@ 0xff
 8013374:	d01f      	beq.n	80133b6 <USBD_StdEPReq+0x1c6>
 8013376:	7b7b      	ldrb	r3, [r7, #13]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d11c      	bne.n	80133b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801337c:	7b7a      	ldrb	r2, [r7, #13]
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013384:	7b7a      	ldrb	r2, [r7, #13]
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	32ae      	adds	r2, #174	@ 0xae
 801338a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801338e:	689b      	ldr	r3, [r3, #8]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d010      	beq.n	80133b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013394:	7b7a      	ldrb	r2, [r7, #13]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	32ae      	adds	r2, #174	@ 0xae
 801339a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	6839      	ldr	r1, [r7, #0]
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	4798      	blx	r3
 80133a6:	4603      	mov	r3, r0
 80133a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80133aa:	e004      	b.n	80133b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80133ac:	6839      	ldr	r1, [r7, #0]
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f000 fc53 	bl	8013c5a <USBD_CtlError>
              break;
 80133b4:	e000      	b.n	80133b8 <USBD_StdEPReq+0x1c8>
              break;
 80133b6:	bf00      	nop
          }
          break;
 80133b8:	e0ab      	b.n	8013512 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	2b02      	cmp	r3, #2
 80133c4:	d002      	beq.n	80133cc <USBD_StdEPReq+0x1dc>
 80133c6:	2b03      	cmp	r3, #3
 80133c8:	d032      	beq.n	8013430 <USBD_StdEPReq+0x240>
 80133ca:	e097      	b.n	80134fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133cc:	7bbb      	ldrb	r3, [r7, #14]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d007      	beq.n	80133e2 <USBD_StdEPReq+0x1f2>
 80133d2:	7bbb      	ldrb	r3, [r7, #14]
 80133d4:	2b80      	cmp	r3, #128	@ 0x80
 80133d6:	d004      	beq.n	80133e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80133d8:	6839      	ldr	r1, [r7, #0]
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 fc3d 	bl	8013c5a <USBD_CtlError>
                break;
 80133e0:	e091      	b.n	8013506 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80133e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	da0b      	bge.n	8013402 <USBD_StdEPReq+0x212>
 80133ea:	7bbb      	ldrb	r3, [r7, #14]
 80133ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80133f0:	4613      	mov	r3, r2
 80133f2:	009b      	lsls	r3, r3, #2
 80133f4:	4413      	add	r3, r2
 80133f6:	009b      	lsls	r3, r3, #2
 80133f8:	3310      	adds	r3, #16
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	4413      	add	r3, r2
 80133fe:	3304      	adds	r3, #4
 8013400:	e00b      	b.n	801341a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013402:	7bbb      	ldrb	r3, [r7, #14]
 8013404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013408:	4613      	mov	r3, r2
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	4413      	add	r3, r2
 801340e:	009b      	lsls	r3, r3, #2
 8013410:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	4413      	add	r3, r2
 8013418:	3304      	adds	r3, #4
 801341a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	2200      	movs	r2, #0
 8013420:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	2202      	movs	r2, #2
 8013426:	4619      	mov	r1, r3
 8013428:	6878      	ldr	r0, [r7, #4]
 801342a:	f000 fc93 	bl	8013d54 <USBD_CtlSendData>
              break;
 801342e:	e06a      	b.n	8013506 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013434:	2b00      	cmp	r3, #0
 8013436:	da11      	bge.n	801345c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013438:	7bbb      	ldrb	r3, [r7, #14]
 801343a:	f003 020f 	and.w	r2, r3, #15
 801343e:	6879      	ldr	r1, [r7, #4]
 8013440:	4613      	mov	r3, r2
 8013442:	009b      	lsls	r3, r3, #2
 8013444:	4413      	add	r3, r2
 8013446:	009b      	lsls	r3, r3, #2
 8013448:	440b      	add	r3, r1
 801344a:	3324      	adds	r3, #36	@ 0x24
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d117      	bne.n	8013482 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013452:	6839      	ldr	r1, [r7, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 fc00 	bl	8013c5a <USBD_CtlError>
                  break;
 801345a:	e054      	b.n	8013506 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801345c:	7bbb      	ldrb	r3, [r7, #14]
 801345e:	f003 020f 	and.w	r2, r3, #15
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	4613      	mov	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	009b      	lsls	r3, r3, #2
 801346c:	440b      	add	r3, r1
 801346e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013472:	881b      	ldrh	r3, [r3, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d104      	bne.n	8013482 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013478:	6839      	ldr	r1, [r7, #0]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fbed 	bl	8013c5a <USBD_CtlError>
                  break;
 8013480:	e041      	b.n	8013506 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013482:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013486:	2b00      	cmp	r3, #0
 8013488:	da0b      	bge.n	80134a2 <USBD_StdEPReq+0x2b2>
 801348a:	7bbb      	ldrb	r3, [r7, #14]
 801348c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013490:	4613      	mov	r3, r2
 8013492:	009b      	lsls	r3, r3, #2
 8013494:	4413      	add	r3, r2
 8013496:	009b      	lsls	r3, r3, #2
 8013498:	3310      	adds	r3, #16
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	4413      	add	r3, r2
 801349e:	3304      	adds	r3, #4
 80134a0:	e00b      	b.n	80134ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80134a2:	7bbb      	ldrb	r3, [r7, #14]
 80134a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134a8:	4613      	mov	r3, r2
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	4413      	add	r3, r2
 80134ae:	009b      	lsls	r3, r3, #2
 80134b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	4413      	add	r3, r2
 80134b8:	3304      	adds	r3, #4
 80134ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80134bc:	7bbb      	ldrb	r3, [r7, #14]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d002      	beq.n	80134c8 <USBD_StdEPReq+0x2d8>
 80134c2:	7bbb      	ldrb	r3, [r7, #14]
 80134c4:	2b80      	cmp	r3, #128	@ 0x80
 80134c6:	d103      	bne.n	80134d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	2200      	movs	r2, #0
 80134cc:	601a      	str	r2, [r3, #0]
 80134ce:	e00e      	b.n	80134ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80134d0:	7bbb      	ldrb	r3, [r7, #14]
 80134d2:	4619      	mov	r1, r3
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f005 fb17 	bl	8018b08 <USBD_LL_IsStallEP>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d003      	beq.n	80134e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	2201      	movs	r2, #1
 80134e4:	601a      	str	r2, [r3, #0]
 80134e6:	e002      	b.n	80134ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	2200      	movs	r2, #0
 80134ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80134ee:	68bb      	ldr	r3, [r7, #8]
 80134f0:	2202      	movs	r2, #2
 80134f2:	4619      	mov	r1, r3
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f000 fc2d 	bl	8013d54 <USBD_CtlSendData>
              break;
 80134fa:	e004      	b.n	8013506 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80134fc:	6839      	ldr	r1, [r7, #0]
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 fbab 	bl	8013c5a <USBD_CtlError>
              break;
 8013504:	bf00      	nop
          }
          break;
 8013506:	e004      	b.n	8013512 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013508:	6839      	ldr	r1, [r7, #0]
 801350a:	6878      	ldr	r0, [r7, #4]
 801350c:	f000 fba5 	bl	8013c5a <USBD_CtlError>
          break;
 8013510:	bf00      	nop
      }
      break;
 8013512:	e005      	b.n	8013520 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013514:	6839      	ldr	r1, [r7, #0]
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 fb9f 	bl	8013c5a <USBD_CtlError>
      break;
 801351c:	e000      	b.n	8013520 <USBD_StdEPReq+0x330>
      break;
 801351e:	bf00      	nop
  }

  return ret;
 8013520:	7bfb      	ldrb	r3, [r7, #15]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
	...

0801352c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b086      	sub	sp, #24
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013536:	2300      	movs	r3, #0
 8013538:	817b      	strh	r3, [r7, #10]
  uint8_t *pbuf = NULL;
 801353a:	2300      	movs	r3, #0
 801353c:	617b      	str	r3, [r7, #20]
  uint8_t err = 0U;
 801353e:	2300      	movs	r3, #0
 8013540:	74fb      	strb	r3, [r7, #19]

  switch (req->wValue >> 8)
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	885b      	ldrh	r3, [r3, #2]
 8013546:	0a1b      	lsrs	r3, r3, #8
 8013548:	b29b      	uxth	r3, r3
 801354a:	3b01      	subs	r3, #1
 801354c:	2b0e      	cmp	r3, #14
 801354e:	f200 8179 	bhi.w	8013844 <USBD_GetDescriptor+0x318>
 8013552:	a201      	add	r2, pc, #4	@ (adr r2, 8013558 <USBD_GetDescriptor+0x2c>)
 8013554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013558:	080135c9 	.word	0x080135c9
 801355c:	080135e1 	.word	0x080135e1
 8013560:	08013621 	.word	0x08013621
 8013564:	08013845 	.word	0x08013845
 8013568:	08013845 	.word	0x08013845
 801356c:	080137e5 	.word	0x080137e5
 8013570:	08013811 	.word	0x08013811
 8013574:	08013845 	.word	0x08013845
 8013578:	08013845 	.word	0x08013845
 801357c:	08013845 	.word	0x08013845
 8013580:	08013845 	.word	0x08013845
 8013584:	08013845 	.word	0x08013845
 8013588:	08013845 	.word	0x08013845
 801358c:	08013845 	.word	0x08013845
 8013590:	08013595 	.word	0x08013595
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801359a:	69db      	ldr	r3, [r3, #28]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d00b      	beq.n	80135b8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80135a6:	69db      	ldr	r3, [r3, #28]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	7c12      	ldrb	r2, [r2, #16]
 80135ac:	f107 010a 	add.w	r1, r7, #10
 80135b0:	4610      	mov	r0, r2
 80135b2:	4798      	blx	r3
 80135b4:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80135b6:	e14d      	b.n	8013854 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 80135b8:	6839      	ldr	r1, [r7, #0]
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 fb4d 	bl	8013c5a <USBD_CtlError>
        err++;
 80135c0:	7cfb      	ldrb	r3, [r7, #19]
 80135c2:	3301      	adds	r3, #1
 80135c4:	74fb      	strb	r3, [r7, #19]
      break;
 80135c6:	e145      	b.n	8013854 <USBD_GetDescriptor+0x328>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	7c12      	ldrb	r2, [r2, #16]
 80135d4:	f107 010a 	add.w	r1, r7, #10
 80135d8:	4610      	mov	r0, r2
 80135da:	4798      	blx	r3
 80135dc:	6178      	str	r0, [r7, #20]
      break;
 80135de:	e139      	b.n	8013854 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7c1b      	ldrb	r3, [r3, #16]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d10d      	bne.n	8013604 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135f0:	f107 020a 	add.w	r2, r7, #10
 80135f4:	4610      	mov	r0, r2
 80135f6:	4798      	blx	r3
 80135f8:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	3301      	adds	r3, #1
 80135fe:	2202      	movs	r2, #2
 8013600:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013602:	e127      	b.n	8013854 <USBD_GetDescriptor+0x328>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801360c:	f107 020a 	add.w	r2, r7, #10
 8013610:	4610      	mov	r0, r2
 8013612:	4798      	blx	r3
 8013614:	6178      	str	r0, [r7, #20]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	3301      	adds	r3, #1
 801361a:	2202      	movs	r2, #2
 801361c:	701a      	strb	r2, [r3, #0]
      break;
 801361e:	e119      	b.n	8013854 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	885b      	ldrh	r3, [r3, #2]
 8013624:	b2db      	uxtb	r3, r3
 8013626:	2b05      	cmp	r3, #5
 8013628:	f200 80ac 	bhi.w	8013784 <USBD_GetDescriptor+0x258>
 801362c:	a201      	add	r2, pc, #4	@ (adr r2, 8013634 <USBD_GetDescriptor+0x108>)
 801362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013632:	bf00      	nop
 8013634:	0801364d 	.word	0x0801364d
 8013638:	08013681 	.word	0x08013681
 801363c:	080136b5 	.word	0x080136b5
 8013640:	080136e9 	.word	0x080136e9
 8013644:	0801371d 	.word	0x0801371d
 8013648:	08013751 	.word	0x08013751
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d00b      	beq.n	8013670 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801365e:	685b      	ldr	r3, [r3, #4]
 8013660:	687a      	ldr	r2, [r7, #4]
 8013662:	7c12      	ldrb	r2, [r2, #16]
 8013664:	f107 010a 	add.w	r1, r7, #10
 8013668:	4610      	mov	r0, r2
 801366a:	4798      	blx	r3
 801366c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801366e:	e0b8      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013670:	6839      	ldr	r1, [r7, #0]
 8013672:	6878      	ldr	r0, [r7, #4]
 8013674:	f000 faf1 	bl	8013c5a <USBD_CtlError>
            err++;
 8013678:	7cfb      	ldrb	r3, [r7, #19]
 801367a:	3301      	adds	r3, #1
 801367c:	74fb      	strb	r3, [r7, #19]
          break;
 801367e:	e0b0      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013686:	689b      	ldr	r3, [r3, #8]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d00b      	beq.n	80136a4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013692:	689b      	ldr	r3, [r3, #8]
 8013694:	687a      	ldr	r2, [r7, #4]
 8013696:	7c12      	ldrb	r2, [r2, #16]
 8013698:	f107 010a 	add.w	r1, r7, #10
 801369c:	4610      	mov	r0, r2
 801369e:	4798      	blx	r3
 80136a0:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80136a2:	e09e      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80136a4:	6839      	ldr	r1, [r7, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fad7 	bl	8013c5a <USBD_CtlError>
            err++;
 80136ac:	7cfb      	ldrb	r3, [r7, #19]
 80136ae:	3301      	adds	r3, #1
 80136b0:	74fb      	strb	r3, [r7, #19]
          break;
 80136b2:	e096      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d00b      	beq.n	80136d8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	7c12      	ldrb	r2, [r2, #16]
 80136cc:	f107 010a 	add.w	r1, r7, #10
 80136d0:	4610      	mov	r0, r2
 80136d2:	4798      	blx	r3
 80136d4:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80136d6:	e084      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 80136d8:	6839      	ldr	r1, [r7, #0]
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f000 fabd 	bl	8013c5a <USBD_CtlError>
            err++;
 80136e0:	7cfb      	ldrb	r3, [r7, #19]
 80136e2:	3301      	adds	r3, #1
 80136e4:	74fb      	strb	r3, [r7, #19]
          break;
 80136e6:	e07c      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136ee:	691b      	ldr	r3, [r3, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00b      	beq.n	801370c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	687a      	ldr	r2, [r7, #4]
 80136fe:	7c12      	ldrb	r2, [r2, #16]
 8013700:	f107 010a 	add.w	r1, r7, #10
 8013704:	4610      	mov	r0, r2
 8013706:	4798      	blx	r3
 8013708:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801370a:	e06a      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f000 faa3 	bl	8013c5a <USBD_CtlError>
            err++;
 8013714:	7cfb      	ldrb	r3, [r7, #19]
 8013716:	3301      	adds	r3, #1
 8013718:	74fb      	strb	r3, [r7, #19]
          break;
 801371a:	e062      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013722:	695b      	ldr	r3, [r3, #20]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00b      	beq.n	8013740 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801372e:	695b      	ldr	r3, [r3, #20]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	7c12      	ldrb	r2, [r2, #16]
 8013734:	f107 010a 	add.w	r1, r7, #10
 8013738:	4610      	mov	r0, r2
 801373a:	4798      	blx	r3
 801373c:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801373e:	e050      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013740:	6839      	ldr	r1, [r7, #0]
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f000 fa89 	bl	8013c5a <USBD_CtlError>
            err++;
 8013748:	7cfb      	ldrb	r3, [r7, #19]
 801374a:	3301      	adds	r3, #1
 801374c:	74fb      	strb	r3, [r7, #19]
          break;
 801374e:	e048      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013756:	699b      	ldr	r3, [r3, #24]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00b      	beq.n	8013774 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013762:	699b      	ldr	r3, [r3, #24]
 8013764:	687a      	ldr	r2, [r7, #4]
 8013766:	7c12      	ldrb	r2, [r2, #16]
 8013768:	f107 010a 	add.w	r1, r7, #10
 801376c:	4610      	mov	r0, r2
 801376e:	4798      	blx	r3
 8013770:	6178      	str	r0, [r7, #20]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013772:	e036      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>
            USBD_CtlError(pdev, req);
 8013774:	6839      	ldr	r1, [r7, #0]
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f000 fa6f 	bl	8013c5a <USBD_CtlError>
            err++;
 801377c:	7cfb      	ldrb	r3, [r7, #19]
 801377e:	3301      	adds	r3, #1
 8013780:	74fb      	strb	r3, [r7, #19]
          break;
 8013782:	e02e      	b.n	80137e2 <USBD_GetDescriptor+0x2b6>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          pbuf = NULL;
 8013784:	2300      	movs	r3, #0
 8013786:	617b      	str	r3, [r7, #20]

          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 8013788:	2300      	movs	r3, #0
 801378a:	60fb      	str	r3, [r7, #12]
 801378c:	e020      	b.n	80137d0 <USBD_GetDescriptor+0x2a4>
          {
            if (pdev->pClass[idx]->GetUsrStrDescriptor != NULL)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	68fa      	ldr	r2, [r7, #12]
 8013792:	32ae      	adds	r2, #174	@ 0xae
 8013794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801379a:	2b00      	cmp	r3, #0
 801379c:	d015      	beq.n	80137ca <USBD_GetDescriptor+0x29e>
            {
              pdev->classId = idx;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	68fa      	ldr	r2, [r7, #12]
 80137a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pbuf = pdev->pClass[idx]->GetUsrStrDescriptor(pdev, LOBYTE(req->wValue), &len);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	68fa      	ldr	r2, [r7, #12]
 80137aa:	32ae      	adds	r2, #174	@ 0xae
 80137ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137b2:	683a      	ldr	r2, [r7, #0]
 80137b4:	8852      	ldrh	r2, [r2, #2]
 80137b6:	b2d1      	uxtb	r1, r2
 80137b8:	f107 020a 	add.w	r2, r7, #10
 80137bc:	6878      	ldr	r0, [r7, #4]
 80137be:	4798      	blx	r3
 80137c0:	6178      	str	r0, [r7, #20]

              if (pbuf == NULL) /* This means that no class recognized the string index */
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d10a      	bne.n	80137de <USBD_GetDescriptor+0x2b2>
              {
                continue;
 80137c8:	bf00      	nop
          for (uint32_t idx = 0U; (idx < pdev->NumClasses); idx++)
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	3301      	adds	r3, #1
 80137ce:	60fb      	str	r3, [r7, #12]
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	429a      	cmp	r2, r3
 80137da:	d3d8      	bcc.n	801378e <USBD_GetDescriptor+0x262>

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80137dc:	e000      	b.n	80137e0 <USBD_GetDescriptor+0x2b4>
                break;
 80137de:	bf00      	nop
          break;
 80137e0:	bf00      	nop
      }
      break;
 80137e2:	e037      	b.n	8013854 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	7c1b      	ldrb	r3, [r3, #16]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d109      	bne.n	8013800 <USBD_GetDescriptor+0x2d4>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80137f4:	f107 020a 	add.w	r2, r7, #10
 80137f8:	4610      	mov	r0, r2
 80137fa:	4798      	blx	r3
 80137fc:	6178      	str	r0, [r7, #20]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80137fe:	e029      	b.n	8013854 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8013800:	6839      	ldr	r1, [r7, #0]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fa29 	bl	8013c5a <USBD_CtlError>
        err++;
 8013808:	7cfb      	ldrb	r3, [r7, #19]
 801380a:	3301      	adds	r3, #1
 801380c:	74fb      	strb	r3, [r7, #19]
      break;
 801380e:	e021      	b.n	8013854 <USBD_GetDescriptor+0x328>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	7c1b      	ldrb	r3, [r3, #16]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d10d      	bne.n	8013834 <USBD_GetDescriptor+0x308>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013820:	f107 020a 	add.w	r2, r7, #10
 8013824:	4610      	mov	r0, r2
 8013826:	4798      	blx	r3
 8013828:	6178      	str	r0, [r7, #20]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801382a:	697b      	ldr	r3, [r7, #20]
 801382c:	3301      	adds	r3, #1
 801382e:	2207      	movs	r2, #7
 8013830:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013832:	e00f      	b.n	8013854 <USBD_GetDescriptor+0x328>
        USBD_CtlError(pdev, req);
 8013834:	6839      	ldr	r1, [r7, #0]
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 fa0f 	bl	8013c5a <USBD_CtlError>
        err++;
 801383c:	7cfb      	ldrb	r3, [r7, #19]
 801383e:	3301      	adds	r3, #1
 8013840:	74fb      	strb	r3, [r7, #19]
      break;
 8013842:	e007      	b.n	8013854 <USBD_GetDescriptor+0x328>

    default:
      USBD_CtlError(pdev, req);
 8013844:	6839      	ldr	r1, [r7, #0]
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f000 fa07 	bl	8013c5a <USBD_CtlError>
      err++;
 801384c:	7cfb      	ldrb	r3, [r7, #19]
 801384e:	3301      	adds	r3, #1
 8013850:	74fb      	strb	r3, [r7, #19]
      break;
 8013852:	bf00      	nop
  }

  if (err != 0U)
 8013854:	7cfb      	ldrb	r3, [r7, #19]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d11e      	bne.n	8013898 <USBD_GetDescriptor+0x36c>
  {
    return;
  }

  if (req->wLength != 0U)
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	88db      	ldrh	r3, [r3, #6]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d016      	beq.n	8013890 <USBD_GetDescriptor+0x364>
  {
    if (len != 0U)
 8013862:	897b      	ldrh	r3, [r7, #10]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d00e      	beq.n	8013886 <USBD_GetDescriptor+0x35a>
    {
      len = MIN(len, req->wLength);
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	88da      	ldrh	r2, [r3, #6]
 801386c:	897b      	ldrh	r3, [r7, #10]
 801386e:	4293      	cmp	r3, r2
 8013870:	bf28      	it	cs
 8013872:	4613      	movcs	r3, r2
 8013874:	b29b      	uxth	r3, r3
 8013876:	817b      	strh	r3, [r7, #10]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013878:	897b      	ldrh	r3, [r7, #10]
 801387a:	461a      	mov	r2, r3
 801387c:	6979      	ldr	r1, [r7, #20]
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f000 fa68 	bl	8013d54 <USBD_CtlSendData>
 8013884:	e009      	b.n	801389a <USBD_GetDescriptor+0x36e>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013886:	6839      	ldr	r1, [r7, #0]
 8013888:	6878      	ldr	r0, [r7, #4]
 801388a:	f000 f9e6 	bl	8013c5a <USBD_CtlError>
 801388e:	e004      	b.n	801389a <USBD_GetDescriptor+0x36e>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013890:	6878      	ldr	r0, [r7, #4]
 8013892:	f000 fab9 	bl	8013e08 <USBD_CtlSendStatus>
 8013896:	e000      	b.n	801389a <USBD_GetDescriptor+0x36e>
    return;
 8013898:	bf00      	nop
  }
}
 801389a:	3718      	adds	r7, #24
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	889b      	ldrh	r3, [r3, #4]
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d131      	bne.n	8013916 <USBD_SetAddress+0x76>
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	88db      	ldrh	r3, [r3, #6]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d12d      	bne.n	8013916 <USBD_SetAddress+0x76>
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	885b      	ldrh	r3, [r3, #2]
 80138be:	2b7f      	cmp	r3, #127	@ 0x7f
 80138c0:	d829      	bhi.n	8013916 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	885b      	ldrh	r3, [r3, #2]
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80138cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138d4:	b2db      	uxtb	r3, r3
 80138d6:	2b03      	cmp	r3, #3
 80138d8:	d104      	bne.n	80138e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80138da:	6839      	ldr	r1, [r7, #0]
 80138dc:	6878      	ldr	r0, [r7, #4]
 80138de:	f000 f9bc 	bl	8013c5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138e2:	e01d      	b.n	8013920 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	7bfa      	ldrb	r2, [r7, #15]
 80138e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
 80138ee:	4619      	mov	r1, r3
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f005 f935 	bl	8018b60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 fa86 	bl	8013e08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80138fc:	7bfb      	ldrb	r3, [r7, #15]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d004      	beq.n	801390c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	2202      	movs	r2, #2
 8013906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801390a:	e009      	b.n	8013920 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2201      	movs	r2, #1
 8013910:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013914:	e004      	b.n	8013920 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013916:	6839      	ldr	r1, [r7, #0]
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f000 f99e 	bl	8013c5a <USBD_CtlError>
  }
}
 801391e:	bf00      	nop
 8013920:	bf00      	nop
 8013922:	3710      	adds	r7, #16
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013932:	2300      	movs	r3, #0
 8013934:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	885b      	ldrh	r3, [r3, #2]
 801393a:	b2da      	uxtb	r2, r3
 801393c:	4b4e      	ldr	r3, [pc, #312]	@ (8013a78 <USBD_SetConfig+0x150>)
 801393e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013940:	4b4d      	ldr	r3, [pc, #308]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	2b01      	cmp	r3, #1
 8013946:	d905      	bls.n	8013954 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013948:	6839      	ldr	r1, [r7, #0]
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f000 f985 	bl	8013c5a <USBD_CtlError>
    return USBD_FAIL;
 8013950:	2303      	movs	r3, #3
 8013952:	e08c      	b.n	8013a6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801395a:	b2db      	uxtb	r3, r3
 801395c:	2b02      	cmp	r3, #2
 801395e:	d002      	beq.n	8013966 <USBD_SetConfig+0x3e>
 8013960:	2b03      	cmp	r3, #3
 8013962:	d029      	beq.n	80139b8 <USBD_SetConfig+0x90>
 8013964:	e075      	b.n	8013a52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013966:	4b44      	ldr	r3, [pc, #272]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	2b00      	cmp	r3, #0
 801396c:	d020      	beq.n	80139b0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801396e:	4b42      	ldr	r3, [pc, #264]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	461a      	mov	r2, r3
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013978:	4b3f      	ldr	r3, [pc, #252]	@ (8013a78 <USBD_SetConfig+0x150>)
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	4619      	mov	r1, r3
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f7ff f85c 	bl	8012a3c <USBD_SetClassConfig>
 8013984:	4603      	mov	r3, r0
 8013986:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013988:	7bfb      	ldrb	r3, [r7, #15]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d008      	beq.n	80139a0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801398e:	6839      	ldr	r1, [r7, #0]
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f962 	bl	8013c5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	2202      	movs	r2, #2
 801399a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801399e:	e065      	b.n	8013a6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fa31 	bl	8013e08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	2203      	movs	r2, #3
 80139aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80139ae:	e05d      	b.n	8013a6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 fa29 	bl	8013e08 <USBD_CtlSendStatus>
      break;
 80139b6:	e059      	b.n	8013a6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80139b8:	4b2f      	ldr	r3, [pc, #188]	@ (8013a78 <USBD_SetConfig+0x150>)
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d112      	bne.n	80139e6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2202      	movs	r2, #2
 80139c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80139c8:	4b2b      	ldr	r3, [pc, #172]	@ (8013a78 <USBD_SetConfig+0x150>)
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	461a      	mov	r2, r3
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80139d2:	4b29      	ldr	r3, [pc, #164]	@ (8013a78 <USBD_SetConfig+0x150>)
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	4619      	mov	r1, r3
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f7ff f84b 	bl	8012a74 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80139de:	6878      	ldr	r0, [r7, #4]
 80139e0:	f000 fa12 	bl	8013e08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80139e4:	e042      	b.n	8013a6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80139e6:	4b24      	ldr	r3, [pc, #144]	@ (8013a78 <USBD_SetConfig+0x150>)
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	461a      	mov	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d02a      	beq.n	8013a4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	685b      	ldr	r3, [r3, #4]
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	4619      	mov	r1, r3
 80139fc:	6878      	ldr	r0, [r7, #4]
 80139fe:	f7ff f839 	bl	8012a74 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013a02:	4b1d      	ldr	r3, [pc, #116]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013a04:	781b      	ldrb	r3, [r3, #0]
 8013a06:	461a      	mov	r2, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013a0e:	781b      	ldrb	r3, [r3, #0]
 8013a10:	4619      	mov	r1, r3
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f7ff f812 	bl	8012a3c <USBD_SetClassConfig>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013a1c:	7bfb      	ldrb	r3, [r7, #15]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d00f      	beq.n	8013a42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013a22:	6839      	ldr	r1, [r7, #0]
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 f918 	bl	8013c5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	b2db      	uxtb	r3, r3
 8013a30:	4619      	mov	r1, r3
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f7ff f81e 	bl	8012a74 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2202      	movs	r2, #2
 8013a3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013a40:	e014      	b.n	8013a6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f000 f9e0 	bl	8013e08 <USBD_CtlSendStatus>
      break;
 8013a48:	e010      	b.n	8013a6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f000 f9dc 	bl	8013e08 <USBD_CtlSendStatus>
      break;
 8013a50:	e00c      	b.n	8013a6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013a52:	6839      	ldr	r1, [r7, #0]
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f000 f900 	bl	8013c5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013a5a:	4b07      	ldr	r3, [pc, #28]	@ (8013a78 <USBD_SetConfig+0x150>)
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	4619      	mov	r1, r3
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff f807 	bl	8012a74 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013a66:	2303      	movs	r3, #3
 8013a68:	73fb      	strb	r3, [r7, #15]
      break;
 8013a6a:	bf00      	nop
  }

  return ret;
 8013a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3710      	adds	r7, #16
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	20000c2f 	.word	0x20000c2f

08013a7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
 8013a84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	88db      	ldrh	r3, [r3, #6]
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d004      	beq.n	8013a98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013a8e:	6839      	ldr	r1, [r7, #0]
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f000 f8e2 	bl	8013c5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013a96:	e023      	b.n	8013ae0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	2b02      	cmp	r3, #2
 8013aa2:	dc02      	bgt.n	8013aaa <USBD_GetConfig+0x2e>
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	dc03      	bgt.n	8013ab0 <USBD_GetConfig+0x34>
 8013aa8:	e015      	b.n	8013ad6 <USBD_GetConfig+0x5a>
 8013aaa:	2b03      	cmp	r3, #3
 8013aac:	d00b      	beq.n	8013ac6 <USBD_GetConfig+0x4a>
 8013aae:	e012      	b.n	8013ad6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	3308      	adds	r3, #8
 8013aba:	2201      	movs	r2, #1
 8013abc:	4619      	mov	r1, r3
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 f948 	bl	8013d54 <USBD_CtlSendData>
        break;
 8013ac4:	e00c      	b.n	8013ae0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	3304      	adds	r3, #4
 8013aca:	2201      	movs	r2, #1
 8013acc:	4619      	mov	r1, r3
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f000 f940 	bl	8013d54 <USBD_CtlSendData>
        break;
 8013ad4:	e004      	b.n	8013ae0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013ad6:	6839      	ldr	r1, [r7, #0]
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 f8be 	bl	8013c5a <USBD_CtlError>
        break;
 8013ade:	bf00      	nop
}
 8013ae0:	bf00      	nop
 8013ae2:	3708      	adds	r7, #8
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	3b01      	subs	r3, #1
 8013afc:	2b02      	cmp	r3, #2
 8013afe:	d81e      	bhi.n	8013b3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013b00:	683b      	ldr	r3, [r7, #0]
 8013b02:	88db      	ldrh	r3, [r3, #6]
 8013b04:	2b02      	cmp	r3, #2
 8013b06:	d004      	beq.n	8013b12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013b08:	6839      	ldr	r1, [r7, #0]
 8013b0a:	6878      	ldr	r0, [r7, #4]
 8013b0c:	f000 f8a5 	bl	8013c5a <USBD_CtlError>
        break;
 8013b10:	e01a      	b.n	8013b48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	2201      	movs	r2, #1
 8013b16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d005      	beq.n	8013b2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	f043 0202 	orr.w	r2, r3, #2
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	330c      	adds	r3, #12
 8013b32:	2202      	movs	r2, #2
 8013b34:	4619      	mov	r1, r3
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 f90c 	bl	8013d54 <USBD_CtlSendData>
      break;
 8013b3c:	e004      	b.n	8013b48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 f88a 	bl	8013c5a <USBD_CtlError>
      break;
 8013b46:	bf00      	nop
  }
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	885b      	ldrh	r3, [r3, #2]
 8013b5e:	2b01      	cmp	r3, #1
 8013b60:	d107      	bne.n	8013b72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2201      	movs	r2, #1
 8013b66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 f94c 	bl	8013e08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013b70:	e013      	b.n	8013b9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013b72:	683b      	ldr	r3, [r7, #0]
 8013b74:	885b      	ldrh	r3, [r3, #2]
 8013b76:	2b02      	cmp	r3, #2
 8013b78:	d10b      	bne.n	8013b92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013b7a:	683b      	ldr	r3, [r7, #0]
 8013b7c:	889b      	ldrh	r3, [r3, #4]
 8013b7e:	0a1b      	lsrs	r3, r3, #8
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	b2da      	uxtb	r2, r3
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 f93c 	bl	8013e08 <USBD_CtlSendStatus>
}
 8013b90:	e003      	b.n	8013b9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013b92:	6839      	ldr	r1, [r7, #0]
 8013b94:	6878      	ldr	r0, [r7, #4]
 8013b96:	f000 f860 	bl	8013c5a <USBD_CtlError>
}
 8013b9a:	bf00      	nop
 8013b9c:	3708      	adds	r7, #8
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b082      	sub	sp, #8
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	3b01      	subs	r3, #1
 8013bb6:	2b02      	cmp	r3, #2
 8013bb8:	d80b      	bhi.n	8013bd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	885b      	ldrh	r3, [r3, #2]
 8013bbe:	2b01      	cmp	r3, #1
 8013bc0:	d10c      	bne.n	8013bdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f000 f91c 	bl	8013e08 <USBD_CtlSendStatus>
      }
      break;
 8013bd0:	e004      	b.n	8013bdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013bd2:	6839      	ldr	r1, [r7, #0]
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f000 f840 	bl	8013c5a <USBD_CtlError>
      break;
 8013bda:	e000      	b.n	8013bde <USBD_ClrFeature+0x3c>
      break;
 8013bdc:	bf00      	nop
  }
}
 8013bde:	bf00      	nop
 8013be0:	3708      	adds	r7, #8
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	6078      	str	r0, [r7, #4]
 8013bee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	781a      	ldrb	r2, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	781a      	ldrb	r2, [r3, #0]
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f7ff f9ef 	bl	8012ff4 <SWAPBYTE>
 8013c16:	4603      	mov	r3, r0
 8013c18:	461a      	mov	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	3301      	adds	r3, #1
 8013c22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	3301      	adds	r3, #1
 8013c28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f7ff f9e2 	bl	8012ff4 <SWAPBYTE>
 8013c30:	4603      	mov	r3, r0
 8013c32:	461a      	mov	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	3301      	adds	r3, #1
 8013c3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	3301      	adds	r3, #1
 8013c42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f7ff f9d5 	bl	8012ff4 <SWAPBYTE>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	80da      	strh	r2, [r3, #6]
}
 8013c52:	bf00      	nop
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b082      	sub	sp, #8
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
 8013c62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c64:	2180      	movs	r1, #128	@ 0x80
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f004 ff10 	bl	8018a8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f004 ff0c 	bl	8018a8c <USBD_LL_StallEP>
}
 8013c74:	bf00      	nop
 8013c76:	3708      	adds	r7, #8
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}

08013c7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b086      	sub	sp, #24
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d042      	beq.n	8013d18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013c96:	6938      	ldr	r0, [r7, #16]
 8013c98:	f000 f842 	bl	8013d20 <USBD_GetLen>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	3301      	adds	r3, #1
 8013ca0:	005b      	lsls	r3, r3, #1
 8013ca2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ca6:	d808      	bhi.n	8013cba <USBD_GetString+0x3e>
 8013ca8:	6938      	ldr	r0, [r7, #16]
 8013caa:	f000 f839 	bl	8013d20 <USBD_GetLen>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	b29b      	uxth	r3, r3
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	e001      	b.n	8013cbe <USBD_GetString+0x42>
 8013cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013cc2:	7dfb      	ldrb	r3, [r7, #23]
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	7812      	ldrb	r2, [r2, #0]
 8013ccc:	701a      	strb	r2, [r3, #0]
  idx++;
 8013cce:	7dfb      	ldrb	r3, [r7, #23]
 8013cd0:	3301      	adds	r3, #1
 8013cd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	4413      	add	r3, r2
 8013cda:	2203      	movs	r2, #3
 8013cdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8013cde:	7dfb      	ldrb	r3, [r7, #23]
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013ce4:	e013      	b.n	8013d0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013ce6:	7dfb      	ldrb	r3, [r7, #23]
 8013ce8:	68ba      	ldr	r2, [r7, #8]
 8013cea:	4413      	add	r3, r2
 8013cec:	693a      	ldr	r2, [r7, #16]
 8013cee:	7812      	ldrb	r2, [r2, #0]
 8013cf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	3301      	adds	r3, #1
 8013cf6:	613b      	str	r3, [r7, #16]
    idx++;
 8013cf8:	7dfb      	ldrb	r3, [r7, #23]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013cfe:	7dfb      	ldrb	r3, [r7, #23]
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	4413      	add	r3, r2
 8013d04:	2200      	movs	r2, #0
 8013d06:	701a      	strb	r2, [r3, #0]
    idx++;
 8013d08:	7dfb      	ldrb	r3, [r7, #23]
 8013d0a:	3301      	adds	r3, #1
 8013d0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d1e7      	bne.n	8013ce6 <USBD_GetString+0x6a>
 8013d16:	e000      	b.n	8013d1a <USBD_GetString+0x9e>
    return;
 8013d18:	bf00      	nop
  }
}
 8013d1a:	3718      	adds	r7, #24
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b085      	sub	sp, #20
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013d30:	e005      	b.n	8013d3e <USBD_GetLen+0x1e>
  {
    len++;
 8013d32:	7bfb      	ldrb	r3, [r7, #15]
 8013d34:	3301      	adds	r3, #1
 8013d36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	3301      	adds	r3, #1
 8013d3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013d3e:	68bb      	ldr	r3, [r7, #8]
 8013d40:	781b      	ldrb	r3, [r3, #0]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d1f5      	bne.n	8013d32 <USBD_GetLen+0x12>
  }

  return len;
 8013d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d48:	4618      	mov	r0, r3
 8013d4a:	3714      	adds	r7, #20
 8013d4c:	46bd      	mov	sp, r7
 8013d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d52:	4770      	bx	lr

08013d54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b084      	sub	sp, #16
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	60b9      	str	r1, [r7, #8]
 8013d5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2202      	movs	r2, #2
 8013d64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	68ba      	ldr	r2, [r7, #8]
 8013d78:	2100      	movs	r1, #0
 8013d7a:	68f8      	ldr	r0, [r7, #12]
 8013d7c:	f004 ff0f 	bl	8018b9e <USBD_LL_Transmit>

  return USBD_OK;
 8013d80:	2300      	movs	r3, #0
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}

08013d8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013d8a:	b580      	push	{r7, lr}
 8013d8c:	b084      	sub	sp, #16
 8013d8e:	af00      	add	r7, sp, #0
 8013d90:	60f8      	str	r0, [r7, #12]
 8013d92:	60b9      	str	r1, [r7, #8]
 8013d94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	68ba      	ldr	r2, [r7, #8]
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f004 fefe 	bl	8018b9e <USBD_LL_Transmit>

  return USBD_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3710      	adds	r7, #16
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	60f8      	str	r0, [r7, #12]
 8013db4:	60b9      	str	r1, [r7, #8]
 8013db6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2203      	movs	r2, #3
 8013dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	687a      	ldr	r2, [r7, #4]
 8013dcc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	68ba      	ldr	r2, [r7, #8]
 8013dd4:	2100      	movs	r1, #0
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f004 ff02 	bl	8018be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ddc:	2300      	movs	r3, #0
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}

08013de6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013de6:	b580      	push	{r7, lr}
 8013de8:	b084      	sub	sp, #16
 8013dea:	af00      	add	r7, sp, #0
 8013dec:	60f8      	str	r0, [r7, #12]
 8013dee:	60b9      	str	r1, [r7, #8]
 8013df0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	68ba      	ldr	r2, [r7, #8]
 8013df6:	2100      	movs	r1, #0
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f004 fef1 	bl	8018be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013dfe:	2300      	movs	r3, #0
}
 8013e00:	4618      	mov	r0, r3
 8013e02:	3710      	adds	r7, #16
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}

08013e08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b082      	sub	sp, #8
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2204      	movs	r2, #4
 8013e14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013e18:	2300      	movs	r3, #0
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f004 febd 	bl	8018b9e <USBD_LL_Transmit>

  return USBD_OK;
 8013e24:	2300      	movs	r3, #0
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3708      	adds	r7, #8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}

08013e2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013e2e:	b580      	push	{r7, lr}
 8013e30:	b082      	sub	sp, #8
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	2205      	movs	r2, #5
 8013e3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e3e:	2300      	movs	r3, #0
 8013e40:	2200      	movs	r2, #0
 8013e42:	2100      	movs	r1, #0
 8013e44:	6878      	ldr	r0, [r7, #4]
 8013e46:	f004 fecb 	bl	8018be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e4a:	2300      	movs	r3, #0
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3708      	adds	r7, #8
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b088      	sub	sp, #32
 8013e58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8013e5e:	f107 0308 	add.w	r3, r7, #8
 8013e62:	2218      	movs	r2, #24
 8013e64:	2100      	movs	r1, #0
 8013e66:	4618      	mov	r0, r3
 8013e68:	f001 f92d 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8013e6c:	233f      	movs	r3, #63	@ 0x3f
 8013e6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8013e70:	2381      	movs	r3, #129	@ 0x81
 8013e72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8013e74:	1dfb      	adds	r3, r7, #7
 8013e76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8013e78:	2301      	movs	r3, #1
 8013e7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8013e7c:	f107 0308 	add.w	r3, r7, #8
 8013e80:	2100      	movs	r1, #0
 8013e82:	4618      	mov	r0, r3
 8013e84:	f001 fba8 	bl	80155d8 <hci_send_req>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	da01      	bge.n	8013e92 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8013e8e:	23ff      	movs	r3, #255	@ 0xff
 8013e90:	e000      	b.n	8013e94 <aci_gap_set_non_discoverable+0x40>
  return status;
 8013e92:	79fb      	ldrb	r3, [r7, #7]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3720      	adds	r7, #32
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8013e9c:	b5b0      	push	{r4, r5, r7, lr}
 8013e9e:	b0ce      	sub	sp, #312	@ 0x138
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	4605      	mov	r5, r0
 8013ea4:	460c      	mov	r4, r1
 8013ea6:	4610      	mov	r0, r2
 8013ea8:	4619      	mov	r1, r3
 8013eaa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8013eb2:	462a      	mov	r2, r5
 8013eb4:	701a      	strb	r2, [r3, #0]
 8013eb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013eba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8013ebe:	4622      	mov	r2, r4
 8013ec0:	801a      	strh	r2, [r3, #0]
 8013ec2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ec6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8013eca:	4602      	mov	r2, r0
 8013ecc:	801a      	strh	r2, [r3, #0]
 8013ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013ed2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8013ed6:	460a      	mov	r2, r1
 8013ed8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8013eda:	f107 0310 	add.w	r3, r7, #16
 8013ede:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8013ee2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	f107 0210 	add.w	r2, r7, #16
 8013eec:	4413      	add	r3, r2
 8013eee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8013ef2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013ef6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013efa:	4413      	add	r3, r2
 8013efc:	3309      	adds	r3, #9
 8013efe:	f107 0210 	add.w	r2, r7, #16
 8013f02:	4413      	add	r3, r2
 8013f04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8013f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8013f0c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8013f10:	2200      	movs	r2, #0
 8013f12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8013f14:	2300      	movs	r3, #0
 8013f16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8013f1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013f22:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8013f26:	7812      	ldrb	r2, [r2, #0]
 8013f28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8013f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f2e:	3301      	adds	r3, #1
 8013f30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8013f34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013f3c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8013f40:	8812      	ldrh	r2, [r2, #0]
 8013f42:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8013f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f4a:	3302      	adds	r3, #2
 8013f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8013f50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013f58:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8013f5c:	8812      	ldrh	r2, [r2, #0]
 8013f5e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8013f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f66:	3302      	adds	r3, #2
 8013f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8013f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8013f74:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8013f78:	7812      	ldrb	r2, [r2, #0]
 8013f7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8013f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f80:	3301      	adds	r3, #1
 8013f82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8013f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f8a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8013f8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8013f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013f94:	3301      	adds	r3, #1
 8013f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8013f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013f9e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013fa2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8013fa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013fa8:	3301      	adds	r3, #1
 8013faa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8013fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013fb2:	3308      	adds	r3, #8
 8013fb4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8013fb8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f001 f872 	bl	80150a6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8013fc2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8013fc6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8013fca:	4413      	add	r3, r2
 8013fcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8013fd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013fd4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013fd8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8013fda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8013fde:	3301      	adds	r3, #1
 8013fe0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8013fe4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8013fe8:	3301      	adds	r3, #1
 8013fea:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8013fee:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f001 f857 	bl	80150a6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8013ff8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8013ffc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014000:	4413      	add	r3, r2
 8014002:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014006:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801400a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 801400e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014010:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014014:	3302      	adds	r3, #2
 8014016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 801401a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801401e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014022:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014024:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014028:	3302      	adds	r3, #2
 801402a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801402e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014032:	2218      	movs	r2, #24
 8014034:	2100      	movs	r1, #0
 8014036:	4618      	mov	r0, r3
 8014038:	f001 f845 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801403c:	233f      	movs	r3, #63	@ 0x3f
 801403e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014042:	2383      	movs	r3, #131	@ 0x83
 8014044:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014048:	f107 0310 	add.w	r3, r7, #16
 801404c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014050:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014054:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014058:	f107 030f 	add.w	r3, r7, #15
 801405c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014060:	2301      	movs	r3, #1
 8014062:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801406a:	2100      	movs	r1, #0
 801406c:	4618      	mov	r0, r3
 801406e:	f001 fab3 	bl	80155d8 <hci_send_req>
 8014072:	4603      	mov	r3, r0
 8014074:	2b00      	cmp	r3, #0
 8014076:	da01      	bge.n	801407c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014078:	23ff      	movs	r3, #255	@ 0xff
 801407a:	e004      	b.n	8014086 <aci_gap_set_discoverable+0x1ea>
  return status;
 801407c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014080:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014084:	781b      	ldrb	r3, [r3, #0]
}
 8014086:	4618      	mov	r0, r3
 8014088:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 801408c:	46bd      	mov	sp, r7
 801408e:	bdb0      	pop	{r4, r5, r7, pc}

08014090 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b0cc      	sub	sp, #304	@ 0x130
 8014094:	af00      	add	r7, sp, #0
 8014096:	4602      	mov	r2, r0
 8014098:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801409c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80140a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80140a2:	f107 0310 	add.w	r3, r7, #16
 80140a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80140aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80140ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80140b2:	2200      	movs	r2, #0
 80140b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80140b6:	2300      	movs	r3, #0
 80140b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80140bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80140c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80140c4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80140c8:	7812      	ldrb	r2, [r2, #0]
 80140ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80140cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140d0:	3301      	adds	r3, #1
 80140d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80140d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80140da:	2218      	movs	r2, #24
 80140dc:	2100      	movs	r1, #0
 80140de:	4618      	mov	r0, r3
 80140e0:	f000 fff1 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80140e4:	233f      	movs	r3, #63	@ 0x3f
 80140e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80140ea:	2385      	movs	r3, #133	@ 0x85
 80140ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80140f0:	f107 0310 	add.w	r3, r7, #16
 80140f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80140f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80140fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014100:	f107 030f 	add.w	r3, r7, #15
 8014104:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014108:	2301      	movs	r3, #1
 801410a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801410e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014112:	2100      	movs	r1, #0
 8014114:	4618      	mov	r0, r3
 8014116:	f001 fa5f 	bl	80155d8 <hci_send_req>
 801411a:	4603      	mov	r3, r0
 801411c:	2b00      	cmp	r3, #0
 801411e:	da01      	bge.n	8014124 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014120:	23ff      	movs	r3, #255	@ 0xff
 8014122:	e004      	b.n	801412e <aci_gap_set_io_capability+0x9e>
  return status;
 8014124:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014128:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801412c:	781b      	ldrb	r3, [r3, #0]
}
 801412e:	4618      	mov	r0, r3
 8014130:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014134:	46bd      	mov	sp, r7
 8014136:	bd80      	pop	{r7, pc}

08014138 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014138:	b5b0      	push	{r4, r5, r7, lr}
 801413a:	b0cc      	sub	sp, #304	@ 0x130
 801413c:	af00      	add	r7, sp, #0
 801413e:	4605      	mov	r5, r0
 8014140:	460c      	mov	r4, r1
 8014142:	4610      	mov	r0, r2
 8014144:	4619      	mov	r1, r3
 8014146:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801414a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801414e:	462a      	mov	r2, r5
 8014150:	701a      	strb	r2, [r3, #0]
 8014152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014156:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801415a:	4622      	mov	r2, r4
 801415c:	701a      	strb	r2, [r3, #0]
 801415e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014162:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014166:	4602      	mov	r2, r0
 8014168:	701a      	strb	r2, [r3, #0]
 801416a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801416e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014172:	460a      	mov	r2, r1
 8014174:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8014176:	f107 0310 	add.w	r3, r7, #16
 801417a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801417e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014182:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014186:	2200      	movs	r2, #0
 8014188:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801418a:	2300      	movs	r3, #0
 801418c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8014190:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014194:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014198:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801419c:	7812      	ldrb	r2, [r2, #0]
 801419e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80141a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141a4:	3301      	adds	r3, #1
 80141a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80141aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80141b2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80141b6:	7812      	ldrb	r2, [r2, #0]
 80141b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80141ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141be:	3301      	adds	r3, #1
 80141c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80141c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80141cc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80141d0:	7812      	ldrb	r2, [r2, #0]
 80141d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80141d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141d8:	3301      	adds	r3, #1
 80141da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80141de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80141e6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80141ea:	7812      	ldrb	r2, [r2, #0]
 80141ec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80141ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80141f2:	3301      	adds	r3, #1
 80141f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80141f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80141fc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8014200:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014202:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014206:	3301      	adds	r3, #1
 8014208:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 801420c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014210:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8014214:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014216:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801421a:	3301      	adds	r3, #1
 801421c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8014220:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014224:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014228:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 801422a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801422e:	3301      	adds	r3, #1
 8014230:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8014234:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014238:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801423c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8014240:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014244:	3304      	adds	r3, #4
 8014246:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 801424a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801424e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014252:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8014254:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014258:	3301      	adds	r3, #1
 801425a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801425e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014262:	2218      	movs	r2, #24
 8014264:	2100      	movs	r1, #0
 8014266:	4618      	mov	r0, r3
 8014268:	f000 ff2d 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801426c:	233f      	movs	r3, #63	@ 0x3f
 801426e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8014272:	2386      	movs	r3, #134	@ 0x86
 8014274:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014278:	f107 0310 	add.w	r3, r7, #16
 801427c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014280:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014284:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014288:	f107 030f 	add.w	r3, r7, #15
 801428c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014290:	2301      	movs	r3, #1
 8014292:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014296:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801429a:	2100      	movs	r1, #0
 801429c:	4618      	mov	r0, r3
 801429e:	f001 f99b 	bl	80155d8 <hci_send_req>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	da01      	bge.n	80142ac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80142a8:	23ff      	movs	r3, #255	@ 0xff
 80142aa:	e004      	b.n	80142b6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80142ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80142b4:	781b      	ldrb	r3, [r3, #0]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80142bc:	46bd      	mov	sp, r7
 80142be:	bdb0      	pop	{r4, r5, r7, pc}

080142c0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b0cc      	sub	sp, #304	@ 0x130
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	4602      	mov	r2, r0
 80142c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142cc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80142d0:	6019      	str	r1, [r3, #0]
 80142d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142d6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80142da:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80142dc:	f107 0310 	add.w	r3, r7, #16
 80142e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80142e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80142e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80142ec:	2200      	movs	r2, #0
 80142ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80142f0:	2300      	movs	r3, #0
 80142f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80142f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80142fa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80142fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014302:	8812      	ldrh	r2, [r2, #0]
 8014304:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014306:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801430a:	3302      	adds	r3, #2
 801430c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8014310:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014314:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014318:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801431c:	6812      	ldr	r2, [r2, #0]
 801431e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8014322:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014326:	3304      	adds	r3, #4
 8014328:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801432c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014330:	2218      	movs	r2, #24
 8014332:	2100      	movs	r1, #0
 8014334:	4618      	mov	r0, r3
 8014336:	f000 fec6 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801433a:	233f      	movs	r3, #63	@ 0x3f
 801433c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8014340:	2388      	movs	r3, #136	@ 0x88
 8014342:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014346:	f107 0310 	add.w	r3, r7, #16
 801434a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801434e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014352:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014356:	f107 030f 	add.w	r3, r7, #15
 801435a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801435e:	2301      	movs	r3, #1
 8014360:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014364:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014368:	2100      	movs	r1, #0
 801436a:	4618      	mov	r0, r3
 801436c:	f001 f934 	bl	80155d8 <hci_send_req>
 8014370:	4603      	mov	r3, r0
 8014372:	2b00      	cmp	r3, #0
 8014374:	da01      	bge.n	801437a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8014376:	23ff      	movs	r3, #255	@ 0xff
 8014378:	e004      	b.n	8014384 <aci_gap_pass_key_resp+0xc4>
  return status;
 801437a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801437e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014382:	781b      	ldrb	r3, [r3, #0]
}
 8014384:	4618      	mov	r0, r3
 8014386:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 801438e:	b590      	push	{r4, r7, lr}
 8014390:	b0cd      	sub	sp, #308	@ 0x134
 8014392:	af00      	add	r7, sp, #0
 8014394:	4604      	mov	r4, r0
 8014396:	4608      	mov	r0, r1
 8014398:	4611      	mov	r1, r2
 801439a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801439e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80143a2:	6013      	str	r3, [r2, #0]
 80143a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80143a8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80143ac:	4622      	mov	r2, r4
 80143ae:	701a      	strb	r2, [r3, #0]
 80143b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80143b4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80143b8:	4602      	mov	r2, r0
 80143ba:	701a      	strb	r2, [r3, #0]
 80143bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80143c0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80143c4:	460a      	mov	r2, r1
 80143c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80143c8:	f107 0310 	add.w	r3, r7, #16
 80143cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80143d0:	f107 0308 	add.w	r3, r7, #8
 80143d4:	2207      	movs	r2, #7
 80143d6:	2100      	movs	r1, #0
 80143d8:	4618      	mov	r0, r3
 80143da:	f000 fe74 	bl	80150c6 <Osal_MemSet>
  int index_input = 0;
 80143de:	2300      	movs	r3, #0
 80143e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80143e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80143e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80143ec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80143f0:	7812      	ldrb	r2, [r2, #0]
 80143f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80143f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80143f8:	3301      	adds	r3, #1
 80143fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80143fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014402:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014406:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801440a:	7812      	ldrb	r2, [r2, #0]
 801440c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801440e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014412:	3301      	adds	r3, #1
 8014414:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8014418:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801441c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014420:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014424:	7812      	ldrb	r2, [r2, #0]
 8014426:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014428:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801442c:	3301      	adds	r3, #1
 801442e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014432:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014436:	2218      	movs	r2, #24
 8014438:	2100      	movs	r1, #0
 801443a:	4618      	mov	r0, r3
 801443c:	f000 fe43 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014440:	233f      	movs	r3, #63	@ 0x3f
 8014442:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8014446:	238a      	movs	r3, #138	@ 0x8a
 8014448:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801444c:	f107 0310 	add.w	r3, r7, #16
 8014450:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014458:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801445c:	f107 0308 	add.w	r3, r7, #8
 8014460:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014464:	2307      	movs	r3, #7
 8014466:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801446a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801446e:	2100      	movs	r1, #0
 8014470:	4618      	mov	r0, r3
 8014472:	f001 f8b1 	bl	80155d8 <hci_send_req>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	da01      	bge.n	8014480 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801447c:	23ff      	movs	r3, #255	@ 0xff
 801447e:	e02e      	b.n	80144de <aci_gap_init+0x150>
  if ( resp.Status )
 8014480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014484:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014488:	781b      	ldrb	r3, [r3, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d005      	beq.n	801449a <aci_gap_init+0x10c>
    return resp.Status;
 801448e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014492:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	e021      	b.n	80144de <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801449a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801449e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80144a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80144a6:	b29a      	uxth	r2, r3
 80144a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80144b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80144bc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80144c6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80144c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80144d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80144d4:	b29a      	uxth	r2, r3
 80144d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80144da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80144dc:	2300      	movs	r3, #0
}
 80144de:	4618      	mov	r0, r3
 80144e0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd90      	pop	{r4, r7, pc}

080144e8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b0cc      	sub	sp, #304	@ 0x130
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	4602      	mov	r2, r0
 80144f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144f4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144f8:	6019      	str	r1, [r3, #0]
 80144fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80144fe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014502:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8014504:	f107 0310 	add.w	r3, r7, #16
 8014508:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801450c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014510:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014514:	2200      	movs	r2, #0
 8014516:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014518:	2300      	movs	r3, #0
 801451a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801451e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014522:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014526:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801452a:	7812      	ldrb	r2, [r2, #0]
 801452c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801452e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014532:	3301      	adds	r3, #1
 8014534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8014538:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801453c:	1c58      	adds	r0, r3, #1
 801453e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014542:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014546:	781a      	ldrb	r2, [r3, #0]
 8014548:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801454c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014550:	6819      	ldr	r1, [r3, #0]
 8014552:	f000 fda8 	bl	80150a6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8014556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801455a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014564:	4413      	add	r3, r2
 8014566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801456a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801456e:	2218      	movs	r2, #24
 8014570:	2100      	movs	r1, #0
 8014572:	4618      	mov	r0, r3
 8014574:	f000 fda7 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014578:	233f      	movs	r3, #63	@ 0x3f
 801457a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801457e:	238e      	movs	r3, #142	@ 0x8e
 8014580:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014584:	f107 0310 	add.w	r3, r7, #16
 8014588:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801458c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014590:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014594:	f107 030f 	add.w	r3, r7, #15
 8014598:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801459c:	2301      	movs	r3, #1
 801459e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80145a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80145a6:	2100      	movs	r1, #0
 80145a8:	4618      	mov	r0, r3
 80145aa:	f001 f815 	bl	80155d8 <hci_send_req>
 80145ae:	4603      	mov	r3, r0
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	da01      	bge.n	80145b8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80145b4:	23ff      	movs	r3, #255	@ 0xff
 80145b6:	e004      	b.n	80145c2 <aci_gap_update_adv_data+0xda>
  return status;
 80145b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80145bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80145c0:	781b      	ldrb	r3, [r3, #0]
}
 80145c2:	4618      	mov	r0, r3
 80145c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b088      	sub	sp, #32
 80145d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80145d6:	f107 0308 	add.w	r3, r7, #8
 80145da:	2218      	movs	r2, #24
 80145dc:	2100      	movs	r1, #0
 80145de:	4618      	mov	r0, r3
 80145e0:	f000 fd71 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80145e4:	233f      	movs	r3, #63	@ 0x3f
 80145e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80145e8:	2392      	movs	r3, #146	@ 0x92
 80145ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80145ec:	1dfb      	adds	r3, r7, #7
 80145ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80145f0:	2301      	movs	r3, #1
 80145f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80145f4:	f107 0308 	add.w	r3, r7, #8
 80145f8:	2100      	movs	r1, #0
 80145fa:	4618      	mov	r0, r3
 80145fc:	f000 ffec 	bl	80155d8 <hci_send_req>
 8014600:	4603      	mov	r3, r0
 8014602:	2b00      	cmp	r3, #0
 8014604:	da01      	bge.n	801460a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014606:	23ff      	movs	r3, #255	@ 0xff
 8014608:	e000      	b.n	801460c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801460a:	79fb      	ldrb	r3, [r7, #7]
}
 801460c:	4618      	mov	r0, r3
 801460e:	3720      	adds	r7, #32
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b0cc      	sub	sp, #304	@ 0x130
 8014618:	af00      	add	r7, sp, #0
 801461a:	4602      	mov	r2, r0
 801461c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014620:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014624:	801a      	strh	r2, [r3, #0]
 8014626:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801462a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801462e:	460a      	mov	r2, r1
 8014630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8014632:	f107 0310 	add.w	r3, r7, #16
 8014636:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801463a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801463e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014642:	2200      	movs	r2, #0
 8014644:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014646:	2300      	movs	r3, #0
 8014648:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801464c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014650:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014654:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014658:	8812      	ldrh	r2, [r2, #0]
 801465a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801465c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014660:	3302      	adds	r3, #2
 8014662:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8014666:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801466a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801466e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014672:	7812      	ldrb	r2, [r2, #0]
 8014674:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014676:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801467a:	3301      	adds	r3, #1
 801467c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014680:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014684:	2218      	movs	r2, #24
 8014686:	2100      	movs	r1, #0
 8014688:	4618      	mov	r0, r3
 801468a:	f000 fd1c 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801468e:	233f      	movs	r3, #63	@ 0x3f
 8014690:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8014694:	23a5      	movs	r3, #165	@ 0xa5
 8014696:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801469a:	f107 0310 	add.w	r3, r7, #16
 801469e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80146a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80146a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80146aa:	f107 030f 	add.w	r3, r7, #15
 80146ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80146b2:	2301      	movs	r3, #1
 80146b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80146b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80146bc:	2100      	movs	r1, #0
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 ff8a 	bl	80155d8 <hci_send_req>
 80146c4:	4603      	mov	r3, r0
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	da01      	bge.n	80146ce <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80146ca:	23ff      	movs	r3, #255	@ 0xff
 80146cc:	e004      	b.n	80146d8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80146ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80146d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80146d6:	781b      	ldrb	r3, [r3, #0]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80146e2:	b580      	push	{r7, lr}
 80146e4:	b088      	sub	sp, #32
 80146e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80146e8:	2300      	movs	r3, #0
 80146ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80146ec:	f107 0308 	add.w	r3, r7, #8
 80146f0:	2218      	movs	r2, #24
 80146f2:	2100      	movs	r1, #0
 80146f4:	4618      	mov	r0, r3
 80146f6:	f000 fce6 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80146fa:	233f      	movs	r3, #63	@ 0x3f
 80146fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80146fe:	f240 1301 	movw	r3, #257	@ 0x101
 8014702:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014704:	1dfb      	adds	r3, r7, #7
 8014706:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014708:	2301      	movs	r3, #1
 801470a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801470c:	f107 0308 	add.w	r3, r7, #8
 8014710:	2100      	movs	r1, #0
 8014712:	4618      	mov	r0, r3
 8014714:	f000 ff60 	bl	80155d8 <hci_send_req>
 8014718:	4603      	mov	r3, r0
 801471a:	2b00      	cmp	r3, #0
 801471c:	da01      	bge.n	8014722 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801471e:	23ff      	movs	r3, #255	@ 0xff
 8014720:	e000      	b.n	8014724 <aci_gatt_init+0x42>
  return status;
 8014722:	79fb      	ldrb	r3, [r7, #7]
}
 8014724:	4618      	mov	r0, r3
 8014726:	3720      	adds	r7, #32
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}

0801472c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 801472c:	b590      	push	{r4, r7, lr}
 801472e:	b0cf      	sub	sp, #316	@ 0x13c
 8014730:	af00      	add	r7, sp, #0
 8014732:	4604      	mov	r4, r0
 8014734:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8014738:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801473c:	6001      	str	r1, [r0, #0]
 801473e:	4610      	mov	r0, r2
 8014740:	4619      	mov	r1, r3
 8014742:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014746:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801474a:	4622      	mov	r2, r4
 801474c:	701a      	strb	r2, [r3, #0]
 801474e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014752:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014756:	4602      	mov	r2, r0
 8014758:	701a      	strb	r2, [r3, #0]
 801475a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801475e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014762:	460a      	mov	r2, r1
 8014764:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8014766:	f107 0310 	add.w	r3, r7, #16
 801476a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801476e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014772:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	2b01      	cmp	r3, #1
 801477a:	d00a      	beq.n	8014792 <aci_gatt_add_service+0x66>
 801477c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014780:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	2b02      	cmp	r3, #2
 8014788:	d101      	bne.n	801478e <aci_gatt_add_service+0x62>
 801478a:	2311      	movs	r3, #17
 801478c:	e002      	b.n	8014794 <aci_gatt_add_service+0x68>
 801478e:	2301      	movs	r3, #1
 8014790:	e000      	b.n	8014794 <aci_gatt_add_service+0x68>
 8014792:	2303      	movs	r3, #3
 8014794:	f107 0210 	add.w	r2, r7, #16
 8014798:	4413      	add	r3, r2
 801479a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801479e:	f107 030c 	add.w	r3, r7, #12
 80147a2:	2203      	movs	r2, #3
 80147a4:	2100      	movs	r1, #0
 80147a6:	4618      	mov	r0, r3
 80147a8:	f000 fc8d 	bl	80150c6 <Osal_MemSet>
  int index_input = 0;
 80147ac:	2300      	movs	r3, #0
 80147ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80147b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80147b6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80147ba:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80147be:	7812      	ldrb	r2, [r2, #0]
 80147c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80147c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80147c6:	3301      	adds	r3, #1
 80147c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80147cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147d0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d002      	beq.n	80147e0 <aci_gatt_add_service+0xb4>
 80147da:	2b02      	cmp	r3, #2
 80147dc:	d004      	beq.n	80147e8 <aci_gatt_add_service+0xbc>
 80147de:	e007      	b.n	80147f0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80147e0:	2302      	movs	r3, #2
 80147e2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80147e6:	e005      	b.n	80147f4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80147e8:	2310      	movs	r3, #16
 80147ea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80147ee:	e001      	b.n	80147f4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80147f0:	2397      	movs	r3, #151	@ 0x97
 80147f2:	e06c      	b.n	80148ce <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80147f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80147f8:	1c58      	adds	r0, r3, #1
 80147fa:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80147fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014802:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014806:	6819      	ldr	r1, [r3, #0]
 8014808:	f000 fc4d 	bl	80150a6 <Osal_MemCpy>
    index_input += size;
 801480c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8014810:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014814:	4413      	add	r3, r2
 8014816:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801481a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801481e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014822:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014826:	7812      	ldrb	r2, [r2, #0]
 8014828:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801482a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801482e:	3301      	adds	r3, #1
 8014830:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014834:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014838:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801483c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014840:	7812      	ldrb	r2, [r2, #0]
 8014842:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014844:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014848:	3301      	adds	r3, #1
 801484a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801484e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014852:	2218      	movs	r2, #24
 8014854:	2100      	movs	r1, #0
 8014856:	4618      	mov	r0, r3
 8014858:	f000 fc35 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 801485c:	233f      	movs	r3, #63	@ 0x3f
 801485e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8014862:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8014866:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801486a:	f107 0310 	add.w	r3, r7, #16
 801486e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014872:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014876:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801487a:	f107 030c 	add.w	r3, r7, #12
 801487e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8014882:	2303      	movs	r3, #3
 8014884:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014888:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801488c:	2100      	movs	r1, #0
 801488e:	4618      	mov	r0, r3
 8014890:	f000 fea2 	bl	80155d8 <hci_send_req>
 8014894:	4603      	mov	r3, r0
 8014896:	2b00      	cmp	r3, #0
 8014898:	da01      	bge.n	801489e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801489a:	23ff      	movs	r3, #255	@ 0xff
 801489c:	e017      	b.n	80148ce <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 801489e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148a6:	781b      	ldrb	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d005      	beq.n	80148b8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80148ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	e00a      	b.n	80148ce <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80148b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80148bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80148c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80148c4:	b29a      	uxth	r2, r3
 80148c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80148ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80148cc:	2300      	movs	r3, #0
}
 80148ce:	4618      	mov	r0, r3
 80148d0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80148d4:	46bd      	mov	sp, r7
 80148d6:	bd90      	pop	{r4, r7, pc}

080148d8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80148d8:	b590      	push	{r4, r7, lr}
 80148da:	b0d1      	sub	sp, #324	@ 0x144
 80148dc:	af00      	add	r7, sp, #0
 80148de:	4604      	mov	r4, r0
 80148e0:	4608      	mov	r0, r1
 80148e2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80148e6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80148ea:	600a      	str	r2, [r1, #0]
 80148ec:	4619      	mov	r1, r3
 80148ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80148f2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80148f6:	4622      	mov	r2, r4
 80148f8:	801a      	strh	r2, [r3, #0]
 80148fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80148fe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014902:	4602      	mov	r2, r0
 8014904:	701a      	strb	r2, [r3, #0]
 8014906:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801490a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801490e:	460a      	mov	r2, r1
 8014910:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8014912:	f107 0318 	add.w	r3, r7, #24
 8014916:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801491a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801491e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	2b01      	cmp	r3, #1
 8014926:	d00a      	beq.n	801493e <aci_gatt_add_char+0x66>
 8014928:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801492c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	2b02      	cmp	r3, #2
 8014934:	d101      	bne.n	801493a <aci_gatt_add_char+0x62>
 8014936:	2313      	movs	r3, #19
 8014938:	e002      	b.n	8014940 <aci_gatt_add_char+0x68>
 801493a:	2303      	movs	r3, #3
 801493c:	e000      	b.n	8014940 <aci_gatt_add_char+0x68>
 801493e:	2305      	movs	r3, #5
 8014940:	f107 0218 	add.w	r2, r7, #24
 8014944:	4413      	add	r3, r2
 8014946:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801494a:	f107 0314 	add.w	r3, r7, #20
 801494e:	2203      	movs	r2, #3
 8014950:	2100      	movs	r1, #0
 8014952:	4618      	mov	r0, r3
 8014954:	f000 fbb7 	bl	80150c6 <Osal_MemSet>
  int index_input = 0;
 8014958:	2300      	movs	r3, #0
 801495a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801495e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8014962:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014966:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801496a:	8812      	ldrh	r2, [r2, #0]
 801496c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801496e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014972:	3302      	adds	r3, #2
 8014974:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8014978:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801497c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8014980:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8014984:	7812      	ldrb	r2, [r2, #0]
 8014986:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014988:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801498c:	3301      	adds	r3, #1
 801498e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8014992:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014996:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801499a:	781b      	ldrb	r3, [r3, #0]
 801499c:	2b01      	cmp	r3, #1
 801499e:	d002      	beq.n	80149a6 <aci_gatt_add_char+0xce>
 80149a0:	2b02      	cmp	r3, #2
 80149a2:	d004      	beq.n	80149ae <aci_gatt_add_char+0xd6>
 80149a4:	e007      	b.n	80149b6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80149a6:	2302      	movs	r3, #2
 80149a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80149ac:	e005      	b.n	80149ba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80149ae:	2310      	movs	r3, #16
 80149b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80149b4:	e001      	b.n	80149ba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80149b6:	2397      	movs	r3, #151	@ 0x97
 80149b8:	e091      	b.n	8014ade <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80149ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80149be:	1cd8      	adds	r0, r3, #3
 80149c0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80149c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80149c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80149cc:	6819      	ldr	r1, [r3, #0]
 80149ce:	f000 fb6a 	bl	80150a6 <Osal_MemCpy>
    index_input += size;
 80149d2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80149d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80149da:	4413      	add	r3, r2
 80149dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80149e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80149e8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80149ec:	8812      	ldrh	r2, [r2, #0]
 80149ee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80149f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80149f4:	3302      	adds	r3, #2
 80149f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80149fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80149fe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8014a02:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8014a04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a08:	3301      	adds	r3, #1
 8014a0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8014a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a12:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014a16:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8014a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a1c:	3301      	adds	r3, #1
 8014a1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8014a22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a26:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8014a2a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014a2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a30:	3301      	adds	r3, #1
 8014a32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8014a36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a3a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8014a3e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014a40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a44:	3301      	adds	r3, #1
 8014a46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8014a4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014a4e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8014a52:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014a54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a58:	3301      	adds	r3, #1
 8014a5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014a5e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014a62:	2218      	movs	r2, #24
 8014a64:	2100      	movs	r1, #0
 8014a66:	4618      	mov	r0, r3
 8014a68:	f000 fb2d 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014a6c:	233f      	movs	r3, #63	@ 0x3f
 8014a6e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8014a72:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8014a76:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8014a7a:	f107 0318 	add.w	r3, r7, #24
 8014a7e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8014a82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014a86:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8014a8a:	f107 0314 	add.w	r3, r7, #20
 8014a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8014a92:	2303      	movs	r3, #3
 8014a94:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014a98:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	f000 fd9a 	bl	80155d8 <hci_send_req>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	da01      	bge.n	8014aae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8014aaa:	23ff      	movs	r3, #255	@ 0xff
 8014aac:	e017      	b.n	8014ade <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8014aae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014ab2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d005      	beq.n	8014ac8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8014abc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014ac0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	e00a      	b.n	8014ade <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8014ac8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8014acc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014ad0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014ad4:	b29a      	uxth	r2, r3
 8014ad6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8014ada:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd90      	pop	{r4, r7, pc}

08014ae8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8014ae8:	b5b0      	push	{r4, r5, r7, lr}
 8014aea:	b0cc      	sub	sp, #304	@ 0x130
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	4605      	mov	r5, r0
 8014af0:	460c      	mov	r4, r1
 8014af2:	4610      	mov	r0, r2
 8014af4:	4619      	mov	r1, r3
 8014af6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014afa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014afe:	462a      	mov	r2, r5
 8014b00:	801a      	strh	r2, [r3, #0]
 8014b02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b06:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014b0a:	4622      	mov	r2, r4
 8014b0c:	801a      	strh	r2, [r3, #0]
 8014b0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b12:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8014b16:	4602      	mov	r2, r0
 8014b18:	701a      	strb	r2, [r3, #0]
 8014b1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b1e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014b22:	460a      	mov	r2, r1
 8014b24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8014b26:	f107 0310 	add.w	r3, r7, #16
 8014b2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014b2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014b36:	2200      	movs	r2, #0
 8014b38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8014b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014b4c:	8812      	ldrh	r2, [r2, #0]
 8014b4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b54:	3302      	adds	r3, #2
 8014b56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8014b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b62:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014b66:	8812      	ldrh	r2, [r2, #0]
 8014b68:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b6e:	3302      	adds	r3, #2
 8014b70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8014b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b7c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8014b80:	7812      	ldrb	r2, [r2, #0]
 8014b82:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014b84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b88:	3301      	adds	r3, #1
 8014b8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8014b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014b92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b96:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8014b9a:	7812      	ldrb	r2, [r2, #0]
 8014b9c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8014ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014bac:	1d98      	adds	r0, r3, #6
 8014bae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014bb2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014bb6:	781b      	ldrb	r3, [r3, #0]
 8014bb8:	461a      	mov	r2, r3
 8014bba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8014bbe:	f000 fa72 	bl	80150a6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8014bc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014bc6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014bd0:	4413      	add	r3, r2
 8014bd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014bd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014bda:	2218      	movs	r2, #24
 8014bdc:	2100      	movs	r1, #0
 8014bde:	4618      	mov	r0, r3
 8014be0:	f000 fa71 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014be4:	233f      	movs	r3, #63	@ 0x3f
 8014be6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8014bea:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8014bee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014bf2:	f107 0310 	add.w	r3, r7, #16
 8014bf6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bfe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014c02:	f107 030f 	add.w	r3, r7, #15
 8014c06:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014c0a:	2301      	movs	r3, #1
 8014c0c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c10:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c14:	2100      	movs	r1, #0
 8014c16:	4618      	mov	r0, r3
 8014c18:	f000 fcde 	bl	80155d8 <hci_send_req>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	da01      	bge.n	8014c26 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8014c22:	23ff      	movs	r3, #255	@ 0xff
 8014c24:	e004      	b.n	8014c30 <aci_gatt_update_char_value+0x148>
  return status;
 8014c26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c2a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014c2e:	781b      	ldrb	r3, [r3, #0]
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014c36:	46bd      	mov	sp, r7
 8014c38:	bdb0      	pop	{r4, r5, r7, pc}

08014c3a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8014c3a:	b580      	push	{r7, lr}
 8014c3c:	b0cc      	sub	sp, #304	@ 0x130
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	4602      	mov	r2, r0
 8014c42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c46:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014c4a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8014c4c:	f107 0310 	add.w	r3, r7, #16
 8014c50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014c54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c58:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014c60:	2300      	movs	r3, #0
 8014c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014c6a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014c6e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014c72:	8812      	ldrh	r2, [r2, #0]
 8014c74:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c7a:	3302      	adds	r3, #2
 8014c7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014c84:	2218      	movs	r2, #24
 8014c86:	2100      	movs	r1, #0
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f000 fa1c 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c8e:	233f      	movs	r3, #63	@ 0x3f
 8014c90:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8014c94:	f240 1325 	movw	r3, #293	@ 0x125
 8014c98:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014c9c:	f107 0310 	add.w	r3, r7, #16
 8014ca0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014ca4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ca8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014cac:	f107 030f 	add.w	r3, r7, #15
 8014cb0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014cb4:	2301      	movs	r3, #1
 8014cb6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014cba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f000 fc89 	bl	80155d8 <hci_send_req>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	da01      	bge.n	8014cd0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8014ccc:	23ff      	movs	r3, #255	@ 0xff
 8014cce:	e004      	b.n	8014cda <aci_gatt_confirm_indication+0xa0>
  return status;
 8014cd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cd4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014cd8:	781b      	ldrb	r3, [r3, #0]
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b0cc      	sub	sp, #304	@ 0x130
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014cf2:	601a      	str	r2, [r3, #0]
 8014cf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cf8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	701a      	strb	r2, [r3, #0]
 8014d00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d08:	460a      	mov	r2, r1
 8014d0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8014d0c:	f107 0310 	add.w	r3, r7, #16
 8014d10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014d14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014d20:	2300      	movs	r3, #0
 8014d22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8014d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d2e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014d32:	7812      	ldrb	r2, [r2, #0]
 8014d34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d3a:	3301      	adds	r3, #1
 8014d3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8014d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014d48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014d4c:	7812      	ldrb	r2, [r2, #0]
 8014d4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d54:	3301      	adds	r3, #1
 8014d56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8014d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014d5e:	1c98      	adds	r0, r3, #2
 8014d60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d64:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d68:	781a      	ldrb	r2, [r3, #0]
 8014d6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d6e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014d72:	6819      	ldr	r1, [r3, #0]
 8014d74:	f000 f997 	bl	80150a6 <Osal_MemCpy>
  index_input += Length;
 8014d78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d7c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014d86:	4413      	add	r3, r2
 8014d88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014d90:	2218      	movs	r2, #24
 8014d92:	2100      	movs	r1, #0
 8014d94:	4618      	mov	r0, r3
 8014d96:	f000 f996 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d9a:	233f      	movs	r3, #63	@ 0x3f
 8014d9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8014da0:	230c      	movs	r3, #12
 8014da2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014da6:	f107 0310 	add.w	r3, r7, #16
 8014daa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014db2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014db6:	f107 030f 	add.w	r3, r7, #15
 8014dba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014dc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014dc8:	2100      	movs	r1, #0
 8014dca:	4618      	mov	r0, r3
 8014dcc:	f000 fc04 	bl	80155d8 <hci_send_req>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	da01      	bge.n	8014dda <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8014dd6:	23ff      	movs	r3, #255	@ 0xff
 8014dd8:	e004      	b.n	8014de4 <aci_hal_write_config_data+0x100>
  return status;
 8014dda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014de2:	781b      	ldrb	r3, [r3, #0]
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}

08014dee <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8014dee:	b580      	push	{r7, lr}
 8014df0:	b0cc      	sub	sp, #304	@ 0x130
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	4602      	mov	r2, r0
 8014df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dfa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014dfe:	701a      	strb	r2, [r3, #0]
 8014e00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e04:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014e08:	460a      	mov	r2, r1
 8014e0a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8014e0c:	f107 0310 	add.w	r3, r7, #16
 8014e10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014e14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e20:	2300      	movs	r3, #0
 8014e22:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8014e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e2a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e2e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014e32:	7812      	ldrb	r2, [r2, #0]
 8014e34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e3a:	3301      	adds	r3, #1
 8014e3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8014e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014e48:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014e4c:	7812      	ldrb	r2, [r2, #0]
 8014e4e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014e50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e54:	3301      	adds	r3, #1
 8014e56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e5e:	2218      	movs	r2, #24
 8014e60:	2100      	movs	r1, #0
 8014e62:	4618      	mov	r0, r3
 8014e64:	f000 f92f 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e68:	233f      	movs	r3, #63	@ 0x3f
 8014e6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8014e6e:	230f      	movs	r3, #15
 8014e70:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014e74:	f107 0310 	add.w	r3, r7, #16
 8014e78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014e84:	f107 030f 	add.w	r3, r7, #15
 8014e88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e96:	2100      	movs	r1, #0
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f000 fb9d 	bl	80155d8 <hci_send_req>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	da01      	bge.n	8014ea8 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8014ea4:	23ff      	movs	r3, #255	@ 0xff
 8014ea6:	e004      	b.n	8014eb2 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8014ea8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014eac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014eb0:	781b      	ldrb	r3, [r3, #0]
}
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	bd80      	pop	{r7, pc}

08014ebc <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b0cc      	sub	sp, #304	@ 0x130
 8014ec0:	af00      	add	r7, sp, #0
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ec8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014ecc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8014ece:	f107 0310 	add.w	r3, r7, #16
 8014ed2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014ed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014eda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014ede:	2200      	movs	r2, #0
 8014ee0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8014ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014eec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014ef0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014ef4:	8812      	ldrh	r2, [r2, #0]
 8014ef6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014efc:	3302      	adds	r3, #2
 8014efe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f06:	2218      	movs	r2, #24
 8014f08:	2100      	movs	r1, #0
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f000 f8db 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f10:	233f      	movs	r3, #63	@ 0x3f
 8014f12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8014f16:	2318      	movs	r3, #24
 8014f18:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f1c:	f107 0310 	add.w	r3, r7, #16
 8014f20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f2c:	f107 030f 	add.w	r3, r7, #15
 8014f30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f34:	2301      	movs	r3, #1
 8014f36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f3e:	2100      	movs	r1, #0
 8014f40:	4618      	mov	r0, r3
 8014f42:	f000 fb49 	bl	80155d8 <hci_send_req>
 8014f46:	4603      	mov	r3, r0
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	da01      	bge.n	8014f50 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8014f4c:	23ff      	movs	r3, #255	@ 0xff
 8014f4e:	e004      	b.n	8014f5a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8014f50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f58:	781b      	ldrb	r3, [r3, #0]
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}

08014f64 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b088      	sub	sp, #32
 8014f68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f6e:	f107 0308 	add.w	r3, r7, #8
 8014f72:	2218      	movs	r2, #24
 8014f74:	2100      	movs	r1, #0
 8014f76:	4618      	mov	r0, r3
 8014f78:	f000 f8a5 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x03;
 8014f7c:	2303      	movs	r3, #3
 8014f7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8014f80:	2303      	movs	r3, #3
 8014f82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014f84:	1dfb      	adds	r3, r7, #7
 8014f86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f8c:	f107 0308 	add.w	r3, r7, #8
 8014f90:	2100      	movs	r1, #0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 fb20 	bl	80155d8 <hci_send_req>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	da01      	bge.n	8014fa2 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014f9e:	23ff      	movs	r3, #255	@ 0xff
 8014fa0:	e000      	b.n	8014fa4 <hci_reset+0x40>
  return status;
 8014fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3720      	adds	r7, #32
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}

08014fac <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8014fac:	b590      	push	{r4, r7, lr}
 8014fae:	b0cd      	sub	sp, #308	@ 0x134
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	4608      	mov	r0, r1
 8014fb6:	4611      	mov	r1, r2
 8014fb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fbc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014fc0:	4622      	mov	r2, r4
 8014fc2:	701a      	strb	r2, [r3, #0]
 8014fc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014fcc:	4602      	mov	r2, r0
 8014fce:	701a      	strb	r2, [r3, #0]
 8014fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fd4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014fd8:	460a      	mov	r2, r1
 8014fda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8014fdc:	f107 0310 	add.w	r3, r7, #16
 8014fe0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014fe4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fe8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014fec:	2200      	movs	r2, #0
 8014fee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8014ff6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ffa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014ffe:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015002:	7812      	ldrb	r2, [r2, #0]
 8015004:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015006:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801500a:	3301      	adds	r3, #1
 801500c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015010:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015014:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015018:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801501c:	7812      	ldrb	r2, [r2, #0]
 801501e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015020:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015024:	3301      	adds	r3, #1
 8015026:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801502a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801502e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015032:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015036:	7812      	ldrb	r2, [r2, #0]
 8015038:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801503a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801503e:	3301      	adds	r3, #1
 8015040:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015044:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015048:	2218      	movs	r2, #24
 801504a:	2100      	movs	r1, #0
 801504c:	4618      	mov	r0, r3
 801504e:	f000 f83a 	bl	80150c6 <Osal_MemSet>
  rq.ogf = 0x08;
 8015052:	2308      	movs	r3, #8
 8015054:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015058:	2331      	movs	r3, #49	@ 0x31
 801505a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801505e:	f107 0310 	add.w	r3, r7, #16
 8015062:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015066:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801506a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801506e:	f107 030f 	add.w	r3, r7, #15
 8015072:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015076:	2301      	movs	r3, #1
 8015078:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801507c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015080:	2100      	movs	r1, #0
 8015082:	4618      	mov	r0, r3
 8015084:	f000 faa8 	bl	80155d8 <hci_send_req>
 8015088:	4603      	mov	r3, r0
 801508a:	2b00      	cmp	r3, #0
 801508c:	da01      	bge.n	8015092 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 801508e:	23ff      	movs	r3, #255	@ 0xff
 8015090:	e004      	b.n	801509c <hci_le_set_default_phy+0xf0>
  return status;
 8015092:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015096:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801509a:	781b      	ldrb	r3, [r3, #0]
}
 801509c:	4618      	mov	r0, r3
 801509e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd90      	pop	{r4, r7, pc}

080150a6 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b084      	sub	sp, #16
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	60f8      	str	r0, [r7, #12]
 80150ae:	60b9      	str	r1, [r7, #8]
 80150b0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80150b2:	687a      	ldr	r2, [r7, #4]
 80150b4:	68b9      	ldr	r1, [r7, #8]
 80150b6:	68f8      	ldr	r0, [r7, #12]
 80150b8:	f005 fd6d 	bl	801ab96 <memcpy>
 80150bc:	4603      	mov	r3, r0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b084      	sub	sp, #16
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	60f8      	str	r0, [r7, #12]
 80150ce:	60b9      	str	r1, [r7, #8]
 80150d0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	68b9      	ldr	r1, [r7, #8]
 80150d6:	68f8      	ldr	r0, [r7, #12]
 80150d8:	f005 fc73 	bl	801a9c2 <memset>
 80150dc:	4603      	mov	r3, r0
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}

080150e6 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80150e6:	b480      	push	{r7}
 80150e8:	af00      	add	r7, sp, #0
  return;
 80150ea:	bf00      	nop
}
 80150ec:	46bd      	mov	sp, r7
 80150ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f2:	4770      	bx	lr

080150f4 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80150f4:	b480      	push	{r7}
 80150f6:	af00      	add	r7, sp, #0
  return;
 80150f8:	bf00      	nop
}
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr

08015102 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015102:	b480      	push	{r7}
 8015104:	af00      	add	r7, sp, #0
  return;
 8015106:	bf00      	nop
}
 8015108:	46bd      	mov	sp, r7
 801510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510e:	4770      	bx	lr

08015110 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015110:	b480      	push	{r7}
 8015112:	af00      	add	r7, sp, #0
  return;
 8015114:	bf00      	nop
}
 8015116:	46bd      	mov	sp, r7
 8015118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511c:	4770      	bx	lr

0801511e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801511e:	b480      	push	{r7}
 8015120:	af00      	add	r7, sp, #0
  return;
 8015122:	bf00      	nop
}
 8015124:	46bd      	mov	sp, r7
 8015126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512a:	4770      	bx	lr

0801512c <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 801512c:	b480      	push	{r7}
 801512e:	af00      	add	r7, sp, #0
  return;
 8015130:	bf00      	nop
}
 8015132:	46bd      	mov	sp, r7
 8015134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015138:	4770      	bx	lr

0801513a <HRS_Init>:
__WEAK void HRS_Init( void )
{
 801513a:	b480      	push	{r7}
 801513c:	af00      	add	r7, sp, #0
  return;
 801513e:	bf00      	nop
}
 8015140:	46bd      	mov	sp, r7
 8015142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015146:	4770      	bx	lr

08015148 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015148:	b480      	push	{r7}
 801514a:	af00      	add	r7, sp, #0
  return;
 801514c:	bf00      	nop
}
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8015156:	b480      	push	{r7}
 8015158:	af00      	add	r7, sp, #0
  return;
 801515a:	bf00      	nop
}
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr

08015164 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8015164:	b480      	push	{r7}
 8015166:	af00      	add	r7, sp, #0
  return;
 8015168:	bf00      	nop
}
 801516a:	46bd      	mov	sp, r7
 801516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015170:	4770      	bx	lr

08015172 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8015172:	b480      	push	{r7}
 8015174:	af00      	add	r7, sp, #0
  return;
 8015176:	bf00      	nop
}
 8015178:	46bd      	mov	sp, r7
 801517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517e:	4770      	bx	lr

08015180 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8015180:	b480      	push	{r7}
 8015182:	af00      	add	r7, sp, #0
  return;
 8015184:	bf00      	nop
}
 8015186:	46bd      	mov	sp, r7
 8015188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518c:	4770      	bx	lr

0801518e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801518e:	b480      	push	{r7}
 8015190:	af00      	add	r7, sp, #0
  return;
 8015192:	bf00      	nop
}
 8015194:	46bd      	mov	sp, r7
 8015196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519a:	4770      	bx	lr

0801519c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801519c:	b480      	push	{r7}
 801519e:	af00      	add	r7, sp, #0
  return;
 80151a0:	bf00      	nop
}
 80151a2:	46bd      	mov	sp, r7
 80151a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a8:	4770      	bx	lr

080151aa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80151aa:	b480      	push	{r7}
 80151ac:	af00      	add	r7, sp, #0
  return;
 80151ae:	bf00      	nop
}
 80151b0:	46bd      	mov	sp, r7
 80151b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b6:	4770      	bx	lr

080151b8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80151b8:	b480      	push	{r7}
 80151ba:	af00      	add	r7, sp, #0
  return;
 80151bc:	bf00      	nop
}
 80151be:	46bd      	mov	sp, r7
 80151c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c4:	4770      	bx	lr

080151c6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80151c6:	b480      	push	{r7}
 80151c8:	af00      	add	r7, sp, #0
  return;
 80151ca:	bf00      	nop
}
 80151cc:	46bd      	mov	sp, r7
 80151ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d2:	4770      	bx	lr

080151d4 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80151d8:	4b04      	ldr	r3, [pc, #16]	@ (80151ec <SVCCTL_Init+0x18>)
 80151da:	2200      	movs	r2, #0
 80151dc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80151de:	4b04      	ldr	r3, [pc, #16]	@ (80151f0 <SVCCTL_Init+0x1c>)
 80151e0:	2200      	movs	r2, #0
 80151e2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80151e4:	f000 f806 	bl	80151f4 <SVCCTL_SvcInit>

  return;
 80151e8:	bf00      	nop
}
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	200002ec 	.word	0x200002ec
 80151f0:	2000030c 	.word	0x2000030c

080151f4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	af00      	add	r7, sp, #0
  BAS_Init();
 80151f8:	f7ff ff75 	bl	80150e6 <BAS_Init>

  BLS_Init();
 80151fc:	f7ff ff7a 	bl	80150f4 <BLS_Init>

  CRS_STM_Init();
 8015200:	f7ff ff7f 	bl	8015102 <CRS_STM_Init>

  DIS_Init();
 8015204:	f7ff ff84 	bl	8015110 <DIS_Init>

  EDS_STM_Init();
 8015208:	f7ff ff89 	bl	801511e <EDS_STM_Init>

  HIDS_Init();
 801520c:	f7ff ff8e 	bl	801512c <HIDS_Init>

  HRS_Init();
 8015210:	f7ff ff93 	bl	801513a <HRS_Init>

  HTS_Init();
 8015214:	f7ff ff98 	bl	8015148 <HTS_Init>

  IAS_Init();
 8015218:	f7ff ff9d 	bl	8015156 <IAS_Init>

  LLS_Init();
 801521c:	f7ff ffa2 	bl	8015164 <LLS_Init>

  TPS_Init();
 8015220:	f7ff ffa7 	bl	8015172 <TPS_Init>

  MOTENV_STM_Init();
 8015224:	f7ff ffac 	bl	8015180 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8015228:	f7ff ffb1 	bl	801518e <P2PS_STM_Init>

  ZDD_STM_Init();
 801522c:	f7ff ffb6 	bl	801519c <ZDD_STM_Init>

  OTAS_STM_Init();
 8015230:	f7ff ffbb 	bl	80151aa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8015234:	f7ff ffc7 	bl	80151c6 <BVOPUS_STM_Init>

  MESH_Init();
 8015238:	f7ff ffbe 	bl	80151b8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 801523c:	f001 fb84 	bl	8016948 <SVCCTL_InitCustomSvc>
  
  return;
 8015240:	bf00      	nop
}
 8015242:	bd80      	pop	{r7, pc}

08015244 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8015244:	b480      	push	{r7}
 8015246:	b083      	sub	sp, #12
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 801524c:	4b09      	ldr	r3, [pc, #36]	@ (8015274 <SVCCTL_RegisterSvcHandler+0x30>)
 801524e:	7f1b      	ldrb	r3, [r3, #28]
 8015250:	4619      	mov	r1, r3
 8015252:	4a08      	ldr	r2, [pc, #32]	@ (8015274 <SVCCTL_RegisterSvcHandler+0x30>)
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 801525a:	4b06      	ldr	r3, [pc, #24]	@ (8015274 <SVCCTL_RegisterSvcHandler+0x30>)
 801525c:	7f1b      	ldrb	r3, [r3, #28]
 801525e:	3301      	adds	r3, #1
 8015260:	b2da      	uxtb	r2, r3
 8015262:	4b04      	ldr	r3, [pc, #16]	@ (8015274 <SVCCTL_RegisterSvcHandler+0x30>)
 8015264:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8015266:	bf00      	nop
}
 8015268:	370c      	adds	r7, #12
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr
 8015272:	bf00      	nop
 8015274:	200002ec 	.word	0x200002ec

08015278 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8015278:	b580      	push	{r7, lr}
 801527a:	b086      	sub	sp, #24
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	3301      	adds	r3, #1
 8015284:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8015286:	2300      	movs	r3, #0
 8015288:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801528a:	693b      	ldr	r3, [r7, #16]
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	2bff      	cmp	r3, #255	@ 0xff
 8015290:	d125      	bne.n	80152de <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8015292:	693b      	ldr	r3, [r7, #16]
 8015294:	3302      	adds	r3, #2
 8015296:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	881b      	ldrh	r3, [r3, #0]
 801529c:	b29b      	uxth	r3, r3
 801529e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80152a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80152a6:	d118      	bne.n	80152da <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80152a8:	2300      	movs	r3, #0
 80152aa:	757b      	strb	r3, [r7, #21]
 80152ac:	e00d      	b.n	80152ca <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80152ae:	7d7b      	ldrb	r3, [r7, #21]
 80152b0:	4a1a      	ldr	r2, [pc, #104]	@ (801531c <SVCCTL_UserEvtRx+0xa4>)
 80152b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80152b6:	6878      	ldr	r0, [r7, #4]
 80152b8:	4798      	blx	r3
 80152ba:	4603      	mov	r3, r0
 80152bc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80152be:	7dfb      	ldrb	r3, [r7, #23]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d108      	bne.n	80152d6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80152c4:	7d7b      	ldrb	r3, [r7, #21]
 80152c6:	3301      	adds	r3, #1
 80152c8:	757b      	strb	r3, [r7, #21]
 80152ca:	4b14      	ldr	r3, [pc, #80]	@ (801531c <SVCCTL_UserEvtRx+0xa4>)
 80152cc:	7f1b      	ldrb	r3, [r3, #28]
 80152ce:	7d7a      	ldrb	r2, [r7, #21]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d3ec      	bcc.n	80152ae <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80152d4:	e002      	b.n	80152dc <SVCCTL_UserEvtRx+0x64>
              break;
 80152d6:	bf00      	nop
          break;
 80152d8:	e000      	b.n	80152dc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80152da:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80152dc:	e000      	b.n	80152e0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80152de:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80152e0:	7dfb      	ldrb	r3, [r7, #23]
 80152e2:	2b02      	cmp	r3, #2
 80152e4:	d00f      	beq.n	8015306 <SVCCTL_UserEvtRx+0x8e>
 80152e6:	2b02      	cmp	r3, #2
 80152e8:	dc10      	bgt.n	801530c <SVCCTL_UserEvtRx+0x94>
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d002      	beq.n	80152f4 <SVCCTL_UserEvtRx+0x7c>
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d006      	beq.n	8015300 <SVCCTL_UserEvtRx+0x88>
 80152f2:	e00b      	b.n	801530c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 ff85 	bl	8016204 <SVCCTL_App_Notification>
 80152fa:	4603      	mov	r3, r0
 80152fc:	75bb      	strb	r3, [r7, #22]
      break;
 80152fe:	e008      	b.n	8015312 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8015300:	2301      	movs	r3, #1
 8015302:	75bb      	strb	r3, [r7, #22]
      break;
 8015304:	e005      	b.n	8015312 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8015306:	2300      	movs	r3, #0
 8015308:	75bb      	strb	r3, [r7, #22]
      break;
 801530a:	e002      	b.n	8015312 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801530c:	2301      	movs	r3, #1
 801530e:	75bb      	strb	r3, [r7, #22]
      break;
 8015310:	bf00      	nop
  }

  return (return_status);
 8015312:	7dbb      	ldrb	r3, [r7, #22]
}
 8015314:	4618      	mov	r0, r3
 8015316:	3718      	adds	r7, #24
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	200002ec 	.word	0x200002ec

08015320 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b088      	sub	sp, #32
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015328:	f107 030c 	add.w	r3, r7, #12
 801532c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015334:	69fb      	ldr	r3, [r7, #28]
 8015336:	212e      	movs	r1, #46	@ 0x2e
 8015338:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 801533c:	f000 fae8 	bl	8015910 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	330b      	adds	r3, #11
 8015344:	78db      	ldrb	r3, [r3, #3]
}
 8015346:	4618      	mov	r0, r3
 8015348:	3720      	adds	r7, #32
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}

0801534e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 801534e:	b580      	push	{r7, lr}
 8015350:	b088      	sub	sp, #32
 8015352:	af00      	add	r7, sp, #0
 8015354:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015356:	f107 030c 	add.w	r3, r7, #12
 801535a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	210f      	movs	r1, #15
 8015366:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 801536a:	f000 fad1 	bl	8015910 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	330b      	adds	r3, #11
 8015372:	78db      	ldrb	r3, [r3, #3]
}
 8015374:	4618      	mov	r0, r3
 8015376:	3720      	adds	r7, #32
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b088      	sub	sp, #32
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015384:	f107 030c 	add.w	r3, r7, #12
 8015388:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 801538a:	69fb      	ldr	r3, [r7, #28]
 801538c:	687a      	ldr	r2, [r7, #4]
 801538e:	2110      	movs	r1, #16
 8015390:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8015394:	f000 fabc 	bl	8015910 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015398:	69fb      	ldr	r3, [r7, #28]
 801539a:	330b      	adds	r3, #11
 801539c:	78db      	ldrb	r3, [r3, #3]
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3720      	adds	r7, #32
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
	...

080153a8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80153a8:	b480      	push	{r7}
 80153aa:	b08b      	sub	sp, #44	@ 0x2c
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80153b0:	2300      	movs	r3, #0
 80153b2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80153b4:	2300      	movs	r3, #0
 80153b6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80153b8:	2300      	movs	r3, #0
 80153ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80153bc:	2300      	movs	r3, #0
 80153be:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80153c0:	2300      	movs	r3, #0
 80153c2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80153c4:	2300      	movs	r3, #0
 80153c6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80153c8:	2300      	movs	r3, #0
 80153ca:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80153cc:	2300      	movs	r3, #0
 80153ce:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80153d0:	4b4a      	ldr	r3, [pc, #296]	@ (80154fc <SHCI_GetWirelessFwInfo+0x154>)
 80153d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80153d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80153d8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	009b      	lsls	r3, r3, #2
 80153de:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80153e2:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	4a44      	ldr	r2, [pc, #272]	@ (8015500 <SHCI_GetWirelessFwInfo+0x158>)
 80153f0:	4293      	cmp	r3, r2
 80153f2:	d10f      	bne.n	8015414 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	695b      	ldr	r3, [r3, #20]
 80153f8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	699b      	ldr	r3, [r3, #24]
 80153fe:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	69db      	ldr	r3, [r3, #28]
 8015404:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015406:	68bb      	ldr	r3, [r7, #8]
 8015408:	68db      	ldr	r3, [r3, #12]
 801540a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	617b      	str	r3, [r7, #20]
 8015412:	e01a      	b.n	801544a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801541c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8015420:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	691b      	ldr	r3, [r3, #16]
 8015428:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	695b      	ldr	r3, [r3, #20]
 8015430:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	699b      	ldr	r3, [r3, #24]
 8015438:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	689b      	ldr	r3, [r3, #8]
 8015448:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801544c:	0e1b      	lsrs	r3, r3, #24
 801544e:	b2da      	uxtb	r2, r3
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015456:	0c1b      	lsrs	r3, r3, #16
 8015458:	b2da      	uxtb	r2, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801545e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015460:	0a1b      	lsrs	r3, r3, #8
 8015462:	b2da      	uxtb	r2, r3
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801546a:	091b      	lsrs	r3, r3, #4
 801546c:	b2db      	uxtb	r3, r3
 801546e:	f003 030f 	and.w	r3, r3, #15
 8015472:	b2da      	uxtb	r2, r3
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801547a:	b2db      	uxtb	r3, r3
 801547c:	f003 030f 	and.w	r3, r3, #15
 8015480:	b2da      	uxtb	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015486:	6a3b      	ldr	r3, [r7, #32]
 8015488:	0e1b      	lsrs	r3, r3, #24
 801548a:	b2da      	uxtb	r2, r3
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015490:	6a3b      	ldr	r3, [r7, #32]
 8015492:	0c1b      	lsrs	r3, r3, #16
 8015494:	b2da      	uxtb	r2, r3
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	0a1b      	lsrs	r3, r3, #8
 801549e:	b2da      	uxtb	r2, r3
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80154a4:	6a3b      	ldr	r3, [r7, #32]
 80154a6:	b2da      	uxtb	r2, r3
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	b2da      	uxtb	r2, r3
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80154b4:	69bb      	ldr	r3, [r7, #24]
 80154b6:	0e1b      	lsrs	r3, r3, #24
 80154b8:	b2da      	uxtb	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80154be:	69bb      	ldr	r3, [r7, #24]
 80154c0:	0c1b      	lsrs	r3, r3, #16
 80154c2:	b2da      	uxtb	r2, r3
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80154c8:	69bb      	ldr	r3, [r7, #24]
 80154ca:	0a1b      	lsrs	r3, r3, #8
 80154cc:	b2da      	uxtb	r2, r3
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80154d2:	697b      	ldr	r3, [r7, #20]
 80154d4:	0e1b      	lsrs	r3, r3, #24
 80154d6:	b2da      	uxtb	r2, r3
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	0c1b      	lsrs	r3, r3, #16
 80154e0:	b2da      	uxtb	r2, r3
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	b2da      	uxtb	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80154ee:	2300      	movs	r3, #0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	372c      	adds	r7, #44	@ 0x2c
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr
 80154fc:	58004000 	.word	0x58004000
 8015500:	a94656b9 	.word	0xa94656b9

08015504 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
 801550c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	4a08      	ldr	r2, [pc, #32]	@ (8015534 <hci_init+0x30>)
 8015514:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8015516:	4a08      	ldr	r2, [pc, #32]	@ (8015538 <hci_init+0x34>)
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 801551c:	4806      	ldr	r0, [pc, #24]	@ (8015538 <hci_init+0x34>)
 801551e:	f000 f979 	bl	8015814 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015522:	683b      	ldr	r3, [r7, #0]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	4618      	mov	r0, r3
 8015528:	f000 f8da 	bl	80156e0 <TlInit>

  return;
 801552c:	bf00      	nop
}
 801552e:	3708      	adds	r7, #8
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}
 8015534:	20000c58 	.word	0x20000c58
 8015538:	20000c30 	.word	0x20000c30

0801553c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8015542:	4822      	ldr	r0, [pc, #136]	@ (80155cc <hci_user_evt_proc+0x90>)
 8015544:	f000 fd32 	bl	8015fac <LST_is_empty>
 8015548:	4603      	mov	r3, r0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d12b      	bne.n	80155a6 <hci_user_evt_proc+0x6a>
 801554e:	4b20      	ldr	r3, [pc, #128]	@ (80155d0 <hci_user_evt_proc+0x94>)
 8015550:	781b      	ldrb	r3, [r3, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d027      	beq.n	80155a6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015556:	f107 030c 	add.w	r3, r7, #12
 801555a:	4619      	mov	r1, r3
 801555c:	481b      	ldr	r0, [pc, #108]	@ (80155cc <hci_user_evt_proc+0x90>)
 801555e:	f000 fdb4 	bl	80160ca <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8015562:	4b1c      	ldr	r3, [pc, #112]	@ (80155d4 <hci_user_evt_proc+0x98>)
 8015564:	69db      	ldr	r3, [r3, #28]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d00c      	beq.n	8015584 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 801556e:	2301      	movs	r3, #1
 8015570:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015572:	4b18      	ldr	r3, [pc, #96]	@ (80155d4 <hci_user_evt_proc+0x98>)
 8015574:	69db      	ldr	r3, [r3, #28]
 8015576:	1d3a      	adds	r2, r7, #4
 8015578:	4610      	mov	r0, r2
 801557a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 801557c:	793a      	ldrb	r2, [r7, #4]
 801557e:	4b14      	ldr	r3, [pc, #80]	@ (80155d0 <hci_user_evt_proc+0x94>)
 8015580:	701a      	strb	r2, [r3, #0]
 8015582:	e002      	b.n	801558a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015584:	4b12      	ldr	r3, [pc, #72]	@ (80155d0 <hci_user_evt_proc+0x94>)
 8015586:	2201      	movs	r2, #1
 8015588:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801558a:	4b11      	ldr	r3, [pc, #68]	@ (80155d0 <hci_user_evt_proc+0x94>)
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d004      	beq.n	801559c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	4618      	mov	r0, r3
 8015596:	f000 fc0d 	bl	8015db4 <TL_MM_EvtDone>
 801559a:	e004      	b.n	80155a6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	4619      	mov	r1, r3
 80155a0:	480a      	ldr	r0, [pc, #40]	@ (80155cc <hci_user_evt_proc+0x90>)
 80155a2:	f000 fd25 	bl	8015ff0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80155a6:	4809      	ldr	r0, [pc, #36]	@ (80155cc <hci_user_evt_proc+0x90>)
 80155a8:	f000 fd00 	bl	8015fac <LST_is_empty>
 80155ac:	4603      	mov	r3, r0
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d107      	bne.n	80155c2 <hci_user_evt_proc+0x86>
 80155b2:	4b07      	ldr	r3, [pc, #28]	@ (80155d0 <hci_user_evt_proc+0x94>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d003      	beq.n	80155c2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80155ba:	4804      	ldr	r0, [pc, #16]	@ (80155cc <hci_user_evt_proc+0x90>)
 80155bc:	f001 f856 	bl	801666c <hci_notify_asynch_evt>
  }


  return;
 80155c0:	bf00      	nop
 80155c2:	bf00      	nop
}
 80155c4:	3710      	adds	r7, #16
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}
 80155ca:	bf00      	nop
 80155cc:	20000314 	.word	0x20000314
 80155d0:	20000320 	.word	0x20000320
 80155d4:	20000c30 	.word	0x20000c30

080155d8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80155d8:	b580      	push	{r7, lr}
 80155da:	b088      	sub	sp, #32
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
 80155e0:	460b      	mov	r3, r1
 80155e2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80155e4:	2000      	movs	r0, #0
 80155e6:	f000 f8d1 	bl	801578c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80155ea:	2300      	movs	r3, #0
 80155ec:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	885b      	ldrh	r3, [r3, #2]
 80155f2:	b21b      	sxth	r3, r3
 80155f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80155f8:	b21a      	sxth	r2, r3
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	881b      	ldrh	r3, [r3, #0]
 80155fe:	b21b      	sxth	r3, r3
 8015600:	029b      	lsls	r3, r3, #10
 8015602:	b21b      	sxth	r3, r3
 8015604:	4313      	orrs	r3, r2
 8015606:	b21b      	sxth	r3, r3
 8015608:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 801560a:	4b33      	ldr	r3, [pc, #204]	@ (80156d8 <hci_send_req+0x100>)
 801560c:	2201      	movs	r2, #1
 801560e:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	b2d9      	uxtb	r1, r3
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	689a      	ldr	r2, [r3, #8]
 801561a:	8bbb      	ldrh	r3, [r7, #28]
 801561c:	4618      	mov	r0, r3
 801561e:	f000 f88f 	bl	8015740 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8015622:	e04e      	b.n	80156c2 <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8015624:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8015628:	f001 f837 	bl	801669a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801562c:	e043      	b.n	80156b6 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 801562e:	f107 030c 	add.w	r3, r7, #12
 8015632:	4619      	mov	r1, r3
 8015634:	4829      	ldr	r0, [pc, #164]	@ (80156dc <hci_send_req+0x104>)
 8015636:	f000 fd48 	bl	80160ca <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	7a5b      	ldrb	r3, [r3, #9]
 801563e:	2b0f      	cmp	r3, #15
 8015640:	d114      	bne.n	801566c <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	330b      	adds	r3, #11
 8015646:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	885b      	ldrh	r3, [r3, #2]
 801564c:	b29b      	uxth	r3, r3
 801564e:	8bba      	ldrh	r2, [r7, #28]
 8015650:	429a      	cmp	r2, r3
 8015652:	d104      	bne.n	801565e <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	691b      	ldr	r3, [r3, #16]
 8015658:	693a      	ldr	r2, [r7, #16]
 801565a:	7812      	ldrb	r2, [r2, #0]
 801565c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	785b      	ldrb	r3, [r3, #1]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d027      	beq.n	80156b6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8015666:	2301      	movs	r3, #1
 8015668:	77fb      	strb	r3, [r7, #31]
 801566a:	e024      	b.n	80156b6 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	330b      	adds	r3, #11
 8015670:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8015672:	69bb      	ldr	r3, [r7, #24]
 8015674:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015678:	b29b      	uxth	r3, r3
 801567a:	8bba      	ldrh	r2, [r7, #28]
 801567c:	429a      	cmp	r2, r3
 801567e:	d114      	bne.n	80156aa <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	7a9b      	ldrb	r3, [r3, #10]
 8015684:	3b03      	subs	r3, #3
 8015686:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	695a      	ldr	r2, [r3, #20]
 801568c:	7dfb      	ldrb	r3, [r7, #23]
 801568e:	429a      	cmp	r2, r3
 8015690:	bfa8      	it	ge
 8015692:	461a      	movge	r2, r3
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6918      	ldr	r0, [r3, #16]
 801569c:	69bb      	ldr	r3, [r7, #24]
 801569e:	1cd9      	adds	r1, r3, #3
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	695b      	ldr	r3, [r3, #20]
 80156a4:	461a      	mov	r2, r3
 80156a6:	f005 fa76 	bl	801ab96 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d001      	beq.n	80156b6 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80156b2:	2301      	movs	r3, #1
 80156b4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80156b6:	4809      	ldr	r0, [pc, #36]	@ (80156dc <hci_send_req+0x104>)
 80156b8:	f000 fc78 	bl	8015fac <LST_is_empty>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d0b5      	beq.n	801562e <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80156c2:	7ffb      	ldrb	r3, [r7, #31]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d0ad      	beq.n	8015624 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80156c8:	2001      	movs	r0, #1
 80156ca:	f000 f85f 	bl	801578c <NotifyCmdStatus>

  return 0;
 80156ce:	2300      	movs	r3, #0
}
 80156d0:	4618      	mov	r0, r3
 80156d2:	3720      	adds	r7, #32
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}
 80156d8:	20000c5c 	.word	0x20000c5c
 80156dc:	20000c50 	.word	0x20000c50

080156e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80156e0:	b580      	push	{r7, lr}
 80156e2:	b086      	sub	sp, #24
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80156e8:	480f      	ldr	r0, [pc, #60]	@ (8015728 <TlInit+0x48>)
 80156ea:	f000 fc4f 	bl	8015f8c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80156ee:	4a0f      	ldr	r2, [pc, #60]	@ (801572c <TlInit+0x4c>)
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80156f4:	480e      	ldr	r0, [pc, #56]	@ (8015730 <TlInit+0x50>)
 80156f6:	f000 fc49 	bl	8015f8c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80156fa:	4b0e      	ldr	r3, [pc, #56]	@ (8015734 <TlInit+0x54>)
 80156fc:	2201      	movs	r2, #1
 80156fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015700:	4b0d      	ldr	r3, [pc, #52]	@ (8015738 <TlInit+0x58>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d00a      	beq.n	801571e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 801570c:	4b0b      	ldr	r3, [pc, #44]	@ (801573c <TlInit+0x5c>)
 801570e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015710:	4b09      	ldr	r3, [pc, #36]	@ (8015738 <TlInit+0x58>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	f107 0208 	add.w	r2, r7, #8
 8015718:	4610      	mov	r0, r2
 801571a:	4798      	blx	r3
  }

  return;
 801571c:	bf00      	nop
 801571e:	bf00      	nop
}
 8015720:	3718      	adds	r7, #24
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	20000c50 	.word	0x20000c50
 801572c:	2000031c 	.word	0x2000031c
 8015730:	20000314 	.word	0x20000314
 8015734:	20000320 	.word	0x20000320
 8015738:	20000c30 	.word	0x20000c30
 801573c:	080157cd 	.word	0x080157cd

08015740 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	4603      	mov	r3, r0
 8015748:	603a      	str	r2, [r7, #0]
 801574a:	80fb      	strh	r3, [r7, #6]
 801574c:	460b      	mov	r3, r1
 801574e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015750:	4b0c      	ldr	r3, [pc, #48]	@ (8015784 <SendCmd+0x44>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	88fa      	ldrh	r2, [r7, #6]
 8015756:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801575a:	4b0a      	ldr	r3, [pc, #40]	@ (8015784 <SendCmd+0x44>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	797a      	ldrb	r2, [r7, #5]
 8015760:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8015762:	4b08      	ldr	r3, [pc, #32]	@ (8015784 <SendCmd+0x44>)
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	330c      	adds	r3, #12
 8015768:	797a      	ldrb	r2, [r7, #5]
 801576a:	6839      	ldr	r1, [r7, #0]
 801576c:	4618      	mov	r0, r3
 801576e:	f005 fa12 	bl	801ab96 <memcpy>

  hciContext.io.Send(0,0);
 8015772:	4b05      	ldr	r3, [pc, #20]	@ (8015788 <SendCmd+0x48>)
 8015774:	691b      	ldr	r3, [r3, #16]
 8015776:	2100      	movs	r1, #0
 8015778:	2000      	movs	r0, #0
 801577a:	4798      	blx	r3

  return;
 801577c:	bf00      	nop
}
 801577e:	3708      	adds	r7, #8
 8015780:	46bd      	mov	sp, r7
 8015782:	bd80      	pop	{r7, pc}
 8015784:	2000031c 	.word	0x2000031c
 8015788:	20000c30 	.word	0x20000c30

0801578c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	4603      	mov	r3, r0
 8015794:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8015796:	79fb      	ldrb	r3, [r7, #7]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d108      	bne.n	80157ae <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 801579c:	4b0a      	ldr	r3, [pc, #40]	@ (80157c8 <NotifyCmdStatus+0x3c>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d00d      	beq.n	80157c0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80157a4:	4b08      	ldr	r3, [pc, #32]	@ (80157c8 <NotifyCmdStatus+0x3c>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	2000      	movs	r0, #0
 80157aa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80157ac:	e008      	b.n	80157c0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80157ae:	4b06      	ldr	r3, [pc, #24]	@ (80157c8 <NotifyCmdStatus+0x3c>)
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d004      	beq.n	80157c0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80157b6:	4b04      	ldr	r3, [pc, #16]	@ (80157c8 <NotifyCmdStatus+0x3c>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2001      	movs	r0, #1
 80157bc:	4798      	blx	r3
  return;
 80157be:	bf00      	nop
 80157c0:	bf00      	nop
}
 80157c2:	3708      	adds	r7, #8
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	20000c58 	.word	0x20000c58

080157cc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b082      	sub	sp, #8
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	7a5b      	ldrb	r3, [r3, #9]
 80157d8:	2b0f      	cmp	r3, #15
 80157da:	d003      	beq.n	80157e4 <TlEvtReceived+0x18>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	7a5b      	ldrb	r3, [r3, #9]
 80157e0:	2b0e      	cmp	r3, #14
 80157e2:	d107      	bne.n	80157f4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80157e4:	6879      	ldr	r1, [r7, #4]
 80157e6:	4809      	ldr	r0, [pc, #36]	@ (801580c <TlEvtReceived+0x40>)
 80157e8:	f000 fc28 	bl	801603c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80157ec:	2000      	movs	r0, #0
 80157ee:	f000 ff49 	bl	8016684 <hci_cmd_resp_release>
 80157f2:	e006      	b.n	8015802 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80157f4:	6879      	ldr	r1, [r7, #4]
 80157f6:	4806      	ldr	r0, [pc, #24]	@ (8015810 <TlEvtReceived+0x44>)
 80157f8:	f000 fc20 	bl	801603c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80157fc:	4804      	ldr	r0, [pc, #16]	@ (8015810 <TlEvtReceived+0x44>)
 80157fe:	f000 ff35 	bl	801666c <hci_notify_asynch_evt>
  }

  return;
 8015802:	bf00      	nop
}
 8015804:	3708      	adds	r7, #8
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}
 801580a:	bf00      	nop
 801580c:	20000c50 	.word	0x20000c50
 8015810:	20000314 	.word	0x20000314

08015814 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	4a05      	ldr	r2, [pc, #20]	@ (8015834 <hci_register_io_bus+0x20>)
 8015820:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	4a04      	ldr	r2, [pc, #16]	@ (8015838 <hci_register_io_bus+0x24>)
 8015826:	611a      	str	r2, [r3, #16]

  return;
 8015828:	bf00      	nop
}
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr
 8015834:	08015b2d 	.word	0x08015b2d
 8015838:	08015b95 	.word	0x08015b95

0801583c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015846:	683b      	ldr	r3, [r7, #0]
 8015848:	685b      	ldr	r3, [r3, #4]
 801584a:	4a08      	ldr	r2, [pc, #32]	@ (801586c <shci_init+0x30>)
 801584c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801584e:	4a08      	ldr	r2, [pc, #32]	@ (8015870 <shci_init+0x34>)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8015854:	4806      	ldr	r0, [pc, #24]	@ (8015870 <shci_init+0x34>)
 8015856:	f000 f915 	bl	8015a84 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	4618      	mov	r0, r3
 8015860:	f000 f898 	bl	8015994 <TlInit>

  return;
 8015864:	bf00      	nop
}
 8015866:	3708      	adds	r7, #8
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}
 801586c:	20000c80 	.word	0x20000c80
 8015870:	20000c60 	.word	0x20000c60

08015874 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801587a:	4822      	ldr	r0, [pc, #136]	@ (8015904 <shci_user_evt_proc+0x90>)
 801587c:	f000 fb96 	bl	8015fac <LST_is_empty>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	d12b      	bne.n	80158de <shci_user_evt_proc+0x6a>
 8015886:	4b20      	ldr	r3, [pc, #128]	@ (8015908 <shci_user_evt_proc+0x94>)
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d027      	beq.n	80158de <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801588e:	f107 030c 	add.w	r3, r7, #12
 8015892:	4619      	mov	r1, r3
 8015894:	481b      	ldr	r0, [pc, #108]	@ (8015904 <shci_user_evt_proc+0x90>)
 8015896:	f000 fc18 	bl	80160ca <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801589a:	4b1c      	ldr	r3, [pc, #112]	@ (801590c <shci_user_evt_proc+0x98>)
 801589c:	69db      	ldr	r3, [r3, #28]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d00c      	beq.n	80158bc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80158a6:	2301      	movs	r3, #1
 80158a8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80158aa:	4b18      	ldr	r3, [pc, #96]	@ (801590c <shci_user_evt_proc+0x98>)
 80158ac:	69db      	ldr	r3, [r3, #28]
 80158ae:	1d3a      	adds	r2, r7, #4
 80158b0:	4610      	mov	r0, r2
 80158b2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80158b4:	793a      	ldrb	r2, [r7, #4]
 80158b6:	4b14      	ldr	r3, [pc, #80]	@ (8015908 <shci_user_evt_proc+0x94>)
 80158b8:	701a      	strb	r2, [r3, #0]
 80158ba:	e002      	b.n	80158c2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80158bc:	4b12      	ldr	r3, [pc, #72]	@ (8015908 <shci_user_evt_proc+0x94>)
 80158be:	2201      	movs	r2, #1
 80158c0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80158c2:	4b11      	ldr	r3, [pc, #68]	@ (8015908 <shci_user_evt_proc+0x94>)
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d004      	beq.n	80158d4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 fa71 	bl	8015db4 <TL_MM_EvtDone>
 80158d2:	e004      	b.n	80158de <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	4619      	mov	r1, r3
 80158d8:	480a      	ldr	r0, [pc, #40]	@ (8015904 <shci_user_evt_proc+0x90>)
 80158da:	f000 fb89 	bl	8015ff0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80158de:	4809      	ldr	r0, [pc, #36]	@ (8015904 <shci_user_evt_proc+0x90>)
 80158e0:	f000 fb64 	bl	8015fac <LST_is_empty>
 80158e4:	4603      	mov	r3, r0
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d107      	bne.n	80158fa <shci_user_evt_proc+0x86>
 80158ea:	4b07      	ldr	r3, [pc, #28]	@ (8015908 <shci_user_evt_proc+0x94>)
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d003      	beq.n	80158fa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80158f2:	4804      	ldr	r0, [pc, #16]	@ (8015904 <shci_user_evt_proc+0x90>)
 80158f4:	f7ef fe0f 	bl	8005516 <shci_notify_asynch_evt>
  }


  return;
 80158f8:	bf00      	nop
 80158fa:	bf00      	nop
}
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	20000324 	.word	0x20000324
 8015908:	20000334 	.word	0x20000334
 801590c:	20000c60 	.word	0x20000c60

08015910 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	60ba      	str	r2, [r7, #8]
 8015918:	607b      	str	r3, [r7, #4]
 801591a:	4603      	mov	r3, r0
 801591c:	81fb      	strh	r3, [r7, #14]
 801591e:	460b      	mov	r3, r1
 8015920:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8015922:	2000      	movs	r0, #0
 8015924:	f000 f868 	bl	80159f8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8015928:	4b17      	ldr	r3, [pc, #92]	@ (8015988 <shci_send+0x78>)
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	89fa      	ldrh	r2, [r7, #14]
 801592e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8015932:	4b15      	ldr	r3, [pc, #84]	@ (8015988 <shci_send+0x78>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	7b7a      	ldrb	r2, [r7, #13]
 8015938:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801593a:	4b13      	ldr	r3, [pc, #76]	@ (8015988 <shci_send+0x78>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	330c      	adds	r3, #12
 8015940:	7b7a      	ldrb	r2, [r7, #13]
 8015942:	68b9      	ldr	r1, [r7, #8]
 8015944:	4618      	mov	r0, r3
 8015946:	f005 f926 	bl	801ab96 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801594a:	4b10      	ldr	r3, [pc, #64]	@ (801598c <shci_send+0x7c>)
 801594c:	2201      	movs	r2, #1
 801594e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8015950:	4b0f      	ldr	r3, [pc, #60]	@ (8015990 <shci_send+0x80>)
 8015952:	691b      	ldr	r3, [r3, #16]
 8015954:	2100      	movs	r1, #0
 8015956:	2000      	movs	r0, #0
 8015958:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801595a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801595e:	f7ef fdf1 	bl	8005544 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f103 0008 	add.w	r0, r3, #8
 8015968:	4b07      	ldr	r3, [pc, #28]	@ (8015988 <shci_send+0x78>)
 801596a:	6819      	ldr	r1, [r3, #0]
 801596c:	4b06      	ldr	r3, [pc, #24]	@ (8015988 <shci_send+0x78>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	789b      	ldrb	r3, [r3, #2]
 8015972:	3303      	adds	r3, #3
 8015974:	461a      	mov	r2, r3
 8015976:	f005 f90e 	bl	801ab96 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801597a:	2001      	movs	r0, #1
 801597c:	f000 f83c 	bl	80159f8 <Cmd_SetStatus>

  return;
 8015980:	bf00      	nop
}
 8015982:	3710      	adds	r7, #16
 8015984:	46bd      	mov	sp, r7
 8015986:	bd80      	pop	{r7, pc}
 8015988:	20000330 	.word	0x20000330
 801598c:	20000c84 	.word	0x20000c84
 8015990:	20000c60 	.word	0x20000c60

08015994 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b086      	sub	sp, #24
 8015998:	af00      	add	r7, sp, #0
 801599a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801599c:	4a10      	ldr	r2, [pc, #64]	@ (80159e0 <TlInit+0x4c>)
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80159a2:	4810      	ldr	r0, [pc, #64]	@ (80159e4 <TlInit+0x50>)
 80159a4:	f000 faf2 	bl	8015f8c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80159a8:	2001      	movs	r0, #1
 80159aa:	f000 f825 	bl	80159f8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80159ae:	4b0e      	ldr	r3, [pc, #56]	@ (80159e8 <TlInit+0x54>)
 80159b0:	2201      	movs	r2, #1
 80159b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80159b4:	4b0d      	ldr	r3, [pc, #52]	@ (80159ec <TlInit+0x58>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00c      	beq.n	80159d6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80159c0:	4b0b      	ldr	r3, [pc, #44]	@ (80159f0 <TlInit+0x5c>)
 80159c2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80159c4:	4b0b      	ldr	r3, [pc, #44]	@ (80159f4 <TlInit+0x60>)
 80159c6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80159c8:	4b08      	ldr	r3, [pc, #32]	@ (80159ec <TlInit+0x58>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	f107 020c 	add.w	r2, r7, #12
 80159d0:	4610      	mov	r0, r2
 80159d2:	4798      	blx	r3
  }

  return;
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop
}
 80159d8:	3718      	adds	r7, #24
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}
 80159de:	bf00      	nop
 80159e0:	20000330 	.word	0x20000330
 80159e4:	20000324 	.word	0x20000324
 80159e8:	20000334 	.word	0x20000334
 80159ec:	20000c60 	.word	0x20000c60
 80159f0:	08015a49 	.word	0x08015a49
 80159f4:	08015a61 	.word	0x08015a61

080159f8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80159f8:	b580      	push	{r7, lr}
 80159fa:	b082      	sub	sp, #8
 80159fc:	af00      	add	r7, sp, #0
 80159fe:	4603      	mov	r3, r0
 8015a00:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8015a02:	79fb      	ldrb	r3, [r7, #7]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d10b      	bne.n	8015a20 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8015a08:	4b0d      	ldr	r3, [pc, #52]	@ (8015a40 <Cmd_SetStatus+0x48>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d003      	beq.n	8015a18 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8015a10:	4b0b      	ldr	r3, [pc, #44]	@ (8015a40 <Cmd_SetStatus+0x48>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2000      	movs	r0, #0
 8015a16:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8015a18:	4b0a      	ldr	r3, [pc, #40]	@ (8015a44 <Cmd_SetStatus+0x4c>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8015a1e:	e00b      	b.n	8015a38 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8015a20:	4b08      	ldr	r3, [pc, #32]	@ (8015a44 <Cmd_SetStatus+0x4c>)
 8015a22:	2201      	movs	r2, #1
 8015a24:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8015a26:	4b06      	ldr	r3, [pc, #24]	@ (8015a40 <Cmd_SetStatus+0x48>)
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d004      	beq.n	8015a38 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8015a2e:	4b04      	ldr	r3, [pc, #16]	@ (8015a40 <Cmd_SetStatus+0x48>)
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	2001      	movs	r0, #1
 8015a34:	4798      	blx	r3
  return;
 8015a36:	bf00      	nop
 8015a38:	bf00      	nop
}
 8015a3a:	3708      	adds	r7, #8
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	bd80      	pop	{r7, pc}
 8015a40:	20000c80 	.word	0x20000c80
 8015a44:	2000032c 	.word	0x2000032c

08015a48 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8015a50:	2000      	movs	r0, #0
 8015a52:	f7ef fd6c 	bl	800552e <shci_cmd_resp_release>

  return;
 8015a56:	bf00      	nop
}
 8015a58:	3708      	adds	r7, #8
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}
	...

08015a60 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8015a68:	6879      	ldr	r1, [r7, #4]
 8015a6a:	4805      	ldr	r0, [pc, #20]	@ (8015a80 <TlUserEvtReceived+0x20>)
 8015a6c:	f000 fae6 	bl	801603c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8015a70:	4803      	ldr	r0, [pc, #12]	@ (8015a80 <TlUserEvtReceived+0x20>)
 8015a72:	f7ef fd50 	bl	8005516 <shci_notify_asynch_evt>

  return;
 8015a76:	bf00      	nop
}
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	20000324 	.word	0x20000324

08015a84 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	4a05      	ldr	r2, [pc, #20]	@ (8015aa4 <shci_register_io_bus+0x20>)
 8015a90:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4a04      	ldr	r2, [pc, #16]	@ (8015aa8 <shci_register_io_bus+0x24>)
 8015a96:	611a      	str	r2, [r3, #16]

  return;
 8015a98:	bf00      	nop
}
 8015a9a:	370c      	adds	r7, #12
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aa2:	4770      	bx	lr
 8015aa4:	08015c41 	.word	0x08015c41
 8015aa8:	08015c95 	.word	0x08015c95

08015aac <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8015ab0:	f001 f9e4 	bl	8016e7c <HW_IPCC_Enable>

  return;
 8015ab4:	bf00      	nop
}
 8015ab6:	bd80      	pop	{r7, pc}

08015ab8 <TL_Init>:


void TL_Init( void )
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8015abc:	4b10      	ldr	r3, [pc, #64]	@ (8015b00 <TL_Init+0x48>)
 8015abe:	4a11      	ldr	r2, [pc, #68]	@ (8015b04 <TL_Init+0x4c>)
 8015ac0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8015ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8015b00 <TL_Init+0x48>)
 8015ac4:	4a10      	ldr	r2, [pc, #64]	@ (8015b08 <TL_Init+0x50>)
 8015ac6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8015ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8015b00 <TL_Init+0x48>)
 8015aca:	4a10      	ldr	r2, [pc, #64]	@ (8015b0c <TL_Init+0x54>)
 8015acc:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8015ace:	4b0c      	ldr	r3, [pc, #48]	@ (8015b00 <TL_Init+0x48>)
 8015ad0:	4a0f      	ldr	r2, [pc, #60]	@ (8015b10 <TL_Init+0x58>)
 8015ad2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8015ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8015b00 <TL_Init+0x48>)
 8015ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8015b14 <TL_Init+0x5c>)
 8015ad8:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8015ada:	4b09      	ldr	r3, [pc, #36]	@ (8015b00 <TL_Init+0x48>)
 8015adc:	4a0e      	ldr	r2, [pc, #56]	@ (8015b18 <TL_Init+0x60>)
 8015ade:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8015ae0:	4b07      	ldr	r3, [pc, #28]	@ (8015b00 <TL_Init+0x48>)
 8015ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8015b1c <TL_Init+0x64>)
 8015ae4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8015ae6:	4b06      	ldr	r3, [pc, #24]	@ (8015b00 <TL_Init+0x48>)
 8015ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8015b20 <TL_Init+0x68>)
 8015aea:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8015aec:	4b04      	ldr	r3, [pc, #16]	@ (8015b00 <TL_Init+0x48>)
 8015aee:	4a0d      	ldr	r2, [pc, #52]	@ (8015b24 <TL_Init+0x6c>)
 8015af0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8015af2:	4b03      	ldr	r3, [pc, #12]	@ (8015b00 <TL_Init+0x48>)
 8015af4:	4a0c      	ldr	r2, [pc, #48]	@ (8015b28 <TL_Init+0x70>)
 8015af6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8015af8:	f001 f9d4 	bl	8016ea4 <HW_IPCC_Init>

  return;
 8015afc:	bf00      	nop
}
 8015afe:	bd80      	pop	{r7, pc}
 8015b00:	20030000 	.word	0x20030000
 8015b04:	20030028 	.word	0x20030028
 8015b08:	20030048 	.word	0x20030048
 8015b0c:	20030058 	.word	0x20030058
 8015b10:	20030068 	.word	0x20030068
 8015b14:	20030070 	.word	0x20030070
 8015b18:	20030078 	.word	0x20030078
 8015b1c:	20030080 	.word	0x20030080
 8015b20:	2003009c 	.word	0x2003009c
 8015b24:	200300a0 	.word	0x200300a0
 8015b28:	200300ac 	.word	0x200300ac

08015b2c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8015b38:	4811      	ldr	r0, [pc, #68]	@ (8015b80 <TL_BLE_Init+0x54>)
 8015b3a:	f000 fa27 	bl	8015f8c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8015b3e:	4b11      	ldr	r3, [pc, #68]	@ (8015b84 <TL_BLE_Init+0x58>)
 8015b40:	685b      	ldr	r3, [r3, #4]
 8015b42:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	689a      	ldr	r2, [r3, #8]
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8015b4c:	68fb      	ldr	r3, [r7, #12]
 8015b4e:	68da      	ldr	r2, [r3, #12]
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	4a0c      	ldr	r2, [pc, #48]	@ (8015b88 <TL_BLE_Init+0x5c>)
 8015b58:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	4a08      	ldr	r2, [pc, #32]	@ (8015b80 <TL_BLE_Init+0x54>)
 8015b5e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8015b60:	f001 f9b6 	bl	8016ed0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4a08      	ldr	r2, [pc, #32]	@ (8015b8c <TL_BLE_Init+0x60>)
 8015b6a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	4a07      	ldr	r2, [pc, #28]	@ (8015b90 <TL_BLE_Init+0x64>)
 8015b72:	6013      	str	r3, [r2, #0]

  return 0;
 8015b74:	2300      	movs	r3, #0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3710      	adds	r7, #16
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	200300c8 	.word	0x200300c8
 8015b84:	20030000 	.word	0x20030000
 8015b88:	20030a58 	.word	0x20030a58
 8015b8c:	20000c90 	.word	0x20000c90
 8015b90:	20000c94 	.word	0x20000c94

08015b94 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
 8015b9c:	460b      	mov	r3, r1
 8015b9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8015ba0:	4b09      	ldr	r3, [pc, #36]	@ (8015bc8 <TL_BLE_SendCmd+0x34>)
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	2201      	movs	r2, #1
 8015ba8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8015baa:	4b07      	ldr	r3, [pc, #28]	@ (8015bc8 <TL_BLE_SendCmd+0x34>)
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	2001      	movs	r0, #1
 8015bb4:	f000 f96c 	bl	8015e90 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8015bb8:	f001 f9a4 	bl	8016f04 <HW_IPCC_BLE_SendCmd>

  return 0;
 8015bbc:	2300      	movs	r3, #0
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3708      	adds	r7, #8
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	20030000 	.word	0x20030000

08015bcc <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b082      	sub	sp, #8
 8015bd0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8015bd2:	e01c      	b.n	8015c0e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8015bd4:	1d3b      	adds	r3, r7, #4
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4812      	ldr	r0, [pc, #72]	@ (8015c24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015bda:	f000 fa76 	bl	80160ca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	7a5b      	ldrb	r3, [r3, #9]
 8015be2:	2b0f      	cmp	r3, #15
 8015be4:	d003      	beq.n	8015bee <HW_IPCC_BLE_RxEvtNot+0x22>
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	7a5b      	ldrb	r3, [r3, #9]
 8015bea:	2b0e      	cmp	r3, #14
 8015bec:	d105      	bne.n	8015bfa <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	2002      	movs	r0, #2
 8015bf4:	f000 f94c 	bl	8015e90 <OutputDbgTrace>
 8015bf8:	e004      	b.n	8015c04 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4619      	mov	r1, r3
 8015bfe:	2003      	movs	r0, #3
 8015c00:	f000 f946 	bl	8015e90 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8015c04:	4b08      	ldr	r3, [pc, #32]	@ (8015c28 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	4610      	mov	r0, r2
 8015c0c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8015c0e:	4805      	ldr	r0, [pc, #20]	@ (8015c24 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8015c10:	f000 f9cc 	bl	8015fac <LST_is_empty>
 8015c14:	4603      	mov	r3, r0
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d0dc      	beq.n	8015bd4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8015c1a:	bf00      	nop
}
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	200300c8 	.word	0x200300c8
 8015c28:	20000c90 	.word	0x20000c90

08015c2c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8015c2c:	b580      	push	{r7, lr}
 8015c2e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8015c30:	4b02      	ldr	r3, [pc, #8]	@ (8015c3c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	4798      	blx	r3

  return;
 8015c36:	bf00      	nop
}
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	20000c94 	.word	0x20000c94

08015c40 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8015c4c:	480d      	ldr	r0, [pc, #52]	@ (8015c84 <TL_SYS_Init+0x44>)
 8015c4e:	f000 f99d 	bl	8015f8c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8015c52:	4b0d      	ldr	r3, [pc, #52]	@ (8015c88 <TL_SYS_Init+0x48>)
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	689a      	ldr	r2, [r3, #8]
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	4a08      	ldr	r2, [pc, #32]	@ (8015c84 <TL_SYS_Init+0x44>)
 8015c64:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8015c66:	f001 f97f 	bl	8016f68 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	4a07      	ldr	r2, [pc, #28]	@ (8015c8c <TL_SYS_Init+0x4c>)
 8015c70:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	685b      	ldr	r3, [r3, #4]
 8015c76:	4a06      	ldr	r2, [pc, #24]	@ (8015c90 <TL_SYS_Init+0x50>)
 8015c78:	6013      	str	r3, [r2, #0]

  return 0;
 8015c7a:	2300      	movs	r3, #0
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	200300d0 	.word	0x200300d0
 8015c88:	20030000 	.word	0x20030000
 8015c8c:	20000c98 	.word	0x20000c98
 8015c90:	20000c9c 	.word	0x20000c9c

08015c94 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b082      	sub	sp, #8
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
 8015c9c:	460b      	mov	r3, r1
 8015c9e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8015ca0:	4b09      	ldr	r3, [pc, #36]	@ (8015cc8 <TL_SYS_SendCmd+0x34>)
 8015ca2:	68db      	ldr	r3, [r3, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2210      	movs	r2, #16
 8015ca8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8015caa:	4b07      	ldr	r3, [pc, #28]	@ (8015cc8 <TL_SYS_SendCmd+0x34>)
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	2004      	movs	r0, #4
 8015cb4:	f000 f8ec 	bl	8015e90 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8015cb8:	f001 f970 	bl	8016f9c <HW_IPCC_SYS_SendCmd>

  return 0;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3708      	adds	r7, #8
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}
 8015cc6:	bf00      	nop
 8015cc8:	20030000 	.word	0x20030000

08015ccc <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015cd0:	4b07      	ldr	r3, [pc, #28]	@ (8015cf0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	2005      	movs	r0, #5
 8015cda:	f000 f8d9 	bl	8015e90 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8015cde:	4b05      	ldr	r3, [pc, #20]	@ (8015cf4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	4a03      	ldr	r2, [pc, #12]	@ (8015cf0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8015ce4:	68d2      	ldr	r2, [r2, #12]
 8015ce6:	6812      	ldr	r2, [r2, #0]
 8015ce8:	4610      	mov	r0, r2
 8015cea:	4798      	blx	r3

  return;
 8015cec:	bf00      	nop
}
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	20030000 	.word	0x20030000
 8015cf4:	20000c98 	.word	0x20000c98

08015cf8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015cfe:	e00e      	b.n	8015d1e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8015d00:	1d3b      	adds	r3, r7, #4
 8015d02:	4619      	mov	r1, r3
 8015d04:	480b      	ldr	r0, [pc, #44]	@ (8015d34 <HW_IPCC_SYS_EvtNot+0x3c>)
 8015d06:	f000 f9e0 	bl	80160ca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4619      	mov	r1, r3
 8015d0e:	2006      	movs	r0, #6
 8015d10:	f000 f8be 	bl	8015e90 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8015d14:	4b08      	ldr	r3, [pc, #32]	@ (8015d38 <HW_IPCC_SYS_EvtNot+0x40>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	687a      	ldr	r2, [r7, #4]
 8015d1a:	4610      	mov	r0, r2
 8015d1c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8015d1e:	4805      	ldr	r0, [pc, #20]	@ (8015d34 <HW_IPCC_SYS_EvtNot+0x3c>)
 8015d20:	f000 f944 	bl	8015fac <LST_is_empty>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d0ea      	beq.n	8015d00 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8015d2a:	bf00      	nop
}
 8015d2c:	3708      	adds	r7, #8
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bd80      	pop	{r7, pc}
 8015d32:	bf00      	nop
 8015d34:	200300d0 	.word	0x200300d0
 8015d38:	20000c9c 	.word	0x20000c9c

08015d3c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b082      	sub	sp, #8
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8015d44:	4817      	ldr	r0, [pc, #92]	@ (8015da4 <TL_MM_Init+0x68>)
 8015d46:	f000 f921 	bl	8015f8c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8015d4a:	4817      	ldr	r0, [pc, #92]	@ (8015da8 <TL_MM_Init+0x6c>)
 8015d4c:	f000 f91e 	bl	8015f8c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8015d50:	4b16      	ldr	r3, [pc, #88]	@ (8015dac <TL_MM_Init+0x70>)
 8015d52:	691b      	ldr	r3, [r3, #16]
 8015d54:	4a16      	ldr	r2, [pc, #88]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d56:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8015d58:	4b15      	ldr	r3, [pc, #84]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	6892      	ldr	r2, [r2, #8]
 8015d60:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8015d62:	4b13      	ldr	r3, [pc, #76]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	68d2      	ldr	r2, [r2, #12]
 8015d6a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8015d6c:	4b10      	ldr	r3, [pc, #64]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4a0c      	ldr	r2, [pc, #48]	@ (8015da4 <TL_MM_Init+0x68>)
 8015d72:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8015d74:	4b0e      	ldr	r3, [pc, #56]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	6812      	ldr	r2, [r2, #0]
 8015d7c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8015d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	687a      	ldr	r2, [r7, #4]
 8015d84:	6852      	ldr	r2, [r2, #4]
 8015d86:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8015d88:	4b09      	ldr	r3, [pc, #36]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	687a      	ldr	r2, [r7, #4]
 8015d8e:	6912      	ldr	r2, [r2, #16]
 8015d90:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8015d92:	4b07      	ldr	r3, [pc, #28]	@ (8015db0 <TL_MM_Init+0x74>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	687a      	ldr	r2, [r7, #4]
 8015d98:	6952      	ldr	r2, [r2, #20]
 8015d9a:	619a      	str	r2, [r3, #24]

  return;
 8015d9c:	bf00      	nop
}
 8015d9e:	3708      	adds	r7, #8
 8015da0:	46bd      	mov	sp, r7
 8015da2:	bd80      	pop	{r7, pc}
 8015da4:	200300b8 	.word	0x200300b8
 8015da8:	20000c88 	.word	0x20000c88
 8015dac:	20030000 	.word	0x20030000
 8015db0:	20000ca0 	.word	0x20000ca0

08015db4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8015dbc:	6879      	ldr	r1, [r7, #4]
 8015dbe:	4807      	ldr	r0, [pc, #28]	@ (8015ddc <TL_MM_EvtDone+0x28>)
 8015dc0:	f000 f93c 	bl	801603c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8015dc4:	6879      	ldr	r1, [r7, #4]
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	f000 f862 	bl	8015e90 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8015dcc:	4804      	ldr	r0, [pc, #16]	@ (8015de0 <TL_MM_EvtDone+0x2c>)
 8015dce:	f001 f92b 	bl	8017028 <HW_IPCC_MM_SendFreeBuf>

  return;
 8015dd2:	bf00      	nop
}
 8015dd4:	3708      	adds	r7, #8
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}
 8015dda:	bf00      	nop
 8015ddc:	20000c88 	.word	0x20000c88
 8015de0:	08015de5 	.word	0x08015de5

08015de4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b082      	sub	sp, #8
 8015de8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8015dea:	e00c      	b.n	8015e06 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8015dec:	1d3b      	adds	r3, r7, #4
 8015dee:	4619      	mov	r1, r3
 8015df0:	480a      	ldr	r0, [pc, #40]	@ (8015e1c <SendFreeBuf+0x38>)
 8015df2:	f000 f96a 	bl	80160ca <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8015df6:	4b0a      	ldr	r3, [pc, #40]	@ (8015e20 <SendFreeBuf+0x3c>)
 8015df8:	691b      	ldr	r3, [r3, #16]
 8015dfa:	691b      	ldr	r3, [r3, #16]
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	4611      	mov	r1, r2
 8015e00:	4618      	mov	r0, r3
 8015e02:	f000 f91b 	bl	801603c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8015e06:	4805      	ldr	r0, [pc, #20]	@ (8015e1c <SendFreeBuf+0x38>)
 8015e08:	f000 f8d0 	bl	8015fac <LST_is_empty>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d0ec      	beq.n	8015dec <SendFreeBuf+0x8>
  }

  return;
 8015e12:	bf00      	nop
}
 8015e14:	3708      	adds	r7, #8
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	20000c88 	.word	0x20000c88
 8015e20:	20030000 	.word	0x20030000

08015e24 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8015e28:	4805      	ldr	r0, [pc, #20]	@ (8015e40 <TL_TRACES_Init+0x1c>)
 8015e2a:	f000 f8af 	bl	8015f8c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8015e2e:	4b05      	ldr	r3, [pc, #20]	@ (8015e44 <TL_TRACES_Init+0x20>)
 8015e30:	695b      	ldr	r3, [r3, #20]
 8015e32:	4a03      	ldr	r2, [pc, #12]	@ (8015e40 <TL_TRACES_Init+0x1c>)
 8015e34:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8015e36:	f001 f949 	bl	80170cc <HW_IPCC_TRACES_Init>

  return;
 8015e3a:	bf00      	nop
}
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop
 8015e40:	200300c0 	.word	0x200300c0
 8015e44:	20030000 	.word	0x20030000

08015e48 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015e4e:	e008      	b.n	8015e62 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8015e50:	1d3b      	adds	r3, r7, #4
 8015e52:	4619      	mov	r1, r3
 8015e54:	4808      	ldr	r0, [pc, #32]	@ (8015e78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8015e56:	f000 f938 	bl	80160ca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f000 f80d 	bl	8015e7c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8015e62:	4805      	ldr	r0, [pc, #20]	@ (8015e78 <HW_IPCC_TRACES_EvtNot+0x30>)
 8015e64:	f000 f8a2 	bl	8015fac <LST_is_empty>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d0f0      	beq.n	8015e50 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8015e6e:	bf00      	nop
}
 8015e70:	3708      	adds	r7, #8
 8015e72:	46bd      	mov	sp, r7
 8015e74:	bd80      	pop	{r7, pc}
 8015e76:	bf00      	nop
 8015e78:	200300c0 	.word	0x200300c0

08015e7c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8015e84:	bf00      	nop
 8015e86:	370c      	adds	r7, #12
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8e:	4770      	bx	lr

08015e90 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8015e90:	b480      	push	{r7}
 8015e92:	b087      	sub	sp, #28
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	4603      	mov	r3, r0
 8015e98:	6039      	str	r1, [r7, #0]
 8015e9a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8015e9c:	79fb      	ldrb	r3, [r7, #7]
 8015e9e:	2b06      	cmp	r3, #6
 8015ea0:	d845      	bhi.n	8015f2e <OutputDbgTrace+0x9e>
 8015ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8015ea8 <OutputDbgTrace+0x18>)
 8015ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ea8:	08015ec5 	.word	0x08015ec5
 8015eac:	08015ee9 	.word	0x08015ee9
 8015eb0:	08015eef 	.word	0x08015eef
 8015eb4:	08015f03 	.word	0x08015f03
 8015eb8:	08015f0f 	.word	0x08015f0f
 8015ebc:	08015f15 	.word	0x08015f15
 8015ec0:	08015f23 	.word	0x08015f23
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	7a5b      	ldrb	r3, [r3, #9]
 8015ecc:	2bff      	cmp	r3, #255	@ 0xff
 8015ece:	d005      	beq.n	8015edc <OutputDbgTrace+0x4c>
 8015ed0:	2bff      	cmp	r3, #255	@ 0xff
 8015ed2:	dc05      	bgt.n	8015ee0 <OutputDbgTrace+0x50>
 8015ed4:	2b0e      	cmp	r3, #14
 8015ed6:	d005      	beq.n	8015ee4 <OutputDbgTrace+0x54>
 8015ed8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8015eda:	e001      	b.n	8015ee0 <OutputDbgTrace+0x50>
          break;
 8015edc:	bf00      	nop
 8015ede:	e027      	b.n	8015f30 <OutputDbgTrace+0xa0>
          break;
 8015ee0:	bf00      	nop
 8015ee2:	e025      	b.n	8015f30 <OutputDbgTrace+0xa0>
          break;
 8015ee4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8015ee6:	e023      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8015eec:	e020      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	7a5b      	ldrb	r3, [r3, #9]
 8015ef6:	2b0e      	cmp	r3, #14
 8015ef8:	d001      	beq.n	8015efe <OutputDbgTrace+0x6e>
 8015efa:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8015efc:	e000      	b.n	8015f00 <OutputDbgTrace+0x70>
          break;
 8015efe:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015f00:	e016      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	7a5b      	ldrb	r3, [r3, #9]
 8015f0a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015f0c:	e010      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8015f0e:	683b      	ldr	r3, [r7, #0]
 8015f10:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8015f12:	e00d      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8015f14:	683b      	ldr	r3, [r7, #0]
 8015f16:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	785b      	ldrb	r3, [r3, #1]
 8015f1c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8015f1e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015f20:	e006      	b.n	8015f30 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	7a5b      	ldrb	r3, [r3, #9]
 8015f2a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8015f2c:	e000      	b.n	8015f30 <OutputDbgTrace+0xa0>

    default:
      break;
 8015f2e:	bf00      	nop
  }

  return;
 8015f30:	bf00      	nop
}
 8015f32:	371c      	adds	r7, #28
 8015f34:	46bd      	mov	sp, r7
 8015f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f3a:	4770      	bx	lr

08015f3c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8015f46:	4b0f      	ldr	r3, [pc, #60]	@ (8015f84 <OTP_Read+0x48>)
 8015f48:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8015f4a:	e002      	b.n	8015f52 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	3b08      	subs	r3, #8
 8015f50:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	3307      	adds	r3, #7
 8015f56:	781b      	ldrb	r3, [r3, #0]
 8015f58:	79fa      	ldrb	r2, [r7, #7]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d003      	beq.n	8015f66 <OTP_Read+0x2a>
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	4a09      	ldr	r2, [pc, #36]	@ (8015f88 <OTP_Read+0x4c>)
 8015f62:	4293      	cmp	r3, r2
 8015f64:	d1f2      	bne.n	8015f4c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	3307      	adds	r3, #7
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	79fa      	ldrb	r2, [r7, #7]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d001      	beq.n	8015f76 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8015f72:	2300      	movs	r3, #0
 8015f74:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8015f76:	68fb      	ldr	r3, [r7, #12]
}
 8015f78:	4618      	mov	r0, r3
 8015f7a:	3714      	adds	r7, #20
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr
 8015f84:	1fff73f8 	.word	0x1fff73f8
 8015f88:	1fff7000 	.word	0x1fff7000

08015f8c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	687a      	ldr	r2, [r7, #4]
 8015f98:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	605a      	str	r2, [r3, #4]
}
 8015fa0:	bf00      	nop
 8015fa2:	370c      	adds	r7, #12
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr

08015fac <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8015fac:	b480      	push	{r7}
 8015fae:	b087      	sub	sp, #28
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8015fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8015fbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fbe:	b672      	cpsid	i
}
 8015fc0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	687a      	ldr	r2, [r7, #4]
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d102      	bne.n	8015fd2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8015fcc:	2301      	movs	r3, #1
 8015fce:	75fb      	strb	r3, [r7, #23]
 8015fd0:	e001      	b.n	8015fd6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	75fb      	strb	r3, [r7, #23]
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	f383 8810 	msr	PRIMASK, r3
}
 8015fe0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8015fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	371c      	adds	r7, #28
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr

08015ff0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8015ff0:	b480      	push	{r7}
 8015ff2:	b087      	sub	sp, #28
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8015ffe:	60fb      	str	r3, [r7, #12]
  return(result);
 8016000:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016004:	b672      	cpsid	i
}
 8016006:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	681a      	ldr	r2, [r3, #0]
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016010:	683b      	ldr	r3, [r7, #0]
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	683a      	ldr	r2, [r7, #0]
 801601a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	683a      	ldr	r2, [r7, #0]
 8016022:	605a      	str	r2, [r3, #4]
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	f383 8810 	msr	PRIMASK, r3
}
 801602e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016030:	bf00      	nop
 8016032:	371c      	adds	r7, #28
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801603c:	b480      	push	{r7}
 801603e:	b087      	sub	sp, #28
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016046:	f3ef 8310 	mrs	r3, PRIMASK
 801604a:	60fb      	str	r3, [r7, #12]
  return(result);
 801604c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801604e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016050:	b672      	cpsid	i
}
 8016052:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	687a      	ldr	r2, [r7, #4]
 8016058:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	685a      	ldr	r2, [r3, #4]
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	683a      	ldr	r2, [r7, #0]
 8016066:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	683a      	ldr	r2, [r7, #0]
 801606e:	601a      	str	r2, [r3, #0]
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016074:	693b      	ldr	r3, [r7, #16]
 8016076:	f383 8810 	msr	PRIMASK, r3
}
 801607a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801607c:	bf00      	nop
 801607e:	371c      	adds	r7, #28
 8016080:	46bd      	mov	sp, r7
 8016082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016086:	4770      	bx	lr

08016088 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016088:	b480      	push	{r7}
 801608a:	b087      	sub	sp, #28
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016090:	f3ef 8310 	mrs	r3, PRIMASK
 8016094:	60fb      	str	r3, [r7, #12]
  return(result);
 8016096:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016098:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801609a:	b672      	cpsid	i
}
 801609c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	685b      	ldr	r3, [r3, #4]
 80160a2:	687a      	ldr	r2, [r7, #4]
 80160a4:	6812      	ldr	r2, [r2, #0]
 80160a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	6852      	ldr	r2, [r2, #4]
 80160b0:	605a      	str	r2, [r3, #4]
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	f383 8810 	msr	PRIMASK, r3
}
 80160bc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80160be:	bf00      	nop
 80160c0:	371c      	adds	r7, #28
 80160c2:	46bd      	mov	sp, r7
 80160c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80160ca:	b580      	push	{r7, lr}
 80160cc:	b086      	sub	sp, #24
 80160ce:	af00      	add	r7, sp, #0
 80160d0:	6078      	str	r0, [r7, #4]
 80160d2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160d4:	f3ef 8310 	mrs	r3, PRIMASK
 80160d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80160da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80160dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80160de:	b672      	cpsid	i
}
 80160e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	681a      	ldr	r2, [r3, #0]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7ff ffca 	bl	8016088 <LST_remove_node>
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160f8:	693b      	ldr	r3, [r7, #16]
 80160fa:	f383 8810 	msr	PRIMASK, r3
}
 80160fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016100:	bf00      	nop
 8016102:	3718      	adds	r7, #24
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}

08016108 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8016108:	b480      	push	{r7}
 801610a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 801610c:	4b03      	ldr	r3, [pc, #12]	@ (801611c <LL_FLASH_GetUDN+0x14>)
 801610e:	681b      	ldr	r3, [r3, #0]
}
 8016110:	4618      	mov	r0, r3
 8016112:	46bd      	mov	sp, r7
 8016114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016118:	4770      	bx	lr
 801611a:	bf00      	nop
 801611c:	1fff7580 	.word	0x1fff7580

08016120 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8016120:	b480      	push	{r7}
 8016122:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8016124:	4b03      	ldr	r3, [pc, #12]	@ (8016134 <LL_FLASH_GetDeviceID+0x14>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	b2db      	uxtb	r3, r3
}
 801612a:	4618      	mov	r0, r3
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	1fff7584 	.word	0x1fff7584

08016138 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8016138:	b480      	push	{r7}
 801613a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 801613c:	4b03      	ldr	r3, [pc, #12]	@ (801614c <LL_FLASH_GetSTCompanyID+0x14>)
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	0a1b      	lsrs	r3, r3, #8
}
 8016142:	4618      	mov	r0, r3
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr
 801614c:	1fff7584 	.word	0x1fff7584

08016150 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8016150:	b5b0      	push	{r4, r5, r7, lr}
 8016152:	b090      	sub	sp, #64	@ 0x40
 8016154:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016156:	2392      	movs	r3, #146	@ 0x92
 8016158:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 801615c:	4b25      	ldr	r3, [pc, #148]	@ (80161f4 <APP_BLE_Init+0xa4>)
 801615e:	1d3c      	adds	r4, r7, #4
 8016160:	461d      	mov	r5, r3
 8016162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801616a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801616c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801616e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016172:	c403      	stmia	r4!, {r0, r1}
 8016174:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8016176:	f000 f921 	bl	80163bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801617a:	2101      	movs	r1, #1
 801617c:	2002      	movs	r0, #2
 801617e:	f002 fde3 	bl	8018d48 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8016182:	4a1d      	ldr	r2, [pc, #116]	@ (80161f8 <APP_BLE_Init+0xa8>)
 8016184:	2100      	movs	r1, #0
 8016186:	2002      	movs	r0, #2
 8016188:	f002 ff0a 	bl	8018fa0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 801618c:	1d3b      	adds	r3, r7, #4
 801618e:	4618      	mov	r0, r3
 8016190:	f7ff f8c6 	bl	8015320 <SHCI_C2_BLE_Init>
 8016194:	4603      	mov	r3, r0
 8016196:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 801619a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d001      	beq.n	80161a6 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80161a2:	f7f0 fdd7 	bl	8006d54 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80161a6:	f000 f91f 	bl	80163e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80161aa:	f7ff f813 	bl	80151d4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80161ae:	4b13      	ldr	r3, [pc, #76]	@ (80161fc <APP_BLE_Init+0xac>)
 80161b0:	2200      	movs	r2, #0
 80161b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80161b6:	4b11      	ldr	r3, [pc, #68]	@ (80161fc <APP_BLE_Init+0xac>)
 80161b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80161bc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80161be:	4a10      	ldr	r2, [pc, #64]	@ (8016200 <APP_BLE_Init+0xb0>)
 80161c0:	2100      	movs	r1, #0
 80161c2:	2001      	movs	r0, #1
 80161c4:	f002 feec 	bl	8018fa0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80161c8:	2006      	movs	r0, #6
 80161ca:	f7fe fe77 	bl	8014ebc <aci_hal_set_radio_activity_mask>
 80161ce:	4603      	mov	r3, r0
 80161d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80161d4:	f000 fadc 	bl	8016790 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80161d8:	4b08      	ldr	r3, [pc, #32]	@ (80161fc <APP_BLE_Init+0xac>)
 80161da:	2200      	movs	r2, #0
 80161dc:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80161de:	4b07      	ldr	r3, [pc, #28]	@ (80161fc <APP_BLE_Init+0xac>)
 80161e0:	2200      	movs	r2, #0
 80161e2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80161e4:	2001      	movs	r0, #1
 80161e6:	f000 f9b3 	bl	8016550 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80161ea:	bf00      	nop
}
 80161ec:	3740      	adds	r7, #64	@ 0x40
 80161ee:	46bd      	mov	sp, r7
 80161f0:	bdb0      	pop	{r4, r5, r7, pc}
 80161f2:	bf00      	nop
 80161f4:	0801cbdc 	.word	0x0801cbdc
 80161f8:	0801553d 	.word	0x0801553d
 80161fc:	20000cac 	.word	0x20000cac
 8016200:	08016639 	.word	0x08016639

08016204 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b08c      	sub	sp, #48	@ 0x30
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 801620c:	2392      	movs	r3, #146	@ 0x92
 801620e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	3301      	adds	r3, #1
 8016216:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8016218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801621a:	781b      	ldrb	r3, [r3, #0]
 801621c:	2bff      	cmp	r3, #255	@ 0xff
 801621e:	d05c      	beq.n	80162da <SVCCTL_App_Notification+0xd6>
 8016220:	2bff      	cmp	r3, #255	@ 0xff
 8016222:	f300 80bd 	bgt.w	80163a0 <SVCCTL_App_Notification+0x19c>
 8016226:	2b3e      	cmp	r3, #62	@ 0x3e
 8016228:	d02b      	beq.n	8016282 <SVCCTL_App_Notification+0x7e>
 801622a:	2b3e      	cmp	r3, #62	@ 0x3e
 801622c:	f300 80b8 	bgt.w	80163a0 <SVCCTL_App_Notification+0x19c>
 8016230:	2b05      	cmp	r3, #5
 8016232:	d002      	beq.n	801623a <SVCCTL_App_Notification+0x36>
 8016234:	2b10      	cmp	r3, #16
 8016236:	d020      	beq.n	801627a <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8016238:	e0b2      	b.n	80163a0 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801623c:	3302      	adds	r3, #2
 801623e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8016246:	b29a      	uxth	r2, r3
 8016248:	4b59      	ldr	r3, [pc, #356]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 801624a:	8adb      	ldrh	r3, [r3, #22]
 801624c:	429a      	cmp	r2, r3
 801624e:	d106      	bne.n	801625e <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8016250:	4b57      	ldr	r3, [pc, #348]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 8016252:	2200      	movs	r2, #0
 8016254:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8016256:	4b56      	ldr	r3, [pc, #344]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 8016258:	2200      	movs	r2, #0
 801625a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 801625e:	2001      	movs	r0, #1
 8016260:	f000 f976 	bl	8016550 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8016264:	4b53      	ldr	r3, [pc, #332]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 8016266:	2201      	movs	r2, #1
 8016268:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801626a:	4b51      	ldr	r3, [pc, #324]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 801626c:	8ada      	ldrh	r2, [r3, #22]
 801626e:	4b51      	ldr	r3, [pc, #324]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 8016270:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8016272:	4850      	ldr	r0, [pc, #320]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 8016274:	f000 fa78 	bl	8016768 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8016278:	e095      	b.n	80163a6 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 801627a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801627c:	3302      	adds	r3, #2
 801627e:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8016280:	e091      	b.n	80163a6 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8016282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016284:	3302      	adds	r3, #2
 8016286:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	781b      	ldrb	r3, [r3, #0]
 801628c:	2b01      	cmp	r3, #1
 801628e:	d001      	beq.n	8016294 <SVCCTL_App_Notification+0x90>
 8016290:	2b03      	cmp	r3, #3
          break;
 8016292:	e021      	b.n	80162d8 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8016294:	69bb      	ldr	r3, [r7, #24]
 8016296:	3301      	adds	r3, #1
 8016298:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801629a:	4b45      	ldr	r3, [pc, #276]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 801629c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80162a0:	2b04      	cmp	r3, #4
 80162a2:	d104      	bne.n	80162ae <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80162a4:	4b42      	ldr	r3, [pc, #264]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 80162a6:	2206      	movs	r2, #6
 80162a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80162ac:	e003      	b.n	80162b6 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80162ae:	4b40      	ldr	r3, [pc, #256]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 80162b0:	2205      	movs	r2, #5
 80162b2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80162bc:	b29a      	uxth	r2, r3
 80162be:	4b3c      	ldr	r3, [pc, #240]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 80162c0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80162c2:	4b3c      	ldr	r3, [pc, #240]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 80162c4:	2200      	movs	r2, #0
 80162c6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80162c8:	4b39      	ldr	r3, [pc, #228]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 80162ca:	8ada      	ldrh	r2, [r3, #22]
 80162cc:	4b39      	ldr	r3, [pc, #228]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 80162ce:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80162d0:	4838      	ldr	r0, [pc, #224]	@ (80163b4 <SVCCTL_App_Notification+0x1b0>)
 80162d2:	f000 fa49 	bl	8016768 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80162d6:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80162d8:	e065      	b.n	80163a6 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80162da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162dc:	3302      	adds	r3, #2
 80162de:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 80162e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80162ea:	4293      	cmp	r3, r2
 80162ec:	d048      	beq.n	8016380 <SVCCTL_App_Notification+0x17c>
 80162ee:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80162f2:	4293      	cmp	r3, r2
 80162f4:	dc56      	bgt.n	80163a4 <SVCCTL_App_Notification+0x1a0>
 80162f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80162fa:	d04b      	beq.n	8016394 <SVCCTL_App_Notification+0x190>
 80162fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016300:	dc50      	bgt.n	80163a4 <SVCCTL_App_Notification+0x1a0>
 8016302:	f240 420a 	movw	r2, #1034	@ 0x40a
 8016306:	4293      	cmp	r3, r2
 8016308:	dc4c      	bgt.n	80163a4 <SVCCTL_App_Notification+0x1a0>
 801630a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801630e:	dc04      	bgt.n	801631a <SVCCTL_App_Notification+0x116>
 8016310:	2b04      	cmp	r3, #4
 8016312:	d041      	beq.n	8016398 <SVCCTL_App_Notification+0x194>
 8016314:	2b06      	cmp	r3, #6
 8016316:	d039      	beq.n	801638c <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8016318:	e044      	b.n	80163a4 <SVCCTL_App_Notification+0x1a0>
      switch (p_blecore_evt->ecode)
 801631a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 801631e:	2b09      	cmp	r3, #9
 8016320:	d840      	bhi.n	80163a4 <SVCCTL_App_Notification+0x1a0>
 8016322:	a201      	add	r2, pc, #4	@ (adr r2, 8016328 <SVCCTL_App_Notification+0x124>)
 8016324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016328:	08016379 	.word	0x08016379
 801632c:	08016351 	.word	0x08016351
 8016330:	080163a5 	.word	0x080163a5
 8016334:	080163a5 	.word	0x080163a5
 8016338:	080163a5 	.word	0x080163a5
 801633c:	080163a5 	.word	0x080163a5
 8016340:	0801639d 	.word	0x0801639d
 8016344:	080163a5 	.word	0x080163a5
 8016348:	08016365 	.word	0x08016365
 801634c:	0801639d 	.word	0x0801639d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8016350:	4b17      	ldr	r3, [pc, #92]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 8016352:	8adb      	ldrh	r3, [r3, #22]
 8016354:	4918      	ldr	r1, [pc, #96]	@ (80163b8 <SVCCTL_App_Notification+0x1b4>)
 8016356:	4618      	mov	r0, r3
 8016358:	f7fd ffb2 	bl	80142c0 <aci_gap_pass_key_resp>
 801635c:	4603      	mov	r3, r0
 801635e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8016362:	e01c      	b.n	801639e <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8016364:	4b12      	ldr	r3, [pc, #72]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 8016366:	8adb      	ldrh	r3, [r3, #22]
 8016368:	2101      	movs	r1, #1
 801636a:	4618      	mov	r0, r3
 801636c:	f7fe f952 	bl	8014614 <aci_gap_numeric_comparison_value_confirm_yesno>
 8016370:	4603      	mov	r3, r0
 8016372:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8016376:	e012      	b.n	801639e <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8016378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801637a:	3302      	adds	r3, #2
 801637c:	623b      	str	r3, [r7, #32]
          break;
 801637e:	e00e      	b.n	801639e <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8016380:	4b0b      	ldr	r3, [pc, #44]	@ (80163b0 <SVCCTL_App_Notification+0x1ac>)
 8016382:	8adb      	ldrh	r3, [r3, #22]
 8016384:	4618      	mov	r0, r3
 8016386:	f7fe fc58 	bl	8014c3a <aci_gatt_confirm_indication>
        break;
 801638a:	e008      	b.n	801639e <SVCCTL_App_Notification+0x19a>
	      p_warning_event = (aci_hal_warning_event_rp0 *)p_blecore_evt->data;
 801638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801638e:	3302      	adds	r3, #2
 8016390:	61fb      	str	r3, [r7, #28]
          break;
 8016392:	e004      	b.n	801639e <SVCCTL_App_Notification+0x19a>
          break;
 8016394:	bf00      	nop
 8016396:	e005      	b.n	80163a4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8016398:	bf00      	nop
 801639a:	e003      	b.n	80163a4 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801639c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801639e:	e001      	b.n	80163a4 <SVCCTL_App_Notification+0x1a0>
      break;
 80163a0:	bf00      	nop
 80163a2:	e000      	b.n	80163a6 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80163a4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80163a6:	2301      	movs	r3, #1
}
 80163a8:	4618      	mov	r0, r3
 80163aa:	3730      	adds	r7, #48	@ 0x30
 80163ac:	46bd      	mov	sp, r7
 80163ae:	bd80      	pop	{r7, pc}
 80163b0:	20000cac 	.word	0x20000cac
 80163b4:	20000d30 	.word	0x20000d30
 80163b8:	0001b207 	.word	0x0001b207

080163bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b082      	sub	sp, #8
 80163c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80163c2:	4b06      	ldr	r3, [pc, #24]	@ (80163dc <Ble_Tl_Init+0x20>)
 80163c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80163c6:	4b06      	ldr	r3, [pc, #24]	@ (80163e0 <Ble_Tl_Init+0x24>)
 80163c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80163ca:	463b      	mov	r3, r7
 80163cc:	4619      	mov	r1, r3
 80163ce:	4805      	ldr	r0, [pc, #20]	@ (80163e4 <Ble_Tl_Init+0x28>)
 80163d0:	f7ff f898 	bl	8015504 <hci_init>

  return;
 80163d4:	bf00      	nop
}
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}
 80163dc:	200300d8 	.word	0x200300d8
 80163e0:	080166e9 	.word	0x080166e9
 80163e4:	080166b1 	.word	0x080166b1

080163e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80163e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163ea:	b08d      	sub	sp, #52	@ 0x34
 80163ec:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80163ee:	2300      	movs	r3, #0
 80163f0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80163f2:	2392      	movs	r3, #146	@ 0x92
 80163f4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80163f6:	f7fe fdb5 	bl	8014f64 <hci_reset>
 80163fa:	4603      	mov	r3, r0
 80163fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80163fe:	f000 f8d7 	bl	80165b0 <BleGetBdAddress>
 8016402:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBLIC_ADDRESS_OFFSET, CONFIG_DATA_PUBLIC_ADDRESS_LEN, (uint8_t*) p_bd_addr);
 8016404:	693a      	ldr	r2, [r7, #16]
 8016406:	2106      	movs	r1, #6
 8016408:	2000      	movs	r0, #0
 801640a:	f7fe fc6b 	bl	8014ce4 <aci_hal_write_config_data>
 801640e:	4603      	mov	r3, r0
 8016410:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8016412:	4a4a      	ldr	r2, [pc, #296]	@ (801653c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8016414:	2110      	movs	r1, #16
 8016416:	2018      	movs	r0, #24
 8016418:	f7fe fc64 	bl	8014ce4 <aci_hal_write_config_data>
 801641c:	4603      	mov	r3, r0
 801641e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8016420:	4a47      	ldr	r2, [pc, #284]	@ (8016540 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8016422:	2110      	movs	r1, #16
 8016424:	2008      	movs	r0, #8
 8016426:	f7fe fc5d 	bl	8014ce4 <aci_hal_write_config_data>
 801642a:	4603      	mov	r3, r0
 801642c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801642e:	2118      	movs	r1, #24
 8016430:	2001      	movs	r0, #1
 8016432:	f7fe fcdc 	bl	8014dee <aci_hal_set_tx_power_level>
 8016436:	4603      	mov	r3, r0
 8016438:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801643a:	f7fe f952 	bl	80146e2 <aci_gatt_init>
 801643e:	4603      	mov	r3, r0
 8016440:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8016442:	2300      	movs	r3, #0
 8016444:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8016446:	7bfb      	ldrb	r3, [r7, #15]
 8016448:	f043 0301 	orr.w	r3, r3, #1
 801644c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801644e:	7bfb      	ldrb	r3, [r7, #15]
 8016450:	2b00      	cmp	r3, #0
 8016452:	d01f      	beq.n	8016494 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8016454:	4b3b      	ldr	r3, [pc, #236]	@ (8016544 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8016456:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8016458:	1dba      	adds	r2, r7, #6
 801645a:	7bf8      	ldrb	r0, [r7, #15]
 801645c:	1cbb      	adds	r3, r7, #2
 801645e:	9301      	str	r3, [sp, #4]
 8016460:	1d3b      	adds	r3, r7, #4
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	4613      	mov	r3, r2
 8016466:	2208      	movs	r2, #8
 8016468:	2100      	movs	r1, #0
 801646a:	f7fd ff90 	bl	801438e <aci_gap_init>
 801646e:	4603      	mov	r3, r0
 8016470:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8016472:	88fc      	ldrh	r4, [r7, #6]
 8016474:	88bd      	ldrh	r5, [r7, #4]
 8016476:	68b8      	ldr	r0, [r7, #8]
 8016478:	f7e9 fee2 	bl	8000240 <strlen>
 801647c:	4603      	mov	r3, r0
 801647e:	b2da      	uxtb	r2, r3
 8016480:	68bb      	ldr	r3, [r7, #8]
 8016482:	9300      	str	r3, [sp, #0]
 8016484:	4613      	mov	r3, r2
 8016486:	2200      	movs	r2, #0
 8016488:	4629      	mov	r1, r5
 801648a:	4620      	mov	r0, r4
 801648c:	f7fe fb2c 	bl	8014ae8 <aci_gatt_update_char_value>
 8016490:	4603      	mov	r3, r0
 8016492:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8016494:	88f8      	ldrh	r0, [r7, #6]
 8016496:	8879      	ldrh	r1, [r7, #2]
 8016498:	463b      	mov	r3, r7
 801649a:	9300      	str	r3, [sp, #0]
 801649c:	2302      	movs	r3, #2
 801649e:	2200      	movs	r2, #0
 80164a0:	f7fe fb22 	bl	8014ae8 <aci_gatt_update_char_value>
 80164a4:	4603      	mov	r3, r0
 80164a6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80164a8:	2202      	movs	r2, #2
 80164aa:	2102      	movs	r1, #2
 80164ac:	2000      	movs	r0, #0
 80164ae:	f7fe fd7d 	bl	8014fac <hci_le_set_default_phy>
 80164b2:	4603      	mov	r3, r0
 80164b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80164b6:	4b24      	ldr	r3, [pc, #144]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164b8:	2201      	movs	r2, #1
 80164ba:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80164bc:	4b22      	ldr	r3, [pc, #136]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7fd fde5 	bl	8014090 <aci_gap_set_io_capability>
 80164c6:	4603      	mov	r3, r0
 80164c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80164ca:	4b1f      	ldr	r3, [pc, #124]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164cc:	2201      	movs	r2, #1
 80164ce:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80164d0:	4b1d      	ldr	r3, [pc, #116]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164d2:	2208      	movs	r2, #8
 80164d4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80164d6:	4b1c      	ldr	r3, [pc, #112]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164d8:	2210      	movs	r2, #16
 80164da:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80164dc:	4b1a      	ldr	r3, [pc, #104]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164de:	2200      	movs	r2, #0
 80164e0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80164e2:	4b19      	ldr	r3, [pc, #100]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164e4:	4a19      	ldr	r2, [pc, #100]	@ (801654c <Ble_Hci_Gap_Gatt_Init+0x164>)
 80164e6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80164e8:	4b17      	ldr	r3, [pc, #92]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164ea:	2200      	movs	r2, #0
 80164ec:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80164ee:	4b16      	ldr	r3, [pc, #88]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164f0:	789c      	ldrb	r4, [r3, #2]
 80164f2:	4b15      	ldr	r3, [pc, #84]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164f4:	785d      	ldrb	r5, [r3, #1]
 80164f6:	4b14      	ldr	r3, [pc, #80]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164f8:	791b      	ldrb	r3, [r3, #4]
 80164fa:	4a13      	ldr	r2, [pc, #76]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80164fc:	7952      	ldrb	r2, [r2, #5]
 80164fe:	4912      	ldr	r1, [pc, #72]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016500:	78c9      	ldrb	r1, [r1, #3]
 8016502:	4811      	ldr	r0, [pc, #68]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016504:	6880      	ldr	r0, [r0, #8]
 8016506:	2600      	movs	r6, #0
 8016508:	9604      	str	r6, [sp, #16]
 801650a:	9003      	str	r0, [sp, #12]
 801650c:	9102      	str	r1, [sp, #8]
 801650e:	9201      	str	r2, [sp, #4]
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	2300      	movs	r3, #0
 8016514:	2201      	movs	r2, #1
 8016516:	4629      	mov	r1, r5
 8016518:	4620      	mov	r0, r4
 801651a:	f7fd fe0d 	bl	8014138 <aci_gap_set_authentication_requirement>
 801651e:	4603      	mov	r3, r0
 8016520:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8016522:	4b09      	ldr	r3, [pc, #36]	@ (8016548 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8016524:	789b      	ldrb	r3, [r3, #2]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d003      	beq.n	8016532 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801652a:	f7fe f84f 	bl	80145cc <aci_gap_configure_filter_accept_list>
 801652e:	4603      	mov	r3, r0
 8016530:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8016532:	bf00      	nop
 8016534:	371c      	adds	r7, #28
 8016536:	46bd      	mov	sp, r7
 8016538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801653a:	bf00      	nop
 801653c:	0801d584 	.word	0x0801d584
 8016540:	0801d594 	.word	0x0801d594
 8016544:	0801cc18 	.word	0x0801cc18
 8016548:	20000cac 	.word	0x20000cac
 801654c:	0001b207 	.word	0x0001b207

08016550 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b08c      	sub	sp, #48	@ 0x30
 8016554:	af08      	add	r7, sp, #32
 8016556:	4603      	mov	r3, r0
 8016558:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801655a:	2392      	movs	r3, #146	@ 0x92
 801655c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801655e:	4a12      	ldr	r2, [pc, #72]	@ (80165a8 <Adv_Request+0x58>)
 8016560:	79fb      	ldrb	r3, [r7, #7]
 8016562:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8016566:	2300      	movs	r3, #0
 8016568:	9306      	str	r3, [sp, #24]
 801656a:	2300      	movs	r3, #0
 801656c:	9305      	str	r3, [sp, #20]
 801656e:	2300      	movs	r3, #0
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	2300      	movs	r3, #0
 8016574:	9303      	str	r3, [sp, #12]
 8016576:	2300      	movs	r3, #0
 8016578:	9302      	str	r3, [sp, #8]
 801657a:	2300      	movs	r3, #0
 801657c:	9301      	str	r3, [sp, #4]
 801657e:	2300      	movs	r3, #0
 8016580:	9300      	str	r3, [sp, #0]
 8016582:	2300      	movs	r3, #0
 8016584:	22a0      	movs	r2, #160	@ 0xa0
 8016586:	2180      	movs	r1, #128	@ 0x80
 8016588:	2000      	movs	r0, #0
 801658a:	f7fd fc87 	bl	8013e9c <aci_gap_set_discoverable>
 801658e:	4603      	mov	r3, r0
 8016590:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8016592:	4906      	ldr	r1, [pc, #24]	@ (80165ac <Adv_Request+0x5c>)
 8016594:	200f      	movs	r0, #15
 8016596:	f7fd ffa7 	bl	80144e8 <aci_gap_update_adv_data>
 801659a:	4603      	mov	r3, r0
 801659c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801659e:	bf00      	nop
}
 80165a0:	3710      	adds	r7, #16
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	20000cac 	.word	0x20000cac
 80165ac:	20000094 	.word	0x20000094

080165b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b086      	sub	sp, #24
 80165b4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80165b6:	f7ff fda7 	bl	8016108 <LL_FLASH_GetUDN>
 80165ba:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80165bc:	693b      	ldr	r3, [r7, #16]
 80165be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165c2:	d023      	beq.n	801660c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80165c4:	f7ff fdb8 	bl	8016138 <LL_FLASH_GetSTCompanyID>
 80165c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80165ca:	f7ff fda9 	bl	8016120 <LL_FLASH_GetDeviceID>
 80165ce:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80165d0:	693b      	ldr	r3, [r7, #16]
 80165d2:	b2da      	uxtb	r2, r3
 80165d4:	4b16      	ldr	r3, [pc, #88]	@ (8016630 <BleGetBdAddress+0x80>)
 80165d6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	0a1b      	lsrs	r3, r3, #8
 80165dc:	b2da      	uxtb	r2, r3
 80165de:	4b14      	ldr	r3, [pc, #80]	@ (8016630 <BleGetBdAddress+0x80>)
 80165e0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	b2da      	uxtb	r2, r3
 80165e6:	4b12      	ldr	r3, [pc, #72]	@ (8016630 <BleGetBdAddress+0x80>)
 80165e8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	b2da      	uxtb	r2, r3
 80165ee:	4b10      	ldr	r3, [pc, #64]	@ (8016630 <BleGetBdAddress+0x80>)
 80165f0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	0a1b      	lsrs	r3, r3, #8
 80165f6:	b2da      	uxtb	r2, r3
 80165f8:	4b0d      	ldr	r3, [pc, #52]	@ (8016630 <BleGetBdAddress+0x80>)
 80165fa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80165fc:	68bb      	ldr	r3, [r7, #8]
 80165fe:	0c1b      	lsrs	r3, r3, #16
 8016600:	b2da      	uxtb	r2, r3
 8016602:	4b0b      	ldr	r3, [pc, #44]	@ (8016630 <BleGetBdAddress+0x80>)
 8016604:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8016606:	4b0a      	ldr	r3, [pc, #40]	@ (8016630 <BleGetBdAddress+0x80>)
 8016608:	617b      	str	r3, [r7, #20]
 801660a:	e00b      	b.n	8016624 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 801660c:	2000      	movs	r0, #0
 801660e:	f7ff fc95 	bl	8015f3c <OTP_Read>
 8016612:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	2b00      	cmp	r3, #0
 8016618:	d002      	beq.n	8016620 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	617b      	str	r3, [r7, #20]
 801661e:	e001      	b.n	8016624 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8016620:	4b04      	ldr	r3, [pc, #16]	@ (8016634 <BleGetBdAddress+0x84>)
 8016622:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8016624:	697b      	ldr	r3, [r7, #20]
}
 8016626:	4618      	mov	r0, r3
 8016628:	3718      	adds	r7, #24
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
 801662e:	bf00      	nop
 8016630:	20000ca4 	.word	0x20000ca4
 8016634:	0801d57c 	.word	0x0801d57c

08016638 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801663e:	4b0a      	ldr	r3, [pc, #40]	@ (8016668 <Adv_Cancel+0x30>)
 8016640:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8016644:	2b05      	cmp	r3, #5
 8016646:	d00a      	beq.n	801665e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8016648:	2392      	movs	r3, #146	@ 0x92
 801664a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801664c:	f7fd fc02 	bl	8013e54 <aci_gap_set_non_discoverable>
 8016650:	4603      	mov	r3, r0
 8016652:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8016654:	4b04      	ldr	r3, [pc, #16]	@ (8016668 <Adv_Cancel+0x30>)
 8016656:	2200      	movs	r2, #0
 8016658:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801665c:	bf00      	nop
 801665e:	bf00      	nop
}
 8016660:	3708      	adds	r7, #8
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop
 8016668:	20000cac 	.word	0x20000cac

0801666c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	b082      	sub	sp, #8
 8016670:	af00      	add	r7, sp, #0
 8016672:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8016674:	2100      	movs	r1, #0
 8016676:	2002      	movs	r0, #2
 8016678:	f002 fcb4 	bl	8018fe4 <UTIL_SEQ_SetTask>

  return;
 801667c:	bf00      	nop
}
 801667e:	3708      	adds	r7, #8
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801668c:	2001      	movs	r0, #1
 801668e:	f002 fd15 	bl	80190bc <UTIL_SEQ_SetEvt>

  return;
 8016692:	bf00      	nop
}
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801669a:	b580      	push	{r7, lr}
 801669c:	b082      	sub	sp, #8
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80166a2:	2001      	movs	r0, #1
 80166a4:	f002 fd2a 	bl	80190fc <UTIL_SEQ_WaitEvt>

  return;
 80166a8:	bf00      	nop
}
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}

080166b0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b084      	sub	sp, #16
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	685b      	ldr	r3, [r3, #4]
 80166c0:	3308      	adds	r3, #8
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7fe fdd8 	bl	8015278 <SVCCTL_UserEvtRx>
 80166c8:	4603      	mov	r3, r0
 80166ca:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80166cc:	7afb      	ldrb	r3, [r7, #11]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d003      	beq.n	80166da <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	2201      	movs	r2, #1
 80166d6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80166d8:	e003      	b.n	80166e2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	2200      	movs	r2, #0
 80166de:	701a      	strb	r2, [r3, #0]
  return;
 80166e0:	bf00      	nop
}
 80166e2:	3710      	adds	r7, #16
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd80      	pop	{r7, pc}

080166e8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b084      	sub	sp, #16
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	4603      	mov	r3, r0
 80166f0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80166f2:	79fb      	ldrb	r3, [r7, #7]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d002      	beq.n	80166fe <BLE_StatusNot+0x16>
 80166f8:	2b01      	cmp	r3, #1
 80166fa:	d006      	beq.n	801670a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80166fc:	e00b      	b.n	8016716 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80166fe:	2307      	movs	r3, #7
 8016700:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8016702:	68f8      	ldr	r0, [r7, #12]
 8016704:	f002 fc9a 	bl	801903c <UTIL_SEQ_PauseTask>
      break;
 8016708:	e005      	b.n	8016716 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801670a:	2307      	movs	r3, #7
 801670c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801670e:	68f8      	ldr	r0, [r7, #12]
 8016710:	f002 fcb4 	bl	801907c <UTIL_SEQ_ResumeTask>
      break;
 8016714:	bf00      	nop
  }

  return;
 8016716:	bf00      	nop
}
 8016718:	3710      	adds	r7, #16
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}
	...

08016720 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8016720:	b480      	push	{r7}
 8016722:	b083      	sub	sp, #12
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	2b07      	cmp	r3, #7
 801672e:	d813      	bhi.n	8016758 <Custom_STM_App_Notification+0x38>
 8016730:	a201      	add	r2, pc, #4	@ (adr r2, 8016738 <Custom_STM_App_Notification+0x18>)
 8016732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016736:	bf00      	nop
 8016738:	08016759 	.word	0x08016759
 801673c:	08016759 	.word	0x08016759
 8016740:	08016759 	.word	0x08016759
 8016744:	08016759 	.word	0x08016759
 8016748:	08016759 	.word	0x08016759
 801674c:	08016759 	.word	0x08016759
 8016750:	08016759 	.word	0x08016759
 8016754:	08016759 	.word	0x08016759

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8016758:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801675a:	bf00      	nop
}
 801675c:	370c      	adds	r7, #12
 801675e:	46bd      	mov	sp, r7
 8016760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016764:	4770      	bx	lr
 8016766:	bf00      	nop

08016768 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8016768:	b480      	push	{r7}
 801676a:	b083      	sub	sp, #12
 801676c:	af00      	add	r7, sp, #0
 801676e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	781b      	ldrb	r3, [r3, #0]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d002      	beq.n	801677e <Custom_APP_Notification+0x16>
 8016778:	2b01      	cmp	r3, #1
 801677a:	d002      	beq.n	8016782 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801677c:	e002      	b.n	8016784 <Custom_APP_Notification+0x1c>
      break;
 801677e:	bf00      	nop
 8016780:	e000      	b.n	8016784 <Custom_APP_Notification+0x1c>
      break;
 8016782:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8016784:	bf00      	nop
}
 8016786:	370c      	adds	r7, #12
 8016788:	46bd      	mov	sp, r7
 801678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678e:	4770      	bx	lr

08016790 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8016790:	b480      	push	{r7}
 8016792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8016794:	bf00      	nop
}
 8016796:	46bd      	mov	sp, r7
 8016798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801679c:	4770      	bx	lr
	...

080167a0 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b08c      	sub	sp, #48	@ 0x30
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80167a8:	2300      	movs	r3, #0
 80167aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	3301      	adds	r3, #1
 80167b2:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80167b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167b6:	781b      	ldrb	r3, [r3, #0]
 80167b8:	2bff      	cmp	r3, #255	@ 0xff
 80167ba:	f040 80bc 	bne.w	8016936 <Custom_STM_Event_Handler+0x196>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80167be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167c0:	3302      	adds	r3, #2
 80167c2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80167c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80167ce:	2b1a      	cmp	r3, #26
 80167d0:	f200 80ad 	bhi.w	801692e <Custom_STM_Event_Handler+0x18e>
 80167d4:	a201      	add	r2, pc, #4	@ (adr r2, 80167dc <Custom_STM_Event_Handler+0x3c>)
 80167d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167da:	bf00      	nop
 80167dc:	08016849 	.word	0x08016849
 80167e0:	0801692f 	.word	0x0801692f
 80167e4:	0801692f 	.word	0x0801692f
 80167e8:	0801692f 	.word	0x0801692f
 80167ec:	0801692f 	.word	0x0801692f
 80167f0:	0801692f 	.word	0x0801692f
 80167f4:	0801692f 	.word	0x0801692f
 80167f8:	0801692f 	.word	0x0801692f
 80167fc:	0801692f 	.word	0x0801692f
 8016800:	0801692f 	.word	0x0801692f
 8016804:	0801692f 	.word	0x0801692f
 8016808:	0801692f 	.word	0x0801692f
 801680c:	0801692f 	.word	0x0801692f
 8016810:	0801692f 	.word	0x0801692f
 8016814:	0801692f 	.word	0x0801692f
 8016818:	0801692f 	.word	0x0801692f
 801681c:	0801692f 	.word	0x0801692f
 8016820:	0801692f 	.word	0x0801692f
 8016824:	0801692f 	.word	0x0801692f
 8016828:	0801692f 	.word	0x0801692f
 801682c:	0801692f 	.word	0x0801692f
 8016830:	0801692f 	.word	0x0801692f
 8016834:	0801692f 	.word	0x0801692f
 8016838:	0801692f 	.word	0x0801692f
 801683c:	0801692f 	.word	0x0801692f
 8016840:	0801692f 	.word	0x0801692f
 8016844:	08016911 	.word	0x08016911
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8016848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801684a:	3302      	adds	r3, #2
 801684c:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801684e:	69fb      	ldr	r3, [r7, #28]
 8016850:	885b      	ldrh	r3, [r3, #2]
 8016852:	b29b      	uxth	r3, r3
 8016854:	461a      	mov	r2, r3
 8016856:	4b3b      	ldr	r3, [pc, #236]	@ (8016944 <Custom_STM_Event_Handler+0x1a4>)
 8016858:	889b      	ldrh	r3, [r3, #4]
 801685a:	3302      	adds	r3, #2
 801685c:	429a      	cmp	r2, r3
 801685e:	d119      	bne.n	8016894 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8016860:	2301      	movs	r3, #1
 8016862:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	7a1b      	ldrb	r3, [r3, #8]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d002      	beq.n	8016874 <Custom_STM_Event_Handler+0xd4>
 801686e:	2b01      	cmp	r3, #1
 8016870:	d008      	beq.n	8016884 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8016872:	e04c      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8016874:	2303      	movs	r3, #3
 8016876:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016878:	f107 0308 	add.w	r3, r7, #8
 801687c:	4618      	mov	r0, r3
 801687e:	f7ff ff4f 	bl	8016720 <Custom_STM_App_Notification>
                break;
 8016882:	e044      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8016884:	2302      	movs	r3, #2
 8016886:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8016888:	f107 0308 	add.w	r3, r7, #8
 801688c:	4618      	mov	r0, r3
 801688e:	f7ff ff47 	bl	8016720 <Custom_STM_App_Notification>
                break;
 8016892:	e03c      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	885b      	ldrh	r3, [r3, #2]
 8016898:	b29b      	uxth	r3, r3
 801689a:	461a      	mov	r2, r3
 801689c:	4b29      	ldr	r3, [pc, #164]	@ (8016944 <Custom_STM_Event_Handler+0x1a4>)
 801689e:	891b      	ldrh	r3, [r3, #8]
 80168a0:	3302      	adds	r3, #2
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d119      	bne.n	80168da <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80168a6:	2301      	movs	r3, #1
 80168a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 80168ac:	69fb      	ldr	r3, [r7, #28]
 80168ae:	7a1b      	ldrb	r3, [r3, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d002      	beq.n	80168ba <Custom_STM_Event_Handler+0x11a>
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d008      	beq.n	80168ca <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 80168b8:	e029      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_DISABLED_EVT;
 80168ba:	2306      	movs	r3, #6
 80168bc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80168be:	f107 0308 	add.w	r3, r7, #8
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7ff ff2c 	bl	8016720 <Custom_STM_App_Notification>
                break;
 80168c8:	e021      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_DELTA_T_CH_NOTIFY_ENABLED_EVT;
 80168ca:	2305      	movs	r3, #5
 80168cc:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80168ce:	f107 0308 	add.w	r3, r7, #8
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7ff ff24 	bl	8016720 <Custom_STM_App_Notification>
                break;
 80168d8:	e019      	b.n	801690e <Custom_STM_Event_Handler+0x16e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomDelta_T_ChHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80168da:	69fb      	ldr	r3, [r7, #28]
 80168dc:	885b      	ldrh	r3, [r3, #2]
 80168de:	b29b      	uxth	r3, r3
 80168e0:	461a      	mov	r2, r3
 80168e2:	4b18      	ldr	r3, [pc, #96]	@ (8016944 <Custom_STM_Event_Handler+0x1a4>)
 80168e4:	885b      	ldrh	r3, [r3, #2]
 80168e6:	3301      	adds	r3, #1
 80168e8:	429a      	cmp	r2, r3
 80168ea:	d103      	bne.n	80168f4 <Custom_STM_Event_Handler+0x154>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80168ec:	2301      	movs	r3, #1
 80168ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80168f2:	e01e      	b.n	8016932 <Custom_STM_Event_Handler+0x192>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomReboot_Request_ChHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80168f4:	69fb      	ldr	r3, [r7, #28]
 80168f6:	885b      	ldrh	r3, [r3, #2]
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	461a      	mov	r2, r3
 80168fc:	4b11      	ldr	r3, [pc, #68]	@ (8016944 <Custom_STM_Event_Handler+0x1a4>)
 80168fe:	88db      	ldrh	r3, [r3, #6]
 8016900:	3301      	adds	r3, #1
 8016902:	429a      	cmp	r2, r3
 8016904:	d115      	bne.n	8016932 <Custom_STM_Event_Handler+0x192>
            return_value = SVCCTL_EvtAckFlowEnable;
 8016906:	2301      	movs	r3, #1
 8016908:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 801690c:	e011      	b.n	8016932 <Custom_STM_Event_Handler+0x192>
 801690e:	e010      	b.n	8016932 <Custom_STM_Event_Handler+0x192>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8016910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016912:	3302      	adds	r3, #2
 8016914:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8016916:	2307      	movs	r3, #7
 8016918:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 801691a:	6a3b      	ldr	r3, [r7, #32]
 801691c:	881b      	ldrh	r3, [r3, #0]
 801691e:	b29b      	uxth	r3, r3
 8016920:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8016922:	f107 0308 	add.w	r3, r7, #8
 8016926:	4618      	mov	r0, r3
 8016928:	f7ff fefa 	bl	8016720 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801692c:	e002      	b.n	8016934 <Custom_STM_Event_Handler+0x194>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801692e:	bf00      	nop
 8016930:	e002      	b.n	8016938 <Custom_STM_Event_Handler+0x198>
          break;
 8016932:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8016934:	e000      	b.n	8016938 <Custom_STM_Event_Handler+0x198>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8016936:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8016938:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 801693c:	4618      	mov	r0, r3
 801693e:	3730      	adds	r7, #48	@ 0x30
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	20000d34 	.word	0x20000d34

08016948 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08c      	sub	sp, #48	@ 0x30
 801694c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801694e:	2392      	movs	r3, #146	@ 0x92
 8016950:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8016952:	4885      	ldr	r0, [pc, #532]	@ (8016b68 <SVCCTL_InitCustomSvc+0x220>)
 8016954:	f7fe fc76 	bl	8015244 <SVCCTL_RegisterSvcHandler>
   *                              = 12
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 12;
 8016958:	230c      	movs	r3, #12
 801695a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService1 */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService1 */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 801695c:	238f      	movs	r3, #143	@ 0x8f
 801695e:	713b      	strb	r3, [r7, #4]
 8016960:	23e5      	movs	r3, #229	@ 0xe5
 8016962:	717b      	strb	r3, [r7, #5]
 8016964:	23b3      	movs	r3, #179	@ 0xb3
 8016966:	71bb      	strb	r3, [r7, #6]
 8016968:	23d5      	movs	r3, #213	@ 0xd5
 801696a:	71fb      	strb	r3, [r7, #7]
 801696c:	232e      	movs	r3, #46	@ 0x2e
 801696e:	723b      	strb	r3, [r7, #8]
 8016970:	237f      	movs	r3, #127	@ 0x7f
 8016972:	727b      	strb	r3, [r7, #9]
 8016974:	234a      	movs	r3, #74	@ 0x4a
 8016976:	72bb      	strb	r3, [r7, #10]
 8016978:	2398      	movs	r3, #152	@ 0x98
 801697a:	72fb      	strb	r3, [r7, #11]
 801697c:	232a      	movs	r3, #42	@ 0x2a
 801697e:	733b      	strb	r3, [r7, #12]
 8016980:	2348      	movs	r3, #72	@ 0x48
 8016982:	737b      	strb	r3, [r7, #13]
 8016984:	237a      	movs	r3, #122	@ 0x7a
 8016986:	73bb      	strb	r3, [r7, #14]
 8016988:	23cc      	movs	r3, #204	@ 0xcc
 801698a:	73fb      	strb	r3, [r7, #15]
 801698c:	2340      	movs	r3, #64	@ 0x40
 801698e:	743b      	strb	r3, [r7, #16]
 8016990:	23fe      	movs	r3, #254	@ 0xfe
 8016992:	747b      	strb	r3, [r7, #17]
 8016994:	2300      	movs	r3, #0
 8016996:	74bb      	strb	r3, [r7, #18]
 8016998:	2300      	movs	r3, #0
 801699a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801699c:	7dbb      	ldrb	r3, [r7, #22]
 801699e:	1d39      	adds	r1, r7, #4
 80169a0:	4a72      	ldr	r2, [pc, #456]	@ (8016b6c <SVCCTL_InitCustomSvc+0x224>)
 80169a2:	9200      	str	r2, [sp, #0]
 80169a4:	2201      	movs	r2, #1
 80169a6:	2002      	movs	r0, #2
 80169a8:	f7fd fec0 	bl	801472c <aci_gatt_add_service>
 80169ac:	4603      	mov	r3, r0
 80169ae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 80169b0:	2319      	movs	r3, #25
 80169b2:	713b      	strb	r3, [r7, #4]
 80169b4:	23ed      	movs	r3, #237	@ 0xed
 80169b6:	717b      	strb	r3, [r7, #5]
 80169b8:	2382      	movs	r3, #130	@ 0x82
 80169ba:	71bb      	strb	r3, [r7, #6]
 80169bc:	23ae      	movs	r3, #174	@ 0xae
 80169be:	71fb      	strb	r3, [r7, #7]
 80169c0:	23ed      	movs	r3, #237	@ 0xed
 80169c2:	723b      	strb	r3, [r7, #8]
 80169c4:	2321      	movs	r3, #33	@ 0x21
 80169c6:	727b      	strb	r3, [r7, #9]
 80169c8:	234c      	movs	r3, #76	@ 0x4c
 80169ca:	72bb      	strb	r3, [r7, #10]
 80169cc:	239d      	movs	r3, #157	@ 0x9d
 80169ce:	72fb      	strb	r3, [r7, #11]
 80169d0:	2341      	movs	r3, #65	@ 0x41
 80169d2:	733b      	strb	r3, [r7, #12]
 80169d4:	2345      	movs	r3, #69	@ 0x45
 80169d6:	737b      	strb	r3, [r7, #13]
 80169d8:	2322      	movs	r3, #34	@ 0x22
 80169da:	73bb      	strb	r3, [r7, #14]
 80169dc:	238e      	movs	r3, #142	@ 0x8e
 80169de:	73fb      	strb	r3, [r7, #15]
 80169e0:	2341      	movs	r3, #65	@ 0x41
 80169e2:	743b      	strb	r3, [r7, #16]
 80169e4:	23fe      	movs	r3, #254	@ 0xfe
 80169e6:	747b      	strb	r3, [r7, #17]
 80169e8:	2300      	movs	r3, #0
 80169ea:	74bb      	strb	r3, [r7, #18]
 80169ec:	2300      	movs	r3, #0
 80169ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 80169f0:	4b5e      	ldr	r3, [pc, #376]	@ (8016b6c <SVCCTL_InitCustomSvc+0x224>)
 80169f2:	8818      	ldrh	r0, [r3, #0]
 80169f4:	4b5e      	ldr	r3, [pc, #376]	@ (8016b70 <SVCCTL_InitCustomSvc+0x228>)
 80169f6:	881b      	ldrh	r3, [r3, #0]
 80169f8:	1d3a      	adds	r2, r7, #4
 80169fa:	495e      	ldr	r1, [pc, #376]	@ (8016b74 <SVCCTL_InitCustomSvc+0x22c>)
 80169fc:	9105      	str	r1, [sp, #20]
 80169fe:	2101      	movs	r1, #1
 8016a00:	9104      	str	r1, [sp, #16]
 8016a02:	2110      	movs	r1, #16
 8016a04:	9103      	str	r1, [sp, #12]
 8016a06:	2101      	movs	r1, #1
 8016a08:	9102      	str	r1, [sp, #8]
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	9101      	str	r1, [sp, #4]
 8016a0e:	2106      	movs	r1, #6
 8016a10:	9100      	str	r1, [sp, #0]
 8016a12:	2102      	movs	r1, #2
 8016a14:	f7fd ff60 	bl	80148d8 <aci_gatt_add_char>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8016a1c:	2319      	movs	r3, #25
 8016a1e:	713b      	strb	r3, [r7, #4]
 8016a20:	23ed      	movs	r3, #237	@ 0xed
 8016a22:	717b      	strb	r3, [r7, #5]
 8016a24:	2382      	movs	r3, #130	@ 0x82
 8016a26:	71bb      	strb	r3, [r7, #6]
 8016a28:	23ae      	movs	r3, #174	@ 0xae
 8016a2a:	71fb      	strb	r3, [r7, #7]
 8016a2c:	23ed      	movs	r3, #237	@ 0xed
 8016a2e:	723b      	strb	r3, [r7, #8]
 8016a30:	2321      	movs	r3, #33	@ 0x21
 8016a32:	727b      	strb	r3, [r7, #9]
 8016a34:	234c      	movs	r3, #76	@ 0x4c
 8016a36:	72bb      	strb	r3, [r7, #10]
 8016a38:	239d      	movs	r3, #157	@ 0x9d
 8016a3a:	72fb      	strb	r3, [r7, #11]
 8016a3c:	2341      	movs	r3, #65	@ 0x41
 8016a3e:	733b      	strb	r3, [r7, #12]
 8016a40:	2345      	movs	r3, #69	@ 0x45
 8016a42:	737b      	strb	r3, [r7, #13]
 8016a44:	2322      	movs	r3, #34	@ 0x22
 8016a46:	73bb      	strb	r3, [r7, #14]
 8016a48:	238e      	movs	r3, #142	@ 0x8e
 8016a4a:	73fb      	strb	r3, [r7, #15]
 8016a4c:	2342      	movs	r3, #66	@ 0x42
 8016a4e:	743b      	strb	r3, [r7, #16]
 8016a50:	23fe      	movs	r3, #254	@ 0xfe
 8016a52:	747b      	strb	r3, [r7, #17]
 8016a54:	2300      	movs	r3, #0
 8016a56:	74bb      	strb	r3, [r7, #18]
 8016a58:	2300      	movs	r3, #0
 8016a5a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016a5c:	4b43      	ldr	r3, [pc, #268]	@ (8016b6c <SVCCTL_InitCustomSvc+0x224>)
 8016a5e:	8818      	ldrh	r0, [r3, #0]
 8016a60:	4b45      	ldr	r3, [pc, #276]	@ (8016b78 <SVCCTL_InitCustomSvc+0x230>)
 8016a62:	881b      	ldrh	r3, [r3, #0]
 8016a64:	1d3a      	adds	r2, r7, #4
 8016a66:	4945      	ldr	r1, [pc, #276]	@ (8016b7c <SVCCTL_InitCustomSvc+0x234>)
 8016a68:	9105      	str	r1, [sp, #20]
 8016a6a:	2101      	movs	r1, #1
 8016a6c:	9104      	str	r1, [sp, #16]
 8016a6e:	2110      	movs	r1, #16
 8016a70:	9103      	str	r1, [sp, #12]
 8016a72:	2101      	movs	r1, #1
 8016a74:	9102      	str	r1, [sp, #8]
 8016a76:	2100      	movs	r1, #0
 8016a78:	9101      	str	r1, [sp, #4]
 8016a7a:	2110      	movs	r1, #16
 8016a7c:	9100      	str	r1, [sp, #0]
 8016a7e:	2102      	movs	r1, #2
 8016a80:	f7fd ff2a 	bl	80148d8 <aci_gatt_add_char>
 8016a84:	4603      	mov	r3, r0
 8016a86:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  REBOOT_REQUEST_CHAR
   */
  COPY_REBOOT_REQUEST_CHAR_UUID(uuid.Char_UUID_128);
 8016a88:	2319      	movs	r3, #25
 8016a8a:	713b      	strb	r3, [r7, #4]
 8016a8c:	23ed      	movs	r3, #237	@ 0xed
 8016a8e:	717b      	strb	r3, [r7, #5]
 8016a90:	2382      	movs	r3, #130	@ 0x82
 8016a92:	71bb      	strb	r3, [r7, #6]
 8016a94:	23ae      	movs	r3, #174	@ 0xae
 8016a96:	71fb      	strb	r3, [r7, #7]
 8016a98:	23ed      	movs	r3, #237	@ 0xed
 8016a9a:	723b      	strb	r3, [r7, #8]
 8016a9c:	2321      	movs	r3, #33	@ 0x21
 8016a9e:	727b      	strb	r3, [r7, #9]
 8016aa0:	234c      	movs	r3, #76	@ 0x4c
 8016aa2:	72bb      	strb	r3, [r7, #10]
 8016aa4:	239d      	movs	r3, #157	@ 0x9d
 8016aa6:	72fb      	strb	r3, [r7, #11]
 8016aa8:	2341      	movs	r3, #65	@ 0x41
 8016aaa:	733b      	strb	r3, [r7, #12]
 8016aac:	2345      	movs	r3, #69	@ 0x45
 8016aae:	737b      	strb	r3, [r7, #13]
 8016ab0:	2322      	movs	r3, #34	@ 0x22
 8016ab2:	73bb      	strb	r3, [r7, #14]
 8016ab4:	238e      	movs	r3, #142	@ 0x8e
 8016ab6:	73fb      	strb	r3, [r7, #15]
 8016ab8:	2311      	movs	r3, #17
 8016aba:	743b      	strb	r3, [r7, #16]
 8016abc:	23fe      	movs	r3, #254	@ 0xfe
 8016abe:	747b      	strb	r3, [r7, #17]
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	74bb      	strb	r3, [r7, #18]
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016ac8:	4b28      	ldr	r3, [pc, #160]	@ (8016b6c <SVCCTL_InitCustomSvc+0x224>)
 8016aca:	8818      	ldrh	r0, [r3, #0]
 8016acc:	4b2c      	ldr	r3, [pc, #176]	@ (8016b80 <SVCCTL_InitCustomSvc+0x238>)
 8016ace:	881b      	ldrh	r3, [r3, #0]
 8016ad0:	1d3a      	adds	r2, r7, #4
 8016ad2:	492c      	ldr	r1, [pc, #176]	@ (8016b84 <SVCCTL_InitCustomSvc+0x23c>)
 8016ad4:	9105      	str	r1, [sp, #20]
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	9104      	str	r1, [sp, #16]
 8016ada:	2110      	movs	r1, #16
 8016adc:	9103      	str	r1, [sp, #12]
 8016ade:	2101      	movs	r1, #1
 8016ae0:	9102      	str	r1, [sp, #8]
 8016ae2:	2100      	movs	r1, #0
 8016ae4:	9101      	str	r1, [sp, #4]
 8016ae6:	2104      	movs	r1, #4
 8016ae8:	9100      	str	r1, [sp, #0]
 8016aea:	2102      	movs	r1, #2
 8016aec:	f7fd fef4 	bl	80148d8 <aci_gatt_add_char>
 8016af0:	4603      	mov	r3, r0
 8016af2:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  DELTA_T_CHAR
   */
  COPY_DELTA_T_CHAR_UUID(uuid.Char_UUID_128);
 8016af4:	2319      	movs	r3, #25
 8016af6:	713b      	strb	r3, [r7, #4]
 8016af8:	23ed      	movs	r3, #237	@ 0xed
 8016afa:	717b      	strb	r3, [r7, #5]
 8016afc:	2382      	movs	r3, #130	@ 0x82
 8016afe:	71bb      	strb	r3, [r7, #6]
 8016b00:	23ae      	movs	r3, #174	@ 0xae
 8016b02:	71fb      	strb	r3, [r7, #7]
 8016b04:	23ed      	movs	r3, #237	@ 0xed
 8016b06:	723b      	strb	r3, [r7, #8]
 8016b08:	2321      	movs	r3, #33	@ 0x21
 8016b0a:	727b      	strb	r3, [r7, #9]
 8016b0c:	234c      	movs	r3, #76	@ 0x4c
 8016b0e:	72bb      	strb	r3, [r7, #10]
 8016b10:	239d      	movs	r3, #157	@ 0x9d
 8016b12:	72fb      	strb	r3, [r7, #11]
 8016b14:	2341      	movs	r3, #65	@ 0x41
 8016b16:	733b      	strb	r3, [r7, #12]
 8016b18:	2345      	movs	r3, #69	@ 0x45
 8016b1a:	737b      	strb	r3, [r7, #13]
 8016b1c:	2322      	movs	r3, #34	@ 0x22
 8016b1e:	73bb      	strb	r3, [r7, #14]
 8016b20:	238e      	movs	r3, #142	@ 0x8e
 8016b22:	73fb      	strb	r3, [r7, #15]
 8016b24:	2343      	movs	r3, #67	@ 0x43
 8016b26:	743b      	strb	r3, [r7, #16]
 8016b28:	23fe      	movs	r3, #254	@ 0xfe
 8016b2a:	747b      	strb	r3, [r7, #17]
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	74bb      	strb	r3, [r7, #18]
 8016b30:	2300      	movs	r3, #0
 8016b32:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2PsHdle,
 8016b34:	4b0d      	ldr	r3, [pc, #52]	@ (8016b6c <SVCCTL_InitCustomSvc+0x224>)
 8016b36:	8818      	ldrh	r0, [r3, #0]
 8016b38:	4b13      	ldr	r3, [pc, #76]	@ (8016b88 <SVCCTL_InitCustomSvc+0x240>)
 8016b3a:	881b      	ldrh	r3, [r3, #0]
 8016b3c:	1d3a      	adds	r2, r7, #4
 8016b3e:	4913      	ldr	r1, [pc, #76]	@ (8016b8c <SVCCTL_InitCustomSvc+0x244>)
 8016b40:	9105      	str	r1, [sp, #20]
 8016b42:	2101      	movs	r1, #1
 8016b44:	9104      	str	r1, [sp, #16]
 8016b46:	2110      	movs	r1, #16
 8016b48:	9103      	str	r1, [sp, #12]
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	9102      	str	r1, [sp, #8]
 8016b4e:	2100      	movs	r1, #0
 8016b50:	9101      	str	r1, [sp, #4]
 8016b52:	2111      	movs	r1, #17
 8016b54:	9100      	str	r1, [sp, #0]
 8016b56:	2102      	movs	r1, #2
 8016b58:	f7fd febe 	bl	80148d8 <aci_gatt_add_char>
 8016b5c:	4603      	mov	r3, r0
 8016b5e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8016b60:	bf00      	nop
}
 8016b62:	3718      	adds	r7, #24
 8016b64:	46bd      	mov	sp, r7
 8016b66:	bd80      	pop	{r7, pc}
 8016b68:	080167a1 	.word	0x080167a1
 8016b6c:	20000d34 	.word	0x20000d34
 8016b70:	200000a4 	.word	0x200000a4
 8016b74:	20000d36 	.word	0x20000d36
 8016b78:	200000a6 	.word	0x200000a6
 8016b7c:	20000d38 	.word	0x20000d38
 8016b80:	200000a8 	.word	0x200000a8
 8016b84:	20000d3a 	.word	0x20000d3a
 8016b88:	200000aa 	.word	0x200000aa
 8016b8c:	20000d3c 	.word	0x20000d3c

08016b90 <LL_PWR_EnableBootC2>:
{
 8016b90:	b480      	push	{r7}
 8016b92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8016b94:	4b05      	ldr	r3, [pc, #20]	@ (8016bac <LL_PWR_EnableBootC2+0x1c>)
 8016b96:	68db      	ldr	r3, [r3, #12]
 8016b98:	4a04      	ldr	r2, [pc, #16]	@ (8016bac <LL_PWR_EnableBootC2+0x1c>)
 8016b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016b9e:	60d3      	str	r3, [r2, #12]
}
 8016ba0:	bf00      	nop
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba8:	4770      	bx	lr
 8016baa:	bf00      	nop
 8016bac:	58000400 	.word	0x58000400

08016bb0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8016bb0:	b480      	push	{r7}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8016bb8:	4b06      	ldr	r3, [pc, #24]	@ (8016bd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8016bba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8016bbe:	4905      	ldr	r1, [pc, #20]	@ (8016bd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	4313      	orrs	r3, r2
 8016bc4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8016bc8:	bf00      	nop
 8016bca:	370c      	adds	r7, #12
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd2:	4770      	bx	lr
 8016bd4:	58000800 	.word	0x58000800

08016bd8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8016be0:	4b05      	ldr	r3, [pc, #20]	@ (8016bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8016be2:	6a1a      	ldr	r2, [r3, #32]
 8016be4:	4904      	ldr	r1, [pc, #16]	@ (8016bf8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	4313      	orrs	r3, r2
 8016bea:	620b      	str	r3, [r1, #32]
}
 8016bec:	bf00      	nop
 8016bee:	370c      	adds	r7, #12
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bf6:	4770      	bx	lr
 8016bf8:	58000800 	.word	0x58000800

08016bfc <LL_AHB3_GRP1_EnableClock>:
{
 8016bfc:	b480      	push	{r7}
 8016bfe:	b085      	sub	sp, #20
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8016c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	4313      	orrs	r3, r2
 8016c12:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8016c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	4013      	ands	r3, r2
 8016c1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016c20:	68fb      	ldr	r3, [r7, #12]
}
 8016c22:	bf00      	nop
 8016c24:	3714      	adds	r7, #20
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr

08016c2e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8016c2e:	b480      	push	{r7}
 8016c30:	b085      	sub	sp, #20
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8016c36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016c3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	4313      	orrs	r3, r2
 8016c46:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8016c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8016c4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	4013      	ands	r3, r2
 8016c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016c58:	68fb      	ldr	r3, [r7, #12]
}
 8016c5a:	bf00      	nop
 8016c5c:	3714      	adds	r7, #20
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c64:	4770      	bx	lr

08016c66 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8016c66:	b480      	push	{r7}
 8016c68:	b083      	sub	sp, #12
 8016c6a:	af00      	add	r7, sp, #0
 8016c6c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	681b      	ldr	r3, [r3, #0]
 8016c72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	601a      	str	r2, [r3, #0]
}
 8016c7a:	bf00      	nop
 8016c7c:	370c      	adds	r7, #12
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr

08016c86 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8016c86:	b480      	push	{r7}
 8016c88:	b083      	sub	sp, #12
 8016c8a:	af00      	add	r7, sp, #0
 8016c8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	f043 0201 	orr.w	r2, r3, #1
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	601a      	str	r2, [r3, #0]
}
 8016c9a:	bf00      	nop
 8016c9c:	370c      	adds	r7, #12
 8016c9e:	46bd      	mov	sp, r7
 8016ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca4:	4770      	bx	lr

08016ca6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016ca6:	b480      	push	{r7}
 8016ca8:	b083      	sub	sp, #12
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	6078      	str	r0, [r7, #4]
 8016cae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	685a      	ldr	r2, [r3, #4]
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	041b      	lsls	r3, r3, #16
 8016cb8:	43db      	mvns	r3, r3
 8016cba:	401a      	ands	r2, r3
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	605a      	str	r2, [r3, #4]
}
 8016cc0:	bf00      	nop
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b083      	sub	sp, #12
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	685a      	ldr	r2, [r3, #4]
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	041b      	lsls	r3, r3, #16
 8016cde:	431a      	orrs	r2, r3
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	605a      	str	r2, [r3, #4]
}
 8016ce4:	bf00      	nop
 8016ce6:	370c      	adds	r7, #12
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cee:	4770      	bx	lr

08016cf0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b083      	sub	sp, #12
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685a      	ldr	r2, [r3, #4]
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	43db      	mvns	r3, r3
 8016d02:	401a      	ands	r2, r3
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	605a      	str	r2, [r3, #4]
}
 8016d08:	bf00      	nop
 8016d0a:	370c      	adds	r7, #12
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr

08016d14 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	6078      	str	r0, [r7, #4]
 8016d1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	683a      	ldr	r2, [r7, #0]
 8016d22:	609a      	str	r2, [r3, #8]
}
 8016d24:	bf00      	nop
 8016d26:	370c      	adds	r7, #12
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2e:	4770      	bx	lr

08016d30 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8016d30:	b480      	push	{r7}
 8016d32:	b083      	sub	sp, #12
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
 8016d38:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8016d3a:	683b      	ldr	r3, [r7, #0]
 8016d3c:	041a      	lsls	r2, r3, #16
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	609a      	str	r2, [r3, #8]
}
 8016d42:	bf00      	nop
 8016d44:	370c      	adds	r7, #12
 8016d46:	46bd      	mov	sp, r7
 8016d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4c:	4770      	bx	lr

08016d4e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8016d4e:	b480      	push	{r7}
 8016d50:	b083      	sub	sp, #12
 8016d52:	af00      	add	r7, sp, #0
 8016d54:	6078      	str	r0, [r7, #4]
 8016d56:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	68da      	ldr	r2, [r3, #12]
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	4013      	ands	r3, r2
 8016d60:	683a      	ldr	r2, [r7, #0]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d101      	bne.n	8016d6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8016d66:	2301      	movs	r3, #1
 8016d68:	e000      	b.n	8016d6c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8016d6a:	2300      	movs	r3, #0
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	370c      	adds	r7, #12
 8016d70:	46bd      	mov	sp, r7
 8016d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d76:	4770      	bx	lr

08016d78 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8016d78:	b480      	push	{r7}
 8016d7a:	b083      	sub	sp, #12
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
 8016d80:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	69da      	ldr	r2, [r3, #28]
 8016d86:	683b      	ldr	r3, [r7, #0]
 8016d88:	4013      	ands	r3, r2
 8016d8a:	683a      	ldr	r2, [r7, #0]
 8016d8c:	429a      	cmp	r2, r3
 8016d8e:	d101      	bne.n	8016d94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8016d90:	2301      	movs	r3, #1
 8016d92:	e000      	b.n	8016d96 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8016d94:	2300      	movs	r3, #0
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	370c      	adds	r7, #12
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr
	...

08016da4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8016da8:	2102      	movs	r1, #2
 8016daa:	4818      	ldr	r0, [pc, #96]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016dac:	f7ff ffe4 	bl	8016d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d008      	beq.n	8016dc8 <HW_IPCC_Rx_Handler+0x24>
 8016db6:	4b15      	ldr	r3, [pc, #84]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	f003 0302 	and.w	r3, r3, #2
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d102      	bne.n	8016dc8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8016dc2:	f000 f925 	bl	8017010 <HW_IPCC_SYS_EvtHandler>
 8016dc6:	e01e      	b.n	8016e06 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8016dc8:	2101      	movs	r1, #1
 8016dca:	4810      	ldr	r0, [pc, #64]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016dcc:	f7ff ffd4 	bl	8016d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	d008      	beq.n	8016de8 <HW_IPCC_Rx_Handler+0x44>
 8016dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	f003 0301 	and.w	r3, r3, #1
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d102      	bne.n	8016de8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8016de2:	f000 f899 	bl	8016f18 <HW_IPCC_BLE_EvtHandler>
 8016de6:	e00e      	b.n	8016e06 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8016de8:	2108      	movs	r1, #8
 8016dea:	4808      	ldr	r0, [pc, #32]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016dec:	f7ff ffc4 	bl	8016d78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8016df0:	4603      	mov	r3, r0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d008      	beq.n	8016e08 <HW_IPCC_Rx_Handler+0x64>
 8016df6:	4b05      	ldr	r3, [pc, #20]	@ (8016e0c <HW_IPCC_Rx_Handler+0x68>)
 8016df8:	685b      	ldr	r3, [r3, #4]
 8016dfa:	f003 0308 	and.w	r3, r3, #8
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d102      	bne.n	8016e08 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8016e02:	f000 f97d 	bl	8017100 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8016e06:	bf00      	nop
 8016e08:	bf00      	nop
}
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	58000c00 	.word	0x58000c00

08016e10 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8016e14:	2102      	movs	r1, #2
 8016e16:	4818      	ldr	r0, [pc, #96]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e18:	f7ff ff99 	bl	8016d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d108      	bne.n	8016e34 <HW_IPCC_Tx_Handler+0x24>
 8016e22:	4b15      	ldr	r3, [pc, #84]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e24:	685b      	ldr	r3, [r3, #4]
 8016e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d102      	bne.n	8016e34 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8016e2e:	f000 f8d3 	bl	8016fd8 <HW_IPCC_SYS_CmdEvtHandler>
 8016e32:	e01e      	b.n	8016e72 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8016e34:	2108      	movs	r1, #8
 8016e36:	4810      	ldr	r0, [pc, #64]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e38:	f7ff ff89 	bl	8016d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d108      	bne.n	8016e54 <HW_IPCC_Tx_Handler+0x44>
 8016e42:	4b0d      	ldr	r3, [pc, #52]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e44:	685b      	ldr	r3, [r3, #4]
 8016e46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d102      	bne.n	8016e54 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8016e4e:	f000 f919 	bl	8017084 <HW_IPCC_MM_FreeBufHandler>
 8016e52:	e00e      	b.n	8016e72 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8016e54:	2120      	movs	r1, #32
 8016e56:	4808      	ldr	r0, [pc, #32]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e58:	f7ff ff79 	bl	8016d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d108      	bne.n	8016e74 <HW_IPCC_Tx_Handler+0x64>
 8016e62:	4b05      	ldr	r3, [pc, #20]	@ (8016e78 <HW_IPCC_Tx_Handler+0x68>)
 8016e64:	685b      	ldr	r3, [r3, #4]
 8016e66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d102      	bne.n	8016e74 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8016e6e:	f000 f85f 	bl	8016f30 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8016e72:	bf00      	nop
 8016e74:	bf00      	nop
}
 8016e76:	bd80      	pop	{r7, pc}
 8016e78:	58000c00 	.word	0x58000c00

08016e7c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8016e80:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8016e84:	f7ff fed3 	bl	8016c2e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8016e88:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8016e8c:	f7ff fea4 	bl	8016bd8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8016e90:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8016e94:	f7ff fe8c 	bl	8016bb0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8016e98:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8016e9a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8016e9c:	f7ff fe78 	bl	8016b90 <LL_PWR_EnableBootC2>

  return;
 8016ea0:	bf00      	nop
}
 8016ea2:	bd80      	pop	{r7, pc}

08016ea4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8016ea8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8016eac:	f7ff fea6 	bl	8016bfc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8016eb0:	4806      	ldr	r0, [pc, #24]	@ (8016ecc <HW_IPCC_Init+0x28>)
 8016eb2:	f7ff fee8 	bl	8016c86 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8016eb6:	4805      	ldr	r0, [pc, #20]	@ (8016ecc <HW_IPCC_Init+0x28>)
 8016eb8:	f7ff fed5 	bl	8016c66 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8016ebc:	202c      	movs	r0, #44	@ 0x2c
 8016ebe:	f7f0 ff3c 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8016ec2:	202d      	movs	r0, #45	@ 0x2d
 8016ec4:	f7f0 ff39 	bl	8007d3a <HAL_NVIC_EnableIRQ>

  return;
 8016ec8:	bf00      	nop
}
 8016eca:	bd80      	pop	{r7, pc}
 8016ecc:	58000c00 	.word	0x58000c00

08016ed0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8016ed0:	b580      	push	{r7, lr}
 8016ed2:	b084      	sub	sp, #16
 8016ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8016eda:	607b      	str	r3, [r7, #4]
  return(result);
 8016edc:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016ede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ee0:	b672      	cpsid	i
}
 8016ee2:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8016ee4:	2101      	movs	r1, #1
 8016ee6:	4806      	ldr	r0, [pc, #24]	@ (8016f00 <HW_IPCC_BLE_Init+0x30>)
 8016ee8:	f7ff ff02 	bl	8016cf0 <LL_C1_IPCC_EnableReceiveChannel>
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	f383 8810 	msr	PRIMASK, r3
}
 8016ef6:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8016ef8:	bf00      	nop
}
 8016efa:	3710      	adds	r7, #16
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd80      	pop	{r7, pc}
 8016f00:	58000c00 	.word	0x58000c00

08016f04 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8016f08:	2101      	movs	r1, #1
 8016f0a:	4802      	ldr	r0, [pc, #8]	@ (8016f14 <HW_IPCC_BLE_SendCmd+0x10>)
 8016f0c:	f7ff ff10 	bl	8016d30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8016f10:	bf00      	nop
}
 8016f12:	bd80      	pop	{r7, pc}
 8016f14:	58000c00 	.word	0x58000c00

08016f18 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8016f1c:	f7fe fe56 	bl	8015bcc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8016f20:	2101      	movs	r1, #1
 8016f22:	4802      	ldr	r0, [pc, #8]	@ (8016f2c <HW_IPCC_BLE_EvtHandler+0x14>)
 8016f24:	f7ff fef6 	bl	8016d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8016f28:	bf00      	nop
}
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	58000c00 	.word	0x58000c00

08016f30 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b084      	sub	sp, #16
 8016f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f36:	f3ef 8310 	mrs	r3, PRIMASK
 8016f3a:	607b      	str	r3, [r7, #4]
  return(result);
 8016f3c:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016f3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f40:	b672      	cpsid	i
}
 8016f42:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8016f44:	2120      	movs	r1, #32
 8016f46:	4807      	ldr	r0, [pc, #28]	@ (8016f64 <HW_IPCC_BLE_AclDataEvtHandler+0x34>)
 8016f48:	f7ff fec0 	bl	8016ccc <LL_C1_IPCC_DisableTransmitChannel>
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	f383 8810 	msr	PRIMASK, r3
}
 8016f56:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_BLE_AclDataAckNot();
 8016f58:	f7fe fe68 	bl	8015c2c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8016f5c:	bf00      	nop
}
 8016f5e:	3710      	adds	r7, #16
 8016f60:	46bd      	mov	sp, r7
 8016f62:	bd80      	pop	{r7, pc}
 8016f64:	58000c00 	.word	0x58000c00

08016f68 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b084      	sub	sp, #16
 8016f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8016f72:	607b      	str	r3, [r7, #4]
  return(result);
 8016f74:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f78:	b672      	cpsid	i
}
 8016f7a:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8016f7c:	2102      	movs	r1, #2
 8016f7e:	4806      	ldr	r0, [pc, #24]	@ (8016f98 <HW_IPCC_SYS_Init+0x30>)
 8016f80:	f7ff feb6 	bl	8016cf0 <LL_C1_IPCC_EnableReceiveChannel>
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	f383 8810 	msr	PRIMASK, r3
}
 8016f8e:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8016f90:	bf00      	nop
}
 8016f92:	3710      	adds	r7, #16
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd80      	pop	{r7, pc}
 8016f98:	58000c00 	.word	0x58000c00

08016f9c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b084      	sub	sp, #16
 8016fa0:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8016fa2:	2102      	movs	r1, #2
 8016fa4:	480b      	ldr	r0, [pc, #44]	@ (8016fd4 <HW_IPCC_SYS_SendCmd+0x38>)
 8016fa6:	f7ff fec3 	bl	8016d30 <LL_C1_IPCC_SetFlag_CHx>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016faa:	f3ef 8310 	mrs	r3, PRIMASK
 8016fae:	607b      	str	r3, [r7, #4]
  return(result);
 8016fb0:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016fb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fb4:	b672      	cpsid	i
}
 8016fb6:	bf00      	nop
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8016fb8:	2102      	movs	r1, #2
 8016fba:	4806      	ldr	r0, [pc, #24]	@ (8016fd4 <HW_IPCC_SYS_SendCmd+0x38>)
 8016fbc:	f7ff fe73 	bl	8016ca6 <LL_C1_IPCC_EnableTransmitChannel>
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fc4:	68bb      	ldr	r3, [r7, #8]
 8016fc6:	f383 8810 	msr	PRIMASK, r3
}
 8016fca:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 8016fcc:	bf00      	nop
}
 8016fce:	3710      	adds	r7, #16
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	58000c00 	.word	0x58000c00

08016fd8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fde:	f3ef 8310 	mrs	r3, PRIMASK
 8016fe2:	607b      	str	r3, [r7, #4]
  return(result);
 8016fe4:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8016fe6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fe8:	b672      	cpsid	i
}
 8016fea:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8016fec:	2102      	movs	r1, #2
 8016fee:	4807      	ldr	r0, [pc, #28]	@ (801700c <HW_IPCC_SYS_CmdEvtHandler+0x34>)
 8016ff0:	f7ff fe6c 	bl	8016ccc <LL_C1_IPCC_DisableTransmitChannel>
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	f383 8810 	msr	PRIMASK, r3
}
 8016ffe:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  HW_IPCC_SYS_CmdEvtNot();
 8017000:	f7fe fe64 	bl	8015ccc <HW_IPCC_SYS_CmdEvtNot>

  return;
 8017004:	bf00      	nop
}
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	58000c00 	.word	0x58000c00

08017010 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8017010:	b580      	push	{r7, lr}
 8017012:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8017014:	f7fe fe70 	bl	8015cf8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8017018:	2102      	movs	r1, #2
 801701a:	4802      	ldr	r0, [pc, #8]	@ (8017024 <HW_IPCC_SYS_EvtHandler+0x14>)
 801701c:	f7ff fe7a 	bl	8016d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8017020:	bf00      	nop
}
 8017022:	bd80      	pop	{r7, pc}
 8017024:	58000c00 	.word	0x58000c00

08017028 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b086      	sub	sp, #24
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8017030:	2108      	movs	r1, #8
 8017032:	4812      	ldr	r0, [pc, #72]	@ (801707c <HW_IPCC_MM_SendFreeBuf+0x54>)
 8017034:	f7ff fe8b 	bl	8016d4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8017038:	4603      	mov	r3, r0
 801703a:	2b00      	cmp	r3, #0
 801703c:	d013      	beq.n	8017066 <HW_IPCC_MM_SendFreeBuf+0x3e>
  {
    FreeBufCb = cb;
 801703e:	4a10      	ldr	r2, [pc, #64]	@ (8017080 <HW_IPCC_MM_SendFreeBuf+0x58>)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017044:	f3ef 8310 	mrs	r3, PRIMASK
 8017048:	60fb      	str	r3, [r7, #12]
  return(result);
 801704a:	68fb      	ldr	r3, [r7, #12]
    UTILS_ENTER_CRITICAL_SECTION();
 801704c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801704e:	b672      	cpsid	i
}
 8017050:	bf00      	nop
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8017052:	2108      	movs	r1, #8
 8017054:	4809      	ldr	r0, [pc, #36]	@ (801707c <HW_IPCC_MM_SendFreeBuf+0x54>)
 8017056:	f7ff fe26 	bl	8016ca6 <LL_C1_IPCC_EnableTransmitChannel>
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	f383 8810 	msr	PRIMASK, r3
}
 8017064:	e005      	b.n	8017072 <HW_IPCC_MM_SendFreeBuf+0x4a>
    UTILS_EXIT_CRITICAL_SECTION();
  }
  else
  {
    cb();
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	4798      	blx	r3

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801706a:	2108      	movs	r1, #8
 801706c:	4803      	ldr	r0, [pc, #12]	@ (801707c <HW_IPCC_MM_SendFreeBuf+0x54>)
 801706e:	f7ff fe5f 	bl	8016d30 <LL_C1_IPCC_SetFlag_CHx>
  }

  return;
 8017072:	bf00      	nop
}
 8017074:	3718      	adds	r7, #24
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	58000c00 	.word	0x58000c00
 8017080:	20000d40 	.word	0x20000d40

08017084 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b084      	sub	sp, #16
 8017088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801708a:	f3ef 8310 	mrs	r3, PRIMASK
 801708e:	607b      	str	r3, [r7, #4]
  return(result);
 8017090:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 8017092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8017094:	b672      	cpsid	i
}
 8017096:	bf00      	nop
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8017098:	2108      	movs	r1, #8
 801709a:	480a      	ldr	r0, [pc, #40]	@ (80170c4 <HW_IPCC_MM_FreeBufHandler+0x40>)
 801709c:	f7ff fe16 	bl	8016ccc <LL_C1_IPCC_DisableTransmitChannel>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	f383 8810 	msr	PRIMASK, r3
}
 80170aa:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  FreeBufCb();
 80170ac:	4b06      	ldr	r3, [pc, #24]	@ (80170c8 <HW_IPCC_MM_FreeBufHandler+0x44>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80170b2:	2108      	movs	r1, #8
 80170b4:	4803      	ldr	r0, [pc, #12]	@ (80170c4 <HW_IPCC_MM_FreeBufHandler+0x40>)
 80170b6:	f7ff fe3b 	bl	8016d30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80170ba:	bf00      	nop
}
 80170bc:	3710      	adds	r7, #16
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	58000c00 	.word	0x58000c00
 80170c8:	20000d40 	.word	0x20000d40

080170cc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b084      	sub	sp, #16
 80170d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170d2:	f3ef 8310 	mrs	r3, PRIMASK
 80170d6:	607b      	str	r3, [r7, #4]
  return(result);
 80170d8:	687b      	ldr	r3, [r7, #4]
  UTILS_ENTER_CRITICAL_SECTION();
 80170da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80170dc:	b672      	cpsid	i
}
 80170de:	bf00      	nop
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80170e0:	2108      	movs	r1, #8
 80170e2:	4806      	ldr	r0, [pc, #24]	@ (80170fc <HW_IPCC_TRACES_Init+0x30>)
 80170e4:	f7ff fe04 	bl	8016cf0 <LL_C1_IPCC_EnableReceiveChannel>
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170ec:	68bb      	ldr	r3, [r7, #8]
 80170ee:	f383 8810 	msr	PRIMASK, r3
}
 80170f2:	bf00      	nop
  UTILS_EXIT_CRITICAL_SECTION();

  return;
 80170f4:	bf00      	nop
}
 80170f6:	3710      	adds	r7, #16
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}
 80170fc:	58000c00 	.word	0x58000c00

08017100 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8017100:	b580      	push	{r7, lr}
 8017102:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8017104:	f7fe fea0 	bl	8015e48 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8017108:	2108      	movs	r1, #8
 801710a:	4802      	ldr	r0, [pc, #8]	@ (8017114 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801710c:	f7ff fe02 	bl	8016d14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8017110:	bf00      	nop
}
 8017112:	bd80      	pop	{r7, pc}
 8017114:	58000c00 	.word	0x58000c00

08017118 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	ed87 0a01 	vstr	s0, [r7, #4]
 8017122:	ed97 0a01 	vldr	s0, [r7, #4]
 8017126:	f002 f867 	bl	80191f8 <cosf>
 801712a:	eef0 7a40 	vmov.f32	s15, s0
 801712e:	eeb0 0a67 	vmov.f32	s0, s15
 8017132:	3708      	adds	r7, #8
 8017134:	46bd      	mov	sp, r7
 8017136:	bd80      	pop	{r7, pc}

08017138 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8017138:	b580      	push	{r7, lr}
 801713a:	b082      	sub	sp, #8
 801713c:	af00      	add	r7, sp, #0
 801713e:	ed87 0a01 	vstr	s0, [r7, #4]
 8017142:	ed97 0a01 	vldr	s0, [r7, #4]
 8017146:	f002 f89b 	bl	8019280 <sinf>
 801714a:	eef0 7a40 	vmov.f32	s15, s0
 801714e:	eeb0 0a67 	vmov.f32	s0, s15
 8017152:	3708      	adds	r7, #8
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <_ZN6Screen11renderMeterEv>:
}

void Screen::renderMeter()

// void Screen::renderMeter(GFXcanvas16 &canvas)
{
 8017158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801715a:	b089      	sub	sp, #36	@ 0x24
 801715c:	af04      	add	r7, sp, #16
 801715e:	6078      	str	r0, [r7, #4]

    // background
    // canvas.fillRect(0, 0, canvas.width(), canvas.height(), BACKGROUND_COLOR);

    canvas.fillScreen(BACKGROUND_COLOR);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	336c      	adds	r3, #108	@ 0x6c
 8017164:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8017168:	4618      	mov	r0, r3
 801716a:	f7eb fdbb 	bl	8002ce4 <_ZN11GFXcanvas1610fillScreenEt>

    // border
    for (int i = 0; i < 3; i++)
 801716e:	2300      	movs	r3, #0
 8017170:	60fb      	str	r3, [r7, #12]
 8017172:	e035      	b.n	80171e0 <_ZN6Screen11renderMeterEv+0x88>
    {
        canvas.drawRect(overallBorderX - i, overallBorderY - i, overallBorderWidth + 2 * i, overallBorderHeight + 2 * i, TEXT_COLOR);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017180:	b29a      	uxth	r2, r3
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	b29b      	uxth	r3, r3
 8017186:	1ad3      	subs	r3, r2, r3
 8017188:	b29b      	uxth	r3, r3
 801718a:	b219      	sxth	r1, r3
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8017192:	b29a      	uxth	r2, r3
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	b29b      	uxth	r3, r3
 8017198:	1ad3      	subs	r3, r2, r3
 801719a:	b29b      	uxth	r3, r3
 801719c:	b21c      	sxth	r4, r3
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80171a4:	b29a      	uxth	r2, r3
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	4413      	add	r3, r2
 80171b0:	b29b      	uxth	r3, r3
 80171b2:	b21d      	sxth	r5, r3
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80171ba:	b29a      	uxth	r2, r3
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	b29b      	uxth	r3, r3
 80171c0:	005b      	lsls	r3, r3, #1
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	4413      	add	r3, r2
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	b21b      	sxth	r3, r3
 80171ca:	f24a 3229 	movw	r2, #41769	@ 0xa329
 80171ce:	9201      	str	r2, [sp, #4]
 80171d0:	9300      	str	r3, [sp, #0]
 80171d2:	462b      	mov	r3, r5
 80171d4:	4622      	mov	r2, r4
 80171d6:	f7ea fd91 	bl	8001cfc <_ZN12Adafruit_GFX8drawRectEsssst>
    for (int i = 0; i < 3; i++)
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	3301      	adds	r3, #1
 80171de:	60fb      	str	r3, [r7, #12]
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2b02      	cmp	r3, #2
 80171e4:	ddc6      	ble.n	8017174 <_ZN6Screen11renderMeterEv+0x1c>
    }
    // yield();
    // status border
    canvas.drawRect(statusBorderX, statusBorderY, statusWidth, statusHeight, TEXT_COLOR);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80171f2:	b219      	sxth	r1, r3
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80171fa:	b21a      	sxth	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8017202:	b21c      	sxth	r4, r3
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801720a:	b21b      	sxth	r3, r3
 801720c:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8017210:	9501      	str	r5, [sp, #4]
 8017212:	9300      	str	r3, [sp, #0]
 8017214:	4623      	mov	r3, r4
 8017216:	f7ea fd71 	bl	8001cfc <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.drawRect(meterX, meterY, meterWidth, meterHeight, TEXT_COLOR);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8017226:	b219      	sxth	r1, r3
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 801722e:	b21a      	sxth	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8017236:	b21c      	sxth	r4, r3
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801723e:	b21b      	sxth	r3, r3
 8017240:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8017244:	9501      	str	r5, [sp, #4]
 8017246:	9300      	str	r3, [sp, #0]
 8017248:	4623      	mov	r3, r4
 801724a:	f7ea fd57 	bl	8001cfc <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(labelX, labelY, labelWidth, labelHeight, TEXT_COLOR);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 801725a:	b219      	sxth	r1, r3
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8017262:	b21a      	sxth	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801726a:	b21c      	sxth	r4, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8017272:	b21b      	sxth	r3, r3
 8017274:	f24a 3529 	movw	r5, #41769	@ 0xa329
 8017278:	9501      	str	r5, [sp, #4]
 801727a:	9300      	str	r3, [sp, #0]
 801727c:	4623      	mov	r3, r4
 801727e:	f7ea fd3d 	bl	8001cfc <_ZN12Adafruit_GFX8drawRectEsssst>
    canvas.drawRect(buttonBorderX, buttonBorderY, buttonBorderWidth, buttonBorderHeight, TEXT_COLOR);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
 801728e:	b219      	sxth	r1, r3
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017296:	b21a      	sxth	r2, r3
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 801729e:	b21c      	sxth	r4, r3
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80172a6:	b21b      	sxth	r3, r3
 80172a8:	f24a 3529 	movw	r5, #41769	@ 0xa329
 80172ac:	9501      	str	r5, [sp, #4]
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	4623      	mov	r3, r4
 80172b2:	f7ea fd23 	bl	8001cfc <_ZN12Adafruit_GFX8drawRectEsssst>

    canvas.fillRoundRect(buttonX1, buttonY1, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80172c2:	b219      	sxth	r1, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80172ca:	b21c      	sxth	r4, r3
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80172d2:	b21d      	sxth	r5, r3
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80172da:	b21b      	sxth	r3, r3
 80172dc:	687a      	ldr	r2, [r7, #4]
 80172de:	f8d2 21c0 	ldr.w	r2, [r2, #448]	@ 0x1c0
 80172e2:	b212      	sxth	r2, r2
 80172e4:	f246 7663 	movw	r6, #26467	@ 0x6763
 80172e8:	9602      	str	r6, [sp, #8]
 80172ea:	9201      	str	r2, [sp, #4]
 80172ec:	9300      	str	r3, [sp, #0]
 80172ee:	462b      	mov	r3, r5
 80172f0:	4622      	mov	r2, r4
 80172f2:	f7ea fd66 	bl	8001dc2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>
    canvas.fillRoundRect(buttonX2, buttonY2, buttonWidth, buttonHeight, buttonRadius, ACCENT_COLOR);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8017302:	b219      	sxth	r1, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 801730a:	b21c      	sxth	r4, r3
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8017312:	b21d      	sxth	r5, r3
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801731a:	b21b      	sxth	r3, r3
 801731c:	687a      	ldr	r2, [r7, #4]
 801731e:	f8d2 21c0 	ldr.w	r2, [r2, #448]	@ 0x1c0
 8017322:	b212      	sxth	r2, r2
 8017324:	f246 7663 	movw	r6, #26467	@ 0x6763
 8017328:	9602      	str	r6, [sp, #8]
 801732a:	9201      	str	r2, [sp, #4]
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	462b      	mov	r3, r5
 8017330:	4622      	mov	r2, r4
 8017332:	f7ea fd46 	bl	8001dc2 <_ZN12Adafruit_GFX13fillRoundRectEssssst>

    canvas.drawPixel(10, 10, ACCENT_COLOR);
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801733c:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017340:	220a      	movs	r2, #10
 8017342:	210a      	movs	r1, #10
 8017344:	f7eb fc52 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(11, 10, ACCENT_COLOR);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801734e:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017352:	220a      	movs	r2, #10
 8017354:	210b      	movs	r1, #11
 8017356:	f7eb fc49 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(12, 10, ACCENT_COLOR);
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017360:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017364:	220a      	movs	r2, #10
 8017366:	210c      	movs	r1, #12
 8017368:	f7eb fc40 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(13, 10, ACCENT_COLOR);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017372:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017376:	220a      	movs	r2, #10
 8017378:	210d      	movs	r1, #13
 801737a:	f7eb fc37 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 11, ACCENT_COLOR);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017384:	f246 7363 	movw	r3, #26467	@ 0x6763
 8017388:	220b      	movs	r2, #11
 801738a:	210a      	movs	r1, #10
 801738c:	f7eb fc2e 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 12, ACCENT_COLOR);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017396:	f246 7363 	movw	r3, #26467	@ 0x6763
 801739a:	220c      	movs	r2, #12
 801739c:	210a      	movs	r1, #10
 801739e:	f7eb fc25 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>
    canvas.drawPixel(10, 13, ACCENT_COLOR);
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80173a8:	f246 7363 	movw	r3, #26467	@ 0x6763
 80173ac:	220d      	movs	r2, #13
 80173ae:	210a      	movs	r1, #10
 80173b0:	f7eb fc1c 	bl	8002bec <_ZN11GFXcanvas169drawPixelEsst>

    // calculate the size of a few things....
    canvas.getTextBounds("40%", 0, 0, &batteryTextX, &batteryTextY, &batteryW, &batteryH);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	33cc      	adds	r3, #204	@ 0xcc
 80173be:	687a      	ldr	r2, [r7, #4]
 80173c0:	32ce      	adds	r2, #206	@ 0xce
 80173c2:	6879      	ldr	r1, [r7, #4]
 80173c4:	31d0      	adds	r1, #208	@ 0xd0
 80173c6:	6878      	ldr	r0, [r7, #4]
 80173c8:	30d2      	adds	r0, #210	@ 0xd2
 80173ca:	9003      	str	r0, [sp, #12]
 80173cc:	9102      	str	r1, [sp, #8]
 80173ce:	9201      	str	r2, [sp, #4]
 80173d0:	9300      	str	r3, [sp, #0]
 80173d2:	2300      	movs	r3, #0
 80173d4:	2200      	movs	r2, #0
 80173d6:	49bd      	ldr	r1, [pc, #756]	@ (80176cc <_ZN6Screen11renderMeterEv+0x574>)
 80173d8:	4620      	mov	r0, r4
 80173da:	f7eb fb20 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    // origin of battery text based on its size...
    batteryX = overallBorderWidth - batteryW - 2 * batterySpacer;
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80173e4:	687a      	ldr	r2, [r7, #4]
 80173e6:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 80173ea:	1a9a      	subs	r2, r3, r2
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80173f2:	005b      	lsls	r3, r3, #1
 80173f4:	1ad2      	subs	r2, r2, r3
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    batteryY = statusBorderY + statusHeight / 2 + batteryH / 2;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017408:	0fd9      	lsrs	r1, r3, #31
 801740a:	440b      	add	r3, r1
 801740c:	105b      	asrs	r3, r3, #1
 801740e:	4413      	add	r3, r2
 8017410:	687a      	ldr	r2, [r7, #4]
 8017412:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 8017416:	0852      	lsrs	r2, r2, #1
 8017418:	b292      	uxth	r2, r2
 801741a:	441a      	add	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    canvas.getTextBounds("HIGH", 0, 0, &switchTextX, &switchTextY, &switchW, &switchH);
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	33dc      	adds	r3, #220	@ 0xdc
 801742c:	687a      	ldr	r2, [r7, #4]
 801742e:	32de      	adds	r2, #222	@ 0xde
 8017430:	6879      	ldr	r1, [r7, #4]
 8017432:	31e0      	adds	r1, #224	@ 0xe0
 8017434:	6878      	ldr	r0, [r7, #4]
 8017436:	30e2      	adds	r0, #226	@ 0xe2
 8017438:	9003      	str	r0, [sp, #12]
 801743a:	9102      	str	r1, [sp, #8]
 801743c:	9201      	str	r2, [sp, #4]
 801743e:	9300      	str	r3, [sp, #0]
 8017440:	2300      	movs	r3, #0
 8017442:	2200      	movs	r2, #0
 8017444:	49a2      	ldr	r1, [pc, #648]	@ (80176d0 <_ZN6Screen11renderMeterEv+0x578>)
 8017446:	4620      	mov	r0, r4
 8017448:	f7eb fae9 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    switchX = overallBorderWidth - batteryX - 2 * batterySpacer;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8017458:	1ad2      	subs	r2, r2, r3
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8017460:	005b      	lsls	r3, r3, #1
 8017462:	1ad2      	subs	r2, r2, r3
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    switchY = statusBorderY + statusHeight / 2 + batteryH / 2;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017476:	0fd9      	lsrs	r1, r3, #31
 8017478:	440b      	add	r3, r1
 801747a:	105b      	asrs	r3, r3, #1
 801747c:	4413      	add	r3, r2
 801747e:	687a      	ldr	r2, [r7, #4]
 8017480:	f8b2 20d2 	ldrh.w	r2, [r2, #210]	@ 0xd2
 8017484:	0852      	lsrs	r2, r2, #1
 8017486:	b292      	uxth	r2, r2
 8017488:	441a      	add	r2, r3
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    // // Serial.println(batteryX);
    // // Serial.println(batteryY);
    canvas.setTextColor(TEXT_COLOR);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	336c      	adds	r3, #108	@ 0x6c
 8017494:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017498:	4618      	mov	r0, r3
 801749a:	f7e9 ffe6 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
    canvas.setCursor(batteryX, batteryY);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80174aa:	b219      	sxth	r1, r3
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80174b2:	b21b      	sxth	r3, r3
 80174b4:	461a      	mov	r2, r3
 80174b6:	f7e9 ffc4 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("40%");
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	336c      	adds	r3, #108	@ 0x6c
 80174be:	4983      	ldr	r1, [pc, #524]	@ (80176cc <_ZN6Screen11renderMeterEv+0x574>)
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7eb ff3e 	bl	8003342 <_ZN5Print5printEPKc>

    // calculate size of charging:
    canvas.getTextBounds("+ ", 0, 0, &chargingTextX, &chargingTextY, &chargingW, &chargingH);
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	33f0      	adds	r3, #240	@ 0xf0
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	32f2      	adds	r2, #242	@ 0xf2
 80174d4:	6879      	ldr	r1, [r7, #4]
 80174d6:	31f4      	adds	r1, #244	@ 0xf4
 80174d8:	6878      	ldr	r0, [r7, #4]
 80174da:	30f6      	adds	r0, #246	@ 0xf6
 80174dc:	9003      	str	r0, [sp, #12]
 80174de:	9102      	str	r1, [sp, #8]
 80174e0:	9201      	str	r2, [sp, #4]
 80174e2:	9300      	str	r3, [sp, #0]
 80174e4:	2300      	movs	r3, #0
 80174e6:	2200      	movs	r2, #0
 80174e8:	497a      	ldr	r1, [pc, #488]	@ (80176d4 <_ZN6Screen11renderMeterEv+0x57c>)
 80174ea:	4620      	mov	r0, r4
 80174ec:	f7eb fa97 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    chargingX = overallBorderWidth - batteryW - chargingW - 2 * batterySpacer;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80174f6:	687a      	ldr	r2, [r7, #4]
 80174f8:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 80174fc:	1a9b      	subs	r3, r3, r2
 80174fe:	687a      	ldr	r2, [r7, #4]
 8017500:	f8b2 20f4 	ldrh.w	r2, [r2, #244]	@ 0xf4
 8017504:	1a9a      	subs	r2, r3, r2
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 801750c:	005b      	lsls	r3, r3, #1
 801750e:	1ad2      	subs	r2, r2, r3
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
    chargingY = statusBorderY + statusHeight / 2 + chargingH / 2;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8017522:	0fd9      	lsrs	r1, r3, #31
 8017524:	440b      	add	r3, r1
 8017526:	105b      	asrs	r3, r3, #1
 8017528:	4413      	add	r3, r2
 801752a:	687a      	ldr	r2, [r7, #4]
 801752c:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 8017530:	0852      	lsrs	r2, r2, #1
 8017532:	b292      	uxth	r2, r2
 8017534:	441a      	add	r2, r3
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    canvas.setTextColor(TEXT_COLOR);
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	336c      	adds	r3, #108	@ 0x6c
 8017540:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017544:	4618      	mov	r0, r3
 8017546:	f7e9 ff90 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
    // // Serial.println(chargingX);
    // // Serial.println(chargingY);
    canvas.setCursor(chargingX, chargingY);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8017556:	b219      	sxth	r1, r3
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 801755e:	b21b      	sxth	r3, r3
 8017560:	461a      	mov	r2, r3
 8017562:	f7e9 ff6e 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("+");
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	336c      	adds	r3, #108	@ 0x6c
 801756a:	495b      	ldr	r1, [pc, #364]	@ (80176d8 <_ZN6Screen11renderMeterEv+0x580>)
 801756c:	4618      	mov	r0, r3
 801756e:	f7eb fee8 	bl	8003342 <_ZN5Print5printEPKc>

    // calculate size of settings:
    canvas.getTextBounds("Settings", 0, 0, &label1X, &label1Y, &label1W, &label1H);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	f502 72b3 	add.w	r2, r2, #358	@ 0x166
 8017584:	6879      	ldr	r1, [r7, #4]
 8017586:	f501 71b4 	add.w	r1, r1, #360	@ 0x168
 801758a:	6878      	ldr	r0, [r7, #4]
 801758c:	f500 70b5 	add.w	r0, r0, #362	@ 0x16a
 8017590:	9003      	str	r0, [sp, #12]
 8017592:	9102      	str	r1, [sp, #8]
 8017594:	9201      	str	r2, [sp, #4]
 8017596:	9300      	str	r3, [sp, #0]
 8017598:	2300      	movs	r3, #0
 801759a:	2200      	movs	r2, #0
 801759c:	494f      	ldr	r1, [pc, #316]	@ (80176dc <_ZN6Screen11renderMeterEv+0x584>)
 801759e:	4620      	mov	r0, r4
 80175a0:	f7eb fa3d 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label1X = buttonX1 + buttonWidth / 2 - label1W / 2;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80175b2:	0fd9      	lsrs	r1, r3, #31
 80175b4:	440b      	add	r3, r1
 80175b6:	105b      	asrs	r3, r3, #1
 80175b8:	b29b      	uxth	r3, r3
 80175ba:	4413      	add	r3, r2
 80175bc:	b29a      	uxth	r2, r3
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	@ 0x168
 80175c4:	085b      	lsrs	r3, r3, #1
 80175c6:	b29b      	uxth	r3, r3
 80175c8:	1ad3      	subs	r3, r2, r3
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	b21a      	sxth	r2, r3
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
    label1Y = buttonY1 + buttonHeight - label1H;
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80175da:	b29a      	uxth	r2, r3
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	4413      	add	r3, r2
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8b3 316a 	ldrh.w	r3, [r3, #362]	@ 0x16a
 80175ee:	1ad3      	subs	r3, r2, r3
 80175f0:	b29b      	uxth	r3, r3
 80175f2:	b21a      	sxth	r2, r3
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	f8a3 2166 	strh.w	r2, [r3, #358]	@ 0x166
    canvas.setTextColor(BACKGROUND_COLOR);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	336c      	adds	r3, #108	@ 0x6c
 80175fe:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 8017602:	4618      	mov	r0, r3
 8017604:	f7e9 ff31 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label1X);
    // Serial.println(label1Y);
    canvas.setCursor(label1X, label1Y);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	f9b3 1164 	ldrsh.w	r1, [r3, #356]	@ 0x164
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	f9b3 3166 	ldrsh.w	r3, [r3, #358]	@ 0x166
 801761a:	461a      	mov	r2, r3
 801761c:	f7e9 ff11 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Settings");
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	336c      	adds	r3, #108	@ 0x6c
 8017624:	492d      	ldr	r1, [pc, #180]	@ (80176dc <_ZN6Screen11renderMeterEv+0x584>)
 8017626:	4618      	mov	r0, r3
 8017628:	f7eb fe8b 	bl	8003342 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Sleep", 0, 0, &label2X, &label2Y, &label2W, &label2H);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8017638:	687a      	ldr	r2, [r7, #4]
 801763a:	f502 72b7 	add.w	r2, r2, #366	@ 0x16e
 801763e:	6879      	ldr	r1, [r7, #4]
 8017640:	f501 71b8 	add.w	r1, r1, #368	@ 0x170
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f500 70b9 	add.w	r0, r0, #370	@ 0x172
 801764a:	9003      	str	r0, [sp, #12]
 801764c:	9102      	str	r1, [sp, #8]
 801764e:	9201      	str	r2, [sp, #4]
 8017650:	9300      	str	r3, [sp, #0]
 8017652:	2300      	movs	r3, #0
 8017654:	2200      	movs	r2, #0
 8017656:	4922      	ldr	r1, [pc, #136]	@ (80176e0 <_ZN6Screen11renderMeterEv+0x588>)
 8017658:	4620      	mov	r0, r4
 801765a:	f7eb f9e0 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    label2X = buttonX2 + buttonWidth / 2 - label2W / 2;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8017664:	b29a      	uxth	r2, r3
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 801766c:	0fd9      	lsrs	r1, r3, #31
 801766e:	440b      	add	r3, r1
 8017670:	105b      	asrs	r3, r3, #1
 8017672:	b29b      	uxth	r3, r3
 8017674:	4413      	add	r3, r2
 8017676:	b29a      	uxth	r2, r3
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	f8b3 3170 	ldrh.w	r3, [r3, #368]	@ 0x170
 801767e:	085b      	lsrs	r3, r3, #1
 8017680:	b29b      	uxth	r3, r3
 8017682:	1ad3      	subs	r3, r2, r3
 8017684:	b29b      	uxth	r3, r3
 8017686:	b21a      	sxth	r2, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
    label2Y = buttonY2 + buttonHeight - label2H;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 8017694:	b29a      	uxth	r2, r3
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801769c:	b29b      	uxth	r3, r3
 801769e:	4413      	add	r3, r2
 80176a0:	b29a      	uxth	r2, r3
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8b3 3172 	ldrh.w	r3, [r3, #370]	@ 0x172
 80176a8:	1ad3      	subs	r3, r2, r3
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	b21a      	sxth	r2, r3
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f8a3 216e 	strh.w	r2, [r3, #366]	@ 0x16e
    canvas.setTextColor(BACKGROUND_COLOR);
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	336c      	adds	r3, #108	@ 0x6c
 80176b8:	f64d 41ff 	movw	r1, #56575	@ 0xdcff
 80176bc:	4618      	mov	r0, r3
 80176be:	f7e9 fed4 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
    // Serial.println(label2X);
    // Serial.println(label2Y);
    canvas.setCursor(label2X, label2Y);
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80176c8:	e00c      	b.n	80176e4 <_ZN6Screen11renderMeterEv+0x58c>
 80176ca:	bf00      	nop
 80176cc:	0801cc24 	.word	0x0801cc24
 80176d0:	0801cc28 	.word	0x0801cc28
 80176d4:	0801cc30 	.word	0x0801cc30
 80176d8:	0801cc34 	.word	0x0801cc34
 80176dc:	0801cc38 	.word	0x0801cc38
 80176e0:	0801cc44 	.word	0x0801cc44
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f9b3 116c 	ldrsh.w	r1, [r3, #364]	@ 0x16c
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f9b3 316e 	ldrsh.w	r3, [r3, #366]	@ 0x16e
 80176f0:	461a      	mov	r2, r3
 80176f2:	f7e9 fea6 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Sleep");
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	336c      	adds	r3, #108	@ 0x6c
 80176fa:	498f      	ldr	r1, [pc, #572]	@ (8017938 <_ZN6Screen11renderMeterEv+0x7e0>)
 80176fc:	4618      	mov	r0, r3
 80176fe:	f7eb fe20 	bl	8003342 <_ZN5Print5printEPKc>

    drawMeterLines(meterOriginX, meterOriginY, meterHeight - 40, -8, 8);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	f8d3 1108 	ldr.w	r1, [r3, #264]	@ 0x108
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8017714:	3b28      	subs	r3, #40	@ 0x28
 8017716:	2008      	movs	r0, #8
 8017718:	9001      	str	r0, [sp, #4]
 801771a:	f06f 0007 	mvn.w	r0, #7
 801771e:	9000      	str	r0, [sp, #0]
 8017720:	6878      	ldr	r0, [r7, #4]
 8017722:	f000 f911 	bl	8017948 <_ZN6Screen14drawMeterLinesEiiiii>

    canvas.getTextBounds("DELTA T PROBE", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017732:	687a      	ldr	r2, [r7, #4]
 8017734:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017738:	6879      	ldr	r1, [r7, #4]
 801773a:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 801773e:	6878      	ldr	r0, [r7, #4]
 8017740:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017744:	9003      	str	r0, [sp, #12]
 8017746:	9102      	str	r1, [sp, #8]
 8017748:	9201      	str	r2, [sp, #4]
 801774a:	9300      	str	r3, [sp, #0]
 801774c:	2300      	movs	r3, #0
 801774e:	2200      	movs	r2, #0
 8017750:	497a      	ldr	r1, [pc, #488]	@ (801793c <_ZN6Screen11renderMeterEv+0x7e4>)
 8017752:	4620      	mov	r0, r4
 8017754:	f7eb f963 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 8017764:	0fd9      	lsrs	r1, r3, #31
 8017766:	440b      	add	r3, r1
 8017768:	105b      	asrs	r3, r3, #1
 801776a:	4413      	add	r3, r2
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 8017772:	0852      	lsrs	r2, r2, #1
 8017774:	b292      	uxth	r2, r2
 8017776:	1a9a      	subs	r2, r3, r2
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight + meterSpacer;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	f8b2 217a 	ldrh.w	r2, [r2, #378]	@ 0x17a
 801778a:	441a      	add	r2, r3
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017792:	441a      	add	r2, r3
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	336c      	adds	r3, #108	@ 0x6c
 801779e:	f24a 3129 	movw	r1, #41769	@ 0xa329
 80177a2:	4618      	mov	r0, r3
 80177a4:	f7e9 fe61 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 80177b4:	b219      	sxth	r1, r3
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 80177bc:	b21b      	sxth	r3, r3
 80177be:	461a      	mov	r2, r3
 80177c0:	f7e9 fe3f 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("DELTA T PROBE");
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	336c      	adds	r3, #108	@ 0x6c
 80177c8:	495c      	ldr	r1, [pc, #368]	@ (801793c <_ZN6Screen11renderMeterEv+0x7e4>)
 80177ca:	4618      	mov	r0, r3
 80177cc:	f7eb fdb9 	bl	8003342 <_ZN5Print5printEPKc>

    canvas.getTextBounds("The Instrument Company", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 80177e2:	6879      	ldr	r1, [r7, #4]
 80177e4:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 80177e8:	6878      	ldr	r0, [r7, #4]
 80177ea:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 80177ee:	9003      	str	r0, [sp, #12]
 80177f0:	9102      	str	r1, [sp, #8]
 80177f2:	9201      	str	r2, [sp, #4]
 80177f4:	9300      	str	r3, [sp, #0]
 80177f6:	2300      	movs	r3, #0
 80177f8:	2200      	movs	r2, #0
 80177fa:	4951      	ldr	r1, [pc, #324]	@ (8017940 <_ZN6Screen11renderMeterEv+0x7e8>)
 80177fc:	4620      	mov	r0, r4
 80177fe:	f7eb f90e 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 801780e:	0fd9      	lsrs	r1, r3, #31
 8017810:	440b      	add	r3, r1
 8017812:	105b      	asrs	r3, r3, #1
 8017814:	4413      	add	r3, r2
 8017816:	687a      	ldr	r2, [r7, #4]
 8017818:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 801781c:	0852      	lsrs	r2, r2, #1
 801781e:	b292      	uxth	r2, r2
 8017820:	1a9a      	subs	r2, r3, r2
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight * 2 + meterSpacer;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
 8017834:	005b      	lsls	r3, r3, #1
 8017836:	441a      	add	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801783e:	441a      	add	r2, r3
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	336c      	adds	r3, #108	@ 0x6c
 801784a:	f24a 3129 	movw	r1, #41769	@ 0xa329
 801784e:	4618      	mov	r0, r3
 8017850:	f7e9 fe0b 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8017860:	b219      	sxth	r1, r3
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017868:	b21b      	sxth	r3, r3
 801786a:	461a      	mov	r2, r3
 801786c:	f7e9 fde9 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("The Instrument Company");
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	336c      	adds	r3, #108	@ 0x6c
 8017874:	4932      	ldr	r1, [pc, #200]	@ (8017940 <_ZN6Screen11renderMeterEv+0x7e8>)
 8017876:	4618      	mov	r0, r3
 8017878:	f7eb fd63 	bl	8003342 <_ZN5Print5printEPKc>

    canvas.getTextBounds("Dr. Ed Carr, Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017888:	687a      	ldr	r2, [r7, #4]
 801788a:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 801788e:	6879      	ldr	r1, [r7, #4]
 8017890:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 801789a:	9003      	str	r0, [sp, #12]
 801789c:	9102      	str	r1, [sp, #8]
 801789e:	9201      	str	r2, [sp, #4]
 80178a0:	9300      	str	r3, [sp, #0]
 80178a2:	2300      	movs	r3, #0
 80178a4:	2200      	movs	r2, #0
 80178a6:	4927      	ldr	r1, [pc, #156]	@ (8017944 <_ZN6Screen11renderMeterEv+0x7ec>)
 80178a8:	4620      	mov	r0, r4
 80178aa:	f7eb f8b8 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
    textX = labelX + labelWidth / 2 - textWidth / 2;
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 80178ba:	0fd9      	lsrs	r1, r3, #31
 80178bc:	440b      	add	r3, r1
 80178be:	105b      	asrs	r3, r3, #1
 80178c0:	4413      	add	r3, r2
 80178c2:	687a      	ldr	r2, [r7, #4]
 80178c4:	f8b2 2178 	ldrh.w	r2, [r2, #376]	@ 0x178
 80178c8:	0852      	lsrs	r2, r2, #1
 80178ca:	b292      	uxth	r2, r2
 80178cc:	1a9a      	subs	r2, r3, r2
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	f8c3 217c 	str.w	r2, [r3, #380]	@ 0x17c
    textY = labelY + textHeight * 3 + meterSpacer * 2;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f8b3 317a 	ldrh.w	r3, [r3, #378]	@ 0x17a
 80178e0:	4619      	mov	r1, r3
 80178e2:	460b      	mov	r3, r1
 80178e4:	005b      	lsls	r3, r3, #1
 80178e6:	440b      	add	r3, r1
 80178e8:	441a      	add	r2, r3
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80178f0:	005b      	lsls	r3, r3, #1
 80178f2:	441a      	add	r2, r3
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    canvas.setTextColor(TEXT_COLOR);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	336c      	adds	r3, #108	@ 0x6c
 80178fe:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017902:	4618      	mov	r0, r3
 8017904:	f7e9 fdb1 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>

    canvas.setCursor(textX, textY);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8017914:	b219      	sxth	r1, r3
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 801791c:	b21b      	sxth	r3, r3
 801791e:	461a      	mov	r2, r3
 8017920:	f7e9 fd8f 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    canvas.print("Dr. Ed Carr, Fort Collins, CO");
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	336c      	adds	r3, #108	@ 0x6c
 8017928:	4906      	ldr	r1, [pc, #24]	@ (8017944 <_ZN6Screen11renderMeterEv+0x7ec>)
 801792a:	4618      	mov	r0, r3
 801792c:	f7eb fd09 	bl	8003342 <_ZN5Print5printEPKc>
    //
    // canvas.getTextBounds("Fort Collins, CO", 0, 0, &textOriginX, &textOriginY, &fccotextWidth, &fccotextHeight);
    // canvas.setCursor(width / 2 - fccotextWidth / 2, screenOffset + statusHeight + meterHeight + dttextHeight + tictextHeight + fccotextHeight + screenOffset);
    // canvas.print("Fort Collins, CO");
    //
}
 8017930:	bf00      	nop
 8017932:	3714      	adds	r7, #20
 8017934:	46bd      	mov	sp, r7
 8017936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017938:	0801cc44 	.word	0x0801cc44
 801793c:	0801cc4c 	.word	0x0801cc4c
 8017940:	0801cc5c 	.word	0x0801cc5c
 8017944:	0801cc74 	.word	0x0801cc74

08017948 <_ZN6Screen14drawMeterLinesEiiiii>:

void Screen::drawMeterLines(int centerX, int centerY, int radius, int lineStart, int lineEnd)
{ // points = 8 - - 8 = 16
 8017948:	b5b0      	push	{r4, r5, r7, lr}
 801794a:	ed2d 8b02 	vpush	{d8}
 801794e:	b098      	sub	sp, #96	@ 0x60
 8017950:	af04      	add	r7, sp, #16
 8017952:	60f8      	str	r0, [r7, #12]
 8017954:	60b9      	str	r1, [r7, #8]
 8017956:	607a      	str	r2, [r7, #4]
 8017958:	603b      	str	r3, [r7, #0]
    int points = lineEnd - lineStart;
 801795a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801795c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801795e:	1ad3      	subs	r3, r2, r3
 8017960:	647b      	str	r3, [r7, #68]	@ 0x44
    //[0 1 2 ... 17 18]
    canvas.fillCircle(centerX, centerY, 3, ST7789V_BLACK);
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	b219      	sxth	r1, r3
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	b21a      	sxth	r2, r3
 8017970:	2300      	movs	r3, #0
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	2303      	movs	r3, #3
 8017976:	f7ea f892 	bl	8001a9e <_ZN12Adafruit_GFX10fillCircleEssst>

    // Loop to draw the lines
    for (int i = lineStart; i <= lineEnd; i++)
 801797a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801797c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801797e:	e270      	b.n	8017e62 <_ZN6Screen14drawMeterLinesEiiiii+0x51a>
    {
        // Calculate angle for the line
        // float angle = (i * (90.0 / points)) + 235 - 90 / points;
        // goes from -8 * 90/16 + 270 = 225, to 8 * 90/18 + 270 = 315
        float angle = (i * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017980:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8017982:	f7e8 fdb7 	bl	80004f4 <__aeabi_i2d>
 8017986:	4604      	mov	r4, r0
 8017988:	460d      	mov	r5, r1
 801798a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801798c:	f7e8 fdb2 	bl	80004f4 <__aeabi_i2d>
 8017990:	4602      	mov	r2, r0
 8017992:	460b      	mov	r3, r1
 8017994:	f04f 0000 	mov.w	r0, #0
 8017998:	49bd      	ldr	r1, [pc, #756]	@ (8017c90 <_ZN6Screen14drawMeterLinesEiiiii+0x348>)
 801799a:	f7e8 ff3f 	bl	800081c <__aeabi_ddiv>
 801799e:	4602      	mov	r2, r0
 80179a0:	460b      	mov	r3, r1
 80179a2:	4620      	mov	r0, r4
 80179a4:	4629      	mov	r1, r5
 80179a6:	f7e8 fe0f 	bl	80005c8 <__aeabi_dmul>
 80179aa:	4602      	mov	r2, r0
 80179ac:	460b      	mov	r3, r1
 80179ae:	4610      	mov	r0, r2
 80179b0:	4619      	mov	r1, r3
 80179b2:	a3b5      	add	r3, pc, #724	@ (adr r3, 8017c88 <_ZN6Screen14drawMeterLinesEiiiii+0x340>)
 80179b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179b8:	f7e8 fc50 	bl	800025c <__adddf3>
 80179bc:	4602      	mov	r2, r0
 80179be:	460b      	mov	r3, r1
 80179c0:	4610      	mov	r0, r2
 80179c2:	4619      	mov	r1, r3
 80179c4:	f7e9 f8d8 	bl	8000b78 <__aeabi_d2f>
 80179c8:	4603      	mov	r3, r0
 80179ca:	643b      	str	r3, [r7, #64]	@ 0x40

        // Convert angle to radians
        float rad = radians(angle);
 80179cc:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80179d0:	68f8      	ldr	r0, [r7, #12]
 80179d2:	f000 fb05 	bl	8017fe0 <_ZN6Screen7radiansEf>
 80179d6:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

        // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
        int xEnd = centerX + radius * cos(rad);
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	ee07 3a90 	vmov	s15, r3
 80179e0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	ee07 3a90 	vmov	s15, r3
 80179ea:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 80179ee:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80179f2:	f7ff fb91 	bl	8017118 <_ZSt3cosf>
 80179f6:	eef0 7a40 	vmov.f32	s15, s0
 80179fa:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80179fe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a06:	ee17 3a90 	vmov	r3, s15
 8017a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
        int yEnd = centerY + radius * sin(rad);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	ee07 3a90 	vmov	s15, r3
 8017a12:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017a16:	683b      	ldr	r3, [r7, #0]
 8017a18:	ee07 3a90 	vmov	s15, r3
 8017a1c:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017a20:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017a24:	f7ff fb88 	bl	8017138 <_ZSt3sinf>
 8017a28:	eef0 7a40 	vmov.f32	s15, s0
 8017a2c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017a30:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a38:	ee17 3a90 	vmov	r3, s15
 8017a3c:	637b      	str	r3, [r7, #52]	@ 0x34

        // Calculate the endpoint of the line (on the circle's perimeter)
        int xStart = centerX + (radius - 20) * cos(rad);
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	ee07 3a90 	vmov	s15, r3
 8017a44:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	3b14      	subs	r3, #20
 8017a4c:	ee07 3a90 	vmov	s15, r3
 8017a50:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017a54:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017a58:	f7ff fb5e 	bl	8017118 <_ZSt3cosf>
 8017a5c:	eef0 7a40 	vmov.f32	s15, s0
 8017a60:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017a64:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017a6c:	ee17 3a90 	vmov	r3, s15
 8017a70:	633b      	str	r3, [r7, #48]	@ 0x30
        int yStart = centerY + (radius - 20) * sin(rad);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	ee07 3a90 	vmov	s15, r3
 8017a78:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	3b14      	subs	r3, #20
 8017a80:	ee07 3a90 	vmov	s15, r3
 8017a84:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017a88:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8017a8c:	f7ff fb54 	bl	8017138 <_ZSt3sinf>
 8017a90:	eef0 7a40 	vmov.f32	s15, s0
 8017a94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017a98:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017aa0:	ee17 3a90 	vmov	r3, s15
 8017aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        // Draw a normal line
        canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aae:	b219      	sxth	r1, r3
 8017ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ab2:	b21a      	sxth	r2, r3
 8017ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017ab6:	b21c      	sxth	r4, r3
 8017ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aba:	b21b      	sxth	r3, r3
 8017abc:	2500      	movs	r5, #0
 8017abe:	9501      	str	r5, [sp, #4]
 8017ac0:	9300      	str	r3, [sp, #0]
 8017ac2:	4623      	mov	r3, r4
 8017ac4:	f7e9 ff6e 	bl	80019a4 <_ZN12Adafruit_GFX8drawLineEsssst>

        if (i == lineStart)
 8017ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017aca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d122      	bne.n	8017b16 <_ZN6Screen14drawMeterLinesEiiiii+0x1ce>
        {

            canvas.setCursor(overallBorderX + meterSpacer, yEnd - 10);
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017adc:	b29a      	uxth	r2, r3
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	4413      	add	r3, r2
 8017ae8:	b29b      	uxth	r3, r3
 8017aea:	b219      	sxth	r1, r3
 8017aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	3b0a      	subs	r3, #10
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	b21b      	sxth	r3, r3
 8017af6:	461a      	mov	r2, r3
 8017af8:	f7e9 fca3 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	336c      	adds	r3, #108	@ 0x6c
 8017b00:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7e9 fcb0 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 8017b0a:	68fb      	ldr	r3, [r7, #12]
 8017b0c:	336c      	adds	r3, #108	@ 0x6c
 8017b0e:	4961      	ldr	r1, [pc, #388]	@ (8017c94 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7eb fc16 	bl	8003342 <_ZN5Print5printEPKc>
        }

        if (i == -3)
 8017b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017b18:	f113 0f03 	cmn.w	r3, #3
 8017b1c:	d151      	bne.n	8017bc2 <_ZN6Screen14drawMeterLinesEiiiii+0x27a>
        {
            canvas.setTextColor(TEXT_COLOR);
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	336c      	adds	r3, #108	@ 0x6c
 8017b22:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7e9 fc9f 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.setCursor(xEnd, yEnd - 20);
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b34:	b219      	sxth	r1, r3
 8017b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	3b14      	subs	r3, #20
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	b21b      	sxth	r3, r3
 8017b40:	461a      	mov	r2, r3
 8017b42:	f7e9 fc7e 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("LO");
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	336c      	adds	r3, #108	@ 0x6c
 8017b4a:	4953      	ldr	r1, [pc, #332]	@ (8017c98 <_ZN6Screen14drawMeterLinesEiiiii+0x350>)
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7eb fbf8 	bl	8003342 <_ZN5Print5printEPKc>

            canvas.getTextBounds("HI", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017b5e:	68fa      	ldr	r2, [r7, #12]
 8017b60:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017b64:	68f9      	ldr	r1, [r7, #12]
 8017b66:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017b6a:	68f8      	ldr	r0, [r7, #12]
 8017b6c:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017b70:	9003      	str	r0, [sp, #12]
 8017b72:	9102      	str	r1, [sp, #8]
 8017b74:	9201      	str	r2, [sp, #4]
 8017b76:	9300      	str	r3, [sp, #0]
 8017b78:	2300      	movs	r3, #0
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	4947      	ldr	r1, [pc, #284]	@ (8017c9c <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 8017b7e:	4620      	mov	r0, r4
 8017b80:	f7ea ff4d 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - xEnd - textWidth, yEnd - 20);
 8017b84:	68fb      	ldr	r3, [r7, #12]
 8017b86:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017b94:	b29b      	uxth	r3, r3
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	b29a      	uxth	r2, r3
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	b219      	sxth	r1, r3
 8017ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017ba8:	b29b      	uxth	r3, r3
 8017baa:	3b14      	subs	r3, #20
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	b21b      	sxth	r3, r3
 8017bb0:	461a      	mov	r2, r3
 8017bb2:	f7e9 fc46 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>

            canvas.print("HI");
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	336c      	adds	r3, #108	@ 0x6c
 8017bba:	4938      	ldr	r1, [pc, #224]	@ (8017c9c <_ZN6Screen14drawMeterLinesEiiiii+0x354>)
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f7eb fbc0 	bl	8003342 <_ZN5Print5printEPKc>
        }

        if (i == 0)
 8017bc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d13a      	bne.n	8017c3e <_ZN6Screen14drawMeterLinesEiiiii+0x2f6>
        {
            canvas.getTextBounds("0", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017bd4:	68fa      	ldr	r2, [r7, #12]
 8017bd6:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017bda:	68f9      	ldr	r1, [r7, #12]
 8017bdc:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017be0:	68f8      	ldr	r0, [r7, #12]
 8017be2:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017be6:	9003      	str	r0, [sp, #12]
 8017be8:	9102      	str	r1, [sp, #8]
 8017bea:	9201      	str	r2, [sp, #4]
 8017bec:	9300      	str	r3, [sp, #0]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	492b      	ldr	r1, [pc, #172]	@ (8017ca0 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8017bf4:	4620      	mov	r0, r4
 8017bf6:	f7ea ff12 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(xEnd - textWidth / 2, yEnd - 5);
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017c0a:	085b      	lsrs	r3, r3, #1
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	1ad3      	subs	r3, r2, r3
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	b219      	sxth	r1, r3
 8017c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c16:	b29b      	uxth	r3, r3
 8017c18:	3b05      	subs	r3, #5
 8017c1a:	b29b      	uxth	r3, r3
 8017c1c:	b21b      	sxth	r3, r3
 8017c1e:	461a      	mov	r2, r3
 8017c20:	f7e9 fc0f 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	336c      	adds	r3, #108	@ 0x6c
 8017c28:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	f7e9 fc1c 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>

            canvas.print("0");
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	336c      	adds	r3, #108	@ 0x6c
 8017c36:	491a      	ldr	r1, [pc, #104]	@ (8017ca0 <_ZN6Screen14drawMeterLinesEiiiii+0x358>)
 8017c38:	4618      	mov	r0, r3
 8017c3a:	f7eb fb82 	bl	8003342 <_ZN5Print5printEPKc>
        }

        if (i == lineEnd)
 8017c3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017c40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d150      	bne.n	8017ce8 <_ZN6Screen14drawMeterLinesEiiiii+0x3a0>
        {
            canvas.getTextBounds("25", 0, 0, &textOriginX, &textOriginY, &textWidth, &textHeight);
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8017c4c:	68fb      	ldr	r3, [r7, #12]
 8017c4e:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8017c52:	68fa      	ldr	r2, [r7, #12]
 8017c54:	f502 72bb 	add.w	r2, r2, #374	@ 0x176
 8017c58:	68f9      	ldr	r1, [r7, #12]
 8017c5a:	f501 71bc 	add.w	r1, r1, #376	@ 0x178
 8017c5e:	68f8      	ldr	r0, [r7, #12]
 8017c60:	f500 70bd 	add.w	r0, r0, #378	@ 0x17a
 8017c64:	9003      	str	r0, [sp, #12]
 8017c66:	9102      	str	r1, [sp, #8]
 8017c68:	9201      	str	r2, [sp, #4]
 8017c6a:	9300      	str	r3, [sp, #0]
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	2200      	movs	r2, #0
 8017c70:	4908      	ldr	r1, [pc, #32]	@ (8017c94 <_ZN6Screen14drawMeterLinesEiiiii+0x34c>)
 8017c72:	4620      	mov	r0, r4
 8017c74:	f7ea fed3 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>

            canvas.setCursor(overallBorderWidth - textWidth - meterSpacer, yEnd - 10);
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017c84:	e00e      	b.n	8017ca4 <_ZN6Screen14drawMeterLinesEiiiii+0x35c>
 8017c86:	bf00      	nop
 8017c88:	00000000 	.word	0x00000000
 8017c8c:	4070e000 	.word	0x4070e000
 8017c90:	40568000 	.word	0x40568000
 8017c94:	0801cc94 	.word	0x0801cc94
 8017c98:	0801cc98 	.word	0x0801cc98
 8017c9c:	0801cc9c 	.word	0x0801cc9c
 8017ca0:	0801cca0 	.word	0x0801cca0
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	68fb      	ldr	r3, [r7, #12]
 8017ca8:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8017cac:	1ad3      	subs	r3, r2, r3
 8017cae:	b29a      	uxth	r2, r3
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017cb6:	b29b      	uxth	r3, r3
 8017cb8:	1ad3      	subs	r3, r2, r3
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	b219      	sxth	r1, r3
 8017cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017cc0:	b29b      	uxth	r3, r3
 8017cc2:	3b0a      	subs	r3, #10
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	b21b      	sxth	r3, r3
 8017cc8:	461a      	mov	r2, r3
 8017cca:	f7e9 fbba 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
            canvas.setTextColor(TEXT_COLOR);
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	336c      	adds	r3, #108	@ 0x6c
 8017cd2:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7e9 fbc7 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
            canvas.print("25");
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	336c      	adds	r3, #108	@ 0x6c
 8017ce0:	4969      	ldr	r1, [pc, #420]	@ (8017e88 <_ZN6Screen14drawMeterLinesEiiiii+0x540>)
 8017ce2:	4618      	mov	r0, r3
 8017ce4:	f7eb fb2d 	bl	8003342 <_ZN5Print5printEPKc>
        }

        // draw all the little tick marks
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 8017ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017cee:	e0af      	b.n	8017e50 <_ZN6Screen14drawMeterLinesEiiiii+0x508>
        {
            float angle = (i * 0.25 * (90.0 / points)) + 270; // distribute over 90 deg and shift by 270
 8017cf0:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8017cf2:	f7e8 fbff 	bl	80004f4 <__aeabi_i2d>
 8017cf6:	f04f 0200 	mov.w	r2, #0
 8017cfa:	4b64      	ldr	r3, [pc, #400]	@ (8017e8c <_ZN6Screen14drawMeterLinesEiiiii+0x544>)
 8017cfc:	f7e8 fc64 	bl	80005c8 <__aeabi_dmul>
 8017d00:	4602      	mov	r2, r0
 8017d02:	460b      	mov	r3, r1
 8017d04:	4614      	mov	r4, r2
 8017d06:	461d      	mov	r5, r3
 8017d08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017d0a:	f7e8 fbf3 	bl	80004f4 <__aeabi_i2d>
 8017d0e:	4602      	mov	r2, r0
 8017d10:	460b      	mov	r3, r1
 8017d12:	f04f 0000 	mov.w	r0, #0
 8017d16:	495e      	ldr	r1, [pc, #376]	@ (8017e90 <_ZN6Screen14drawMeterLinesEiiiii+0x548>)
 8017d18:	f7e8 fd80 	bl	800081c <__aeabi_ddiv>
 8017d1c:	4602      	mov	r2, r0
 8017d1e:	460b      	mov	r3, r1
 8017d20:	4620      	mov	r0, r4
 8017d22:	4629      	mov	r1, r5
 8017d24:	f7e8 fc50 	bl	80005c8 <__aeabi_dmul>
 8017d28:	4602      	mov	r2, r0
 8017d2a:	460b      	mov	r3, r1
 8017d2c:	4610      	mov	r0, r2
 8017d2e:	4619      	mov	r1, r3
 8017d30:	a353      	add	r3, pc, #332	@ (adr r3, 8017e80 <_ZN6Screen14drawMeterLinesEiiiii+0x538>)
 8017d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d36:	f7e8 fa91 	bl	800025c <__adddf3>
 8017d3a:	4602      	mov	r2, r0
 8017d3c:	460b      	mov	r3, r1
 8017d3e:	4610      	mov	r0, r2
 8017d40:	4619      	mov	r1, r3
 8017d42:	f7e8 ff19 	bl	8000b78 <__aeabi_d2f>
 8017d46:	4603      	mov	r3, r0
 8017d48:	62bb      	str	r3, [r7, #40]	@ 0x28

            // Convert angle to radians
            float rad = radians(angle);
 8017d4a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8017d4e:	68f8      	ldr	r0, [r7, #12]
 8017d50:	f000 f946 	bl	8017fe0 <_ZN6Screen7radiansEf>
 8017d54:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

            // Calculate the endpoint of the line (on the circle's perimeter) // outer ring i think
            int xEnd = centerX + (radius - 10) * cos(rad);
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	ee07 3a90 	vmov	s15, r3
 8017d5e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017d62:	683b      	ldr	r3, [r7, #0]
 8017d64:	3b0a      	subs	r3, #10
 8017d66:	ee07 3a90 	vmov	s15, r3
 8017d6a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017d6e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017d72:	f7ff f9d1 	bl	8017118 <_ZSt3cosf>
 8017d76:	eef0 7a40 	vmov.f32	s15, s0
 8017d7a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017d7e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017d86:	ee17 3a90 	vmov	r3, s15
 8017d8a:	623b      	str	r3, [r7, #32]
            int yEnd = centerY + (radius - 10) * sin(rad);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	ee07 3a90 	vmov	s15, r3
 8017d92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	3b0a      	subs	r3, #10
 8017d9a:	ee07 3a90 	vmov	s15, r3
 8017d9e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017da2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017da6:	f7ff f9c7 	bl	8017138 <_ZSt3sinf>
 8017daa:	eef0 7a40 	vmov.f32	s15, s0
 8017dae:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017db2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017dba:	ee17 3a90 	vmov	r3, s15
 8017dbe:	61fb      	str	r3, [r7, #28]

            // Calculate the endpoint of the line (on the circle's perimeter)
            int xStart = centerX + (radius - 20) * cos(rad);
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	ee07 3a90 	vmov	s15, r3
 8017dc6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	3b14      	subs	r3, #20
 8017dce:	ee07 3a90 	vmov	s15, r3
 8017dd2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017dd6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017dda:	f7ff f99d 	bl	8017118 <_ZSt3cosf>
 8017dde:	eef0 7a40 	vmov.f32	s15, s0
 8017de2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017de6:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017dea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017dee:	ee17 3a90 	vmov	r3, s15
 8017df2:	61bb      	str	r3, [r7, #24]
            int yStart = centerY + (radius - 20) * sin(rad);
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	ee07 3a90 	vmov	s15, r3
 8017dfa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	3b14      	subs	r3, #20
 8017e02:	ee07 3a90 	vmov	s15, r3
 8017e06:	eef8 8ae7 	vcvt.f32.s32	s17, s15
 8017e0a:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017e0e:	f7ff f993 	bl	8017138 <_ZSt3sinf>
 8017e12:	eef0 7a40 	vmov.f32	s15, s0
 8017e16:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8017e1a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8017e1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e22:	ee17 3a90 	vmov	r3, s15
 8017e26:	617b      	str	r3, [r7, #20]

            // Draw a normal line
            canvas.drawLine(xStart, yStart, xEnd, yEnd, ST7789V_BLACK);
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8017e2e:	69bb      	ldr	r3, [r7, #24]
 8017e30:	b219      	sxth	r1, r3
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	b21a      	sxth	r2, r3
 8017e36:	6a3b      	ldr	r3, [r7, #32]
 8017e38:	b21c      	sxth	r4, r3
 8017e3a:	69fb      	ldr	r3, [r7, #28]
 8017e3c:	b21b      	sxth	r3, r3
 8017e3e:	2500      	movs	r5, #0
 8017e40:	9501      	str	r5, [sp, #4]
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	4623      	mov	r3, r4
 8017e46:	f7e9 fdad 	bl	80019a4 <_ZN12Adafruit_GFX8drawLineEsssst>
        for (int i = lineStart * 4; i <= lineEnd * 4; i++)
 8017e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017e50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017e56:	429a      	cmp	r2, r3
 8017e58:	f77f af4a 	ble.w	8017cf0 <_ZN6Screen14drawMeterLinesEiiiii+0x3a8>
    for (int i = lineStart; i <= lineEnd; i++)
 8017e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017e5e:	3301      	adds	r3, #1
 8017e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017e62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8017e66:	429a      	cmp	r2, r3
 8017e68:	f77f ad8a 	ble.w	8017980 <_ZN6Screen14drawMeterLinesEiiiii+0x38>
        }
    }
}
 8017e6c:	bf00      	nop
 8017e6e:	bf00      	nop
 8017e70:	3750      	adds	r7, #80	@ 0x50
 8017e72:	46bd      	mov	sp, r7
 8017e74:	ecbd 8b02 	vpop	{d8}
 8017e78:	bdb0      	pop	{r4, r5, r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	f3af 8000 	nop.w
 8017e80:	00000000 	.word	0x00000000
 8017e84:	4070e000 	.word	0x4070e000
 8017e88:	0801cc94 	.word	0x0801cc94
 8017e8c:	3fd00000 	.word	0x3fd00000
 8017e90:	40568000 	.word	0x40568000

08017e94 <_ZN12Adafruit_GFX11setTextWrapEb>:
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
 8017e94:	b480      	push	{r7}
 8017e96:	b083      	sub	sp, #12
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
 8017e9c:	460b      	mov	r3, r1
 8017e9e:	70fb      	strb	r3, [r7, #3]
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	78fa      	ldrb	r2, [r7, #3]
 8017ea4:	76da      	strb	r2, [r3, #27]
 8017ea6:	bf00      	nop
 8017ea8:	370c      	adds	r7, #12
 8017eaa:	46bd      	mov	sp, r7
 8017eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eb0:	4770      	bx	lr

08017eb2 <_ZNK11GFXcanvas169getBufferEv>:
  /*!
    @brief    Get a pointer to the internal buffer memory
    @returns  A pointer to the allocated buffer
  */
  /**********************************************************************/
  uint16_t *getBuffer(void) const { return buffer; }
 8017eb2:	b480      	push	{r7}
 8017eb4:	b083      	sub	sp, #12
 8017eb6:	af00      	add	r7, sp, #0
 8017eb8:	6078      	str	r0, [r7, #4]
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr
	...

08017ecc <_ZN6Screen5setupEv>:
#include "Screen.hpp"

void Screen::setup(void)
{
 8017ecc:	b5b0      	push	{r4, r5, r7, lr}
 8017ece:	b084      	sub	sp, #16
 8017ed0:	af02      	add	r7, sp, #8
 8017ed2:	6078      	str	r0, [r7, #4]

    needleBuffer[32] = {0};
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	f883 2249 	strb.w	r2, [r3, #585]	@ 0x249
    switchBuffer[32] = {0};
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f883 2269 	strb.w	r2, [r3, #617]	@ 0x269
    lastSwitchBuffer[32] = {0};
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289

    // SPI_Set_Mode(0);

    totalPixels = canvas.width() * canvas.height();
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	336c      	adds	r3, #108	@ 0x6c
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7e9 facd 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	461c      	mov	r4, r3
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	336c      	adds	r3, #108	@ 0x6c
 8017efe:	4618      	mov	r0, r3
 8017f00:	f7e9 fad3 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8017f04:	4603      	mov	r3, r0
 8017f06:	fb04 f303 	mul.w	r3, r4, r3
 8017f0a:	461a      	mov	r2, r3
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	669a      	str	r2, [r3, #104]	@ 0x68

    tft.begin();
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7eb fa64 	bl	80033e0 <_ZN13ST7789V_STM325beginEv>
    tft.setRotation(2); // places the screen connector further away from the probe tubes
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2102      	movs	r1, #2
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f7eb fdbf 	bl	8003aa0 <_ZN13ST7789V_STM3211setRotationEh>
    canvas.setFont(&FreeSerif9pt7b);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	336c      	adds	r3, #108	@ 0x6c
 8017f26:	491c      	ldr	r1, [pc, #112]	@ (8017f98 <_ZN6Screen5setupEv+0xcc>)
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7ea fbab 	bl	8002684 <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
    canvas.setTextWrap(true);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	336c      	adds	r3, #108	@ 0x6c
 8017f32:	2101      	movs	r1, #1
 8017f34:	4618      	mov	r0, r3
 8017f36:	f7ff ffad 	bl	8017e94 <_ZN12Adafruit_GFX11setTextWrapEb>
    canvas.setTextSize(1);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	336c      	adds	r3, #108	@ 0x6c
 8017f3e:	2101      	movs	r1, #1
 8017f40:	4618      	mov	r0, r3
 8017f42:	f7ea fb38 	bl	80025b6 <_ZN12Adafruit_GFX11setTextSizeEh>
    tft.setWindow(0, 0, canvas.width() - 1, canvas.height() - 1);
 8017f46:	687c      	ldr	r4, [r7, #4]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	336c      	adds	r3, #108	@ 0x6c
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f7e9 fa9f 	bl	8001490 <_ZNK12Adafruit_GFX5widthEv>
 8017f52:	4603      	mov	r3, r0
 8017f54:	b29b      	uxth	r3, r3
 8017f56:	3b01      	subs	r3, #1
 8017f58:	b29d      	uxth	r5, r3
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	336c      	adds	r3, #108	@ 0x6c
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7e9 faa3 	bl	80014aa <_ZNK12Adafruit_GFX6heightEv>
 8017f64:	4603      	mov	r3, r0
 8017f66:	b29b      	uxth	r3, r3
 8017f68:	3b01      	subs	r3, #1
 8017f6a:	b29b      	uxth	r3, r3
 8017f6c:	9300      	str	r3, [sp, #0]
 8017f6e:	462b      	mov	r3, r5
 8017f70:	2200      	movs	r2, #0
 8017f72:	2100      	movs	r1, #0
 8017f74:	4620      	mov	r0, r4
 8017f76:	f7eb fe72 	bl	8003c5e <_ZN13ST7789V_STM329setWindowEtttt>

    // initial state: meter
    page = METER;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	f883 2289 	strb.w	r2, [r3, #649]	@ 0x289
    renderMeter();
 8017f82:	6878      	ldr	r0, [r7, #4]
 8017f84:	f7ff f8e8 	bl	8017158 <_ZN6Screen11renderMeterEv>
    // canvas.byteSwap();

    writeCanvas();
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f000 f812 	bl	8017fb2 <_ZN6Screen11writeCanvasEv>
    // renderMeter(canvas);

    // fadeIn();
}
 8017f8e:	bf00      	nop
 8017f90:	3708      	adds	r7, #8
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bdb0      	pop	{r4, r5, r7, pc}
 8017f96:	bf00      	nop
 8017f98:	0801dcd4 	.word	0x0801dcd4

08017f9c <_ZN6Screen12stateMachineEv>:

void Screen::stateMachine(void)

{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]

    // switch (page)
    // {
    // case METER:
    //
    updateMeter();
 8017fa4:	6878      	ldr	r0, [r7, #4]
 8017fa6:	f000 f849 	bl	801803c <_ZN6Screen11updateMeterEv>
    //     break;
    //
    // default:
    //     break;
    // }
}
 8017faa:	bf00      	nop
 8017fac:	3708      	adds	r7, #8
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	bd80      	pop	{r7, pc}

08017fb2 <_ZN6Screen11writeCanvasEv>:

void Screen::writeCanvas(void)
{
 8017fb2:	b580      	push	{r7, lr}
 8017fb4:	b084      	sub	sp, #16
 8017fb6:	af00      	add	r7, sp, #0
 8017fb8:	6078      	str	r0, [r7, #4]

    // SPI_Set_Mode(0);
    uint16_t *buffer = canvas.getBuffer();
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	336c      	adds	r3, #108	@ 0x6c
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7ff ff77 	bl	8017eb2 <_ZNK11GFXcanvas169getBufferEv>
 8017fc4:	60f8      	str	r0, [r7, #12]
    // tft.startWrite();
    // tft.writeBuffer(buffer, totalPixels);
    //  tft.writeBufferDMA(buffer, totalPixels);
    tft.writeBufferDMA(buffer, totalPixels);
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017fcc:	461a      	mov	r2, r3
 8017fce:	68f9      	ldr	r1, [r7, #12]
 8017fd0:	f7eb ff2d 	bl	8003e2e <_ZN13ST7789V_STM3214writeBufferDMAEPtm>
    // tft.endWrite();
    //  SPI_Set_Mode(1);
}
 8017fd4:	bf00      	nop
 8017fd6:	3710      	adds	r7, #16
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	0000      	movs	r0, r0
	...

08017fe0 <_ZN6Screen7radiansEf>:
//     tft.endWrite();
//     SPI_Set_Mode(1);
// }

float Screen::radians(float degrees)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	ed87 0a00 	vstr	s0, [r7]
    return degrees * M_PI / 180.0f;
 8017fec:	6838      	ldr	r0, [r7, #0]
 8017fee:	f7e8 fa93 	bl	8000518 <__aeabi_f2d>
 8017ff2:	a310      	add	r3, pc, #64	@ (adr r3, 8018034 <_ZN6Screen7radiansEf+0x54>)
 8017ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff8:	f7e8 fae6 	bl	80005c8 <__aeabi_dmul>
 8017ffc:	4602      	mov	r2, r0
 8017ffe:	460b      	mov	r3, r1
 8018000:	4610      	mov	r0, r2
 8018002:	4619      	mov	r1, r3
 8018004:	f04f 0200 	mov.w	r2, #0
 8018008:	4b09      	ldr	r3, [pc, #36]	@ (8018030 <_ZN6Screen7radiansEf+0x50>)
 801800a:	f7e8 fc07 	bl	800081c <__aeabi_ddiv>
 801800e:	4602      	mov	r2, r0
 8018010:	460b      	mov	r3, r1
 8018012:	4610      	mov	r0, r2
 8018014:	4619      	mov	r1, r3
 8018016:	f7e8 fdaf 	bl	8000b78 <__aeabi_d2f>
 801801a:	4603      	mov	r3, r0
 801801c:	ee07 3a90 	vmov	s15, r3
}
 8018020:	eeb0 0a67 	vmov.f32	s0, s15
 8018024:	3708      	adds	r7, #8
 8018026:	46bd      	mov	sp, r7
 8018028:	bd80      	pop	{r7, pc}
 801802a:	bf00      	nop
 801802c:	f3af 8000 	nop.w
 8018030:	40668000 	.word	0x40668000
 8018034:	54442d18 	.word	0x54442d18
 8018038:	400921fb 	.word	0x400921fb

0801803c <_ZN6Screen11updateMeterEv>:
#include "BatteryMonitor.hpp"
#include "Thermocouples.hpp"
#include "Switch.hpp"
#include <stdlib.h>
void Screen::updateMeter(void)
{
 801803c:	b5b0      	push	{r4, r5, r7, lr}
 801803e:	ed2d 8b02 	vpush	{d8}
 8018042:	b088      	sub	sp, #32
 8018044:	af04      	add	r7, sp, #16
 8018046:	6078      	str	r0, [r7, #4]
    //
    // //{
    // //  Serial.println(Thermocouples::deltaTemp);
    // //  Serial.println();

    needleAngle = Thermocouples::deltaTemp - 90.0;
 8018048:	4b12      	ldr	r3, [pc, #72]	@ (8018094 <_ZN6Screen11updateMeterEv+0x58>)
 801804a:	edd3 7a00 	vldr	s15, [r3]
 801804e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8018098 <_ZN6Screen11updateMeterEv+0x5c>
 8018052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    // canvas.setCursor(switchX, switchY);
    // canvas.setTextColor(TEXT_COLOR);
    // canvas.print(switchBuffer);
    // strcpy(lastSwitchBuffer, switchBuffer);

    canvas.setCursor(switchX, switchY);
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018068:	b219      	sxth	r1, r3
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018070:	b21b      	sxth	r3, r3
 8018072:	461a      	mov	r2, r3
 8018074:	f7e9 f9e5 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
    if (Switch::state)
 8018078:	4b08      	ldr	r3, [pc, #32]	@ (801809c <_ZN6Screen11updateMeterEv+0x60>)
 801807a:	781b      	ldrb	r3, [r3, #0]
 801807c:	2b00      	cmp	r3, #0
 801807e:	d011      	beq.n	80180a4 <_ZN6Screen11updateMeterEv+0x68>
    {
        snprintf(switchBuffer, sizeof(switchBuffer), "HIGH\r\n");
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	f203 2349 	addw	r3, r3, #585	@ 0x249
 8018086:	4a06      	ldr	r2, [pc, #24]	@ (80180a0 <_ZN6Screen11updateMeterEv+0x64>)
 8018088:	2120      	movs	r1, #32
 801808a:	4618      	mov	r0, r3
 801808c:	f002 fc06 	bl	801a89c <sniprintf>
 8018090:	e010      	b.n	80180b4 <_ZN6Screen11updateMeterEv+0x78>
 8018092:	bf00      	nop
 8018094:	2000035c 	.word	0x2000035c
 8018098:	42b40000 	.word	0x42b40000
 801809c:	2000035a 	.word	0x2000035a
 80180a0:	0801cca4 	.word	0x0801cca4
    }
    else
    {
        snprintf(switchBuffer, sizeof(switchBuffer), "LOW\r\n");
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	f203 2349 	addw	r3, r3, #585	@ 0x249
 80180aa:	4abf      	ldr	r2, [pc, #764]	@ (80183a8 <_ZN6Screen11updateMeterEv+0x36c>)
 80180ac:	2120      	movs	r1, #32
 80180ae:	4618      	mov	r0, r3
 80180b0:	f002 fbf4 	bl	801a89c <sniprintf>
    }

    // only if state changes
    if (strcmp(switchBuffer, lastSwitchBuffer) != 0)
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	f203 2249 	addw	r2, r3, #585	@ 0x249
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	f203 2369 	addw	r3, r3, #617	@ 0x269
 80180c0:	4619      	mov	r1, r3
 80180c2:	4610      	mov	r0, r2
 80180c4:	f7e8 f85c 	bl	8000180 <strcmp>
 80180c8:	4603      	mov	r3, r0
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d057      	beq.n	801817e <_ZN6Screen11updateMeterEv+0x142>
    {

        int16_t x1, y1;
        uint16_t w, h;
        canvas.getTextBounds(lastSwitchBuffer, switchX, switchY, &x1, &y1, &w, &h); // calculate area to erase
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	f203 2169 	addw	r1, r3, #617	@ 0x269
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80180e0:	b21a      	sxth	r2, r3
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80180e8:	b21c      	sxth	r4, r3
 80180ea:	f107 0308 	add.w	r3, r7, #8
 80180ee:	9303      	str	r3, [sp, #12]
 80180f0:	f107 030a 	add.w	r3, r7, #10
 80180f4:	9302      	str	r3, [sp, #8]
 80180f6:	f107 030c 	add.w	r3, r7, #12
 80180fa:	9301      	str	r3, [sp, #4]
 80180fc:	f107 030e 	add.w	r3, r7, #14
 8018100:	9300      	str	r3, [sp, #0]
 8018102:	4623      	mov	r3, r4
 8018104:	f7ea fc8b 	bl	8002a1e <_ZN12Adafruit_GFX13getTextBoundsEPKcssPsS2_PtS3_>
        canvas.fillRect(x1, y1, w, h, BACKGROUND_COLOR);                            // erase
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801810e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8018112:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8018116:	897b      	ldrh	r3, [r7, #10]
 8018118:	b21c      	sxth	r4, r3
 801811a:	893b      	ldrh	r3, [r7, #8]
 801811c:	b21b      	sxth	r3, r3
 801811e:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 8018122:	9501      	str	r5, [sp, #4]
 8018124:	9300      	str	r3, [sp, #0]
 8018126:	4623      	mov	r3, r4
 8018128:	f7e9 fbe2 	bl	80018f0 <_ZN12Adafruit_GFX8fillRectEsssst>

        canvas.setCursor(switchX, switchY); // draw new text
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8018138:	b219      	sxth	r1, r3
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8018140:	b21b      	sxth	r3, r3
 8018142:	461a      	mov	r2, r3
 8018144:	f7e9 f97d 	bl	8001442 <_ZN12Adafruit_GFX9setCursorEss>
        canvas.setTextColor(TEXT_COLOR);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	336c      	adds	r3, #108	@ 0x6c
 801814c:	f24a 3129 	movw	r1, #41769	@ 0xa329
 8018150:	4618      	mov	r0, r3
 8018152:	f7e9 f98a 	bl	800146a <_ZN12Adafruit_GFX12setTextColorEt>
        canvas.print(switchBuffer);
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	f203 2349 	addw	r3, r3, #585	@ 0x249
 8018162:	4619      	mov	r1, r3
 8018164:	4610      	mov	r0, r2
 8018166:	f7eb f8ec 	bl	8003342 <_ZN5Print5printEPKc>
        strcpy(lastSwitchBuffer, switchBuffer); // update buffer
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	f203 2269 	addw	r2, r3, #617	@ 0x269
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f203 2349 	addw	r3, r3, #585	@ 0x249
 8018176:	4619      	mov	r1, r3
 8018178:	4610      	mov	r0, r2
 801817a:	f002 fd04 	bl	801ab86 <strcpy>
    }

    // are switchbuffer, lastswitchbuffer, text position, and uint16_t passed in??

    if (needleAngle > -45)
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 8018184:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80183ac <_ZN6Screen11updateMeterEv+0x370>
 8018188:	eef4 7ac7 	vcmpe.f32	s15, s14
 801818c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018190:	dd03      	ble.n	801819a <_ZN6Screen11updateMeterEv+0x15e>
    {
        needleAngle = -45;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	4a86      	ldr	r2, [pc, #536]	@ (80183b0 <_ZN6Screen11updateMeterEv+0x374>)
 8018196:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    }

    if (needleAngle < -135)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 80181a0:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 80183b4 <_ZN6Screen11updateMeterEv+0x378>
 80181a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80181a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181ac:	d503      	bpl.n	80181b6 <_ZN6Screen11updateMeterEv+0x17a>
    {
        needleAngle = -135;
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	4a81      	ldr	r2, [pc, #516]	@ (80183b8 <_ZN6Screen11updateMeterEv+0x37c>)
 80181b2:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    //       needleAngle = needleAngle - 1.0; // decrease by 1 deg
    //   }

    // 90 / 2 is degs per point
    // Convert angle to radians
    needleRad = radians(needleAngle);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
 80181bc:	eeb0 0a67 	vmov.f32	s0, s15
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f7ff ff0d 	bl	8017fe0 <_ZN6Screen7radiansEf>
 80181c6:	eef0 7a40 	vmov.f32	s15, s0
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	edc3 7a4d 	vstr	s15, [r3, #308]	@ 0x134
    // Serial.println(needleAngle);

    // Calculate the endpoint of the line (on the circle's perimeter)
    needleX1 = float(meterOriginX) + (float(meterHeight) - 80) * std::cos(needleRad);
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80181d6:	ee07 3a90 	vmov	s15, r3
 80181da:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80181e4:	ee07 3a90 	vmov	s15, r3
 80181e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181ec:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80183bc <_ZN6Screen11updateMeterEv+0x380>
 80181f0:	ee77 8ac7 	vsub.f32	s17, s15, s14
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80181fa:	eeb0 0a67 	vmov.f32	s0, s15
 80181fe:	f7fe ff8b 	bl	8017118 <_ZSt3cosf>
 8018202:	eef0 7a40 	vmov.f32	s15, s0
 8018206:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801820a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801820e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018212:	ee17 2a90 	vmov	r2, s15
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    needleY1 = float(meterOriginY) + (float(meterHeight) - 80) * std::sin(needleRad);
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8018222:	ee07 3a90 	vmov	s15, r3
 8018226:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8018230:	ee07 3a90 	vmov	s15, r3
 8018234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018238:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80183bc <_ZN6Screen11updateMeterEv+0x380>
 801823c:	ee77 8ac7 	vsub.f32	s17, s15, s14
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8018246:	eeb0 0a67 	vmov.f32	s0, s15
 801824a:	f7fe ff75 	bl	8017138 <_ZSt3sinf>
 801824e:	eef0 7a40 	vmov.f32	s15, s0
 8018252:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018256:	ee78 7a27 	vadd.f32	s15, s16, s15
 801825a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801825e:	ee17 2a90 	vmov	r2, s15
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
    // Serial.println(needleX1);
    // Serial.println(needleY1);
    //  Calculate the endpoint of the line (on the circle's perimeter)
    needleX2 = float(meterOriginX) + (float(meterHeight) - 170) * std::cos(needleRad);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801826e:	ee07 3a90 	vmov	s15, r3
 8018272:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 801827c:	ee07 3a90 	vmov	s15, r3
 8018280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018284:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80183c0 <_ZN6Screen11updateMeterEv+0x384>
 8018288:	ee77 8ac7 	vsub.f32	s17, s15, s14
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 8018292:	eeb0 0a67 	vmov.f32	s0, s15
 8018296:	f7fe ff3f 	bl	8017118 <_ZSt3cosf>
 801829a:	eef0 7a40 	vmov.f32	s15, s0
 801829e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80182a2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80182a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182aa:	ee17 2a90 	vmov	r2, s15
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    needleY2 = float(meterOriginY) + (float(meterHeight) - 170) * std::sin(needleRad);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80182ba:	ee07 3a90 	vmov	s15, r3
 80182be:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80182c8:	ee07 3a90 	vmov	s15, r3
 80182cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80182d0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80183c0 <_ZN6Screen11updateMeterEv+0x384>
 80182d4:	ee77 8ac7 	vsub.f32	s17, s15, s14
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80182de:	eeb0 0a67 	vmov.f32	s0, s15
 80182e2:	f7fe ff29 	bl	8017138 <_ZSt3sinf>
 80182e6:	eef0 7a40 	vmov.f32	s15, s0
 80182ea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80182ee:	ee78 7a27 	vadd.f32	s15, s16, s15
 80182f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80182f6:	ee17 2a90 	vmov	r2, s15
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

    canvas.drawLine(lastNeedleX1, lastNeedleY1, lastNeedleX2, lastNeedleY2, BACKGROUND_COLOR);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801830c:	b219      	sxth	r1, r3
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8018314:	b21a      	sxth	r2, r3
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801831c:	b21c      	sxth	r4, r3
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8018324:	b21b      	sxth	r3, r3
 8018326:	f64d 45ff 	movw	r5, #56575	@ 0xdcff
 801832a:	9501      	str	r5, [sp, #4]
 801832c:	9300      	str	r3, [sp, #0]
 801832e:	4623      	mov	r3, r4
 8018330:	f7e9 fb38 	bl	80019a4 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    // Draw a normal line
    canvas.drawLine(needleX1, needleY1, needleX2, needleY2, ST7789V_BLACK);
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8018340:	b219      	sxth	r1, r3
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8018348:	b21a      	sxth	r2, r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8018350:	b21c      	sxth	r4, r3
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8018358:	b21b      	sxth	r3, r3
 801835a:	2500      	movs	r5, #0
 801835c:	9501      	str	r5, [sp, #4]
 801835e:	9300      	str	r3, [sp, #0]
 8018360:	4623      	mov	r3, r4
 8018362:	f7e9 fb1f 	bl	80019a4 <_ZN12Adafruit_GFX8drawLineEsssst>
    // writeNeedleFromCanvas(x0, y0, x1, y1, color);

    lastNeedleX1 = needleX1;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
    lastNeedleX2 = needleX2;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    lastNeedleY1 = needleY1;
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    lastNeedleY2 = needleY2;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    // renderDelay = 15; // about a 60hz refresh rate
    writeCanvas();
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f7ff fe0b 	bl	8017fb2 <_ZN6Screen11writeCanvasEv>
    //     ledcWrite(backlightChannel, 0);
    //     esp_sleep_enable_timer_wakeup(1000000);
    //     esp_light_sleep_start();
    //     fadeIn();
    // }
} // update meter f(x)
 801839c:	bf00      	nop
 801839e:	3710      	adds	r7, #16
 80183a0:	46bd      	mov	sp, r7
 80183a2:	ecbd 8b02 	vpop	{d8}
 80183a6:	bdb0      	pop	{r4, r5, r7, pc}
 80183a8:	0801ccac 	.word	0x0801ccac
 80183ac:	c2340000 	.word	0xc2340000
 80183b0:	c2340000 	.word	0xc2340000
 80183b4:	c3070000 	.word	0xc3070000
 80183b8:	c3070000 	.word	0xc3070000
 80183bc:	42a00000 	.word	0x42a00000
 80183c0:	432a0000 	.word	0x432a0000

080183c4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &DFU_Desc, DEVICE_FS) != USBD_OK) {
 80183c8:	2200      	movs	r2, #0
 80183ca:	4912      	ldr	r1, [pc, #72]	@ (8018414 <MX_USB_Device_Init+0x50>)
 80183cc:	4812      	ldr	r0, [pc, #72]	@ (8018418 <MX_USB_Device_Init+0x54>)
 80183ce:	f7fa fa9d 	bl	801290c <USBD_Init>
 80183d2:	4603      	mov	r3, r0
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d001      	beq.n	80183dc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80183d8:	f7ee fcbc 	bl	8006d54 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK) {
 80183dc:	490f      	ldr	r1, [pc, #60]	@ (801841c <MX_USB_Device_Init+0x58>)
 80183de:	480e      	ldr	r0, [pc, #56]	@ (8018418 <MX_USB_Device_Init+0x54>)
 80183e0:	f7fa fac4 	bl	801296c <USBD_RegisterClass>
 80183e4:	4603      	mov	r3, r0
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d001      	beq.n	80183ee <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80183ea:	f7ee fcb3 	bl	8006d54 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_Flash_fops) != USBD_OK) {
 80183ee:	490c      	ldr	r1, [pc, #48]	@ (8018420 <MX_USB_Device_Init+0x5c>)
 80183f0:	4809      	ldr	r0, [pc, #36]	@ (8018418 <MX_USB_Device_Init+0x54>)
 80183f2:	f7f9 fe5b 	bl	80120ac <USBD_DFU_RegisterMedia>
 80183f6:	4603      	mov	r3, r0
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d001      	beq.n	8018400 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80183fc:	f7ee fcaa 	bl	8006d54 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018400:	4805      	ldr	r0, [pc, #20]	@ (8018418 <MX_USB_Device_Init+0x54>)
 8018402:	f7fa fae9 	bl	80129d8 <USBD_Start>
 8018406:	4603      	mov	r3, r0
 8018408:	2b00      	cmp	r3, #0
 801840a:	d001      	beq.n	8018410 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801840c:	f7ee fca2 	bl	8006d54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018410:	bf00      	nop
 8018412:	bd80      	pop	{r7, pc}
 8018414:	200000ac 	.word	0x200000ac
 8018418:	20000d44 	.word	0x20000d44
 801841c:	20000030 	.word	0x20000030
 8018420:	20000100 	.word	0x20000100

08018424 <USBD_DFU_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018424:	b480      	push	{r7}
 8018426:	b083      	sub	sp, #12
 8018428:	af00      	add	r7, sp, #0
 801842a:	4603      	mov	r3, r0
 801842c:	6039      	str	r1, [r7, #0]
 801842e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DFU_DeviceDesc);
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	2212      	movs	r2, #18
 8018434:	801a      	strh	r2, [r3, #0]
  return USBD_DFU_DeviceDesc;
 8018436:	4b03      	ldr	r3, [pc, #12]	@ (8018444 <USBD_DFU_DeviceDescriptor+0x20>)
}
 8018438:	4618      	mov	r0, r3
 801843a:	370c      	adds	r7, #12
 801843c:	46bd      	mov	sp, r7
 801843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018442:	4770      	bx	lr
 8018444:	200000cc 	.word	0x200000cc

08018448 <USBD_DFU_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018448:	b480      	push	{r7}
 801844a:	b083      	sub	sp, #12
 801844c:	af00      	add	r7, sp, #0
 801844e:	4603      	mov	r3, r0
 8018450:	6039      	str	r1, [r7, #0]
 8018452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	2204      	movs	r2, #4
 8018458:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801845a:	4b03      	ldr	r3, [pc, #12]	@ (8018468 <USBD_DFU_LangIDStrDescriptor+0x20>)
}
 801845c:	4618      	mov	r0, r3
 801845e:	370c      	adds	r7, #12
 8018460:	46bd      	mov	sp, r7
 8018462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018466:	4770      	bx	lr
 8018468:	200000e0 	.word	0x200000e0

0801846c <USBD_DFU_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b082      	sub	sp, #8
 8018470:	af00      	add	r7, sp, #0
 8018472:	4603      	mov	r3, r0
 8018474:	6039      	str	r1, [r7, #0]
 8018476:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018478:	79fb      	ldrb	r3, [r7, #7]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d105      	bne.n	801848a <USBD_DFU_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801847e:	683a      	ldr	r2, [r7, #0]
 8018480:	4907      	ldr	r1, [pc, #28]	@ (80184a0 <USBD_DFU_ProductStrDescriptor+0x34>)
 8018482:	4808      	ldr	r0, [pc, #32]	@ (80184a4 <USBD_DFU_ProductStrDescriptor+0x38>)
 8018484:	f7fb fbfa 	bl	8013c7c <USBD_GetString>
 8018488:	e004      	b.n	8018494 <USBD_DFU_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801848a:	683a      	ldr	r2, [r7, #0]
 801848c:	4904      	ldr	r1, [pc, #16]	@ (80184a0 <USBD_DFU_ProductStrDescriptor+0x34>)
 801848e:	4805      	ldr	r0, [pc, #20]	@ (80184a4 <USBD_DFU_ProductStrDescriptor+0x38>)
 8018490:	f7fb fbf4 	bl	8013c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018494:	4b02      	ldr	r3, [pc, #8]	@ (80184a0 <USBD_DFU_ProductStrDescriptor+0x34>)
}
 8018496:	4618      	mov	r0, r3
 8018498:	3708      	adds	r7, #8
 801849a:	46bd      	mov	sp, r7
 801849c:	bd80      	pop	{r7, pc}
 801849e:	bf00      	nop
 80184a0:	20001020 	.word	0x20001020
 80184a4:	0801ccb4 	.word	0x0801ccb4

080184a8 <USBD_DFU_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b082      	sub	sp, #8
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	4603      	mov	r3, r0
 80184b0:	6039      	str	r1, [r7, #0]
 80184b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80184b4:	683a      	ldr	r2, [r7, #0]
 80184b6:	4904      	ldr	r1, [pc, #16]	@ (80184c8 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
 80184b8:	4804      	ldr	r0, [pc, #16]	@ (80184cc <USBD_DFU_ManufacturerStrDescriptor+0x24>)
 80184ba:	f7fb fbdf 	bl	8013c7c <USBD_GetString>
  return USBD_StrDesc;
 80184be:	4b02      	ldr	r3, [pc, #8]	@ (80184c8 <USBD_DFU_ManufacturerStrDescriptor+0x20>)
}
 80184c0:	4618      	mov	r0, r3
 80184c2:	3708      	adds	r7, #8
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	20001020 	.word	0x20001020
 80184cc:	0801ccd4 	.word	0x0801ccd4

080184d0 <USBD_DFU_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b082      	sub	sp, #8
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	4603      	mov	r3, r0
 80184d8:	6039      	str	r1, [r7, #0]
 80184da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	221a      	movs	r2, #26
 80184e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80184e2:	f000 f843 	bl	801856c <Get_SerialNum>

  /* USER CODE BEGIN USBD_DFU_SerialStrDescriptor */

  /* USER CODE END USBD_DFU_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80184e6:	4b02      	ldr	r3, [pc, #8]	@ (80184f0 <USBD_DFU_SerialStrDescriptor+0x20>)
}
 80184e8:	4618      	mov	r0, r3
 80184ea:	3708      	adds	r7, #8
 80184ec:	46bd      	mov	sp, r7
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	200000e4 	.word	0x200000e4

080184f4 <USBD_DFU_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b082      	sub	sp, #8
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	4603      	mov	r3, r0
 80184fc:	6039      	str	r1, [r7, #0]
 80184fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018500:	79fb      	ldrb	r3, [r7, #7]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d105      	bne.n	8018512 <USBD_DFU_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018506:	683a      	ldr	r2, [r7, #0]
 8018508:	4907      	ldr	r1, [pc, #28]	@ (8018528 <USBD_DFU_ConfigStrDescriptor+0x34>)
 801850a:	4808      	ldr	r0, [pc, #32]	@ (801852c <USBD_DFU_ConfigStrDescriptor+0x38>)
 801850c:	f7fb fbb6 	bl	8013c7c <USBD_GetString>
 8018510:	e004      	b.n	801851c <USBD_DFU_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018512:	683a      	ldr	r2, [r7, #0]
 8018514:	4904      	ldr	r1, [pc, #16]	@ (8018528 <USBD_DFU_ConfigStrDescriptor+0x34>)
 8018516:	4805      	ldr	r0, [pc, #20]	@ (801852c <USBD_DFU_ConfigStrDescriptor+0x38>)
 8018518:	f7fb fbb0 	bl	8013c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 801851c:	4b02      	ldr	r3, [pc, #8]	@ (8018528 <USBD_DFU_ConfigStrDescriptor+0x34>)
}
 801851e:	4618      	mov	r0, r3
 8018520:	3708      	adds	r7, #8
 8018522:	46bd      	mov	sp, r7
 8018524:	bd80      	pop	{r7, pc}
 8018526:	bf00      	nop
 8018528:	20001020 	.word	0x20001020
 801852c:	0801cce8 	.word	0x0801cce8

08018530 <USBD_DFU_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DFU_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	4603      	mov	r3, r0
 8018538:	6039      	str	r1, [r7, #0]
 801853a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801853c:	79fb      	ldrb	r3, [r7, #7]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d105      	bne.n	801854e <USBD_DFU_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018542:	683a      	ldr	r2, [r7, #0]
 8018544:	4907      	ldr	r1, [pc, #28]	@ (8018564 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8018546:	4808      	ldr	r0, [pc, #32]	@ (8018568 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8018548:	f7fb fb98 	bl	8013c7c <USBD_GetString>
 801854c:	e004      	b.n	8018558 <USBD_DFU_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801854e:	683a      	ldr	r2, [r7, #0]
 8018550:	4904      	ldr	r1, [pc, #16]	@ (8018564 <USBD_DFU_InterfaceStrDescriptor+0x34>)
 8018552:	4805      	ldr	r0, [pc, #20]	@ (8018568 <USBD_DFU_InterfaceStrDescriptor+0x38>)
 8018554:	f7fb fb92 	bl	8013c7c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018558:	4b02      	ldr	r3, [pc, #8]	@ (8018564 <USBD_DFU_InterfaceStrDescriptor+0x34>)
}
 801855a:	4618      	mov	r0, r3
 801855c:	3708      	adds	r7, #8
 801855e:	46bd      	mov	sp, r7
 8018560:	bd80      	pop	{r7, pc}
 8018562:	bf00      	nop
 8018564:	20001020 	.word	0x20001020
 8018568:	0801ccf4 	.word	0x0801ccf4

0801856c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018572:	4b0f      	ldr	r3, [pc, #60]	@ (80185b0 <Get_SerialNum+0x44>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018578:	4b0e      	ldr	r3, [pc, #56]	@ (80185b4 <Get_SerialNum+0x48>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801857e:	4b0e      	ldr	r3, [pc, #56]	@ (80185b8 <Get_SerialNum+0x4c>)
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018584:	68fa      	ldr	r2, [r7, #12]
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	4413      	add	r3, r2
 801858a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d009      	beq.n	80185a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018592:	2208      	movs	r2, #8
 8018594:	4909      	ldr	r1, [pc, #36]	@ (80185bc <Get_SerialNum+0x50>)
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f000 f814 	bl	80185c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801859c:	2204      	movs	r2, #4
 801859e:	4908      	ldr	r1, [pc, #32]	@ (80185c0 <Get_SerialNum+0x54>)
 80185a0:	68b8      	ldr	r0, [r7, #8]
 80185a2:	f000 f80f 	bl	80185c4 <IntToUnicode>
  }
}
 80185a6:	bf00      	nop
 80185a8:	3710      	adds	r7, #16
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}
 80185ae:	bf00      	nop
 80185b0:	1fff7590 	.word	0x1fff7590
 80185b4:	1fff7594 	.word	0x1fff7594
 80185b8:	1fff7598 	.word	0x1fff7598
 80185bc:	200000e6 	.word	0x200000e6
 80185c0:	200000f6 	.word	0x200000f6

080185c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80185c4:	b480      	push	{r7}
 80185c6:	b087      	sub	sp, #28
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	60f8      	str	r0, [r7, #12]
 80185cc:	60b9      	str	r1, [r7, #8]
 80185ce:	4613      	mov	r3, r2
 80185d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80185d2:	2300      	movs	r3, #0
 80185d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80185d6:	2300      	movs	r3, #0
 80185d8:	75fb      	strb	r3, [r7, #23]
 80185da:	e027      	b.n	801862c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	0f1b      	lsrs	r3, r3, #28
 80185e0:	2b09      	cmp	r3, #9
 80185e2:	d80b      	bhi.n	80185fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	0f1b      	lsrs	r3, r3, #28
 80185e8:	b2da      	uxtb	r2, r3
 80185ea:	7dfb      	ldrb	r3, [r7, #23]
 80185ec:	005b      	lsls	r3, r3, #1
 80185ee:	4619      	mov	r1, r3
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	440b      	add	r3, r1
 80185f4:	3230      	adds	r2, #48	@ 0x30
 80185f6:	b2d2      	uxtb	r2, r2
 80185f8:	701a      	strb	r2, [r3, #0]
 80185fa:	e00a      	b.n	8018612 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	0f1b      	lsrs	r3, r3, #28
 8018600:	b2da      	uxtb	r2, r3
 8018602:	7dfb      	ldrb	r3, [r7, #23]
 8018604:	005b      	lsls	r3, r3, #1
 8018606:	4619      	mov	r1, r3
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	440b      	add	r3, r1
 801860c:	3237      	adds	r2, #55	@ 0x37
 801860e:	b2d2      	uxtb	r2, r2
 8018610:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	011b      	lsls	r3, r3, #4
 8018616:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018618:	7dfb      	ldrb	r3, [r7, #23]
 801861a:	005b      	lsls	r3, r3, #1
 801861c:	3301      	adds	r3, #1
 801861e:	68ba      	ldr	r2, [r7, #8]
 8018620:	4413      	add	r3, r2
 8018622:	2200      	movs	r2, #0
 8018624:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018626:	7dfb      	ldrb	r3, [r7, #23]
 8018628:	3301      	adds	r3, #1
 801862a:	75fb      	strb	r3, [r7, #23]
 801862c:	7dfa      	ldrb	r2, [r7, #23]
 801862e:	79fb      	ldrb	r3, [r7, #7]
 8018630:	429a      	cmp	r2, r3
 8018632:	d3d3      	bcc.n	80185dc <IntToUnicode+0x18>
  }
}
 8018634:	bf00      	nop
 8018636:	bf00      	nop
 8018638:	371c      	adds	r7, #28
 801863a:	46bd      	mov	sp, r7
 801863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018640:	4770      	bx	lr

08018642 <FLASH_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Init(void)
{
 8018642:	b480      	push	{r7}
 8018644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8018646:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8018648:	4618      	mov	r0, r3
 801864a:	46bd      	mov	sp, r7
 801864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018650:	4770      	bx	lr

08018652 <FLASH_If_DeInit>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t FLASH_If_DeInit(void)
{
 8018652:	b480      	push	{r7}
 8018654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8018656:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8018658:	4618      	mov	r0, r3
 801865a:	46bd      	mov	sp, r7
 801865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018660:	4770      	bx	lr

08018662 <FLASH_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Erase(uint32_t Add)
{
 8018662:	b480      	push	{r7}
 8018664:	b083      	sub	sp, #12
 8018666:	af00      	add	r7, sp, #0
 8018668:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 801866a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801866c:	4618      	mov	r0, r3
 801866e:	370c      	adds	r7, #12
 8018670:	46bd      	mov	sp, r7
 8018672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018676:	4770      	bx	lr

08018678 <FLASH_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t FLASH_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018678:	b480      	push	{r7}
 801867a:	b085      	sub	sp, #20
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8018684:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018686:	4618      	mov	r0, r3
 8018688:	3714      	adds	r7, #20
 801868a:	46bd      	mov	sp, r7
 801868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018690:	4770      	bx	lr

08018692 <FLASH_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *FLASH_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8018692:	b480      	push	{r7}
 8018694:	b085      	sub	sp, #20
 8018696:	af00      	add	r7, sp, #0
 8018698:	60f8      	str	r0, [r7, #12]
 801869a:	60b9      	str	r1, [r7, #8]
 801869c:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(FLASH_BASE);
 801869e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  /* USER CODE END 4 */
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3714      	adds	r7, #20
 80186a6:	46bd      	mov	sp, r7
 80186a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ac:	4770      	bx	lr

080186ae <FLASH_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t FLASH_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80186ae:	b480      	push	{r7}
 80186b0:	b085      	sub	sp, #20
 80186b2:	af00      	add	r7, sp, #0
 80186b4:	60f8      	str	r0, [r7, #12]
 80186b6:	460b      	mov	r3, r1
 80186b8:	607a      	str	r2, [r7, #4]
 80186ba:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80186bc:	7afb      	ldrb	r3, [r7, #11]
 80186be:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80186c0:	bf00      	nop
  }
  return (USBD_OK);
 80186c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80186c4:	4618      	mov	r0, r3
 80186c6:	3714      	adds	r7, #20
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <LL_AHB2_GRP1_EnableClock>:
{
 80186d0:	b480      	push	{r7}
 80186d2:	b085      	sub	sp, #20
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80186d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80186dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80186de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	4313      	orrs	r3, r2
 80186e6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80186e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80186ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	4013      	ands	r3, r2
 80186f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80186f4:	68fb      	ldr	r3, [r7, #12]
}
 80186f6:	bf00      	nop
 80186f8:	3714      	adds	r7, #20
 80186fa:	46bd      	mov	sp, r7
 80186fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018700:	4770      	bx	lr

08018702 <LL_APB1_GRP1_EnableClock>:
{
 8018702:	b480      	push	{r7}
 8018704:	b085      	sub	sp, #20
 8018706:	af00      	add	r7, sp, #0
 8018708:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801870a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801870e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	4313      	orrs	r3, r2
 8018718:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801871a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801871e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	4013      	ands	r3, r2
 8018724:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018726:	68fb      	ldr	r3, [r7, #12]
}
 8018728:	bf00      	nop
 801872a:	3714      	adds	r7, #20
 801872c:	46bd      	mov	sp, r7
 801872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018732:	4770      	bx	lr

08018734 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b09c      	sub	sp, #112	@ 0x70
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801873c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8018740:	2200      	movs	r2, #0
 8018742:	601a      	str	r2, [r3, #0]
 8018744:	605a      	str	r2, [r3, #4]
 8018746:	609a      	str	r2, [r3, #8]
 8018748:	60da      	str	r2, [r3, #12]
 801874a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801874c:	f107 030c 	add.w	r3, r7, #12
 8018750:	2250      	movs	r2, #80	@ 0x50
 8018752:	2100      	movs	r1, #0
 8018754:	4618      	mov	r0, r3
 8018756:	f002 f934 	bl	801a9c2 <memset>
  if(pcdHandle->Instance==USB)
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	4a23      	ldr	r2, [pc, #140]	@ (80187ec <HAL_PCD_MspInit+0xb8>)
 8018760:	4293      	cmp	r3, r2
 8018762:	d13e      	bne.n	80187e2 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8018764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018768:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 801876a:	2318      	movs	r3, #24
 801876c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 801876e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8018772:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8018774:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8018778:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 801877a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 801877e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8018780:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018784:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8018786:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 801878a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801878c:	f107 030c 	add.w	r3, r7, #12
 8018790:	4618      	mov	r0, r3
 8018792:	f7f4 f91b 	bl	800c9cc <HAL_RCCEx_PeriphCLKConfig>
 8018796:	4603      	mov	r3, r0
 8018798:	2b00      	cmp	r3, #0
 801879a:	d001      	beq.n	80187a0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 801879c:	f7ee fada 	bl	8006d54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80187a0:	2001      	movs	r0, #1
 80187a2:	f7ff ff95 	bl	80186d0 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80187a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80187aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187ac:	2302      	movs	r3, #2
 80187ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187b0:	2300      	movs	r3, #0
 80187b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80187b4:	2300      	movs	r3, #0
 80187b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80187b8:	230a      	movs	r3, #10
 80187ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80187c0:	4619      	mov	r1, r3
 80187c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80187c6:	f7ef fdd1 	bl	800836c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80187ca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80187ce:	f7ff ff98 	bl	8018702 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80187d2:	2200      	movs	r2, #0
 80187d4:	2100      	movs	r1, #0
 80187d6:	2014      	movs	r0, #20
 80187d8:	f7ef fa95 	bl	8007d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80187dc:	2014      	movs	r0, #20
 80187de:	f7ef faac 	bl	8007d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80187e2:	bf00      	nop
 80187e4:	3770      	adds	r7, #112	@ 0x70
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	40006800 	.word	0x40006800

080187f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018804:	4619      	mov	r1, r3
 8018806:	4610      	mov	r0, r2
 8018808:	f7fa f94e 	bl	8012aa8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 801880c:	bf00      	nop
 801880e:	3708      	adds	r7, #8
 8018810:	46bd      	mov	sp, r7
 8018812:	bd80      	pop	{r7, pc}

08018814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
 801881c:	460b      	mov	r3, r1
 801881e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018826:	78fa      	ldrb	r2, [r7, #3]
 8018828:	6879      	ldr	r1, [r7, #4]
 801882a:	4613      	mov	r3, r2
 801882c:	009b      	lsls	r3, r3, #2
 801882e:	4413      	add	r3, r2
 8018830:	00db      	lsls	r3, r3, #3
 8018832:	440b      	add	r3, r1
 8018834:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018838:	681a      	ldr	r2, [r3, #0]
 801883a:	78fb      	ldrb	r3, [r7, #3]
 801883c:	4619      	mov	r1, r3
 801883e:	f7fa f988 	bl	8012b52 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018842:	bf00      	nop
 8018844:	3708      	adds	r7, #8
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}

0801884a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801884a:	b580      	push	{r7, lr}
 801884c:	b082      	sub	sp, #8
 801884e:	af00      	add	r7, sp, #0
 8018850:	6078      	str	r0, [r7, #4]
 8018852:	460b      	mov	r3, r1
 8018854:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801885c:	78fa      	ldrb	r2, [r7, #3]
 801885e:	6879      	ldr	r1, [r7, #4]
 8018860:	4613      	mov	r3, r2
 8018862:	009b      	lsls	r3, r3, #2
 8018864:	4413      	add	r3, r2
 8018866:	00db      	lsls	r3, r3, #3
 8018868:	440b      	add	r3, r1
 801886a:	3324      	adds	r3, #36	@ 0x24
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	78fb      	ldrb	r3, [r7, #3]
 8018870:	4619      	mov	r1, r3
 8018872:	f7fa fa21 	bl	8012cb8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018876:	bf00      	nop
 8018878:	3708      	adds	r7, #8
 801887a:	46bd      	mov	sp, r7
 801887c:	bd80      	pop	{r7, pc}

0801887e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801887e:	b580      	push	{r7, lr}
 8018880:	b082      	sub	sp, #8
 8018882:	af00      	add	r7, sp, #0
 8018884:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801888c:	4618      	mov	r0, r3
 801888e:	f7fa fb5b 	bl	8012f48 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018892:	bf00      	nop
 8018894:	3708      	adds	r7, #8
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b084      	sub	sp, #16
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80188a2:	2301      	movs	r3, #1
 80188a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	795b      	ldrb	r3, [r3, #5]
 80188aa:	2b02      	cmp	r3, #2
 80188ac:	d001      	beq.n	80188b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80188ae:	f7ee fa51 	bl	8006d54 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80188b2:	687b      	ldr	r3, [r7, #4]
 80188b4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80188b8:	7bfa      	ldrb	r2, [r7, #15]
 80188ba:	4611      	mov	r1, r2
 80188bc:	4618      	mov	r0, r3
 80188be:	f7fa faff 	bl	8012ec0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7fa faa7 	bl	8012e1c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80188ce:	bf00      	nop
 80188d0:	3710      	adds	r7, #16
 80188d2:	46bd      	mov	sp, r7
 80188d4:	bd80      	pop	{r7, pc}
	...

080188d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80188e6:	4618      	mov	r0, r3
 80188e8:	f7fa fafa 	bl	8012ee0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	7a5b      	ldrb	r3, [r3, #9]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d005      	beq.n	8018900 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80188f4:	4b04      	ldr	r3, [pc, #16]	@ (8018908 <HAL_PCD_SuspendCallback+0x30>)
 80188f6:	691b      	ldr	r3, [r3, #16]
 80188f8:	4a03      	ldr	r2, [pc, #12]	@ (8018908 <HAL_PCD_SuspendCallback+0x30>)
 80188fa:	f043 0306 	orr.w	r3, r3, #6
 80188fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018900:	bf00      	nop
 8018902:	3708      	adds	r7, #8
 8018904:	46bd      	mov	sp, r7
 8018906:	bd80      	pop	{r7, pc}
 8018908:	e000ed00 	.word	0xe000ed00

0801890c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	7a5b      	ldrb	r3, [r3, #9]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d007      	beq.n	801892c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801891c:	4b08      	ldr	r3, [pc, #32]	@ (8018940 <HAL_PCD_ResumeCallback+0x34>)
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	4a07      	ldr	r2, [pc, #28]	@ (8018940 <HAL_PCD_ResumeCallback+0x34>)
 8018922:	f023 0306 	bic.w	r3, r3, #6
 8018926:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018928:	f000 f9ca 	bl	8018cc0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018932:	4618      	mov	r0, r3
 8018934:	f7fa faf0 	bl	8012f18 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018938:	bf00      	nop
 801893a:	3708      	adds	r7, #8
 801893c:	46bd      	mov	sp, r7
 801893e:	bd80      	pop	{r7, pc}
 8018940:	e000ed00 	.word	0xe000ed00

08018944 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b082      	sub	sp, #8
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 801894c:	4a1f      	ldr	r2, [pc, #124]	@ (80189cc <USBD_LL_Init+0x88>)
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	4a1d      	ldr	r2, [pc, #116]	@ (80189cc <USBD_LL_Init+0x88>)
 8018958:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 801895c:	f7f2 fcf0 	bl	800b340 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018960:	4b1a      	ldr	r3, [pc, #104]	@ (80189cc <USBD_LL_Init+0x88>)
 8018962:	4a1b      	ldr	r2, [pc, #108]	@ (80189d0 <USBD_LL_Init+0x8c>)
 8018964:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018966:	4b19      	ldr	r3, [pc, #100]	@ (80189cc <USBD_LL_Init+0x88>)
 8018968:	2208      	movs	r2, #8
 801896a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801896c:	4b17      	ldr	r3, [pc, #92]	@ (80189cc <USBD_LL_Init+0x88>)
 801896e:	2202      	movs	r2, #2
 8018970:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018972:	4b16      	ldr	r3, [pc, #88]	@ (80189cc <USBD_LL_Init+0x88>)
 8018974:	2202      	movs	r2, #2
 8018976:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018978:	4b14      	ldr	r3, [pc, #80]	@ (80189cc <USBD_LL_Init+0x88>)
 801897a:	2200      	movs	r2, #0
 801897c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801897e:	4b13      	ldr	r3, [pc, #76]	@ (80189cc <USBD_LL_Init+0x88>)
 8018980:	2200      	movs	r2, #0
 8018982:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018984:	4b11      	ldr	r3, [pc, #68]	@ (80189cc <USBD_LL_Init+0x88>)
 8018986:	2200      	movs	r2, #0
 8018988:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801898a:	4b10      	ldr	r3, [pc, #64]	@ (80189cc <USBD_LL_Init+0x88>)
 801898c:	2200      	movs	r2, #0
 801898e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018990:	480e      	ldr	r0, [pc, #56]	@ (80189cc <USBD_LL_Init+0x88>)
 8018992:	f7f0 fff3 	bl	800997c <HAL_PCD_Init>
 8018996:	4603      	mov	r3, r0
 8018998:	2b00      	cmp	r3, #0
 801899a:	d001      	beq.n	80189a0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 801899c:	f7ee f9da 	bl	8006d54 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80189a6:	2318      	movs	r3, #24
 80189a8:	2200      	movs	r2, #0
 80189aa:	2100      	movs	r1, #0
 80189ac:	f7f2 fc3c 	bl	800b228 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80189b6:	2358      	movs	r3, #88	@ 0x58
 80189b8:	2200      	movs	r2, #0
 80189ba:	2180      	movs	r1, #128	@ 0x80
 80189bc:	f7f2 fc34 	bl	800b228 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80189c0:	2300      	movs	r3, #0
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	3708      	adds	r7, #8
 80189c6:	46bd      	mov	sp, r7
 80189c8:	bd80      	pop	{r7, pc}
 80189ca:	bf00      	nop
 80189cc:	20001220 	.word	0x20001220
 80189d0:	40006800 	.word	0x40006800

080189d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b084      	sub	sp, #16
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189dc:	2300      	movs	r3, #0
 80189de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189e0:	2300      	movs	r3, #0
 80189e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7f1 f894 	bl	8009b18 <HAL_PCD_Start>
 80189f0:	4603      	mov	r3, r0
 80189f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189f4:	7bfb      	ldrb	r3, [r7, #15]
 80189f6:	4618      	mov	r0, r3
 80189f8:	f000 f968 	bl	8018ccc <USBD_Get_USB_Status>
 80189fc:	4603      	mov	r3, r0
 80189fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a02:	4618      	mov	r0, r3
 8018a04:	3710      	adds	r7, #16
 8018a06:	46bd      	mov	sp, r7
 8018a08:	bd80      	pop	{r7, pc}

08018a0a <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8018a0a:	b580      	push	{r7, lr}
 8018a0c:	b084      	sub	sp, #16
 8018a0e:	af00      	add	r7, sp, #0
 8018a10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a12:	2300      	movs	r3, #0
 8018a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a16:	2300      	movs	r3, #0
 8018a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018a20:	4618      	mov	r0, r3
 8018a22:	f7f1 f89b 	bl	8009b5c <HAL_PCD_Stop>
 8018a26:	4603      	mov	r3, r0
 8018a28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a2a:	7bfb      	ldrb	r3, [r7, #15]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f000 f94d 	bl	8018ccc <USBD_Get_USB_Status>
 8018a32:	4603      	mov	r3, r0
 8018a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	3710      	adds	r7, #16
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}

08018a40 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018a40:	b580      	push	{r7, lr}
 8018a42:	b084      	sub	sp, #16
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	6078      	str	r0, [r7, #4]
 8018a48:	4608      	mov	r0, r1
 8018a4a:	4611      	mov	r1, r2
 8018a4c:	461a      	mov	r2, r3
 8018a4e:	4603      	mov	r3, r0
 8018a50:	70fb      	strb	r3, [r7, #3]
 8018a52:	460b      	mov	r3, r1
 8018a54:	70bb      	strb	r3, [r7, #2]
 8018a56:	4613      	mov	r3, r2
 8018a58:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018a68:	78bb      	ldrb	r3, [r7, #2]
 8018a6a:	883a      	ldrh	r2, [r7, #0]
 8018a6c:	78f9      	ldrb	r1, [r7, #3]
 8018a6e:	f7f1 f9e2 	bl	8009e36 <HAL_PCD_EP_Open>
 8018a72:	4603      	mov	r3, r0
 8018a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018a76:	7bfb      	ldrb	r3, [r7, #15]
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f000 f927 	bl	8018ccc <USBD_Get_USB_Status>
 8018a7e:	4603      	mov	r3, r0
 8018a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8018a84:	4618      	mov	r0, r3
 8018a86:	3710      	adds	r7, #16
 8018a88:	46bd      	mov	sp, r7
 8018a8a:	bd80      	pop	{r7, pc}

08018a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b084      	sub	sp, #16
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	6078      	str	r0, [r7, #4]
 8018a94:	460b      	mov	r3, r1
 8018a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018aa6:	78fa      	ldrb	r2, [r7, #3]
 8018aa8:	4611      	mov	r1, r2
 8018aaa:	4618      	mov	r0, r3
 8018aac:	f7f1 fa8a 	bl	8009fc4 <HAL_PCD_EP_SetStall>
 8018ab0:	4603      	mov	r3, r0
 8018ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ab4:	7bfb      	ldrb	r3, [r7, #15]
 8018ab6:	4618      	mov	r0, r3
 8018ab8:	f000 f908 	bl	8018ccc <USBD_Get_USB_Status>
 8018abc:	4603      	mov	r3, r0
 8018abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	3710      	adds	r7, #16
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}

08018aca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018aca:	b580      	push	{r7, lr}
 8018acc:	b084      	sub	sp, #16
 8018ace:	af00      	add	r7, sp, #0
 8018ad0:	6078      	str	r0, [r7, #4]
 8018ad2:	460b      	mov	r3, r1
 8018ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ada:	2300      	movs	r3, #0
 8018adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ae4:	78fa      	ldrb	r2, [r7, #3]
 8018ae6:	4611      	mov	r1, r2
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7f1 fabd 	bl	800a068 <HAL_PCD_EP_ClrStall>
 8018aee:	4603      	mov	r3, r0
 8018af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018af2:	7bfb      	ldrb	r3, [r7, #15]
 8018af4:	4618      	mov	r0, r3
 8018af6:	f000 f8e9 	bl	8018ccc <USBD_Get_USB_Status>
 8018afa:	4603      	mov	r3, r0
 8018afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3710      	adds	r7, #16
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b085      	sub	sp, #20
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	460b      	mov	r3, r1
 8018b12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018b1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	da0b      	bge.n	8018b3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018b24:	78fb      	ldrb	r3, [r7, #3]
 8018b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018b2a:	68f9      	ldr	r1, [r7, #12]
 8018b2c:	4613      	mov	r3, r2
 8018b2e:	009b      	lsls	r3, r3, #2
 8018b30:	4413      	add	r3, r2
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	440b      	add	r3, r1
 8018b36:	3312      	adds	r3, #18
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	e00b      	b.n	8018b54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018b3c:	78fb      	ldrb	r3, [r7, #3]
 8018b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018b42:	68f9      	ldr	r1, [r7, #12]
 8018b44:	4613      	mov	r3, r2
 8018b46:	009b      	lsls	r3, r3, #2
 8018b48:	4413      	add	r3, r2
 8018b4a:	00db      	lsls	r3, r3, #3
 8018b4c:	440b      	add	r3, r1
 8018b4e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018b52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3714      	adds	r7, #20
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr

08018b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b084      	sub	sp, #16
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	460b      	mov	r3, r1
 8018b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b70:	2300      	movs	r3, #0
 8018b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018b7a:	78fa      	ldrb	r2, [r7, #3]
 8018b7c:	4611      	mov	r1, r2
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7f1 f935 	bl	8009dee <HAL_PCD_SetAddress>
 8018b84:	4603      	mov	r3, r0
 8018b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018b88:	7bfb      	ldrb	r3, [r7, #15]
 8018b8a:	4618      	mov	r0, r3
 8018b8c:	f000 f89e 	bl	8018ccc <USBD_Get_USB_Status>
 8018b90:	4603      	mov	r3, r0
 8018b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3710      	adds	r7, #16
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018b9e:	b580      	push	{r7, lr}
 8018ba0:	b086      	sub	sp, #24
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	60f8      	str	r0, [r7, #12]
 8018ba6:	607a      	str	r2, [r7, #4]
 8018ba8:	603b      	str	r3, [r7, #0]
 8018baa:	460b      	mov	r3, r1
 8018bac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bbc:	7af9      	ldrb	r1, [r7, #11]
 8018bbe:	683b      	ldr	r3, [r7, #0]
 8018bc0:	687a      	ldr	r2, [r7, #4]
 8018bc2:	f7f1 f9c8 	bl	8009f56 <HAL_PCD_EP_Transmit>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018bca:	7dfb      	ldrb	r3, [r7, #23]
 8018bcc:	4618      	mov	r0, r3
 8018bce:	f000 f87d 	bl	8018ccc <USBD_Get_USB_Status>
 8018bd2:	4603      	mov	r3, r0
 8018bd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3718      	adds	r7, #24
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b086      	sub	sp, #24
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	60f8      	str	r0, [r7, #12]
 8018be8:	607a      	str	r2, [r7, #4]
 8018bea:	603b      	str	r3, [r7, #0]
 8018bec:	460b      	mov	r3, r1
 8018bee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018bfe:	7af9      	ldrb	r1, [r7, #11]
 8018c00:	683b      	ldr	r3, [r7, #0]
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	f7f1 f976 	bl	8009ef4 <HAL_PCD_EP_Receive>
 8018c08:	4603      	mov	r3, r0
 8018c0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018c0c:	7dfb      	ldrb	r3, [r7, #23]
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f000 f85c 	bl	8018ccc <USBD_Get_USB_Status>
 8018c14:	4603      	mov	r3, r0
 8018c16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018c18:	7dbb      	ldrb	r3, [r7, #22]
}
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3718      	adds	r7, #24
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
	...

08018c24 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b082      	sub	sp, #8
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
 8018c2c:	460b      	mov	r3, r1
 8018c2e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018c30:	78fb      	ldrb	r3, [r7, #3]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d002      	beq.n	8018c3c <HAL_PCDEx_LPM_Callback+0x18>
 8018c36:	2b01      	cmp	r3, #1
 8018c38:	d013      	beq.n	8018c62 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018c3a:	e023      	b.n	8018c84 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	7a5b      	ldrb	r3, [r3, #9]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d007      	beq.n	8018c54 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018c44:	f000 f83c 	bl	8018cc0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c48:	4b10      	ldr	r3, [pc, #64]	@ (8018c8c <HAL_PCDEx_LPM_Callback+0x68>)
 8018c4a:	691b      	ldr	r3, [r3, #16]
 8018c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8018c8c <HAL_PCDEx_LPM_Callback+0x68>)
 8018c4e:	f023 0306 	bic.w	r3, r3, #6
 8018c52:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	f7fa f95c 	bl	8012f18 <USBD_LL_Resume>
    break;
 8018c60:	e010      	b.n	8018c84 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f7fa f939 	bl	8012ee0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	7a5b      	ldrb	r3, [r3, #9]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d005      	beq.n	8018c82 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c76:	4b05      	ldr	r3, [pc, #20]	@ (8018c8c <HAL_PCDEx_LPM_Callback+0x68>)
 8018c78:	691b      	ldr	r3, [r3, #16]
 8018c7a:	4a04      	ldr	r2, [pc, #16]	@ (8018c8c <HAL_PCDEx_LPM_Callback+0x68>)
 8018c7c:	f043 0306 	orr.w	r3, r3, #6
 8018c80:	6113      	str	r3, [r2, #16]
    break;
 8018c82:	bf00      	nop
}
 8018c84:	bf00      	nop
 8018c86:	3708      	adds	r7, #8
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	bd80      	pop	{r7, pc}
 8018c8c:	e000ed00 	.word	0xe000ed00

08018c90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018c90:	b480      	push	{r7}
 8018c92:	b083      	sub	sp, #12
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018c98:	4b03      	ldr	r3, [pc, #12]	@ (8018ca8 <USBD_static_malloc+0x18>)
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	370c      	adds	r7, #12
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ca4:	4770      	bx	lr
 8018ca6:	bf00      	nop
 8018ca8:	200014fc 	.word	0x200014fc

08018cac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018cac:	b480      	push	{r7}
 8018cae:	b083      	sub	sp, #12
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8018cb4:	bf00      	nop
 8018cb6:	370c      	adds	r7, #12
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbe:	4770      	bx	lr

08018cc0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018cc4:	f7ed ff9a 	bl	8006bfc <SystemClock_Config>
}
 8018cc8:	bf00      	nop
 8018cca:	bd80      	pop	{r7, pc}

08018ccc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018ccc:	b480      	push	{r7}
 8018cce:	b085      	sub	sp, #20
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cd6:	2300      	movs	r3, #0
 8018cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018cda:	79fb      	ldrb	r3, [r7, #7]
 8018cdc:	2b03      	cmp	r3, #3
 8018cde:	d817      	bhi.n	8018d10 <USBD_Get_USB_Status+0x44>
 8018ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8018ce8 <USBD_Get_USB_Status+0x1c>)
 8018ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce6:	bf00      	nop
 8018ce8:	08018cf9 	.word	0x08018cf9
 8018cec:	08018cff 	.word	0x08018cff
 8018cf0:	08018d05 	.word	0x08018d05
 8018cf4:	08018d0b 	.word	0x08018d0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8018cfc:	e00b      	b.n	8018d16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018cfe:	2303      	movs	r3, #3
 8018d00:	73fb      	strb	r3, [r7, #15]
    break;
 8018d02:	e008      	b.n	8018d16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d04:	2301      	movs	r3, #1
 8018d06:	73fb      	strb	r3, [r7, #15]
    break;
 8018d08:	e005      	b.n	8018d16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d0a:	2303      	movs	r3, #3
 8018d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8018d0e:	e002      	b.n	8018d16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018d10:	2303      	movs	r3, #3
 8018d12:	73fb      	strb	r3, [r7, #15]
    break;
 8018d14:	bf00      	nop
  }
  return usb_status;
 8018d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3714      	adds	r7, #20
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d22:	4770      	bx	lr

08018d24 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8018d24:	b480      	push	{r7}
 8018d26:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8018d28:	4b05      	ldr	r3, [pc, #20]	@ (8018d40 <UTIL_LPM_Init+0x1c>)
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8018d2e:	4b05      	ldr	r3, [pc, #20]	@ (8018d44 <UTIL_LPM_Init+0x20>)
 8018d30:	2200      	movs	r2, #0
 8018d32:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8018d34:	bf00      	nop
 8018d36:	46bd      	mov	sp, r7
 8018d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3c:	4770      	bx	lr
 8018d3e:	bf00      	nop
 8018d40:	20001920 	.word	0x20001920
 8018d44:	20001924 	.word	0x20001924

08018d48 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8018d48:	b480      	push	{r7}
 8018d4a:	b087      	sub	sp, #28
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
 8018d50:	460b      	mov	r3, r1
 8018d52:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018d54:	f3ef 8310 	mrs	r3, PRIMASK
 8018d58:	613b      	str	r3, [r7, #16]
  return(result);
 8018d5a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8018d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018d5e:	b672      	cpsid	i
}
 8018d60:	bf00      	nop
  
  switch(state)
 8018d62:	78fb      	ldrb	r3, [r7, #3]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d008      	beq.n	8018d7a <UTIL_LPM_SetOffMode+0x32>
 8018d68:	2b01      	cmp	r3, #1
 8018d6a:	d10e      	bne.n	8018d8a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8018d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8018da4 <UTIL_LPM_SetOffMode+0x5c>)
 8018d6e:	681a      	ldr	r2, [r3, #0]
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	4313      	orrs	r3, r2
 8018d74:	4a0b      	ldr	r2, [pc, #44]	@ (8018da4 <UTIL_LPM_SetOffMode+0x5c>)
 8018d76:	6013      	str	r3, [r2, #0]
      break;
 8018d78:	e008      	b.n	8018d8c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	43da      	mvns	r2, r3
 8018d7e:	4b09      	ldr	r3, [pc, #36]	@ (8018da4 <UTIL_LPM_SetOffMode+0x5c>)
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	4013      	ands	r3, r2
 8018d84:	4a07      	ldr	r2, [pc, #28]	@ (8018da4 <UTIL_LPM_SetOffMode+0x5c>)
 8018d86:	6013      	str	r3, [r2, #0]
      break;
 8018d88:	e000      	b.n	8018d8c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8018d8a:	bf00      	nop
 8018d8c:	697b      	ldr	r3, [r7, #20]
 8018d8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	f383 8810 	msr	PRIMASK, r3
}
 8018d96:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8018d98:	bf00      	nop
 8018d9a:	371c      	adds	r7, #28
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da2:	4770      	bx	lr
 8018da4:	20001924 	.word	0x20001924

08018da8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b090      	sub	sp, #64	@ 0x40
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8018db0:	4b73      	ldr	r3, [pc, #460]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8018db6:	4b72      	ldr	r3, [pc, #456]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018db8:	681a      	ldr	r2, [r3, #0]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	4013      	ands	r3, r2
 8018dbe:	4a70      	ldr	r2, [pc, #448]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018dc0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8018dc2:	4b70      	ldr	r3, [pc, #448]	@ (8018f84 <UTIL_SEQ_Run+0x1dc>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8018dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8018f88 <UTIL_SEQ_Run+0x1e0>)
 8018dca:	681b      	ldr	r3, [r3, #0]
 8018dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018dce:	4b6f      	ldr	r3, [pc, #444]	@ (8018f8c <UTIL_SEQ_Run+0x1e4>)
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8018dd4:	4b6e      	ldr	r3, [pc, #440]	@ (8018f90 <UTIL_SEQ_Run+0x1e8>)
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8018dda:	e08d      	b.n	8018ef8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8018ddc:	2300      	movs	r3, #0
 8018dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8018de0:	e002      	b.n	8018de8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8018de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018de4:	3301      	adds	r3, #1
 8018de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8018de8:	4a6a      	ldr	r2, [pc, #424]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018dec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018df2:	401a      	ands	r2, r3
 8018df4:	4b62      	ldr	r3, [pc, #392]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	4013      	ands	r3, r2
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d0f1      	beq.n	8018de2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8018dfe:	4a65      	ldr	r2, [pc, #404]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e02:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8018e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e08:	401a      	ands	r2, r3
 8018e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4013      	ands	r3, r2
 8018e10:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8018e12:	4a60      	ldr	r2, [pc, #384]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e16:	00db      	lsls	r3, r3, #3
 8018e18:	4413      	add	r3, r2
 8018e1a:	685a      	ldr	r2, [r3, #4]
 8018e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e1e:	4013      	ands	r3, r2
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d106      	bne.n	8018e32 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8018e24:	4a5b      	ldr	r2, [pc, #364]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e28:	00db      	lsls	r3, r3, #3
 8018e2a:	4413      	add	r3, r2
 8018e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8018e30:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8018e32:	4a58      	ldr	r2, [pc, #352]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	4413      	add	r3, r2
 8018e3a:	685a      	ldr	r2, [r3, #4]
 8018e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e3e:	4013      	ands	r3, r2
 8018e40:	4618      	mov	r0, r3
 8018e42:	f000 f9c1 	bl	80191c8 <SEQ_BitPosition>
 8018e46:	4603      	mov	r3, r0
 8018e48:	461a      	mov	r2, r3
 8018e4a:	4b53      	ldr	r3, [pc, #332]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018e4c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8018e4e:	4a51      	ldr	r2, [pc, #324]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e52:	00db      	lsls	r3, r3, #3
 8018e54:	4413      	add	r3, r2
 8018e56:	685a      	ldr	r2, [r3, #4]
 8018e58:	4b4f      	ldr	r3, [pc, #316]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8018e62:	43db      	mvns	r3, r3
 8018e64:	401a      	ands	r2, r3
 8018e66:	494b      	ldr	r1, [pc, #300]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e6a:	00db      	lsls	r3, r3, #3
 8018e6c:	440b      	add	r3, r1
 8018e6e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018e70:	f3ef 8310 	mrs	r3, PRIMASK
 8018e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8018e76:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018e78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8018e7a:	b672      	cpsid	i
}
 8018e7c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8018e7e:	4b46      	ldr	r3, [pc, #280]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	2201      	movs	r2, #1
 8018e84:	fa02 f303 	lsl.w	r3, r2, r3
 8018e88:	43da      	mvns	r2, r3
 8018e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8018f84 <UTIL_SEQ_Run+0x1dc>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4013      	ands	r3, r2
 8018e90:	4a3c      	ldr	r2, [pc, #240]	@ (8018f84 <UTIL_SEQ_Run+0x1dc>)
 8018e92:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018e94:	2301      	movs	r3, #1
 8018e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018e98:	e013      	b.n	8018ec2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8018e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e9c:	3b01      	subs	r3, #1
 8018e9e:	4a3d      	ldr	r2, [pc, #244]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018ea0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8018ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8018eae:	43da      	mvns	r2, r3
 8018eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018eb2:	3b01      	subs	r3, #1
 8018eb4:	400a      	ands	r2, r1
 8018eb6:	4937      	ldr	r1, [pc, #220]	@ (8018f94 <UTIL_SEQ_Run+0x1ec>)
 8018eb8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8018ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ebe:	3b01      	subs	r3, #1
 8018ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d1e8      	bne.n	8018e9a <UTIL_SEQ_Run+0xf2>
 8018ec8:	6a3b      	ldr	r3, [r7, #32]
 8018eca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ecc:	697b      	ldr	r3, [r7, #20]
 8018ece:	f383 8810 	msr	PRIMASK, r3
}
 8018ed2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8018ed4:	4b30      	ldr	r3, [pc, #192]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4a30      	ldr	r2, [pc, #192]	@ (8018f9c <UTIL_SEQ_Run+0x1f4>)
 8018eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018ede:	4798      	blx	r3

    local_taskset = TaskSet;
 8018ee0:	4b28      	ldr	r3, [pc, #160]	@ (8018f84 <UTIL_SEQ_Run+0x1dc>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8018ee6:	4b28      	ldr	r3, [pc, #160]	@ (8018f88 <UTIL_SEQ_Run+0x1e0>)
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8018eec:	4b27      	ldr	r3, [pc, #156]	@ (8018f8c <UTIL_SEQ_Run+0x1e4>)
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8018ef2:	4b27      	ldr	r3, [pc, #156]	@ (8018f90 <UTIL_SEQ_Run+0x1e8>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8018ef8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018efc:	401a      	ands	r2, r3
 8018efe:	4b20      	ldr	r3, [pc, #128]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4013      	ands	r3, r2
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	d005      	beq.n	8018f14 <UTIL_SEQ_Run+0x16c>
 8018f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f0c:	4013      	ands	r3, r2
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	f43f af64 	beq.w	8018ddc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8018f14:	4b20      	ldr	r3, [pc, #128]	@ (8018f98 <UTIL_SEQ_Run+0x1f0>)
 8018f16:	f04f 32ff 	mov.w	r2, #4294967295
 8018f1a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8018f1c:	f000 f946 	bl	80191ac <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f20:	f3ef 8310 	mrs	r3, PRIMASK
 8018f24:	613b      	str	r3, [r7, #16]
  return(result);
 8018f26:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8018f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f2a:	b672      	cpsid	i
}
 8018f2c:	bf00      	nop
  local_taskset = TaskSet;
 8018f2e:	4b15      	ldr	r3, [pc, #84]	@ (8018f84 <UTIL_SEQ_Run+0x1dc>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8018f34:	4b14      	ldr	r3, [pc, #80]	@ (8018f88 <UTIL_SEQ_Run+0x1e0>)
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8018f3a:	4b14      	ldr	r3, [pc, #80]	@ (8018f8c <UTIL_SEQ_Run+0x1e4>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8018f40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f44:	401a      	ands	r2, r3
 8018f46:	4b0e      	ldr	r3, [pc, #56]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	4013      	ands	r3, r2
 8018f4c:	2b00      	cmp	r3, #0
 8018f4e:	d107      	bne.n	8018f60 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8018f50:	4b0f      	ldr	r3, [pc, #60]	@ (8018f90 <UTIL_SEQ_Run+0x1e8>)
 8018f52:	681a      	ldr	r2, [r3, #0]
 8018f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f56:	4013      	ands	r3, r2
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d101      	bne.n	8018f60 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8018f5c:	f7ec fad4 	bl	8005508 <UTIL_SEQ_Idle>
 8018f60:	69fb      	ldr	r3, [r7, #28]
 8018f62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	f383 8810 	msr	PRIMASK, r3
}
 8018f6a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8018f6c:	f000 f925 	bl	80191ba <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8018f70:	4a03      	ldr	r2, [pc, #12]	@ (8018f80 <UTIL_SEQ_Run+0x1d8>)
 8018f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f74:	6013      	str	r3, [r2, #0]

  return;
 8018f76:	bf00      	nop
}
 8018f78:	3740      	adds	r7, #64	@ 0x40
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}
 8018f7e:	bf00      	nop
 8018f80:	20000120 	.word	0x20000120
 8018f84:	20001928 	.word	0x20001928
 8018f88:	2000192c 	.word	0x2000192c
 8018f8c:	2000011c 	.word	0x2000011c
 8018f90:	20001930 	.word	0x20001930
 8018f94:	200019b8 	.word	0x200019b8
 8018f98:	20001934 	.word	0x20001934
 8018f9c:	20001938 	.word	0x20001938

08018fa0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b088      	sub	sp, #32
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fac:	f3ef 8310 	mrs	r3, PRIMASK
 8018fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8018fb2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8018fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fb6:	b672      	cpsid	i
}
 8018fb8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8018fba:	68f8      	ldr	r0, [r7, #12]
 8018fbc:	f000 f904 	bl	80191c8 <SEQ_BitPosition>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	4a06      	ldr	r2, [pc, #24]	@ (8018fe0 <UTIL_SEQ_RegTask+0x40>)
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8018fcc:	69fb      	ldr	r3, [r7, #28]
 8018fce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fd0:	69bb      	ldr	r3, [r7, #24]
 8018fd2:	f383 8810 	msr	PRIMASK, r3
}
 8018fd6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8018fd8:	bf00      	nop
}
 8018fda:	3720      	adds	r7, #32
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}
 8018fe0:	20001938 	.word	0x20001938

08018fe4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	b087      	sub	sp, #28
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fee:	f3ef 8310 	mrs	r3, PRIMASK
 8018ff2:	60fb      	str	r3, [r7, #12]
  return(result);
 8018ff4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8018ff6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018ff8:	b672      	cpsid	i
}
 8018ffa:	bf00      	nop

  TaskSet |= TaskId_bm;
 8018ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8019034 <UTIL_SEQ_SetTask+0x50>)
 8018ffe:	681a      	ldr	r2, [r3, #0]
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	4313      	orrs	r3, r2
 8019004:	4a0b      	ldr	r2, [pc, #44]	@ (8019034 <UTIL_SEQ_SetTask+0x50>)
 8019006:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019008:	4a0b      	ldr	r2, [pc, #44]	@ (8019038 <UTIL_SEQ_SetTask+0x54>)
 801900a:	683b      	ldr	r3, [r7, #0]
 801900c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	431a      	orrs	r2, r3
 8019014:	4908      	ldr	r1, [pc, #32]	@ (8019038 <UTIL_SEQ_SetTask+0x54>)
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801901c:	697b      	ldr	r3, [r7, #20]
 801901e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019020:	693b      	ldr	r3, [r7, #16]
 8019022:	f383 8810 	msr	PRIMASK, r3
}
 8019026:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019028:	bf00      	nop
}
 801902a:	371c      	adds	r7, #28
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr
 8019034:	20001928 	.word	0x20001928
 8019038:	200019b8 	.word	0x200019b8

0801903c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801903c:	b480      	push	{r7}
 801903e:	b087      	sub	sp, #28
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019044:	f3ef 8310 	mrs	r3, PRIMASK
 8019048:	60fb      	str	r3, [r7, #12]
  return(result);
 801904a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801904c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801904e:	b672      	cpsid	i
}
 8019050:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	43da      	mvns	r2, r3
 8019056:	4b08      	ldr	r3, [pc, #32]	@ (8019078 <UTIL_SEQ_PauseTask+0x3c>)
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4013      	ands	r3, r2
 801905c:	4a06      	ldr	r2, [pc, #24]	@ (8019078 <UTIL_SEQ_PauseTask+0x3c>)
 801905e:	6013      	str	r3, [r2, #0]
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019064:	693b      	ldr	r3, [r7, #16]
 8019066:	f383 8810 	msr	PRIMASK, r3
}
 801906a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801906c:	bf00      	nop
}
 801906e:	371c      	adds	r7, #28
 8019070:	46bd      	mov	sp, r7
 8019072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019076:	4770      	bx	lr
 8019078:	2000011c 	.word	0x2000011c

0801907c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801907c:	b480      	push	{r7}
 801907e:	b087      	sub	sp, #28
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019084:	f3ef 8310 	mrs	r3, PRIMASK
 8019088:	60fb      	str	r3, [r7, #12]
  return(result);
 801908a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801908c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801908e:	b672      	cpsid	i
}
 8019090:	bf00      	nop

  TaskMask |= TaskId_bm;
 8019092:	4b09      	ldr	r3, [pc, #36]	@ (80190b8 <UTIL_SEQ_ResumeTask+0x3c>)
 8019094:	681a      	ldr	r2, [r3, #0]
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	4313      	orrs	r3, r2
 801909a:	4a07      	ldr	r2, [pc, #28]	@ (80190b8 <UTIL_SEQ_ResumeTask+0x3c>)
 801909c:	6013      	str	r3, [r2, #0]
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	f383 8810 	msr	PRIMASK, r3
}
 80190a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80190aa:	bf00      	nop
}
 80190ac:	371c      	adds	r7, #28
 80190ae:	46bd      	mov	sp, r7
 80190b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b4:	4770      	bx	lr
 80190b6:	bf00      	nop
 80190b8:	2000011c 	.word	0x2000011c

080190bc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80190bc:	b480      	push	{r7}
 80190be:	b087      	sub	sp, #28
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190c4:	f3ef 8310 	mrs	r3, PRIMASK
 80190c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80190ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80190cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190ce:	b672      	cpsid	i
}
 80190d0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80190d2:	4b09      	ldr	r3, [pc, #36]	@ (80190f8 <UTIL_SEQ_SetEvt+0x3c>)
 80190d4:	681a      	ldr	r2, [r3, #0]
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	4313      	orrs	r3, r2
 80190da:	4a07      	ldr	r2, [pc, #28]	@ (80190f8 <UTIL_SEQ_SetEvt+0x3c>)
 80190dc:	6013      	str	r3, [r2, #0]
 80190de:	697b      	ldr	r3, [r7, #20]
 80190e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80190e2:	693b      	ldr	r3, [r7, #16]
 80190e4:	f383 8810 	msr	PRIMASK, r3
}
 80190e8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80190ea:	bf00      	nop
}
 80190ec:	371c      	adds	r7, #28
 80190ee:	46bd      	mov	sp, r7
 80190f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f4:	4770      	bx	lr
 80190f6:	bf00      	nop
 80190f8:	2000192c 	.word	0x2000192c

080190fc <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b088      	sub	sp, #32
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019104:	4b1f      	ldr	r3, [pc, #124]	@ (8019184 <UTIL_SEQ_WaitEvt+0x88>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801910a:	4b1e      	ldr	r3, [pc, #120]	@ (8019184 <UTIL_SEQ_WaitEvt+0x88>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019112:	d102      	bne.n	801911a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019114:	2300      	movs	r3, #0
 8019116:	61fb      	str	r3, [r7, #28]
 8019118:	e005      	b.n	8019126 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801911a:	4b1a      	ldr	r3, [pc, #104]	@ (8019184 <UTIL_SEQ_WaitEvt+0x88>)
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	2201      	movs	r2, #1
 8019120:	fa02 f303 	lsl.w	r3, r2, r3
 8019124:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8019126:	4b18      	ldr	r3, [pc, #96]	@ (8019188 <UTIL_SEQ_WaitEvt+0x8c>)
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801912c:	4a16      	ldr	r2, [pc, #88]	@ (8019188 <UTIL_SEQ_WaitEvt+0x8c>)
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8019132:	e003      	b.n	801913c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8019134:	6879      	ldr	r1, [r7, #4]
 8019136:	69f8      	ldr	r0, [r7, #28]
 8019138:	f000 f82a 	bl	8019190 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801913c:	4b13      	ldr	r3, [pc, #76]	@ (801918c <UTIL_SEQ_WaitEvt+0x90>)
 801913e:	681a      	ldr	r2, [r3, #0]
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	4013      	ands	r3, r2
 8019144:	2b00      	cmp	r3, #0
 8019146:	d0f5      	beq.n	8019134 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8019148:	4a0e      	ldr	r2, [pc, #56]	@ (8019184 <UTIL_SEQ_WaitEvt+0x88>)
 801914a:	69bb      	ldr	r3, [r7, #24]
 801914c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801914e:	f3ef 8310 	mrs	r3, PRIMASK
 8019152:	60bb      	str	r3, [r7, #8]
  return(result);
 8019154:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019158:	b672      	cpsid	i
}
 801915a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	43da      	mvns	r2, r3
 8019160:	4b0a      	ldr	r3, [pc, #40]	@ (801918c <UTIL_SEQ_WaitEvt+0x90>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	4013      	ands	r3, r2
 8019166:	4a09      	ldr	r2, [pc, #36]	@ (801918c <UTIL_SEQ_WaitEvt+0x90>)
 8019168:	6013      	str	r3, [r2, #0]
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	f383 8810 	msr	PRIMASK, r3
}
 8019174:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8019176:	4a04      	ldr	r2, [pc, #16]	@ (8019188 <UTIL_SEQ_WaitEvt+0x8c>)
 8019178:	697b      	ldr	r3, [r7, #20]
 801917a:	6013      	str	r3, [r2, #0]
  return;
 801917c:	bf00      	nop
}
 801917e:	3720      	adds	r7, #32
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}
 8019184:	20001934 	.word	0x20001934
 8019188:	20001930 	.word	0x20001930
 801918c:	2000192c 	.word	0x2000192c

08019190 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b082      	sub	sp, #8
 8019194:	af00      	add	r7, sp, #0
 8019196:	6078      	str	r0, [r7, #4]
 8019198:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	43db      	mvns	r3, r3
 801919e:	4618      	mov	r0, r3
 80191a0:	f7ff fe02 	bl	8018da8 <UTIL_SEQ_Run>
  return;
 80191a4:	bf00      	nop
}
 80191a6:	3708      	adds	r7, #8
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}

080191ac <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80191ac:	b480      	push	{r7}
 80191ae:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80191b0:	bf00      	nop
}
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr

080191ba <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80191ba:	b480      	push	{r7}
 80191bc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80191be:	bf00      	nop
}
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr

080191c8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80191c8:	b480      	push	{r7}
 80191ca:	b085      	sub	sp, #20
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d101      	bne.n	80191de <SEQ_BitPosition+0x16>
    return 32U;
 80191da:	2320      	movs	r3, #32
 80191dc:	e003      	b.n	80191e6 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	fab3 f383 	clz	r3, r3
 80191e4:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 80191e6:	f1c3 031f 	rsb	r3, r3, #31
 80191ea:	b2db      	uxtb	r3, r3
}
 80191ec:	4618      	mov	r0, r3
 80191ee:	3714      	adds	r7, #20
 80191f0:	46bd      	mov	sp, r7
 80191f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f6:	4770      	bx	lr

080191f8 <cosf>:
 80191f8:	ee10 3a10 	vmov	r3, s0
 80191fc:	b507      	push	{r0, r1, r2, lr}
 80191fe:	4a1e      	ldr	r2, [pc, #120]	@ (8019278 <cosf+0x80>)
 8019200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019204:	4293      	cmp	r3, r2
 8019206:	d806      	bhi.n	8019216 <cosf+0x1e>
 8019208:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801927c <cosf+0x84>
 801920c:	b003      	add	sp, #12
 801920e:	f85d eb04 	ldr.w	lr, [sp], #4
 8019212:	f000 b87b 	b.w	801930c <__kernel_cosf>
 8019216:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801921a:	d304      	bcc.n	8019226 <cosf+0x2e>
 801921c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019220:	b003      	add	sp, #12
 8019222:	f85d fb04 	ldr.w	pc, [sp], #4
 8019226:	4668      	mov	r0, sp
 8019228:	f000 f910 	bl	801944c <__ieee754_rem_pio2f>
 801922c:	f000 0003 	and.w	r0, r0, #3
 8019230:	2801      	cmp	r0, #1
 8019232:	d009      	beq.n	8019248 <cosf+0x50>
 8019234:	2802      	cmp	r0, #2
 8019236:	d010      	beq.n	801925a <cosf+0x62>
 8019238:	b9b0      	cbnz	r0, 8019268 <cosf+0x70>
 801923a:	eddd 0a01 	vldr	s1, [sp, #4]
 801923e:	ed9d 0a00 	vldr	s0, [sp]
 8019242:	f000 f863 	bl	801930c <__kernel_cosf>
 8019246:	e7eb      	b.n	8019220 <cosf+0x28>
 8019248:	eddd 0a01 	vldr	s1, [sp, #4]
 801924c:	ed9d 0a00 	vldr	s0, [sp]
 8019250:	f000 f8b4 	bl	80193bc <__kernel_sinf>
 8019254:	eeb1 0a40 	vneg.f32	s0, s0
 8019258:	e7e2      	b.n	8019220 <cosf+0x28>
 801925a:	eddd 0a01 	vldr	s1, [sp, #4]
 801925e:	ed9d 0a00 	vldr	s0, [sp]
 8019262:	f000 f853 	bl	801930c <__kernel_cosf>
 8019266:	e7f5      	b.n	8019254 <cosf+0x5c>
 8019268:	eddd 0a01 	vldr	s1, [sp, #4]
 801926c:	ed9d 0a00 	vldr	s0, [sp]
 8019270:	2001      	movs	r0, #1
 8019272:	f000 f8a3 	bl	80193bc <__kernel_sinf>
 8019276:	e7d3      	b.n	8019220 <cosf+0x28>
 8019278:	3f490fd8 	.word	0x3f490fd8
 801927c:	00000000 	.word	0x00000000

08019280 <sinf>:
 8019280:	ee10 3a10 	vmov	r3, s0
 8019284:	b507      	push	{r0, r1, r2, lr}
 8019286:	4a1f      	ldr	r2, [pc, #124]	@ (8019304 <sinf+0x84>)
 8019288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801928c:	4293      	cmp	r3, r2
 801928e:	d807      	bhi.n	80192a0 <sinf+0x20>
 8019290:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8019308 <sinf+0x88>
 8019294:	2000      	movs	r0, #0
 8019296:	b003      	add	sp, #12
 8019298:	f85d eb04 	ldr.w	lr, [sp], #4
 801929c:	f000 b88e 	b.w	80193bc <__kernel_sinf>
 80192a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80192a4:	d304      	bcc.n	80192b0 <sinf+0x30>
 80192a6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80192aa:	b003      	add	sp, #12
 80192ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80192b0:	4668      	mov	r0, sp
 80192b2:	f000 f8cb 	bl	801944c <__ieee754_rem_pio2f>
 80192b6:	f000 0003 	and.w	r0, r0, #3
 80192ba:	2801      	cmp	r0, #1
 80192bc:	d00a      	beq.n	80192d4 <sinf+0x54>
 80192be:	2802      	cmp	r0, #2
 80192c0:	d00f      	beq.n	80192e2 <sinf+0x62>
 80192c2:	b9c0      	cbnz	r0, 80192f6 <sinf+0x76>
 80192c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80192c8:	ed9d 0a00 	vldr	s0, [sp]
 80192cc:	2001      	movs	r0, #1
 80192ce:	f000 f875 	bl	80193bc <__kernel_sinf>
 80192d2:	e7ea      	b.n	80192aa <sinf+0x2a>
 80192d4:	eddd 0a01 	vldr	s1, [sp, #4]
 80192d8:	ed9d 0a00 	vldr	s0, [sp]
 80192dc:	f000 f816 	bl	801930c <__kernel_cosf>
 80192e0:	e7e3      	b.n	80192aa <sinf+0x2a>
 80192e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80192e6:	ed9d 0a00 	vldr	s0, [sp]
 80192ea:	2001      	movs	r0, #1
 80192ec:	f000 f866 	bl	80193bc <__kernel_sinf>
 80192f0:	eeb1 0a40 	vneg.f32	s0, s0
 80192f4:	e7d9      	b.n	80192aa <sinf+0x2a>
 80192f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80192fa:	ed9d 0a00 	vldr	s0, [sp]
 80192fe:	f000 f805 	bl	801930c <__kernel_cosf>
 8019302:	e7f5      	b.n	80192f0 <sinf+0x70>
 8019304:	3f490fd8 	.word	0x3f490fd8
 8019308:	00000000 	.word	0x00000000

0801930c <__kernel_cosf>:
 801930c:	ee10 3a10 	vmov	r3, s0
 8019310:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019314:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019318:	eef0 6a40 	vmov.f32	s13, s0
 801931c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019320:	d204      	bcs.n	801932c <__kernel_cosf+0x20>
 8019322:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8019326:	ee17 2a90 	vmov	r2, s15
 801932a:	b342      	cbz	r2, 801937e <__kernel_cosf+0x72>
 801932c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019330:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801939c <__kernel_cosf+0x90>
 8019334:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80193a0 <__kernel_cosf+0x94>
 8019338:	4a1a      	ldr	r2, [pc, #104]	@ (80193a4 <__kernel_cosf+0x98>)
 801933a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801933e:	4293      	cmp	r3, r2
 8019340:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80193a8 <__kernel_cosf+0x9c>
 8019344:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019348:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80193ac <__kernel_cosf+0xa0>
 801934c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019350:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80193b0 <__kernel_cosf+0xa4>
 8019354:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019358:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80193b4 <__kernel_cosf+0xa8>
 801935c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019360:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8019364:	ee26 6a07 	vmul.f32	s12, s12, s14
 8019368:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801936c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8019370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019374:	d804      	bhi.n	8019380 <__kernel_cosf+0x74>
 8019376:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801937a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801937e:	4770      	bx	lr
 8019380:	4a0d      	ldr	r2, [pc, #52]	@ (80193b8 <__kernel_cosf+0xac>)
 8019382:	4293      	cmp	r3, r2
 8019384:	bf9a      	itte	ls
 8019386:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801938a:	ee07 3a10 	vmovls	s14, r3
 801938e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8019392:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019396:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801939a:	e7ec      	b.n	8019376 <__kernel_cosf+0x6a>
 801939c:	ad47d74e 	.word	0xad47d74e
 80193a0:	310f74f6 	.word	0x310f74f6
 80193a4:	3e999999 	.word	0x3e999999
 80193a8:	b493f27c 	.word	0xb493f27c
 80193ac:	37d00d01 	.word	0x37d00d01
 80193b0:	bab60b61 	.word	0xbab60b61
 80193b4:	3d2aaaab 	.word	0x3d2aaaab
 80193b8:	3f480000 	.word	0x3f480000

080193bc <__kernel_sinf>:
 80193bc:	ee10 3a10 	vmov	r3, s0
 80193c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80193c4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80193c8:	d204      	bcs.n	80193d4 <__kernel_sinf+0x18>
 80193ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80193ce:	ee17 3a90 	vmov	r3, s15
 80193d2:	b35b      	cbz	r3, 801942c <__kernel_sinf+0x70>
 80193d4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80193d8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019430 <__kernel_sinf+0x74>
 80193dc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019434 <__kernel_sinf+0x78>
 80193e0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80193e4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019438 <__kernel_sinf+0x7c>
 80193e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80193ec:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801943c <__kernel_sinf+0x80>
 80193f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80193f4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8019440 <__kernel_sinf+0x84>
 80193f8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80193fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019400:	b930      	cbnz	r0, 8019410 <__kernel_sinf+0x54>
 8019402:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019444 <__kernel_sinf+0x88>
 8019406:	eea7 6a27 	vfma.f32	s12, s14, s15
 801940a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801940e:	4770      	bx	lr
 8019410:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019414:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019418:	eee0 7a86 	vfma.f32	s15, s1, s12
 801941c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019420:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019448 <__kernel_sinf+0x8c>
 8019424:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019428:	ee30 0a60 	vsub.f32	s0, s0, s1
 801942c:	4770      	bx	lr
 801942e:	bf00      	nop
 8019430:	2f2ec9d3 	.word	0x2f2ec9d3
 8019434:	b2d72f34 	.word	0xb2d72f34
 8019438:	3638ef1b 	.word	0x3638ef1b
 801943c:	b9500d01 	.word	0xb9500d01
 8019440:	3c088889 	.word	0x3c088889
 8019444:	be2aaaab 	.word	0xbe2aaaab
 8019448:	3e2aaaab 	.word	0x3e2aaaab

0801944c <__ieee754_rem_pio2f>:
 801944c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801944e:	ee10 6a10 	vmov	r6, s0
 8019452:	4b88      	ldr	r3, [pc, #544]	@ (8019674 <__ieee754_rem_pio2f+0x228>)
 8019454:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019458:	429d      	cmp	r5, r3
 801945a:	b087      	sub	sp, #28
 801945c:	4604      	mov	r4, r0
 801945e:	d805      	bhi.n	801946c <__ieee754_rem_pio2f+0x20>
 8019460:	2300      	movs	r3, #0
 8019462:	ed80 0a00 	vstr	s0, [r0]
 8019466:	6043      	str	r3, [r0, #4]
 8019468:	2000      	movs	r0, #0
 801946a:	e022      	b.n	80194b2 <__ieee754_rem_pio2f+0x66>
 801946c:	4b82      	ldr	r3, [pc, #520]	@ (8019678 <__ieee754_rem_pio2f+0x22c>)
 801946e:	429d      	cmp	r5, r3
 8019470:	d83a      	bhi.n	80194e8 <__ieee754_rem_pio2f+0x9c>
 8019472:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019476:	2e00      	cmp	r6, #0
 8019478:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801967c <__ieee754_rem_pio2f+0x230>
 801947c:	4a80      	ldr	r2, [pc, #512]	@ (8019680 <__ieee754_rem_pio2f+0x234>)
 801947e:	f023 030f 	bic.w	r3, r3, #15
 8019482:	dd18      	ble.n	80194b6 <__ieee754_rem_pio2f+0x6a>
 8019484:	4293      	cmp	r3, r2
 8019486:	ee70 7a47 	vsub.f32	s15, s0, s14
 801948a:	bf09      	itett	eq
 801948c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019684 <__ieee754_rem_pio2f+0x238>
 8019490:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019688 <__ieee754_rem_pio2f+0x23c>
 8019494:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801968c <__ieee754_rem_pio2f+0x240>
 8019498:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801949c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80194a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194a4:	ed80 7a00 	vstr	s14, [r0]
 80194a8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80194ac:	edc0 7a01 	vstr	s15, [r0, #4]
 80194b0:	2001      	movs	r0, #1
 80194b2:	b007      	add	sp, #28
 80194b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194b6:	4293      	cmp	r3, r2
 80194b8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80194bc:	bf09      	itett	eq
 80194be:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019684 <__ieee754_rem_pio2f+0x238>
 80194c2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019688 <__ieee754_rem_pio2f+0x23c>
 80194c6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801968c <__ieee754_rem_pio2f+0x240>
 80194ca:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80194ce:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80194d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194d6:	ed80 7a00 	vstr	s14, [r0]
 80194da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194de:	edc0 7a01 	vstr	s15, [r0, #4]
 80194e2:	f04f 30ff 	mov.w	r0, #4294967295
 80194e6:	e7e4      	b.n	80194b2 <__ieee754_rem_pio2f+0x66>
 80194e8:	4b69      	ldr	r3, [pc, #420]	@ (8019690 <__ieee754_rem_pio2f+0x244>)
 80194ea:	429d      	cmp	r5, r3
 80194ec:	d873      	bhi.n	80195d6 <__ieee754_rem_pio2f+0x18a>
 80194ee:	f000 f8dd 	bl	80196ac <fabsf>
 80194f2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019694 <__ieee754_rem_pio2f+0x248>
 80194f6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80194fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80194fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019506:	ee17 0a90 	vmov	r0, s15
 801950a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801967c <__ieee754_rem_pio2f+0x230>
 801950e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019512:	281f      	cmp	r0, #31
 8019514:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019688 <__ieee754_rem_pio2f+0x23c>
 8019518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801951c:	eeb1 6a47 	vneg.f32	s12, s14
 8019520:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019524:	ee16 1a90 	vmov	r1, s13
 8019528:	dc09      	bgt.n	801953e <__ieee754_rem_pio2f+0xf2>
 801952a:	4a5b      	ldr	r2, [pc, #364]	@ (8019698 <__ieee754_rem_pio2f+0x24c>)
 801952c:	1e47      	subs	r7, r0, #1
 801952e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019532:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019536:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801953a:	4293      	cmp	r3, r2
 801953c:	d107      	bne.n	801954e <__ieee754_rem_pio2f+0x102>
 801953e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8019542:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019546:	2a08      	cmp	r2, #8
 8019548:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801954c:	dc14      	bgt.n	8019578 <__ieee754_rem_pio2f+0x12c>
 801954e:	6021      	str	r1, [r4, #0]
 8019550:	ed94 7a00 	vldr	s14, [r4]
 8019554:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019558:	2e00      	cmp	r6, #0
 801955a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801955e:	ed84 0a01 	vstr	s0, [r4, #4]
 8019562:	daa6      	bge.n	80194b2 <__ieee754_rem_pio2f+0x66>
 8019564:	eeb1 7a47 	vneg.f32	s14, s14
 8019568:	eeb1 0a40 	vneg.f32	s0, s0
 801956c:	ed84 7a00 	vstr	s14, [r4]
 8019570:	ed84 0a01 	vstr	s0, [r4, #4]
 8019574:	4240      	negs	r0, r0
 8019576:	e79c      	b.n	80194b2 <__ieee754_rem_pio2f+0x66>
 8019578:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019684 <__ieee754_rem_pio2f+0x238>
 801957c:	eef0 6a40 	vmov.f32	s13, s0
 8019580:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019584:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019588:	eee6 7a25 	vfma.f32	s15, s12, s11
 801958c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801968c <__ieee754_rem_pio2f+0x240>
 8019590:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019594:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019598:	ee15 2a90 	vmov	r2, s11
 801959c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80195a0:	1a5b      	subs	r3, r3, r1
 80195a2:	2b19      	cmp	r3, #25
 80195a4:	dc04      	bgt.n	80195b0 <__ieee754_rem_pio2f+0x164>
 80195a6:	edc4 5a00 	vstr	s11, [r4]
 80195aa:	eeb0 0a66 	vmov.f32	s0, s13
 80195ae:	e7cf      	b.n	8019550 <__ieee754_rem_pio2f+0x104>
 80195b0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801969c <__ieee754_rem_pio2f+0x250>
 80195b4:	eeb0 0a66 	vmov.f32	s0, s13
 80195b8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80195bc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80195c0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80196a0 <__ieee754_rem_pio2f+0x254>
 80195c4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80195c8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80195cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80195d0:	ed84 7a00 	vstr	s14, [r4]
 80195d4:	e7bc      	b.n	8019550 <__ieee754_rem_pio2f+0x104>
 80195d6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80195da:	d306      	bcc.n	80195ea <__ieee754_rem_pio2f+0x19e>
 80195dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80195e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80195e4:	edc0 7a00 	vstr	s15, [r0]
 80195e8:	e73e      	b.n	8019468 <__ieee754_rem_pio2f+0x1c>
 80195ea:	15ea      	asrs	r2, r5, #23
 80195ec:	3a86      	subs	r2, #134	@ 0x86
 80195ee:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80195f2:	ee07 3a90 	vmov	s15, r3
 80195f6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80195fa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80196a4 <__ieee754_rem_pio2f+0x258>
 80195fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019606:	ed8d 7a03 	vstr	s14, [sp, #12]
 801960a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801960e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019612:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019616:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801961a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801961e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019622:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801962a:	edcd 7a05 	vstr	s15, [sp, #20]
 801962e:	d11e      	bne.n	801966e <__ieee754_rem_pio2f+0x222>
 8019630:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019638:	bf0c      	ite	eq
 801963a:	2301      	moveq	r3, #1
 801963c:	2302      	movne	r3, #2
 801963e:	491a      	ldr	r1, [pc, #104]	@ (80196a8 <__ieee754_rem_pio2f+0x25c>)
 8019640:	9101      	str	r1, [sp, #4]
 8019642:	2102      	movs	r1, #2
 8019644:	9100      	str	r1, [sp, #0]
 8019646:	a803      	add	r0, sp, #12
 8019648:	4621      	mov	r1, r4
 801964a:	f000 f837 	bl	80196bc <__kernel_rem_pio2f>
 801964e:	2e00      	cmp	r6, #0
 8019650:	f6bf af2f 	bge.w	80194b2 <__ieee754_rem_pio2f+0x66>
 8019654:	edd4 7a00 	vldr	s15, [r4]
 8019658:	eef1 7a67 	vneg.f32	s15, s15
 801965c:	edc4 7a00 	vstr	s15, [r4]
 8019660:	edd4 7a01 	vldr	s15, [r4, #4]
 8019664:	eef1 7a67 	vneg.f32	s15, s15
 8019668:	edc4 7a01 	vstr	s15, [r4, #4]
 801966c:	e782      	b.n	8019574 <__ieee754_rem_pio2f+0x128>
 801966e:	2303      	movs	r3, #3
 8019670:	e7e5      	b.n	801963e <__ieee754_rem_pio2f+0x1f2>
 8019672:	bf00      	nop
 8019674:	3f490fd8 	.word	0x3f490fd8
 8019678:	4016cbe3 	.word	0x4016cbe3
 801967c:	3fc90f80 	.word	0x3fc90f80
 8019680:	3fc90fd0 	.word	0x3fc90fd0
 8019684:	37354400 	.word	0x37354400
 8019688:	37354443 	.word	0x37354443
 801968c:	2e85a308 	.word	0x2e85a308
 8019690:	43490f80 	.word	0x43490f80
 8019694:	3f22f984 	.word	0x3f22f984
 8019698:	0801dce4 	.word	0x0801dce4
 801969c:	2e85a300 	.word	0x2e85a300
 80196a0:	248d3132 	.word	0x248d3132
 80196a4:	43800000 	.word	0x43800000
 80196a8:	0801dd64 	.word	0x0801dd64

080196ac <fabsf>:
 80196ac:	ee10 3a10 	vmov	r3, s0
 80196b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80196b4:	ee00 3a10 	vmov	s0, r3
 80196b8:	4770      	bx	lr
	...

080196bc <__kernel_rem_pio2f>:
 80196bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c0:	ed2d 8b04 	vpush	{d8-d9}
 80196c4:	b0d9      	sub	sp, #356	@ 0x164
 80196c6:	4690      	mov	r8, r2
 80196c8:	9001      	str	r0, [sp, #4]
 80196ca:	4ab6      	ldr	r2, [pc, #728]	@ (80199a4 <__kernel_rem_pio2f+0x2e8>)
 80196cc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80196ce:	f118 0f04 	cmn.w	r8, #4
 80196d2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80196d6:	460f      	mov	r7, r1
 80196d8:	f103 3bff 	add.w	fp, r3, #4294967295
 80196dc:	db26      	blt.n	801972c <__kernel_rem_pio2f+0x70>
 80196de:	f1b8 0203 	subs.w	r2, r8, #3
 80196e2:	bf48      	it	mi
 80196e4:	f108 0204 	addmi.w	r2, r8, #4
 80196e8:	10d2      	asrs	r2, r2, #3
 80196ea:	1c55      	adds	r5, r2, #1
 80196ec:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80196ee:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 80196f2:	00e8      	lsls	r0, r5, #3
 80196f4:	eba2 060b 	sub.w	r6, r2, fp
 80196f8:	9002      	str	r0, [sp, #8]
 80196fa:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80196fe:	eb0a 0c0b 	add.w	ip, sl, fp
 8019702:	ac1c      	add	r4, sp, #112	@ 0x70
 8019704:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019708:	2000      	movs	r0, #0
 801970a:	4560      	cmp	r0, ip
 801970c:	dd10      	ble.n	8019730 <__kernel_rem_pio2f+0x74>
 801970e:	a91c      	add	r1, sp, #112	@ 0x70
 8019710:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019714:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019718:	2600      	movs	r6, #0
 801971a:	4556      	cmp	r6, sl
 801971c:	dc24      	bgt.n	8019768 <__kernel_rem_pio2f+0xac>
 801971e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019722:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 8019726:	4684      	mov	ip, r0
 8019728:	2400      	movs	r4, #0
 801972a:	e016      	b.n	801975a <__kernel_rem_pio2f+0x9e>
 801972c:	2200      	movs	r2, #0
 801972e:	e7dc      	b.n	80196ea <__kernel_rem_pio2f+0x2e>
 8019730:	42c6      	cmn	r6, r0
 8019732:	bf5d      	ittte	pl
 8019734:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019738:	ee07 1a90 	vmovpl	s15, r1
 801973c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019740:	eef0 7a47 	vmovmi.f32	s15, s14
 8019744:	ece4 7a01 	vstmia	r4!, {s15}
 8019748:	3001      	adds	r0, #1
 801974a:	e7de      	b.n	801970a <__kernel_rem_pio2f+0x4e>
 801974c:	ecfe 6a01 	vldmia	lr!, {s13}
 8019750:	ed3c 7a01 	vldmdb	ip!, {s14}
 8019754:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019758:	3401      	adds	r4, #1
 801975a:	455c      	cmp	r4, fp
 801975c:	ddf6      	ble.n	801974c <__kernel_rem_pio2f+0x90>
 801975e:	ece9 7a01 	vstmia	r9!, {s15}
 8019762:	3601      	adds	r6, #1
 8019764:	3004      	adds	r0, #4
 8019766:	e7d8      	b.n	801971a <__kernel_rem_pio2f+0x5e>
 8019768:	a908      	add	r1, sp, #32
 801976a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801976e:	9104      	str	r1, [sp, #16]
 8019770:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019772:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80199b0 <__kernel_rem_pio2f+0x2f4>
 8019776:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80199ac <__kernel_rem_pio2f+0x2f0>
 801977a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801977e:	9203      	str	r2, [sp, #12]
 8019780:	4654      	mov	r4, sl
 8019782:	00a2      	lsls	r2, r4, #2
 8019784:	9205      	str	r2, [sp, #20]
 8019786:	aa58      	add	r2, sp, #352	@ 0x160
 8019788:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801978c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019790:	a944      	add	r1, sp, #272	@ 0x110
 8019792:	aa08      	add	r2, sp, #32
 8019794:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019798:	4694      	mov	ip, r2
 801979a:	4626      	mov	r6, r4
 801979c:	2e00      	cmp	r6, #0
 801979e:	dc4c      	bgt.n	801983a <__kernel_rem_pio2f+0x17e>
 80197a0:	4628      	mov	r0, r5
 80197a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80197a6:	f000 f9f1 	bl	8019b8c <scalbnf>
 80197aa:	eeb0 8a40 	vmov.f32	s16, s0
 80197ae:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80197b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80197b6:	f000 fa4f 	bl	8019c58 <floorf>
 80197ba:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80197be:	eea0 8a67 	vfms.f32	s16, s0, s15
 80197c2:	2d00      	cmp	r5, #0
 80197c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80197c8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80197cc:	ee17 9a90 	vmov	r9, s15
 80197d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197d4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80197d8:	dd41      	ble.n	801985e <__kernel_rem_pio2f+0x1a2>
 80197da:	f104 3cff 	add.w	ip, r4, #4294967295
 80197de:	a908      	add	r1, sp, #32
 80197e0:	f1c5 0e08 	rsb	lr, r5, #8
 80197e4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80197e8:	fa46 f00e 	asr.w	r0, r6, lr
 80197ec:	4481      	add	r9, r0
 80197ee:	fa00 f00e 	lsl.w	r0, r0, lr
 80197f2:	1a36      	subs	r6, r6, r0
 80197f4:	f1c5 0007 	rsb	r0, r5, #7
 80197f8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80197fc:	4106      	asrs	r6, r0
 80197fe:	2e00      	cmp	r6, #0
 8019800:	dd3c      	ble.n	801987c <__kernel_rem_pio2f+0x1c0>
 8019802:	f04f 0e00 	mov.w	lr, #0
 8019806:	f109 0901 	add.w	r9, r9, #1
 801980a:	4670      	mov	r0, lr
 801980c:	4574      	cmp	r4, lr
 801980e:	dc68      	bgt.n	80198e2 <__kernel_rem_pio2f+0x226>
 8019810:	2d00      	cmp	r5, #0
 8019812:	dd03      	ble.n	801981c <__kernel_rem_pio2f+0x160>
 8019814:	2d01      	cmp	r5, #1
 8019816:	d074      	beq.n	8019902 <__kernel_rem_pio2f+0x246>
 8019818:	2d02      	cmp	r5, #2
 801981a:	d07d      	beq.n	8019918 <__kernel_rem_pio2f+0x25c>
 801981c:	2e02      	cmp	r6, #2
 801981e:	d12d      	bne.n	801987c <__kernel_rem_pio2f+0x1c0>
 8019820:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019824:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019828:	b340      	cbz	r0, 801987c <__kernel_rem_pio2f+0x1c0>
 801982a:	4628      	mov	r0, r5
 801982c:	9306      	str	r3, [sp, #24]
 801982e:	f000 f9ad 	bl	8019b8c <scalbnf>
 8019832:	9b06      	ldr	r3, [sp, #24]
 8019834:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019838:	e020      	b.n	801987c <__kernel_rem_pio2f+0x1c0>
 801983a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801983e:	3e01      	subs	r6, #1
 8019840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019848:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801984c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019850:	ecac 0a01 	vstmia	ip!, {s0}
 8019854:	ed30 0a01 	vldmdb	r0!, {s0}
 8019858:	ee37 0a80 	vadd.f32	s0, s15, s0
 801985c:	e79e      	b.n	801979c <__kernel_rem_pio2f+0xe0>
 801985e:	d105      	bne.n	801986c <__kernel_rem_pio2f+0x1b0>
 8019860:	1e60      	subs	r0, r4, #1
 8019862:	a908      	add	r1, sp, #32
 8019864:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019868:	11f6      	asrs	r6, r6, #7
 801986a:	e7c8      	b.n	80197fe <__kernel_rem_pio2f+0x142>
 801986c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019870:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019878:	da31      	bge.n	80198de <__kernel_rem_pio2f+0x222>
 801987a:	2600      	movs	r6, #0
 801987c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019884:	f040 8098 	bne.w	80199b8 <__kernel_rem_pio2f+0x2fc>
 8019888:	1e60      	subs	r0, r4, #1
 801988a:	2200      	movs	r2, #0
 801988c:	4550      	cmp	r0, sl
 801988e:	da4b      	bge.n	8019928 <__kernel_rem_pio2f+0x26c>
 8019890:	2a00      	cmp	r2, #0
 8019892:	d065      	beq.n	8019960 <__kernel_rem_pio2f+0x2a4>
 8019894:	3c01      	subs	r4, #1
 8019896:	ab08      	add	r3, sp, #32
 8019898:	3d08      	subs	r5, #8
 801989a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d0f8      	beq.n	8019894 <__kernel_rem_pio2f+0x1d8>
 80198a2:	4628      	mov	r0, r5
 80198a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80198a8:	f000 f970 	bl	8019b8c <scalbnf>
 80198ac:	1c63      	adds	r3, r4, #1
 80198ae:	aa44      	add	r2, sp, #272	@ 0x110
 80198b0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80199b0 <__kernel_rem_pio2f+0x2f4>
 80198b4:	0099      	lsls	r1, r3, #2
 80198b6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80198ba:	4623      	mov	r3, r4
 80198bc:	2b00      	cmp	r3, #0
 80198be:	f280 80a9 	bge.w	8019a14 <__kernel_rem_pio2f+0x358>
 80198c2:	4623      	mov	r3, r4
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	f2c0 80c7 	blt.w	8019a58 <__kernel_rem_pio2f+0x39c>
 80198ca:	aa44      	add	r2, sp, #272	@ 0x110
 80198cc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80198d0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80199a8 <__kernel_rem_pio2f+0x2ec>
 80198d4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 80198d8:	2000      	movs	r0, #0
 80198da:	1ae2      	subs	r2, r4, r3
 80198dc:	e0b1      	b.n	8019a42 <__kernel_rem_pio2f+0x386>
 80198de:	2602      	movs	r6, #2
 80198e0:	e78f      	b.n	8019802 <__kernel_rem_pio2f+0x146>
 80198e2:	f852 1b04 	ldr.w	r1, [r2], #4
 80198e6:	b948      	cbnz	r0, 80198fc <__kernel_rem_pio2f+0x240>
 80198e8:	b121      	cbz	r1, 80198f4 <__kernel_rem_pio2f+0x238>
 80198ea:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80198ee:	f842 1c04 	str.w	r1, [r2, #-4]
 80198f2:	2101      	movs	r1, #1
 80198f4:	f10e 0e01 	add.w	lr, lr, #1
 80198f8:	4608      	mov	r0, r1
 80198fa:	e787      	b.n	801980c <__kernel_rem_pio2f+0x150>
 80198fc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019900:	e7f5      	b.n	80198ee <__kernel_rem_pio2f+0x232>
 8019902:	f104 3cff 	add.w	ip, r4, #4294967295
 8019906:	aa08      	add	r2, sp, #32
 8019908:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801990c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019910:	a908      	add	r1, sp, #32
 8019912:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019916:	e781      	b.n	801981c <__kernel_rem_pio2f+0x160>
 8019918:	f104 3cff 	add.w	ip, r4, #4294967295
 801991c:	aa08      	add	r2, sp, #32
 801991e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019922:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019926:	e7f3      	b.n	8019910 <__kernel_rem_pio2f+0x254>
 8019928:	a908      	add	r1, sp, #32
 801992a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801992e:	3801      	subs	r0, #1
 8019930:	430a      	orrs	r2, r1
 8019932:	e7ab      	b.n	801988c <__kernel_rem_pio2f+0x1d0>
 8019934:	3201      	adds	r2, #1
 8019936:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801993a:	2e00      	cmp	r6, #0
 801993c:	d0fa      	beq.n	8019934 <__kernel_rem_pio2f+0x278>
 801993e:	9905      	ldr	r1, [sp, #20]
 8019940:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019944:	eb0d 0001 	add.w	r0, sp, r1
 8019948:	18e6      	adds	r6, r4, r3
 801994a:	a91c      	add	r1, sp, #112	@ 0x70
 801994c:	f104 0c01 	add.w	ip, r4, #1
 8019950:	384c      	subs	r0, #76	@ 0x4c
 8019952:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019956:	4422      	add	r2, r4
 8019958:	4562      	cmp	r2, ip
 801995a:	da04      	bge.n	8019966 <__kernel_rem_pio2f+0x2aa>
 801995c:	4614      	mov	r4, r2
 801995e:	e710      	b.n	8019782 <__kernel_rem_pio2f+0xc6>
 8019960:	9804      	ldr	r0, [sp, #16]
 8019962:	2201      	movs	r2, #1
 8019964:	e7e7      	b.n	8019936 <__kernel_rem_pio2f+0x27a>
 8019966:	9903      	ldr	r1, [sp, #12]
 8019968:	f8dd e004 	ldr.w	lr, [sp, #4]
 801996c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019970:	9105      	str	r1, [sp, #20]
 8019972:	ee07 1a90 	vmov	s15, r1
 8019976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801997a:	2400      	movs	r4, #0
 801997c:	ece6 7a01 	vstmia	r6!, {s15}
 8019980:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 8019984:	46b1      	mov	r9, r6
 8019986:	455c      	cmp	r4, fp
 8019988:	dd04      	ble.n	8019994 <__kernel_rem_pio2f+0x2d8>
 801998a:	ece0 7a01 	vstmia	r0!, {s15}
 801998e:	f10c 0c01 	add.w	ip, ip, #1
 8019992:	e7e1      	b.n	8019958 <__kernel_rem_pio2f+0x29c>
 8019994:	ecfe 6a01 	vldmia	lr!, {s13}
 8019998:	ed39 7a01 	vldmdb	r9!, {s14}
 801999c:	3401      	adds	r4, #1
 801999e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199a2:	e7f0      	b.n	8019986 <__kernel_rem_pio2f+0x2ca>
 80199a4:	0801e0a8 	.word	0x0801e0a8
 80199a8:	0801e07c 	.word	0x0801e07c
 80199ac:	43800000 	.word	0x43800000
 80199b0:	3b800000 	.word	0x3b800000
 80199b4:	00000000 	.word	0x00000000
 80199b8:	9b02      	ldr	r3, [sp, #8]
 80199ba:	eeb0 0a48 	vmov.f32	s0, s16
 80199be:	eba3 0008 	sub.w	r0, r3, r8
 80199c2:	f000 f8e3 	bl	8019b8c <scalbnf>
 80199c6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80199ac <__kernel_rem_pio2f+0x2f0>
 80199ca:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80199ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d2:	db19      	blt.n	8019a08 <__kernel_rem_pio2f+0x34c>
 80199d4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80199b0 <__kernel_rem_pio2f+0x2f4>
 80199d8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80199dc:	aa08      	add	r2, sp, #32
 80199de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199e2:	3508      	adds	r5, #8
 80199e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80199ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80199f4:	ee10 3a10 	vmov	r3, s0
 80199f8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80199fc:	ee17 3a90 	vmov	r3, s15
 8019a00:	3401      	adds	r4, #1
 8019a02:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019a06:	e74c      	b.n	80198a2 <__kernel_rem_pio2f+0x1e6>
 8019a08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019a0c:	aa08      	add	r2, sp, #32
 8019a0e:	ee10 3a10 	vmov	r3, s0
 8019a12:	e7f6      	b.n	8019a02 <__kernel_rem_pio2f+0x346>
 8019a14:	a808      	add	r0, sp, #32
 8019a16:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019a1a:	9001      	str	r0, [sp, #4]
 8019a1c:	ee07 0a90 	vmov	s15, r0
 8019a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a24:	3b01      	subs	r3, #1
 8019a26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019a2a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019a2e:	ed62 7a01 	vstmdb	r2!, {s15}
 8019a32:	e743      	b.n	80198bc <__kernel_rem_pio2f+0x200>
 8019a34:	ecfc 6a01 	vldmia	ip!, {s13}
 8019a38:	ecb5 7a01 	vldmia	r5!, {s14}
 8019a3c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a40:	3001      	adds	r0, #1
 8019a42:	4550      	cmp	r0, sl
 8019a44:	dc01      	bgt.n	8019a4a <__kernel_rem_pio2f+0x38e>
 8019a46:	4290      	cmp	r0, r2
 8019a48:	ddf4      	ble.n	8019a34 <__kernel_rem_pio2f+0x378>
 8019a4a:	a858      	add	r0, sp, #352	@ 0x160
 8019a4c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019a50:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019a54:	3b01      	subs	r3, #1
 8019a56:	e735      	b.n	80198c4 <__kernel_rem_pio2f+0x208>
 8019a58:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019a5a:	2b02      	cmp	r3, #2
 8019a5c:	dc09      	bgt.n	8019a72 <__kernel_rem_pio2f+0x3b6>
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	dc27      	bgt.n	8019ab2 <__kernel_rem_pio2f+0x3f6>
 8019a62:	d040      	beq.n	8019ae6 <__kernel_rem_pio2f+0x42a>
 8019a64:	f009 0007 	and.w	r0, r9, #7
 8019a68:	b059      	add	sp, #356	@ 0x164
 8019a6a:	ecbd 8b04 	vpop	{d8-d9}
 8019a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a72:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019a74:	2b03      	cmp	r3, #3
 8019a76:	d1f5      	bne.n	8019a64 <__kernel_rem_pio2f+0x3a8>
 8019a78:	aa30      	add	r2, sp, #192	@ 0xc0
 8019a7a:	1f0b      	subs	r3, r1, #4
 8019a7c:	4413      	add	r3, r2
 8019a7e:	461a      	mov	r2, r3
 8019a80:	4620      	mov	r0, r4
 8019a82:	2800      	cmp	r0, #0
 8019a84:	dc50      	bgt.n	8019b28 <__kernel_rem_pio2f+0x46c>
 8019a86:	4622      	mov	r2, r4
 8019a88:	2a01      	cmp	r2, #1
 8019a8a:	dc5d      	bgt.n	8019b48 <__kernel_rem_pio2f+0x48c>
 8019a8c:	ab30      	add	r3, sp, #192	@ 0xc0
 8019a8e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 8019a92:	440b      	add	r3, r1
 8019a94:	2c01      	cmp	r4, #1
 8019a96:	dc67      	bgt.n	8019b68 <__kernel_rem_pio2f+0x4ac>
 8019a98:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019a9c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019aa0:	2e00      	cmp	r6, #0
 8019aa2:	d167      	bne.n	8019b74 <__kernel_rem_pio2f+0x4b8>
 8019aa4:	edc7 6a00 	vstr	s13, [r7]
 8019aa8:	ed87 7a01 	vstr	s14, [r7, #4]
 8019aac:	edc7 7a02 	vstr	s15, [r7, #8]
 8019ab0:	e7d8      	b.n	8019a64 <__kernel_rem_pio2f+0x3a8>
 8019ab2:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ab4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 8019ab8:	440b      	add	r3, r1
 8019aba:	4622      	mov	r2, r4
 8019abc:	2a00      	cmp	r2, #0
 8019abe:	da24      	bge.n	8019b0a <__kernel_rem_pio2f+0x44e>
 8019ac0:	b34e      	cbz	r6, 8019b16 <__kernel_rem_pio2f+0x45a>
 8019ac2:	eef1 7a47 	vneg.f32	s15, s14
 8019ac6:	edc7 7a00 	vstr	s15, [r7]
 8019aca:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ad2:	aa31      	add	r2, sp, #196	@ 0xc4
 8019ad4:	2301      	movs	r3, #1
 8019ad6:	429c      	cmp	r4, r3
 8019ad8:	da20      	bge.n	8019b1c <__kernel_rem_pio2f+0x460>
 8019ada:	b10e      	cbz	r6, 8019ae0 <__kernel_rem_pio2f+0x424>
 8019adc:	eef1 7a67 	vneg.f32	s15, s15
 8019ae0:	edc7 7a01 	vstr	s15, [r7, #4]
 8019ae4:	e7be      	b.n	8019a64 <__kernel_rem_pio2f+0x3a8>
 8019ae6:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ae8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80199b4 <__kernel_rem_pio2f+0x2f8>
 8019aec:	440b      	add	r3, r1
 8019aee:	2c00      	cmp	r4, #0
 8019af0:	da05      	bge.n	8019afe <__kernel_rem_pio2f+0x442>
 8019af2:	b10e      	cbz	r6, 8019af8 <__kernel_rem_pio2f+0x43c>
 8019af4:	eef1 7a67 	vneg.f32	s15, s15
 8019af8:	edc7 7a00 	vstr	s15, [r7]
 8019afc:	e7b2      	b.n	8019a64 <__kernel_rem_pio2f+0x3a8>
 8019afe:	ed33 7a01 	vldmdb	r3!, {s14}
 8019b02:	3c01      	subs	r4, #1
 8019b04:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b08:	e7f1      	b.n	8019aee <__kernel_rem_pio2f+0x432>
 8019b0a:	ed73 7a01 	vldmdb	r3!, {s15}
 8019b0e:	3a01      	subs	r2, #1
 8019b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019b14:	e7d2      	b.n	8019abc <__kernel_rem_pio2f+0x400>
 8019b16:	eef0 7a47 	vmov.f32	s15, s14
 8019b1a:	e7d4      	b.n	8019ac6 <__kernel_rem_pio2f+0x40a>
 8019b1c:	ecb2 7a01 	vldmia	r2!, {s14}
 8019b20:	3301      	adds	r3, #1
 8019b22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b26:	e7d6      	b.n	8019ad6 <__kernel_rem_pio2f+0x41a>
 8019b28:	ed72 7a01 	vldmdb	r2!, {s15}
 8019b2c:	edd2 6a01 	vldr	s13, [r2, #4]
 8019b30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019b34:	3801      	subs	r0, #1
 8019b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b3a:	ed82 7a00 	vstr	s14, [r2]
 8019b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b42:	edc2 7a01 	vstr	s15, [r2, #4]
 8019b46:	e79c      	b.n	8019a82 <__kernel_rem_pio2f+0x3c6>
 8019b48:	ed73 7a01 	vldmdb	r3!, {s15}
 8019b4c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019b50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019b54:	3a01      	subs	r2, #1
 8019b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b5a:	ed83 7a00 	vstr	s14, [r3]
 8019b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b62:	edc3 7a01 	vstr	s15, [r3, #4]
 8019b66:	e78f      	b.n	8019a88 <__kernel_rem_pio2f+0x3cc>
 8019b68:	ed33 7a01 	vldmdb	r3!, {s14}
 8019b6c:	3c01      	subs	r4, #1
 8019b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019b72:	e78f      	b.n	8019a94 <__kernel_rem_pio2f+0x3d8>
 8019b74:	eef1 6a66 	vneg.f32	s13, s13
 8019b78:	eeb1 7a47 	vneg.f32	s14, s14
 8019b7c:	edc7 6a00 	vstr	s13, [r7]
 8019b80:	ed87 7a01 	vstr	s14, [r7, #4]
 8019b84:	eef1 7a67 	vneg.f32	s15, s15
 8019b88:	e790      	b.n	8019aac <__kernel_rem_pio2f+0x3f0>
 8019b8a:	bf00      	nop

08019b8c <scalbnf>:
 8019b8c:	ee10 3a10 	vmov	r3, s0
 8019b90:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019b94:	d02b      	beq.n	8019bee <scalbnf+0x62>
 8019b96:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8019b9a:	d302      	bcc.n	8019ba2 <scalbnf+0x16>
 8019b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ba0:	4770      	bx	lr
 8019ba2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8019ba6:	d123      	bne.n	8019bf0 <scalbnf+0x64>
 8019ba8:	4b24      	ldr	r3, [pc, #144]	@ (8019c3c <scalbnf+0xb0>)
 8019baa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019c40 <scalbnf+0xb4>
 8019bae:	4298      	cmp	r0, r3
 8019bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019bb4:	db17      	blt.n	8019be6 <scalbnf+0x5a>
 8019bb6:	ee10 3a10 	vmov	r3, s0
 8019bba:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019bbe:	3a19      	subs	r2, #25
 8019bc0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8019bc4:	4288      	cmp	r0, r1
 8019bc6:	dd15      	ble.n	8019bf4 <scalbnf+0x68>
 8019bc8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019c44 <scalbnf+0xb8>
 8019bcc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019c48 <scalbnf+0xbc>
 8019bd0:	ee10 3a10 	vmov	r3, s0
 8019bd4:	eeb0 7a67 	vmov.f32	s14, s15
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	bfb8      	it	lt
 8019bdc:	eef0 7a66 	vmovlt.f32	s15, s13
 8019be0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019be4:	4770      	bx	lr
 8019be6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019c4c <scalbnf+0xc0>
 8019bea:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019bee:	4770      	bx	lr
 8019bf0:	0dd2      	lsrs	r2, r2, #23
 8019bf2:	e7e5      	b.n	8019bc0 <scalbnf+0x34>
 8019bf4:	4410      	add	r0, r2
 8019bf6:	28fe      	cmp	r0, #254	@ 0xfe
 8019bf8:	dce6      	bgt.n	8019bc8 <scalbnf+0x3c>
 8019bfa:	2800      	cmp	r0, #0
 8019bfc:	dd06      	ble.n	8019c0c <scalbnf+0x80>
 8019bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019c02:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019c06:	ee00 3a10 	vmov	s0, r3
 8019c0a:	4770      	bx	lr
 8019c0c:	f110 0f16 	cmn.w	r0, #22
 8019c10:	da09      	bge.n	8019c26 <scalbnf+0x9a>
 8019c12:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019c4c <scalbnf+0xc0>
 8019c16:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019c50 <scalbnf+0xc4>
 8019c1a:	ee10 3a10 	vmov	r3, s0
 8019c1e:	eeb0 7a67 	vmov.f32	s14, s15
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	e7d9      	b.n	8019bda <scalbnf+0x4e>
 8019c26:	3019      	adds	r0, #25
 8019c28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019c2c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019c30:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019c54 <scalbnf+0xc8>
 8019c34:	ee07 3a90 	vmov	s15, r3
 8019c38:	e7d7      	b.n	8019bea <scalbnf+0x5e>
 8019c3a:	bf00      	nop
 8019c3c:	ffff3cb0 	.word	0xffff3cb0
 8019c40:	4c000000 	.word	0x4c000000
 8019c44:	7149f2ca 	.word	0x7149f2ca
 8019c48:	f149f2ca 	.word	0xf149f2ca
 8019c4c:	0da24260 	.word	0x0da24260
 8019c50:	8da24260 	.word	0x8da24260
 8019c54:	33000000 	.word	0x33000000

08019c58 <floorf>:
 8019c58:	ee10 3a10 	vmov	r3, s0
 8019c5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019c60:	3a7f      	subs	r2, #127	@ 0x7f
 8019c62:	2a16      	cmp	r2, #22
 8019c64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019c68:	dc2b      	bgt.n	8019cc2 <floorf+0x6a>
 8019c6a:	2a00      	cmp	r2, #0
 8019c6c:	da12      	bge.n	8019c94 <floorf+0x3c>
 8019c6e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019cd4 <floorf+0x7c>
 8019c72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019c76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c7e:	dd06      	ble.n	8019c8e <floorf+0x36>
 8019c80:	2b00      	cmp	r3, #0
 8019c82:	da24      	bge.n	8019cce <floorf+0x76>
 8019c84:	2900      	cmp	r1, #0
 8019c86:	4b14      	ldr	r3, [pc, #80]	@ (8019cd8 <floorf+0x80>)
 8019c88:	bf08      	it	eq
 8019c8a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019c8e:	ee00 3a10 	vmov	s0, r3
 8019c92:	4770      	bx	lr
 8019c94:	4911      	ldr	r1, [pc, #68]	@ (8019cdc <floorf+0x84>)
 8019c96:	4111      	asrs	r1, r2
 8019c98:	420b      	tst	r3, r1
 8019c9a:	d0fa      	beq.n	8019c92 <floorf+0x3a>
 8019c9c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8019cd4 <floorf+0x7c>
 8019ca0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019ca4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cac:	ddef      	ble.n	8019c8e <floorf+0x36>
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	bfbe      	ittt	lt
 8019cb2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019cb6:	fa40 f202 	asrlt.w	r2, r0, r2
 8019cba:	189b      	addlt	r3, r3, r2
 8019cbc:	ea23 0301 	bic.w	r3, r3, r1
 8019cc0:	e7e5      	b.n	8019c8e <floorf+0x36>
 8019cc2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019cc6:	d3e4      	bcc.n	8019c92 <floorf+0x3a>
 8019cc8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ccc:	4770      	bx	lr
 8019cce:	2300      	movs	r3, #0
 8019cd0:	e7dd      	b.n	8019c8e <floorf+0x36>
 8019cd2:	bf00      	nop
 8019cd4:	7149f2ca 	.word	0x7149f2ca
 8019cd8:	bf800000 	.word	0xbf800000
 8019cdc:	007fffff 	.word	0x007fffff

08019ce0 <abort>:
 8019ce0:	b508      	push	{r3, lr}
 8019ce2:	2006      	movs	r0, #6
 8019ce4:	f000 feac 	bl	801aa40 <raise>
 8019ce8:	2001      	movs	r0, #1
 8019cea:	f7ed fb1f 	bl	800732c <_exit>
	...

08019cf0 <malloc>:
 8019cf0:	4b02      	ldr	r3, [pc, #8]	@ (8019cfc <malloc+0xc>)
 8019cf2:	4601      	mov	r1, r0
 8019cf4:	6818      	ldr	r0, [r3, #0]
 8019cf6:	f000 b82d 	b.w	8019d54 <_malloc_r>
 8019cfa:	bf00      	nop
 8019cfc:	20000130 	.word	0x20000130

08019d00 <free>:
 8019d00:	4b02      	ldr	r3, [pc, #8]	@ (8019d0c <free+0xc>)
 8019d02:	4601      	mov	r1, r0
 8019d04:	6818      	ldr	r0, [r3, #0]
 8019d06:	f001 bdaf 	b.w	801b868 <_free_r>
 8019d0a:	bf00      	nop
 8019d0c:	20000130 	.word	0x20000130

08019d10 <sbrk_aligned>:
 8019d10:	b570      	push	{r4, r5, r6, lr}
 8019d12:	4e0f      	ldr	r6, [pc, #60]	@ (8019d50 <sbrk_aligned+0x40>)
 8019d14:	460c      	mov	r4, r1
 8019d16:	6831      	ldr	r1, [r6, #0]
 8019d18:	4605      	mov	r5, r0
 8019d1a:	b911      	cbnz	r1, 8019d22 <sbrk_aligned+0x12>
 8019d1c:	f000 fee4 	bl	801aae8 <_sbrk_r>
 8019d20:	6030      	str	r0, [r6, #0]
 8019d22:	4621      	mov	r1, r4
 8019d24:	4628      	mov	r0, r5
 8019d26:	f000 fedf 	bl	801aae8 <_sbrk_r>
 8019d2a:	1c43      	adds	r3, r0, #1
 8019d2c:	d103      	bne.n	8019d36 <sbrk_aligned+0x26>
 8019d2e:	f04f 34ff 	mov.w	r4, #4294967295
 8019d32:	4620      	mov	r0, r4
 8019d34:	bd70      	pop	{r4, r5, r6, pc}
 8019d36:	1cc4      	adds	r4, r0, #3
 8019d38:	f024 0403 	bic.w	r4, r4, #3
 8019d3c:	42a0      	cmp	r0, r4
 8019d3e:	d0f8      	beq.n	8019d32 <sbrk_aligned+0x22>
 8019d40:	1a21      	subs	r1, r4, r0
 8019d42:	4628      	mov	r0, r5
 8019d44:	f000 fed0 	bl	801aae8 <_sbrk_r>
 8019d48:	3001      	adds	r0, #1
 8019d4a:	d1f2      	bne.n	8019d32 <sbrk_aligned+0x22>
 8019d4c:	e7ef      	b.n	8019d2e <sbrk_aligned+0x1e>
 8019d4e:	bf00      	nop
 8019d50:	200019c0 	.word	0x200019c0

08019d54 <_malloc_r>:
 8019d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019d58:	1ccd      	adds	r5, r1, #3
 8019d5a:	f025 0503 	bic.w	r5, r5, #3
 8019d5e:	3508      	adds	r5, #8
 8019d60:	2d0c      	cmp	r5, #12
 8019d62:	bf38      	it	cc
 8019d64:	250c      	movcc	r5, #12
 8019d66:	2d00      	cmp	r5, #0
 8019d68:	4606      	mov	r6, r0
 8019d6a:	db01      	blt.n	8019d70 <_malloc_r+0x1c>
 8019d6c:	42a9      	cmp	r1, r5
 8019d6e:	d904      	bls.n	8019d7a <_malloc_r+0x26>
 8019d70:	230c      	movs	r3, #12
 8019d72:	6033      	str	r3, [r6, #0]
 8019d74:	2000      	movs	r0, #0
 8019d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019e50 <_malloc_r+0xfc>
 8019d7e:	f000 f869 	bl	8019e54 <__malloc_lock>
 8019d82:	f8d8 3000 	ldr.w	r3, [r8]
 8019d86:	461c      	mov	r4, r3
 8019d88:	bb44      	cbnz	r4, 8019ddc <_malloc_r+0x88>
 8019d8a:	4629      	mov	r1, r5
 8019d8c:	4630      	mov	r0, r6
 8019d8e:	f7ff ffbf 	bl	8019d10 <sbrk_aligned>
 8019d92:	1c43      	adds	r3, r0, #1
 8019d94:	4604      	mov	r4, r0
 8019d96:	d158      	bne.n	8019e4a <_malloc_r+0xf6>
 8019d98:	f8d8 4000 	ldr.w	r4, [r8]
 8019d9c:	4627      	mov	r7, r4
 8019d9e:	2f00      	cmp	r7, #0
 8019da0:	d143      	bne.n	8019e2a <_malloc_r+0xd6>
 8019da2:	2c00      	cmp	r4, #0
 8019da4:	d04b      	beq.n	8019e3e <_malloc_r+0xea>
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	4639      	mov	r1, r7
 8019daa:	4630      	mov	r0, r6
 8019dac:	eb04 0903 	add.w	r9, r4, r3
 8019db0:	f000 fe9a 	bl	801aae8 <_sbrk_r>
 8019db4:	4581      	cmp	r9, r0
 8019db6:	d142      	bne.n	8019e3e <_malloc_r+0xea>
 8019db8:	6821      	ldr	r1, [r4, #0]
 8019dba:	1a6d      	subs	r5, r5, r1
 8019dbc:	4629      	mov	r1, r5
 8019dbe:	4630      	mov	r0, r6
 8019dc0:	f7ff ffa6 	bl	8019d10 <sbrk_aligned>
 8019dc4:	3001      	adds	r0, #1
 8019dc6:	d03a      	beq.n	8019e3e <_malloc_r+0xea>
 8019dc8:	6823      	ldr	r3, [r4, #0]
 8019dca:	442b      	add	r3, r5
 8019dcc:	6023      	str	r3, [r4, #0]
 8019dce:	f8d8 3000 	ldr.w	r3, [r8]
 8019dd2:	685a      	ldr	r2, [r3, #4]
 8019dd4:	bb62      	cbnz	r2, 8019e30 <_malloc_r+0xdc>
 8019dd6:	f8c8 7000 	str.w	r7, [r8]
 8019dda:	e00f      	b.n	8019dfc <_malloc_r+0xa8>
 8019ddc:	6822      	ldr	r2, [r4, #0]
 8019dde:	1b52      	subs	r2, r2, r5
 8019de0:	d420      	bmi.n	8019e24 <_malloc_r+0xd0>
 8019de2:	2a0b      	cmp	r2, #11
 8019de4:	d917      	bls.n	8019e16 <_malloc_r+0xc2>
 8019de6:	1961      	adds	r1, r4, r5
 8019de8:	42a3      	cmp	r3, r4
 8019dea:	6025      	str	r5, [r4, #0]
 8019dec:	bf18      	it	ne
 8019dee:	6059      	strne	r1, [r3, #4]
 8019df0:	6863      	ldr	r3, [r4, #4]
 8019df2:	bf08      	it	eq
 8019df4:	f8c8 1000 	streq.w	r1, [r8]
 8019df8:	5162      	str	r2, [r4, r5]
 8019dfa:	604b      	str	r3, [r1, #4]
 8019dfc:	4630      	mov	r0, r6
 8019dfe:	f000 f82f 	bl	8019e60 <__malloc_unlock>
 8019e02:	f104 000b 	add.w	r0, r4, #11
 8019e06:	1d23      	adds	r3, r4, #4
 8019e08:	f020 0007 	bic.w	r0, r0, #7
 8019e0c:	1ac2      	subs	r2, r0, r3
 8019e0e:	bf1c      	itt	ne
 8019e10:	1a1b      	subne	r3, r3, r0
 8019e12:	50a3      	strne	r3, [r4, r2]
 8019e14:	e7af      	b.n	8019d76 <_malloc_r+0x22>
 8019e16:	6862      	ldr	r2, [r4, #4]
 8019e18:	42a3      	cmp	r3, r4
 8019e1a:	bf0c      	ite	eq
 8019e1c:	f8c8 2000 	streq.w	r2, [r8]
 8019e20:	605a      	strne	r2, [r3, #4]
 8019e22:	e7eb      	b.n	8019dfc <_malloc_r+0xa8>
 8019e24:	4623      	mov	r3, r4
 8019e26:	6864      	ldr	r4, [r4, #4]
 8019e28:	e7ae      	b.n	8019d88 <_malloc_r+0x34>
 8019e2a:	463c      	mov	r4, r7
 8019e2c:	687f      	ldr	r7, [r7, #4]
 8019e2e:	e7b6      	b.n	8019d9e <_malloc_r+0x4a>
 8019e30:	461a      	mov	r2, r3
 8019e32:	685b      	ldr	r3, [r3, #4]
 8019e34:	42a3      	cmp	r3, r4
 8019e36:	d1fb      	bne.n	8019e30 <_malloc_r+0xdc>
 8019e38:	2300      	movs	r3, #0
 8019e3a:	6053      	str	r3, [r2, #4]
 8019e3c:	e7de      	b.n	8019dfc <_malloc_r+0xa8>
 8019e3e:	230c      	movs	r3, #12
 8019e40:	6033      	str	r3, [r6, #0]
 8019e42:	4630      	mov	r0, r6
 8019e44:	f000 f80c 	bl	8019e60 <__malloc_unlock>
 8019e48:	e794      	b.n	8019d74 <_malloc_r+0x20>
 8019e4a:	6005      	str	r5, [r0, #0]
 8019e4c:	e7d6      	b.n	8019dfc <_malloc_r+0xa8>
 8019e4e:	bf00      	nop
 8019e50:	200019c4 	.word	0x200019c4

08019e54 <__malloc_lock>:
 8019e54:	4801      	ldr	r0, [pc, #4]	@ (8019e5c <__malloc_lock+0x8>)
 8019e56:	f000 be94 	b.w	801ab82 <__retarget_lock_acquire_recursive>
 8019e5a:	bf00      	nop
 8019e5c:	20001b08 	.word	0x20001b08

08019e60 <__malloc_unlock>:
 8019e60:	4801      	ldr	r0, [pc, #4]	@ (8019e68 <__malloc_unlock+0x8>)
 8019e62:	f000 be8f 	b.w	801ab84 <__retarget_lock_release_recursive>
 8019e66:	bf00      	nop
 8019e68:	20001b08 	.word	0x20001b08

08019e6c <__cvt>:
 8019e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e70:	ec57 6b10 	vmov	r6, r7, d0
 8019e74:	2f00      	cmp	r7, #0
 8019e76:	460c      	mov	r4, r1
 8019e78:	4619      	mov	r1, r3
 8019e7a:	463b      	mov	r3, r7
 8019e7c:	bfbb      	ittet	lt
 8019e7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8019e82:	461f      	movlt	r7, r3
 8019e84:	2300      	movge	r3, #0
 8019e86:	232d      	movlt	r3, #45	@ 0x2d
 8019e88:	700b      	strb	r3, [r1, #0]
 8019e8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019e8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019e90:	4691      	mov	r9, r2
 8019e92:	f023 0820 	bic.w	r8, r3, #32
 8019e96:	bfbc      	itt	lt
 8019e98:	4632      	movlt	r2, r6
 8019e9a:	4616      	movlt	r6, r2
 8019e9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019ea0:	d005      	beq.n	8019eae <__cvt+0x42>
 8019ea2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019ea6:	d100      	bne.n	8019eaa <__cvt+0x3e>
 8019ea8:	3401      	adds	r4, #1
 8019eaa:	2102      	movs	r1, #2
 8019eac:	e000      	b.n	8019eb0 <__cvt+0x44>
 8019eae:	2103      	movs	r1, #3
 8019eb0:	ab03      	add	r3, sp, #12
 8019eb2:	9301      	str	r3, [sp, #4]
 8019eb4:	ab02      	add	r3, sp, #8
 8019eb6:	9300      	str	r3, [sp, #0]
 8019eb8:	ec47 6b10 	vmov	d0, r6, r7
 8019ebc:	4653      	mov	r3, sl
 8019ebe:	4622      	mov	r2, r4
 8019ec0:	f000 ff02 	bl	801acc8 <_dtoa_r>
 8019ec4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019ec8:	4605      	mov	r5, r0
 8019eca:	d119      	bne.n	8019f00 <__cvt+0x94>
 8019ecc:	f019 0f01 	tst.w	r9, #1
 8019ed0:	d00e      	beq.n	8019ef0 <__cvt+0x84>
 8019ed2:	eb00 0904 	add.w	r9, r0, r4
 8019ed6:	2200      	movs	r2, #0
 8019ed8:	2300      	movs	r3, #0
 8019eda:	4630      	mov	r0, r6
 8019edc:	4639      	mov	r1, r7
 8019ede:	f7e6 fddb 	bl	8000a98 <__aeabi_dcmpeq>
 8019ee2:	b108      	cbz	r0, 8019ee8 <__cvt+0x7c>
 8019ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8019ee8:	2230      	movs	r2, #48	@ 0x30
 8019eea:	9b03      	ldr	r3, [sp, #12]
 8019eec:	454b      	cmp	r3, r9
 8019eee:	d31e      	bcc.n	8019f2e <__cvt+0xc2>
 8019ef0:	9b03      	ldr	r3, [sp, #12]
 8019ef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ef4:	1b5b      	subs	r3, r3, r5
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	6013      	str	r3, [r2, #0]
 8019efa:	b004      	add	sp, #16
 8019efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019f04:	eb00 0904 	add.w	r9, r0, r4
 8019f08:	d1e5      	bne.n	8019ed6 <__cvt+0x6a>
 8019f0a:	7803      	ldrb	r3, [r0, #0]
 8019f0c:	2b30      	cmp	r3, #48	@ 0x30
 8019f0e:	d10a      	bne.n	8019f26 <__cvt+0xba>
 8019f10:	2200      	movs	r2, #0
 8019f12:	2300      	movs	r3, #0
 8019f14:	4630      	mov	r0, r6
 8019f16:	4639      	mov	r1, r7
 8019f18:	f7e6 fdbe 	bl	8000a98 <__aeabi_dcmpeq>
 8019f1c:	b918      	cbnz	r0, 8019f26 <__cvt+0xba>
 8019f1e:	f1c4 0401 	rsb	r4, r4, #1
 8019f22:	f8ca 4000 	str.w	r4, [sl]
 8019f26:	f8da 3000 	ldr.w	r3, [sl]
 8019f2a:	4499      	add	r9, r3
 8019f2c:	e7d3      	b.n	8019ed6 <__cvt+0x6a>
 8019f2e:	1c59      	adds	r1, r3, #1
 8019f30:	9103      	str	r1, [sp, #12]
 8019f32:	701a      	strb	r2, [r3, #0]
 8019f34:	e7d9      	b.n	8019eea <__cvt+0x7e>

08019f36 <__exponent>:
 8019f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019f38:	2900      	cmp	r1, #0
 8019f3a:	bfba      	itte	lt
 8019f3c:	4249      	neglt	r1, r1
 8019f3e:	232d      	movlt	r3, #45	@ 0x2d
 8019f40:	232b      	movge	r3, #43	@ 0x2b
 8019f42:	2909      	cmp	r1, #9
 8019f44:	7002      	strb	r2, [r0, #0]
 8019f46:	7043      	strb	r3, [r0, #1]
 8019f48:	dd29      	ble.n	8019f9e <__exponent+0x68>
 8019f4a:	f10d 0307 	add.w	r3, sp, #7
 8019f4e:	461d      	mov	r5, r3
 8019f50:	270a      	movs	r7, #10
 8019f52:	461a      	mov	r2, r3
 8019f54:	fbb1 f6f7 	udiv	r6, r1, r7
 8019f58:	fb07 1416 	mls	r4, r7, r6, r1
 8019f5c:	3430      	adds	r4, #48	@ 0x30
 8019f5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019f62:	460c      	mov	r4, r1
 8019f64:	2c63      	cmp	r4, #99	@ 0x63
 8019f66:	f103 33ff 	add.w	r3, r3, #4294967295
 8019f6a:	4631      	mov	r1, r6
 8019f6c:	dcf1      	bgt.n	8019f52 <__exponent+0x1c>
 8019f6e:	3130      	adds	r1, #48	@ 0x30
 8019f70:	1e94      	subs	r4, r2, #2
 8019f72:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019f76:	1c41      	adds	r1, r0, #1
 8019f78:	4623      	mov	r3, r4
 8019f7a:	42ab      	cmp	r3, r5
 8019f7c:	d30a      	bcc.n	8019f94 <__exponent+0x5e>
 8019f7e:	f10d 0309 	add.w	r3, sp, #9
 8019f82:	1a9b      	subs	r3, r3, r2
 8019f84:	42ac      	cmp	r4, r5
 8019f86:	bf88      	it	hi
 8019f88:	2300      	movhi	r3, #0
 8019f8a:	3302      	adds	r3, #2
 8019f8c:	4403      	add	r3, r0
 8019f8e:	1a18      	subs	r0, r3, r0
 8019f90:	b003      	add	sp, #12
 8019f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f94:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019f98:	f801 6f01 	strb.w	r6, [r1, #1]!
 8019f9c:	e7ed      	b.n	8019f7a <__exponent+0x44>
 8019f9e:	2330      	movs	r3, #48	@ 0x30
 8019fa0:	3130      	adds	r1, #48	@ 0x30
 8019fa2:	7083      	strb	r3, [r0, #2]
 8019fa4:	70c1      	strb	r1, [r0, #3]
 8019fa6:	1d03      	adds	r3, r0, #4
 8019fa8:	e7f1      	b.n	8019f8e <__exponent+0x58>
	...

08019fac <_printf_float>:
 8019fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fb0:	b08d      	sub	sp, #52	@ 0x34
 8019fb2:	460c      	mov	r4, r1
 8019fb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019fb8:	4616      	mov	r6, r2
 8019fba:	461f      	mov	r7, r3
 8019fbc:	4605      	mov	r5, r0
 8019fbe:	f000 fd47 	bl	801aa50 <_localeconv_r>
 8019fc2:	6803      	ldr	r3, [r0, #0]
 8019fc4:	9304      	str	r3, [sp, #16]
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7e6 f93a 	bl	8000240 <strlen>
 8019fcc:	2300      	movs	r3, #0
 8019fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8019fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8019fd4:	9005      	str	r0, [sp, #20]
 8019fd6:	3307      	adds	r3, #7
 8019fd8:	f023 0307 	bic.w	r3, r3, #7
 8019fdc:	f103 0208 	add.w	r2, r3, #8
 8019fe0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019fe4:	f8d4 b000 	ldr.w	fp, [r4]
 8019fe8:	f8c8 2000 	str.w	r2, [r8]
 8019fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019ff0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019ff4:	9307      	str	r3, [sp, #28]
 8019ff6:	f8cd 8018 	str.w	r8, [sp, #24]
 8019ffa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8019ffe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a002:	4b9c      	ldr	r3, [pc, #624]	@ (801a274 <_printf_float+0x2c8>)
 801a004:	f04f 32ff 	mov.w	r2, #4294967295
 801a008:	f7e6 fd78 	bl	8000afc <__aeabi_dcmpun>
 801a00c:	bb70      	cbnz	r0, 801a06c <_printf_float+0xc0>
 801a00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a012:	4b98      	ldr	r3, [pc, #608]	@ (801a274 <_printf_float+0x2c8>)
 801a014:	f04f 32ff 	mov.w	r2, #4294967295
 801a018:	f7e6 fd52 	bl	8000ac0 <__aeabi_dcmple>
 801a01c:	bb30      	cbnz	r0, 801a06c <_printf_float+0xc0>
 801a01e:	2200      	movs	r2, #0
 801a020:	2300      	movs	r3, #0
 801a022:	4640      	mov	r0, r8
 801a024:	4649      	mov	r1, r9
 801a026:	f7e6 fd41 	bl	8000aac <__aeabi_dcmplt>
 801a02a:	b110      	cbz	r0, 801a032 <_printf_float+0x86>
 801a02c:	232d      	movs	r3, #45	@ 0x2d
 801a02e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a032:	4a91      	ldr	r2, [pc, #580]	@ (801a278 <_printf_float+0x2cc>)
 801a034:	4b91      	ldr	r3, [pc, #580]	@ (801a27c <_printf_float+0x2d0>)
 801a036:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a03a:	bf8c      	ite	hi
 801a03c:	4690      	movhi	r8, r2
 801a03e:	4698      	movls	r8, r3
 801a040:	2303      	movs	r3, #3
 801a042:	6123      	str	r3, [r4, #16]
 801a044:	f02b 0304 	bic.w	r3, fp, #4
 801a048:	6023      	str	r3, [r4, #0]
 801a04a:	f04f 0900 	mov.w	r9, #0
 801a04e:	9700      	str	r7, [sp, #0]
 801a050:	4633      	mov	r3, r6
 801a052:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a054:	4621      	mov	r1, r4
 801a056:	4628      	mov	r0, r5
 801a058:	f000 f9d2 	bl	801a400 <_printf_common>
 801a05c:	3001      	adds	r0, #1
 801a05e:	f040 808d 	bne.w	801a17c <_printf_float+0x1d0>
 801a062:	f04f 30ff 	mov.w	r0, #4294967295
 801a066:	b00d      	add	sp, #52	@ 0x34
 801a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a06c:	4642      	mov	r2, r8
 801a06e:	464b      	mov	r3, r9
 801a070:	4640      	mov	r0, r8
 801a072:	4649      	mov	r1, r9
 801a074:	f7e6 fd42 	bl	8000afc <__aeabi_dcmpun>
 801a078:	b140      	cbz	r0, 801a08c <_printf_float+0xe0>
 801a07a:	464b      	mov	r3, r9
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	bfbc      	itt	lt
 801a080:	232d      	movlt	r3, #45	@ 0x2d
 801a082:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a086:	4a7e      	ldr	r2, [pc, #504]	@ (801a280 <_printf_float+0x2d4>)
 801a088:	4b7e      	ldr	r3, [pc, #504]	@ (801a284 <_printf_float+0x2d8>)
 801a08a:	e7d4      	b.n	801a036 <_printf_float+0x8a>
 801a08c:	6863      	ldr	r3, [r4, #4]
 801a08e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a092:	9206      	str	r2, [sp, #24]
 801a094:	1c5a      	adds	r2, r3, #1
 801a096:	d13b      	bne.n	801a110 <_printf_float+0x164>
 801a098:	2306      	movs	r3, #6
 801a09a:	6063      	str	r3, [r4, #4]
 801a09c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	6022      	str	r2, [r4, #0]
 801a0a4:	9303      	str	r3, [sp, #12]
 801a0a6:	ab0a      	add	r3, sp, #40	@ 0x28
 801a0a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a0ac:	ab09      	add	r3, sp, #36	@ 0x24
 801a0ae:	9300      	str	r3, [sp, #0]
 801a0b0:	6861      	ldr	r1, [r4, #4]
 801a0b2:	ec49 8b10 	vmov	d0, r8, r9
 801a0b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a0ba:	4628      	mov	r0, r5
 801a0bc:	f7ff fed6 	bl	8019e6c <__cvt>
 801a0c0:	9b06      	ldr	r3, [sp, #24]
 801a0c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0c4:	2b47      	cmp	r3, #71	@ 0x47
 801a0c6:	4680      	mov	r8, r0
 801a0c8:	d129      	bne.n	801a11e <_printf_float+0x172>
 801a0ca:	1cc8      	adds	r0, r1, #3
 801a0cc:	db02      	blt.n	801a0d4 <_printf_float+0x128>
 801a0ce:	6863      	ldr	r3, [r4, #4]
 801a0d0:	4299      	cmp	r1, r3
 801a0d2:	dd41      	ble.n	801a158 <_printf_float+0x1ac>
 801a0d4:	f1aa 0a02 	sub.w	sl, sl, #2
 801a0d8:	fa5f fa8a 	uxtb.w	sl, sl
 801a0dc:	3901      	subs	r1, #1
 801a0de:	4652      	mov	r2, sl
 801a0e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a0e4:	9109      	str	r1, [sp, #36]	@ 0x24
 801a0e6:	f7ff ff26 	bl	8019f36 <__exponent>
 801a0ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a0ec:	1813      	adds	r3, r2, r0
 801a0ee:	2a01      	cmp	r2, #1
 801a0f0:	4681      	mov	r9, r0
 801a0f2:	6123      	str	r3, [r4, #16]
 801a0f4:	dc02      	bgt.n	801a0fc <_printf_float+0x150>
 801a0f6:	6822      	ldr	r2, [r4, #0]
 801a0f8:	07d2      	lsls	r2, r2, #31
 801a0fa:	d501      	bpl.n	801a100 <_printf_float+0x154>
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	6123      	str	r3, [r4, #16]
 801a100:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a104:	2b00      	cmp	r3, #0
 801a106:	d0a2      	beq.n	801a04e <_printf_float+0xa2>
 801a108:	232d      	movs	r3, #45	@ 0x2d
 801a10a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a10e:	e79e      	b.n	801a04e <_printf_float+0xa2>
 801a110:	9a06      	ldr	r2, [sp, #24]
 801a112:	2a47      	cmp	r2, #71	@ 0x47
 801a114:	d1c2      	bne.n	801a09c <_printf_float+0xf0>
 801a116:	2b00      	cmp	r3, #0
 801a118:	d1c0      	bne.n	801a09c <_printf_float+0xf0>
 801a11a:	2301      	movs	r3, #1
 801a11c:	e7bd      	b.n	801a09a <_printf_float+0xee>
 801a11e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a122:	d9db      	bls.n	801a0dc <_printf_float+0x130>
 801a124:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a128:	d118      	bne.n	801a15c <_printf_float+0x1b0>
 801a12a:	2900      	cmp	r1, #0
 801a12c:	6863      	ldr	r3, [r4, #4]
 801a12e:	dd0b      	ble.n	801a148 <_printf_float+0x19c>
 801a130:	6121      	str	r1, [r4, #16]
 801a132:	b913      	cbnz	r3, 801a13a <_printf_float+0x18e>
 801a134:	6822      	ldr	r2, [r4, #0]
 801a136:	07d0      	lsls	r0, r2, #31
 801a138:	d502      	bpl.n	801a140 <_printf_float+0x194>
 801a13a:	3301      	adds	r3, #1
 801a13c:	440b      	add	r3, r1
 801a13e:	6123      	str	r3, [r4, #16]
 801a140:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a142:	f04f 0900 	mov.w	r9, #0
 801a146:	e7db      	b.n	801a100 <_printf_float+0x154>
 801a148:	b913      	cbnz	r3, 801a150 <_printf_float+0x1a4>
 801a14a:	6822      	ldr	r2, [r4, #0]
 801a14c:	07d2      	lsls	r2, r2, #31
 801a14e:	d501      	bpl.n	801a154 <_printf_float+0x1a8>
 801a150:	3302      	adds	r3, #2
 801a152:	e7f4      	b.n	801a13e <_printf_float+0x192>
 801a154:	2301      	movs	r3, #1
 801a156:	e7f2      	b.n	801a13e <_printf_float+0x192>
 801a158:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a15e:	4299      	cmp	r1, r3
 801a160:	db05      	blt.n	801a16e <_printf_float+0x1c2>
 801a162:	6823      	ldr	r3, [r4, #0]
 801a164:	6121      	str	r1, [r4, #16]
 801a166:	07d8      	lsls	r0, r3, #31
 801a168:	d5ea      	bpl.n	801a140 <_printf_float+0x194>
 801a16a:	1c4b      	adds	r3, r1, #1
 801a16c:	e7e7      	b.n	801a13e <_printf_float+0x192>
 801a16e:	2900      	cmp	r1, #0
 801a170:	bfd4      	ite	le
 801a172:	f1c1 0202 	rsble	r2, r1, #2
 801a176:	2201      	movgt	r2, #1
 801a178:	4413      	add	r3, r2
 801a17a:	e7e0      	b.n	801a13e <_printf_float+0x192>
 801a17c:	6823      	ldr	r3, [r4, #0]
 801a17e:	055a      	lsls	r2, r3, #21
 801a180:	d407      	bmi.n	801a192 <_printf_float+0x1e6>
 801a182:	6923      	ldr	r3, [r4, #16]
 801a184:	4642      	mov	r2, r8
 801a186:	4631      	mov	r1, r6
 801a188:	4628      	mov	r0, r5
 801a18a:	47b8      	blx	r7
 801a18c:	3001      	adds	r0, #1
 801a18e:	d12b      	bne.n	801a1e8 <_printf_float+0x23c>
 801a190:	e767      	b.n	801a062 <_printf_float+0xb6>
 801a192:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a196:	f240 80dd 	bls.w	801a354 <_printf_float+0x3a8>
 801a19a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a19e:	2200      	movs	r2, #0
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	f7e6 fc79 	bl	8000a98 <__aeabi_dcmpeq>
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	d033      	beq.n	801a212 <_printf_float+0x266>
 801a1aa:	4a37      	ldr	r2, [pc, #220]	@ (801a288 <_printf_float+0x2dc>)
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	4631      	mov	r1, r6
 801a1b0:	4628      	mov	r0, r5
 801a1b2:	47b8      	blx	r7
 801a1b4:	3001      	adds	r0, #1
 801a1b6:	f43f af54 	beq.w	801a062 <_printf_float+0xb6>
 801a1ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a1be:	4543      	cmp	r3, r8
 801a1c0:	db02      	blt.n	801a1c8 <_printf_float+0x21c>
 801a1c2:	6823      	ldr	r3, [r4, #0]
 801a1c4:	07d8      	lsls	r0, r3, #31
 801a1c6:	d50f      	bpl.n	801a1e8 <_printf_float+0x23c>
 801a1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a1cc:	4631      	mov	r1, r6
 801a1ce:	4628      	mov	r0, r5
 801a1d0:	47b8      	blx	r7
 801a1d2:	3001      	adds	r0, #1
 801a1d4:	f43f af45 	beq.w	801a062 <_printf_float+0xb6>
 801a1d8:	f04f 0900 	mov.w	r9, #0
 801a1dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801a1e0:	f104 0a1a 	add.w	sl, r4, #26
 801a1e4:	45c8      	cmp	r8, r9
 801a1e6:	dc09      	bgt.n	801a1fc <_printf_float+0x250>
 801a1e8:	6823      	ldr	r3, [r4, #0]
 801a1ea:	079b      	lsls	r3, r3, #30
 801a1ec:	f100 8103 	bmi.w	801a3f6 <_printf_float+0x44a>
 801a1f0:	68e0      	ldr	r0, [r4, #12]
 801a1f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1f4:	4298      	cmp	r0, r3
 801a1f6:	bfb8      	it	lt
 801a1f8:	4618      	movlt	r0, r3
 801a1fa:	e734      	b.n	801a066 <_printf_float+0xba>
 801a1fc:	2301      	movs	r3, #1
 801a1fe:	4652      	mov	r2, sl
 801a200:	4631      	mov	r1, r6
 801a202:	4628      	mov	r0, r5
 801a204:	47b8      	blx	r7
 801a206:	3001      	adds	r0, #1
 801a208:	f43f af2b 	beq.w	801a062 <_printf_float+0xb6>
 801a20c:	f109 0901 	add.w	r9, r9, #1
 801a210:	e7e8      	b.n	801a1e4 <_printf_float+0x238>
 801a212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a214:	2b00      	cmp	r3, #0
 801a216:	dc39      	bgt.n	801a28c <_printf_float+0x2e0>
 801a218:	4a1b      	ldr	r2, [pc, #108]	@ (801a288 <_printf_float+0x2dc>)
 801a21a:	2301      	movs	r3, #1
 801a21c:	4631      	mov	r1, r6
 801a21e:	4628      	mov	r0, r5
 801a220:	47b8      	blx	r7
 801a222:	3001      	adds	r0, #1
 801a224:	f43f af1d 	beq.w	801a062 <_printf_float+0xb6>
 801a228:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a22c:	ea59 0303 	orrs.w	r3, r9, r3
 801a230:	d102      	bne.n	801a238 <_printf_float+0x28c>
 801a232:	6823      	ldr	r3, [r4, #0]
 801a234:	07d9      	lsls	r1, r3, #31
 801a236:	d5d7      	bpl.n	801a1e8 <_printf_float+0x23c>
 801a238:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a23c:	4631      	mov	r1, r6
 801a23e:	4628      	mov	r0, r5
 801a240:	47b8      	blx	r7
 801a242:	3001      	adds	r0, #1
 801a244:	f43f af0d 	beq.w	801a062 <_printf_float+0xb6>
 801a248:	f04f 0a00 	mov.w	sl, #0
 801a24c:	f104 0b1a 	add.w	fp, r4, #26
 801a250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a252:	425b      	negs	r3, r3
 801a254:	4553      	cmp	r3, sl
 801a256:	dc01      	bgt.n	801a25c <_printf_float+0x2b0>
 801a258:	464b      	mov	r3, r9
 801a25a:	e793      	b.n	801a184 <_printf_float+0x1d8>
 801a25c:	2301      	movs	r3, #1
 801a25e:	465a      	mov	r2, fp
 801a260:	4631      	mov	r1, r6
 801a262:	4628      	mov	r0, r5
 801a264:	47b8      	blx	r7
 801a266:	3001      	adds	r0, #1
 801a268:	f43f aefb 	beq.w	801a062 <_printf_float+0xb6>
 801a26c:	f10a 0a01 	add.w	sl, sl, #1
 801a270:	e7ee      	b.n	801a250 <_printf_float+0x2a4>
 801a272:	bf00      	nop
 801a274:	7fefffff 	.word	0x7fefffff
 801a278:	0801e0b8 	.word	0x0801e0b8
 801a27c:	0801e0b4 	.word	0x0801e0b4
 801a280:	0801e0c0 	.word	0x0801e0c0
 801a284:	0801e0bc 	.word	0x0801e0bc
 801a288:	0801e0c4 	.word	0x0801e0c4
 801a28c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a28e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a292:	4553      	cmp	r3, sl
 801a294:	bfa8      	it	ge
 801a296:	4653      	movge	r3, sl
 801a298:	2b00      	cmp	r3, #0
 801a29a:	4699      	mov	r9, r3
 801a29c:	dc36      	bgt.n	801a30c <_printf_float+0x360>
 801a29e:	f04f 0b00 	mov.w	fp, #0
 801a2a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2a6:	f104 021a 	add.w	r2, r4, #26
 801a2aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a2ac:	9306      	str	r3, [sp, #24]
 801a2ae:	eba3 0309 	sub.w	r3, r3, r9
 801a2b2:	455b      	cmp	r3, fp
 801a2b4:	dc31      	bgt.n	801a31a <_printf_float+0x36e>
 801a2b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2b8:	459a      	cmp	sl, r3
 801a2ba:	dc3a      	bgt.n	801a332 <_printf_float+0x386>
 801a2bc:	6823      	ldr	r3, [r4, #0]
 801a2be:	07da      	lsls	r2, r3, #31
 801a2c0:	d437      	bmi.n	801a332 <_printf_float+0x386>
 801a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2c4:	ebaa 0903 	sub.w	r9, sl, r3
 801a2c8:	9b06      	ldr	r3, [sp, #24]
 801a2ca:	ebaa 0303 	sub.w	r3, sl, r3
 801a2ce:	4599      	cmp	r9, r3
 801a2d0:	bfa8      	it	ge
 801a2d2:	4699      	movge	r9, r3
 801a2d4:	f1b9 0f00 	cmp.w	r9, #0
 801a2d8:	dc33      	bgt.n	801a342 <_printf_float+0x396>
 801a2da:	f04f 0800 	mov.w	r8, #0
 801a2de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2e2:	f104 0b1a 	add.w	fp, r4, #26
 801a2e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2e8:	ebaa 0303 	sub.w	r3, sl, r3
 801a2ec:	eba3 0309 	sub.w	r3, r3, r9
 801a2f0:	4543      	cmp	r3, r8
 801a2f2:	f77f af79 	ble.w	801a1e8 <_printf_float+0x23c>
 801a2f6:	2301      	movs	r3, #1
 801a2f8:	465a      	mov	r2, fp
 801a2fa:	4631      	mov	r1, r6
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	47b8      	blx	r7
 801a300:	3001      	adds	r0, #1
 801a302:	f43f aeae 	beq.w	801a062 <_printf_float+0xb6>
 801a306:	f108 0801 	add.w	r8, r8, #1
 801a30a:	e7ec      	b.n	801a2e6 <_printf_float+0x33a>
 801a30c:	4642      	mov	r2, r8
 801a30e:	4631      	mov	r1, r6
 801a310:	4628      	mov	r0, r5
 801a312:	47b8      	blx	r7
 801a314:	3001      	adds	r0, #1
 801a316:	d1c2      	bne.n	801a29e <_printf_float+0x2f2>
 801a318:	e6a3      	b.n	801a062 <_printf_float+0xb6>
 801a31a:	2301      	movs	r3, #1
 801a31c:	4631      	mov	r1, r6
 801a31e:	4628      	mov	r0, r5
 801a320:	9206      	str	r2, [sp, #24]
 801a322:	47b8      	blx	r7
 801a324:	3001      	adds	r0, #1
 801a326:	f43f ae9c 	beq.w	801a062 <_printf_float+0xb6>
 801a32a:	9a06      	ldr	r2, [sp, #24]
 801a32c:	f10b 0b01 	add.w	fp, fp, #1
 801a330:	e7bb      	b.n	801a2aa <_printf_float+0x2fe>
 801a332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a336:	4631      	mov	r1, r6
 801a338:	4628      	mov	r0, r5
 801a33a:	47b8      	blx	r7
 801a33c:	3001      	adds	r0, #1
 801a33e:	d1c0      	bne.n	801a2c2 <_printf_float+0x316>
 801a340:	e68f      	b.n	801a062 <_printf_float+0xb6>
 801a342:	9a06      	ldr	r2, [sp, #24]
 801a344:	464b      	mov	r3, r9
 801a346:	4442      	add	r2, r8
 801a348:	4631      	mov	r1, r6
 801a34a:	4628      	mov	r0, r5
 801a34c:	47b8      	blx	r7
 801a34e:	3001      	adds	r0, #1
 801a350:	d1c3      	bne.n	801a2da <_printf_float+0x32e>
 801a352:	e686      	b.n	801a062 <_printf_float+0xb6>
 801a354:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a358:	f1ba 0f01 	cmp.w	sl, #1
 801a35c:	dc01      	bgt.n	801a362 <_printf_float+0x3b6>
 801a35e:	07db      	lsls	r3, r3, #31
 801a360:	d536      	bpl.n	801a3d0 <_printf_float+0x424>
 801a362:	2301      	movs	r3, #1
 801a364:	4642      	mov	r2, r8
 801a366:	4631      	mov	r1, r6
 801a368:	4628      	mov	r0, r5
 801a36a:	47b8      	blx	r7
 801a36c:	3001      	adds	r0, #1
 801a36e:	f43f ae78 	beq.w	801a062 <_printf_float+0xb6>
 801a372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a376:	4631      	mov	r1, r6
 801a378:	4628      	mov	r0, r5
 801a37a:	47b8      	blx	r7
 801a37c:	3001      	adds	r0, #1
 801a37e:	f43f ae70 	beq.w	801a062 <_printf_float+0xb6>
 801a382:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a386:	2200      	movs	r2, #0
 801a388:	2300      	movs	r3, #0
 801a38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a38e:	f7e6 fb83 	bl	8000a98 <__aeabi_dcmpeq>
 801a392:	b9c0      	cbnz	r0, 801a3c6 <_printf_float+0x41a>
 801a394:	4653      	mov	r3, sl
 801a396:	f108 0201 	add.w	r2, r8, #1
 801a39a:	4631      	mov	r1, r6
 801a39c:	4628      	mov	r0, r5
 801a39e:	47b8      	blx	r7
 801a3a0:	3001      	adds	r0, #1
 801a3a2:	d10c      	bne.n	801a3be <_printf_float+0x412>
 801a3a4:	e65d      	b.n	801a062 <_printf_float+0xb6>
 801a3a6:	2301      	movs	r3, #1
 801a3a8:	465a      	mov	r2, fp
 801a3aa:	4631      	mov	r1, r6
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	47b8      	blx	r7
 801a3b0:	3001      	adds	r0, #1
 801a3b2:	f43f ae56 	beq.w	801a062 <_printf_float+0xb6>
 801a3b6:	f108 0801 	add.w	r8, r8, #1
 801a3ba:	45d0      	cmp	r8, sl
 801a3bc:	dbf3      	blt.n	801a3a6 <_printf_float+0x3fa>
 801a3be:	464b      	mov	r3, r9
 801a3c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a3c4:	e6df      	b.n	801a186 <_printf_float+0x1da>
 801a3c6:	f04f 0800 	mov.w	r8, #0
 801a3ca:	f104 0b1a 	add.w	fp, r4, #26
 801a3ce:	e7f4      	b.n	801a3ba <_printf_float+0x40e>
 801a3d0:	2301      	movs	r3, #1
 801a3d2:	4642      	mov	r2, r8
 801a3d4:	e7e1      	b.n	801a39a <_printf_float+0x3ee>
 801a3d6:	2301      	movs	r3, #1
 801a3d8:	464a      	mov	r2, r9
 801a3da:	4631      	mov	r1, r6
 801a3dc:	4628      	mov	r0, r5
 801a3de:	47b8      	blx	r7
 801a3e0:	3001      	adds	r0, #1
 801a3e2:	f43f ae3e 	beq.w	801a062 <_printf_float+0xb6>
 801a3e6:	f108 0801 	add.w	r8, r8, #1
 801a3ea:	68e3      	ldr	r3, [r4, #12]
 801a3ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a3ee:	1a5b      	subs	r3, r3, r1
 801a3f0:	4543      	cmp	r3, r8
 801a3f2:	dcf0      	bgt.n	801a3d6 <_printf_float+0x42a>
 801a3f4:	e6fc      	b.n	801a1f0 <_printf_float+0x244>
 801a3f6:	f04f 0800 	mov.w	r8, #0
 801a3fa:	f104 0919 	add.w	r9, r4, #25
 801a3fe:	e7f4      	b.n	801a3ea <_printf_float+0x43e>

0801a400 <_printf_common>:
 801a400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a404:	4616      	mov	r6, r2
 801a406:	4698      	mov	r8, r3
 801a408:	688a      	ldr	r2, [r1, #8]
 801a40a:	690b      	ldr	r3, [r1, #16]
 801a40c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a410:	4293      	cmp	r3, r2
 801a412:	bfb8      	it	lt
 801a414:	4613      	movlt	r3, r2
 801a416:	6033      	str	r3, [r6, #0]
 801a418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a41c:	4607      	mov	r7, r0
 801a41e:	460c      	mov	r4, r1
 801a420:	b10a      	cbz	r2, 801a426 <_printf_common+0x26>
 801a422:	3301      	adds	r3, #1
 801a424:	6033      	str	r3, [r6, #0]
 801a426:	6823      	ldr	r3, [r4, #0]
 801a428:	0699      	lsls	r1, r3, #26
 801a42a:	bf42      	ittt	mi
 801a42c:	6833      	ldrmi	r3, [r6, #0]
 801a42e:	3302      	addmi	r3, #2
 801a430:	6033      	strmi	r3, [r6, #0]
 801a432:	6825      	ldr	r5, [r4, #0]
 801a434:	f015 0506 	ands.w	r5, r5, #6
 801a438:	d106      	bne.n	801a448 <_printf_common+0x48>
 801a43a:	f104 0a19 	add.w	sl, r4, #25
 801a43e:	68e3      	ldr	r3, [r4, #12]
 801a440:	6832      	ldr	r2, [r6, #0]
 801a442:	1a9b      	subs	r3, r3, r2
 801a444:	42ab      	cmp	r3, r5
 801a446:	dc26      	bgt.n	801a496 <_printf_common+0x96>
 801a448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a44c:	6822      	ldr	r2, [r4, #0]
 801a44e:	3b00      	subs	r3, #0
 801a450:	bf18      	it	ne
 801a452:	2301      	movne	r3, #1
 801a454:	0692      	lsls	r2, r2, #26
 801a456:	d42b      	bmi.n	801a4b0 <_printf_common+0xb0>
 801a458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a45c:	4641      	mov	r1, r8
 801a45e:	4638      	mov	r0, r7
 801a460:	47c8      	blx	r9
 801a462:	3001      	adds	r0, #1
 801a464:	d01e      	beq.n	801a4a4 <_printf_common+0xa4>
 801a466:	6823      	ldr	r3, [r4, #0]
 801a468:	6922      	ldr	r2, [r4, #16]
 801a46a:	f003 0306 	and.w	r3, r3, #6
 801a46e:	2b04      	cmp	r3, #4
 801a470:	bf02      	ittt	eq
 801a472:	68e5      	ldreq	r5, [r4, #12]
 801a474:	6833      	ldreq	r3, [r6, #0]
 801a476:	1aed      	subeq	r5, r5, r3
 801a478:	68a3      	ldr	r3, [r4, #8]
 801a47a:	bf0c      	ite	eq
 801a47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a480:	2500      	movne	r5, #0
 801a482:	4293      	cmp	r3, r2
 801a484:	bfc4      	itt	gt
 801a486:	1a9b      	subgt	r3, r3, r2
 801a488:	18ed      	addgt	r5, r5, r3
 801a48a:	2600      	movs	r6, #0
 801a48c:	341a      	adds	r4, #26
 801a48e:	42b5      	cmp	r5, r6
 801a490:	d11a      	bne.n	801a4c8 <_printf_common+0xc8>
 801a492:	2000      	movs	r0, #0
 801a494:	e008      	b.n	801a4a8 <_printf_common+0xa8>
 801a496:	2301      	movs	r3, #1
 801a498:	4652      	mov	r2, sl
 801a49a:	4641      	mov	r1, r8
 801a49c:	4638      	mov	r0, r7
 801a49e:	47c8      	blx	r9
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d103      	bne.n	801a4ac <_printf_common+0xac>
 801a4a4:	f04f 30ff 	mov.w	r0, #4294967295
 801a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4ac:	3501      	adds	r5, #1
 801a4ae:	e7c6      	b.n	801a43e <_printf_common+0x3e>
 801a4b0:	18e1      	adds	r1, r4, r3
 801a4b2:	1c5a      	adds	r2, r3, #1
 801a4b4:	2030      	movs	r0, #48	@ 0x30
 801a4b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a4ba:	4422      	add	r2, r4
 801a4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a4c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a4c4:	3302      	adds	r3, #2
 801a4c6:	e7c7      	b.n	801a458 <_printf_common+0x58>
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	4622      	mov	r2, r4
 801a4cc:	4641      	mov	r1, r8
 801a4ce:	4638      	mov	r0, r7
 801a4d0:	47c8      	blx	r9
 801a4d2:	3001      	adds	r0, #1
 801a4d4:	d0e6      	beq.n	801a4a4 <_printf_common+0xa4>
 801a4d6:	3601      	adds	r6, #1
 801a4d8:	e7d9      	b.n	801a48e <_printf_common+0x8e>
	...

0801a4dc <_printf_i>:
 801a4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4e0:	7e0f      	ldrb	r7, [r1, #24]
 801a4e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a4e4:	2f78      	cmp	r7, #120	@ 0x78
 801a4e6:	4691      	mov	r9, r2
 801a4e8:	4680      	mov	r8, r0
 801a4ea:	460c      	mov	r4, r1
 801a4ec:	469a      	mov	sl, r3
 801a4ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a4f2:	d807      	bhi.n	801a504 <_printf_i+0x28>
 801a4f4:	2f62      	cmp	r7, #98	@ 0x62
 801a4f6:	d80a      	bhi.n	801a50e <_printf_i+0x32>
 801a4f8:	2f00      	cmp	r7, #0
 801a4fa:	f000 80d1 	beq.w	801a6a0 <_printf_i+0x1c4>
 801a4fe:	2f58      	cmp	r7, #88	@ 0x58
 801a500:	f000 80b8 	beq.w	801a674 <_printf_i+0x198>
 801a504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a50c:	e03a      	b.n	801a584 <_printf_i+0xa8>
 801a50e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a512:	2b15      	cmp	r3, #21
 801a514:	d8f6      	bhi.n	801a504 <_printf_i+0x28>
 801a516:	a101      	add	r1, pc, #4	@ (adr r1, 801a51c <_printf_i+0x40>)
 801a518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a51c:	0801a575 	.word	0x0801a575
 801a520:	0801a589 	.word	0x0801a589
 801a524:	0801a505 	.word	0x0801a505
 801a528:	0801a505 	.word	0x0801a505
 801a52c:	0801a505 	.word	0x0801a505
 801a530:	0801a505 	.word	0x0801a505
 801a534:	0801a589 	.word	0x0801a589
 801a538:	0801a505 	.word	0x0801a505
 801a53c:	0801a505 	.word	0x0801a505
 801a540:	0801a505 	.word	0x0801a505
 801a544:	0801a505 	.word	0x0801a505
 801a548:	0801a687 	.word	0x0801a687
 801a54c:	0801a5b3 	.word	0x0801a5b3
 801a550:	0801a641 	.word	0x0801a641
 801a554:	0801a505 	.word	0x0801a505
 801a558:	0801a505 	.word	0x0801a505
 801a55c:	0801a6a9 	.word	0x0801a6a9
 801a560:	0801a505 	.word	0x0801a505
 801a564:	0801a5b3 	.word	0x0801a5b3
 801a568:	0801a505 	.word	0x0801a505
 801a56c:	0801a505 	.word	0x0801a505
 801a570:	0801a649 	.word	0x0801a649
 801a574:	6833      	ldr	r3, [r6, #0]
 801a576:	1d1a      	adds	r2, r3, #4
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	6032      	str	r2, [r6, #0]
 801a57c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a584:	2301      	movs	r3, #1
 801a586:	e09c      	b.n	801a6c2 <_printf_i+0x1e6>
 801a588:	6833      	ldr	r3, [r6, #0]
 801a58a:	6820      	ldr	r0, [r4, #0]
 801a58c:	1d19      	adds	r1, r3, #4
 801a58e:	6031      	str	r1, [r6, #0]
 801a590:	0606      	lsls	r6, r0, #24
 801a592:	d501      	bpl.n	801a598 <_printf_i+0xbc>
 801a594:	681d      	ldr	r5, [r3, #0]
 801a596:	e003      	b.n	801a5a0 <_printf_i+0xc4>
 801a598:	0645      	lsls	r5, r0, #25
 801a59a:	d5fb      	bpl.n	801a594 <_printf_i+0xb8>
 801a59c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a5a0:	2d00      	cmp	r5, #0
 801a5a2:	da03      	bge.n	801a5ac <_printf_i+0xd0>
 801a5a4:	232d      	movs	r3, #45	@ 0x2d
 801a5a6:	426d      	negs	r5, r5
 801a5a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a5ac:	4858      	ldr	r0, [pc, #352]	@ (801a710 <_printf_i+0x234>)
 801a5ae:	230a      	movs	r3, #10
 801a5b0:	e011      	b.n	801a5d6 <_printf_i+0xfa>
 801a5b2:	6821      	ldr	r1, [r4, #0]
 801a5b4:	6833      	ldr	r3, [r6, #0]
 801a5b6:	0608      	lsls	r0, r1, #24
 801a5b8:	f853 5b04 	ldr.w	r5, [r3], #4
 801a5bc:	d402      	bmi.n	801a5c4 <_printf_i+0xe8>
 801a5be:	0649      	lsls	r1, r1, #25
 801a5c0:	bf48      	it	mi
 801a5c2:	b2ad      	uxthmi	r5, r5
 801a5c4:	2f6f      	cmp	r7, #111	@ 0x6f
 801a5c6:	4852      	ldr	r0, [pc, #328]	@ (801a710 <_printf_i+0x234>)
 801a5c8:	6033      	str	r3, [r6, #0]
 801a5ca:	bf14      	ite	ne
 801a5cc:	230a      	movne	r3, #10
 801a5ce:	2308      	moveq	r3, #8
 801a5d0:	2100      	movs	r1, #0
 801a5d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a5d6:	6866      	ldr	r6, [r4, #4]
 801a5d8:	60a6      	str	r6, [r4, #8]
 801a5da:	2e00      	cmp	r6, #0
 801a5dc:	db05      	blt.n	801a5ea <_printf_i+0x10e>
 801a5de:	6821      	ldr	r1, [r4, #0]
 801a5e0:	432e      	orrs	r6, r5
 801a5e2:	f021 0104 	bic.w	r1, r1, #4
 801a5e6:	6021      	str	r1, [r4, #0]
 801a5e8:	d04b      	beq.n	801a682 <_printf_i+0x1a6>
 801a5ea:	4616      	mov	r6, r2
 801a5ec:	fbb5 f1f3 	udiv	r1, r5, r3
 801a5f0:	fb03 5711 	mls	r7, r3, r1, r5
 801a5f4:	5dc7      	ldrb	r7, [r0, r7]
 801a5f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a5fa:	462f      	mov	r7, r5
 801a5fc:	42bb      	cmp	r3, r7
 801a5fe:	460d      	mov	r5, r1
 801a600:	d9f4      	bls.n	801a5ec <_printf_i+0x110>
 801a602:	2b08      	cmp	r3, #8
 801a604:	d10b      	bne.n	801a61e <_printf_i+0x142>
 801a606:	6823      	ldr	r3, [r4, #0]
 801a608:	07df      	lsls	r7, r3, #31
 801a60a:	d508      	bpl.n	801a61e <_printf_i+0x142>
 801a60c:	6923      	ldr	r3, [r4, #16]
 801a60e:	6861      	ldr	r1, [r4, #4]
 801a610:	4299      	cmp	r1, r3
 801a612:	bfde      	ittt	le
 801a614:	2330      	movle	r3, #48	@ 0x30
 801a616:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a61a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a61e:	1b92      	subs	r2, r2, r6
 801a620:	6122      	str	r2, [r4, #16]
 801a622:	f8cd a000 	str.w	sl, [sp]
 801a626:	464b      	mov	r3, r9
 801a628:	aa03      	add	r2, sp, #12
 801a62a:	4621      	mov	r1, r4
 801a62c:	4640      	mov	r0, r8
 801a62e:	f7ff fee7 	bl	801a400 <_printf_common>
 801a632:	3001      	adds	r0, #1
 801a634:	d14a      	bne.n	801a6cc <_printf_i+0x1f0>
 801a636:	f04f 30ff 	mov.w	r0, #4294967295
 801a63a:	b004      	add	sp, #16
 801a63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a640:	6823      	ldr	r3, [r4, #0]
 801a642:	f043 0320 	orr.w	r3, r3, #32
 801a646:	6023      	str	r3, [r4, #0]
 801a648:	4832      	ldr	r0, [pc, #200]	@ (801a714 <_printf_i+0x238>)
 801a64a:	2778      	movs	r7, #120	@ 0x78
 801a64c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a650:	6823      	ldr	r3, [r4, #0]
 801a652:	6831      	ldr	r1, [r6, #0]
 801a654:	061f      	lsls	r7, r3, #24
 801a656:	f851 5b04 	ldr.w	r5, [r1], #4
 801a65a:	d402      	bmi.n	801a662 <_printf_i+0x186>
 801a65c:	065f      	lsls	r7, r3, #25
 801a65e:	bf48      	it	mi
 801a660:	b2ad      	uxthmi	r5, r5
 801a662:	6031      	str	r1, [r6, #0]
 801a664:	07d9      	lsls	r1, r3, #31
 801a666:	bf44      	itt	mi
 801a668:	f043 0320 	orrmi.w	r3, r3, #32
 801a66c:	6023      	strmi	r3, [r4, #0]
 801a66e:	b11d      	cbz	r5, 801a678 <_printf_i+0x19c>
 801a670:	2310      	movs	r3, #16
 801a672:	e7ad      	b.n	801a5d0 <_printf_i+0xf4>
 801a674:	4826      	ldr	r0, [pc, #152]	@ (801a710 <_printf_i+0x234>)
 801a676:	e7e9      	b.n	801a64c <_printf_i+0x170>
 801a678:	6823      	ldr	r3, [r4, #0]
 801a67a:	f023 0320 	bic.w	r3, r3, #32
 801a67e:	6023      	str	r3, [r4, #0]
 801a680:	e7f6      	b.n	801a670 <_printf_i+0x194>
 801a682:	4616      	mov	r6, r2
 801a684:	e7bd      	b.n	801a602 <_printf_i+0x126>
 801a686:	6833      	ldr	r3, [r6, #0]
 801a688:	6825      	ldr	r5, [r4, #0]
 801a68a:	6961      	ldr	r1, [r4, #20]
 801a68c:	1d18      	adds	r0, r3, #4
 801a68e:	6030      	str	r0, [r6, #0]
 801a690:	062e      	lsls	r6, r5, #24
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	d501      	bpl.n	801a69a <_printf_i+0x1be>
 801a696:	6019      	str	r1, [r3, #0]
 801a698:	e002      	b.n	801a6a0 <_printf_i+0x1c4>
 801a69a:	0668      	lsls	r0, r5, #25
 801a69c:	d5fb      	bpl.n	801a696 <_printf_i+0x1ba>
 801a69e:	8019      	strh	r1, [r3, #0]
 801a6a0:	2300      	movs	r3, #0
 801a6a2:	6123      	str	r3, [r4, #16]
 801a6a4:	4616      	mov	r6, r2
 801a6a6:	e7bc      	b.n	801a622 <_printf_i+0x146>
 801a6a8:	6833      	ldr	r3, [r6, #0]
 801a6aa:	1d1a      	adds	r2, r3, #4
 801a6ac:	6032      	str	r2, [r6, #0]
 801a6ae:	681e      	ldr	r6, [r3, #0]
 801a6b0:	6862      	ldr	r2, [r4, #4]
 801a6b2:	2100      	movs	r1, #0
 801a6b4:	4630      	mov	r0, r6
 801a6b6:	f7e5 fd73 	bl	80001a0 <memchr>
 801a6ba:	b108      	cbz	r0, 801a6c0 <_printf_i+0x1e4>
 801a6bc:	1b80      	subs	r0, r0, r6
 801a6be:	6060      	str	r0, [r4, #4]
 801a6c0:	6863      	ldr	r3, [r4, #4]
 801a6c2:	6123      	str	r3, [r4, #16]
 801a6c4:	2300      	movs	r3, #0
 801a6c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a6ca:	e7aa      	b.n	801a622 <_printf_i+0x146>
 801a6cc:	6923      	ldr	r3, [r4, #16]
 801a6ce:	4632      	mov	r2, r6
 801a6d0:	4649      	mov	r1, r9
 801a6d2:	4640      	mov	r0, r8
 801a6d4:	47d0      	blx	sl
 801a6d6:	3001      	adds	r0, #1
 801a6d8:	d0ad      	beq.n	801a636 <_printf_i+0x15a>
 801a6da:	6823      	ldr	r3, [r4, #0]
 801a6dc:	079b      	lsls	r3, r3, #30
 801a6de:	d413      	bmi.n	801a708 <_printf_i+0x22c>
 801a6e0:	68e0      	ldr	r0, [r4, #12]
 801a6e2:	9b03      	ldr	r3, [sp, #12]
 801a6e4:	4298      	cmp	r0, r3
 801a6e6:	bfb8      	it	lt
 801a6e8:	4618      	movlt	r0, r3
 801a6ea:	e7a6      	b.n	801a63a <_printf_i+0x15e>
 801a6ec:	2301      	movs	r3, #1
 801a6ee:	4632      	mov	r2, r6
 801a6f0:	4649      	mov	r1, r9
 801a6f2:	4640      	mov	r0, r8
 801a6f4:	47d0      	blx	sl
 801a6f6:	3001      	adds	r0, #1
 801a6f8:	d09d      	beq.n	801a636 <_printf_i+0x15a>
 801a6fa:	3501      	adds	r5, #1
 801a6fc:	68e3      	ldr	r3, [r4, #12]
 801a6fe:	9903      	ldr	r1, [sp, #12]
 801a700:	1a5b      	subs	r3, r3, r1
 801a702:	42ab      	cmp	r3, r5
 801a704:	dcf2      	bgt.n	801a6ec <_printf_i+0x210>
 801a706:	e7eb      	b.n	801a6e0 <_printf_i+0x204>
 801a708:	2500      	movs	r5, #0
 801a70a:	f104 0619 	add.w	r6, r4, #25
 801a70e:	e7f5      	b.n	801a6fc <_printf_i+0x220>
 801a710:	0801e0c6 	.word	0x0801e0c6
 801a714:	0801e0d7 	.word	0x0801e0d7

0801a718 <std>:
 801a718:	2300      	movs	r3, #0
 801a71a:	b510      	push	{r4, lr}
 801a71c:	4604      	mov	r4, r0
 801a71e:	e9c0 3300 	strd	r3, r3, [r0]
 801a722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a726:	6083      	str	r3, [r0, #8]
 801a728:	8181      	strh	r1, [r0, #12]
 801a72a:	6643      	str	r3, [r0, #100]	@ 0x64
 801a72c:	81c2      	strh	r2, [r0, #14]
 801a72e:	6183      	str	r3, [r0, #24]
 801a730:	4619      	mov	r1, r3
 801a732:	2208      	movs	r2, #8
 801a734:	305c      	adds	r0, #92	@ 0x5c
 801a736:	f000 f944 	bl	801a9c2 <memset>
 801a73a:	4b0d      	ldr	r3, [pc, #52]	@ (801a770 <std+0x58>)
 801a73c:	6263      	str	r3, [r4, #36]	@ 0x24
 801a73e:	4b0d      	ldr	r3, [pc, #52]	@ (801a774 <std+0x5c>)
 801a740:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a742:	4b0d      	ldr	r3, [pc, #52]	@ (801a778 <std+0x60>)
 801a744:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a746:	4b0d      	ldr	r3, [pc, #52]	@ (801a77c <std+0x64>)
 801a748:	6323      	str	r3, [r4, #48]	@ 0x30
 801a74a:	4b0d      	ldr	r3, [pc, #52]	@ (801a780 <std+0x68>)
 801a74c:	6224      	str	r4, [r4, #32]
 801a74e:	429c      	cmp	r4, r3
 801a750:	d006      	beq.n	801a760 <std+0x48>
 801a752:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a756:	4294      	cmp	r4, r2
 801a758:	d002      	beq.n	801a760 <std+0x48>
 801a75a:	33d0      	adds	r3, #208	@ 0xd0
 801a75c:	429c      	cmp	r4, r3
 801a75e:	d105      	bne.n	801a76c <std+0x54>
 801a760:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a768:	f000 ba0a 	b.w	801ab80 <__retarget_lock_init_recursive>
 801a76c:	bd10      	pop	{r4, pc}
 801a76e:	bf00      	nop
 801a770:	0801a909 	.word	0x0801a909
 801a774:	0801a92b 	.word	0x0801a92b
 801a778:	0801a963 	.word	0x0801a963
 801a77c:	0801a987 	.word	0x0801a987
 801a780:	200019c8 	.word	0x200019c8

0801a784 <stdio_exit_handler>:
 801a784:	4a02      	ldr	r2, [pc, #8]	@ (801a790 <stdio_exit_handler+0xc>)
 801a786:	4903      	ldr	r1, [pc, #12]	@ (801a794 <stdio_exit_handler+0x10>)
 801a788:	4803      	ldr	r0, [pc, #12]	@ (801a798 <stdio_exit_handler+0x14>)
 801a78a:	f000 b869 	b.w	801a860 <_fwalk_sglue>
 801a78e:	bf00      	nop
 801a790:	20000124 	.word	0x20000124
 801a794:	0801c62d 	.word	0x0801c62d
 801a798:	20000134 	.word	0x20000134

0801a79c <cleanup_stdio>:
 801a79c:	6841      	ldr	r1, [r0, #4]
 801a79e:	4b0c      	ldr	r3, [pc, #48]	@ (801a7d0 <cleanup_stdio+0x34>)
 801a7a0:	4299      	cmp	r1, r3
 801a7a2:	b510      	push	{r4, lr}
 801a7a4:	4604      	mov	r4, r0
 801a7a6:	d001      	beq.n	801a7ac <cleanup_stdio+0x10>
 801a7a8:	f001 ff40 	bl	801c62c <_fflush_r>
 801a7ac:	68a1      	ldr	r1, [r4, #8]
 801a7ae:	4b09      	ldr	r3, [pc, #36]	@ (801a7d4 <cleanup_stdio+0x38>)
 801a7b0:	4299      	cmp	r1, r3
 801a7b2:	d002      	beq.n	801a7ba <cleanup_stdio+0x1e>
 801a7b4:	4620      	mov	r0, r4
 801a7b6:	f001 ff39 	bl	801c62c <_fflush_r>
 801a7ba:	68e1      	ldr	r1, [r4, #12]
 801a7bc:	4b06      	ldr	r3, [pc, #24]	@ (801a7d8 <cleanup_stdio+0x3c>)
 801a7be:	4299      	cmp	r1, r3
 801a7c0:	d004      	beq.n	801a7cc <cleanup_stdio+0x30>
 801a7c2:	4620      	mov	r0, r4
 801a7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a7c8:	f001 bf30 	b.w	801c62c <_fflush_r>
 801a7cc:	bd10      	pop	{r4, pc}
 801a7ce:	bf00      	nop
 801a7d0:	200019c8 	.word	0x200019c8
 801a7d4:	20001a30 	.word	0x20001a30
 801a7d8:	20001a98 	.word	0x20001a98

0801a7dc <global_stdio_init.part.0>:
 801a7dc:	b510      	push	{r4, lr}
 801a7de:	4b0b      	ldr	r3, [pc, #44]	@ (801a80c <global_stdio_init.part.0+0x30>)
 801a7e0:	4c0b      	ldr	r4, [pc, #44]	@ (801a810 <global_stdio_init.part.0+0x34>)
 801a7e2:	4a0c      	ldr	r2, [pc, #48]	@ (801a814 <global_stdio_init.part.0+0x38>)
 801a7e4:	601a      	str	r2, [r3, #0]
 801a7e6:	4620      	mov	r0, r4
 801a7e8:	2200      	movs	r2, #0
 801a7ea:	2104      	movs	r1, #4
 801a7ec:	f7ff ff94 	bl	801a718 <std>
 801a7f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a7f4:	2201      	movs	r2, #1
 801a7f6:	2109      	movs	r1, #9
 801a7f8:	f7ff ff8e 	bl	801a718 <std>
 801a7fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a800:	2202      	movs	r2, #2
 801a802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a806:	2112      	movs	r1, #18
 801a808:	f7ff bf86 	b.w	801a718 <std>
 801a80c:	20001b00 	.word	0x20001b00
 801a810:	200019c8 	.word	0x200019c8
 801a814:	0801a785 	.word	0x0801a785

0801a818 <__sfp_lock_acquire>:
 801a818:	4801      	ldr	r0, [pc, #4]	@ (801a820 <__sfp_lock_acquire+0x8>)
 801a81a:	f000 b9b2 	b.w	801ab82 <__retarget_lock_acquire_recursive>
 801a81e:	bf00      	nop
 801a820:	20001b09 	.word	0x20001b09

0801a824 <__sfp_lock_release>:
 801a824:	4801      	ldr	r0, [pc, #4]	@ (801a82c <__sfp_lock_release+0x8>)
 801a826:	f000 b9ad 	b.w	801ab84 <__retarget_lock_release_recursive>
 801a82a:	bf00      	nop
 801a82c:	20001b09 	.word	0x20001b09

0801a830 <__sinit>:
 801a830:	b510      	push	{r4, lr}
 801a832:	4604      	mov	r4, r0
 801a834:	f7ff fff0 	bl	801a818 <__sfp_lock_acquire>
 801a838:	6a23      	ldr	r3, [r4, #32]
 801a83a:	b11b      	cbz	r3, 801a844 <__sinit+0x14>
 801a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a840:	f7ff bff0 	b.w	801a824 <__sfp_lock_release>
 801a844:	4b04      	ldr	r3, [pc, #16]	@ (801a858 <__sinit+0x28>)
 801a846:	6223      	str	r3, [r4, #32]
 801a848:	4b04      	ldr	r3, [pc, #16]	@ (801a85c <__sinit+0x2c>)
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d1f5      	bne.n	801a83c <__sinit+0xc>
 801a850:	f7ff ffc4 	bl	801a7dc <global_stdio_init.part.0>
 801a854:	e7f2      	b.n	801a83c <__sinit+0xc>
 801a856:	bf00      	nop
 801a858:	0801a79d 	.word	0x0801a79d
 801a85c:	20001b00 	.word	0x20001b00

0801a860 <_fwalk_sglue>:
 801a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a864:	4607      	mov	r7, r0
 801a866:	4688      	mov	r8, r1
 801a868:	4614      	mov	r4, r2
 801a86a:	2600      	movs	r6, #0
 801a86c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a870:	f1b9 0901 	subs.w	r9, r9, #1
 801a874:	d505      	bpl.n	801a882 <_fwalk_sglue+0x22>
 801a876:	6824      	ldr	r4, [r4, #0]
 801a878:	2c00      	cmp	r4, #0
 801a87a:	d1f7      	bne.n	801a86c <_fwalk_sglue+0xc>
 801a87c:	4630      	mov	r0, r6
 801a87e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a882:	89ab      	ldrh	r3, [r5, #12]
 801a884:	2b01      	cmp	r3, #1
 801a886:	d907      	bls.n	801a898 <_fwalk_sglue+0x38>
 801a888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a88c:	3301      	adds	r3, #1
 801a88e:	d003      	beq.n	801a898 <_fwalk_sglue+0x38>
 801a890:	4629      	mov	r1, r5
 801a892:	4638      	mov	r0, r7
 801a894:	47c0      	blx	r8
 801a896:	4306      	orrs	r6, r0
 801a898:	3568      	adds	r5, #104	@ 0x68
 801a89a:	e7e9      	b.n	801a870 <_fwalk_sglue+0x10>

0801a89c <sniprintf>:
 801a89c:	b40c      	push	{r2, r3}
 801a89e:	b530      	push	{r4, r5, lr}
 801a8a0:	4b18      	ldr	r3, [pc, #96]	@ (801a904 <sniprintf+0x68>)
 801a8a2:	1e0c      	subs	r4, r1, #0
 801a8a4:	681d      	ldr	r5, [r3, #0]
 801a8a6:	b09d      	sub	sp, #116	@ 0x74
 801a8a8:	da08      	bge.n	801a8bc <sniprintf+0x20>
 801a8aa:	238b      	movs	r3, #139	@ 0x8b
 801a8ac:	602b      	str	r3, [r5, #0]
 801a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 801a8b2:	b01d      	add	sp, #116	@ 0x74
 801a8b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a8b8:	b002      	add	sp, #8
 801a8ba:	4770      	bx	lr
 801a8bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a8c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a8c4:	f04f 0300 	mov.w	r3, #0
 801a8c8:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a8ca:	bf14      	ite	ne
 801a8cc:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a8d0:	4623      	moveq	r3, r4
 801a8d2:	9304      	str	r3, [sp, #16]
 801a8d4:	9307      	str	r3, [sp, #28]
 801a8d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a8da:	9002      	str	r0, [sp, #8]
 801a8dc:	9006      	str	r0, [sp, #24]
 801a8de:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a8e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a8e4:	ab21      	add	r3, sp, #132	@ 0x84
 801a8e6:	a902      	add	r1, sp, #8
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	9301      	str	r3, [sp, #4]
 801a8ec:	f001 fbdc 	bl	801c0a8 <_svfiprintf_r>
 801a8f0:	1c43      	adds	r3, r0, #1
 801a8f2:	bfbc      	itt	lt
 801a8f4:	238b      	movlt	r3, #139	@ 0x8b
 801a8f6:	602b      	strlt	r3, [r5, #0]
 801a8f8:	2c00      	cmp	r4, #0
 801a8fa:	d0da      	beq.n	801a8b2 <sniprintf+0x16>
 801a8fc:	9b02      	ldr	r3, [sp, #8]
 801a8fe:	2200      	movs	r2, #0
 801a900:	701a      	strb	r2, [r3, #0]
 801a902:	e7d6      	b.n	801a8b2 <sniprintf+0x16>
 801a904:	20000130 	.word	0x20000130

0801a908 <__sread>:
 801a908:	b510      	push	{r4, lr}
 801a90a:	460c      	mov	r4, r1
 801a90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a910:	f000 f8c4 	bl	801aa9c <_read_r>
 801a914:	2800      	cmp	r0, #0
 801a916:	bfab      	itete	ge
 801a918:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a91a:	89a3      	ldrhlt	r3, [r4, #12]
 801a91c:	181b      	addge	r3, r3, r0
 801a91e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a922:	bfac      	ite	ge
 801a924:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a926:	81a3      	strhlt	r3, [r4, #12]
 801a928:	bd10      	pop	{r4, pc}

0801a92a <__swrite>:
 801a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a92e:	461f      	mov	r7, r3
 801a930:	898b      	ldrh	r3, [r1, #12]
 801a932:	05db      	lsls	r3, r3, #23
 801a934:	4605      	mov	r5, r0
 801a936:	460c      	mov	r4, r1
 801a938:	4616      	mov	r6, r2
 801a93a:	d505      	bpl.n	801a948 <__swrite+0x1e>
 801a93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a940:	2302      	movs	r3, #2
 801a942:	2200      	movs	r2, #0
 801a944:	f000 f898 	bl	801aa78 <_lseek_r>
 801a948:	89a3      	ldrh	r3, [r4, #12]
 801a94a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a94e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a952:	81a3      	strh	r3, [r4, #12]
 801a954:	4632      	mov	r2, r6
 801a956:	463b      	mov	r3, r7
 801a958:	4628      	mov	r0, r5
 801a95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a95e:	f000 b8d3 	b.w	801ab08 <_write_r>

0801a962 <__sseek>:
 801a962:	b510      	push	{r4, lr}
 801a964:	460c      	mov	r4, r1
 801a966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a96a:	f000 f885 	bl	801aa78 <_lseek_r>
 801a96e:	1c43      	adds	r3, r0, #1
 801a970:	89a3      	ldrh	r3, [r4, #12]
 801a972:	bf15      	itete	ne
 801a974:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a976:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a97a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a97e:	81a3      	strheq	r3, [r4, #12]
 801a980:	bf18      	it	ne
 801a982:	81a3      	strhne	r3, [r4, #12]
 801a984:	bd10      	pop	{r4, pc}

0801a986 <__sclose>:
 801a986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a98a:	f000 b865 	b.w	801aa58 <_close_r>

0801a98e <memmove>:
 801a98e:	4288      	cmp	r0, r1
 801a990:	b510      	push	{r4, lr}
 801a992:	eb01 0402 	add.w	r4, r1, r2
 801a996:	d902      	bls.n	801a99e <memmove+0x10>
 801a998:	4284      	cmp	r4, r0
 801a99a:	4623      	mov	r3, r4
 801a99c:	d807      	bhi.n	801a9ae <memmove+0x20>
 801a99e:	1e43      	subs	r3, r0, #1
 801a9a0:	42a1      	cmp	r1, r4
 801a9a2:	d008      	beq.n	801a9b6 <memmove+0x28>
 801a9a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a9a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a9ac:	e7f8      	b.n	801a9a0 <memmove+0x12>
 801a9ae:	4402      	add	r2, r0
 801a9b0:	4601      	mov	r1, r0
 801a9b2:	428a      	cmp	r2, r1
 801a9b4:	d100      	bne.n	801a9b8 <memmove+0x2a>
 801a9b6:	bd10      	pop	{r4, pc}
 801a9b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a9bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a9c0:	e7f7      	b.n	801a9b2 <memmove+0x24>

0801a9c2 <memset>:
 801a9c2:	4402      	add	r2, r0
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	4293      	cmp	r3, r2
 801a9c8:	d100      	bne.n	801a9cc <memset+0xa>
 801a9ca:	4770      	bx	lr
 801a9cc:	f803 1b01 	strb.w	r1, [r3], #1
 801a9d0:	e7f9      	b.n	801a9c6 <memset+0x4>

0801a9d2 <strcat>:
 801a9d2:	b510      	push	{r4, lr}
 801a9d4:	4602      	mov	r2, r0
 801a9d6:	7814      	ldrb	r4, [r2, #0]
 801a9d8:	4613      	mov	r3, r2
 801a9da:	3201      	adds	r2, #1
 801a9dc:	2c00      	cmp	r4, #0
 801a9de:	d1fa      	bne.n	801a9d6 <strcat+0x4>
 801a9e0:	3b01      	subs	r3, #1
 801a9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a9ea:	2a00      	cmp	r2, #0
 801a9ec:	d1f9      	bne.n	801a9e2 <strcat+0x10>
 801a9ee:	bd10      	pop	{r4, pc}

0801a9f0 <_raise_r>:
 801a9f0:	291f      	cmp	r1, #31
 801a9f2:	b538      	push	{r3, r4, r5, lr}
 801a9f4:	4605      	mov	r5, r0
 801a9f6:	460c      	mov	r4, r1
 801a9f8:	d904      	bls.n	801aa04 <_raise_r+0x14>
 801a9fa:	2316      	movs	r3, #22
 801a9fc:	6003      	str	r3, [r0, #0]
 801a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 801aa02:	bd38      	pop	{r3, r4, r5, pc}
 801aa04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801aa06:	b112      	cbz	r2, 801aa0e <_raise_r+0x1e>
 801aa08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801aa0c:	b94b      	cbnz	r3, 801aa22 <_raise_r+0x32>
 801aa0e:	4628      	mov	r0, r5
 801aa10:	f000 f868 	bl	801aae4 <_getpid_r>
 801aa14:	4622      	mov	r2, r4
 801aa16:	4601      	mov	r1, r0
 801aa18:	4628      	mov	r0, r5
 801aa1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aa1e:	f000 b84f 	b.w	801aac0 <_kill_r>
 801aa22:	2b01      	cmp	r3, #1
 801aa24:	d00a      	beq.n	801aa3c <_raise_r+0x4c>
 801aa26:	1c59      	adds	r1, r3, #1
 801aa28:	d103      	bne.n	801aa32 <_raise_r+0x42>
 801aa2a:	2316      	movs	r3, #22
 801aa2c:	6003      	str	r3, [r0, #0]
 801aa2e:	2001      	movs	r0, #1
 801aa30:	e7e7      	b.n	801aa02 <_raise_r+0x12>
 801aa32:	2100      	movs	r1, #0
 801aa34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801aa38:	4620      	mov	r0, r4
 801aa3a:	4798      	blx	r3
 801aa3c:	2000      	movs	r0, #0
 801aa3e:	e7e0      	b.n	801aa02 <_raise_r+0x12>

0801aa40 <raise>:
 801aa40:	4b02      	ldr	r3, [pc, #8]	@ (801aa4c <raise+0xc>)
 801aa42:	4601      	mov	r1, r0
 801aa44:	6818      	ldr	r0, [r3, #0]
 801aa46:	f7ff bfd3 	b.w	801a9f0 <_raise_r>
 801aa4a:	bf00      	nop
 801aa4c:	20000130 	.word	0x20000130

0801aa50 <_localeconv_r>:
 801aa50:	4800      	ldr	r0, [pc, #0]	@ (801aa54 <_localeconv_r+0x4>)
 801aa52:	4770      	bx	lr
 801aa54:	20000270 	.word	0x20000270

0801aa58 <_close_r>:
 801aa58:	b538      	push	{r3, r4, r5, lr}
 801aa5a:	4d06      	ldr	r5, [pc, #24]	@ (801aa74 <_close_r+0x1c>)
 801aa5c:	2300      	movs	r3, #0
 801aa5e:	4604      	mov	r4, r0
 801aa60:	4608      	mov	r0, r1
 801aa62:	602b      	str	r3, [r5, #0]
 801aa64:	f7ec fca6 	bl	80073b4 <_close>
 801aa68:	1c43      	adds	r3, r0, #1
 801aa6a:	d102      	bne.n	801aa72 <_close_r+0x1a>
 801aa6c:	682b      	ldr	r3, [r5, #0]
 801aa6e:	b103      	cbz	r3, 801aa72 <_close_r+0x1a>
 801aa70:	6023      	str	r3, [r4, #0]
 801aa72:	bd38      	pop	{r3, r4, r5, pc}
 801aa74:	20001b04 	.word	0x20001b04

0801aa78 <_lseek_r>:
 801aa78:	b538      	push	{r3, r4, r5, lr}
 801aa7a:	4d07      	ldr	r5, [pc, #28]	@ (801aa98 <_lseek_r+0x20>)
 801aa7c:	4604      	mov	r4, r0
 801aa7e:	4608      	mov	r0, r1
 801aa80:	4611      	mov	r1, r2
 801aa82:	2200      	movs	r2, #0
 801aa84:	602a      	str	r2, [r5, #0]
 801aa86:	461a      	mov	r2, r3
 801aa88:	f7ec fcbb 	bl	8007402 <_lseek>
 801aa8c:	1c43      	adds	r3, r0, #1
 801aa8e:	d102      	bne.n	801aa96 <_lseek_r+0x1e>
 801aa90:	682b      	ldr	r3, [r5, #0]
 801aa92:	b103      	cbz	r3, 801aa96 <_lseek_r+0x1e>
 801aa94:	6023      	str	r3, [r4, #0]
 801aa96:	bd38      	pop	{r3, r4, r5, pc}
 801aa98:	20001b04 	.word	0x20001b04

0801aa9c <_read_r>:
 801aa9c:	b538      	push	{r3, r4, r5, lr}
 801aa9e:	4d07      	ldr	r5, [pc, #28]	@ (801aabc <_read_r+0x20>)
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	4608      	mov	r0, r1
 801aaa4:	4611      	mov	r1, r2
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	602a      	str	r2, [r5, #0]
 801aaaa:	461a      	mov	r2, r3
 801aaac:	f7ec fc49 	bl	8007342 <_read>
 801aab0:	1c43      	adds	r3, r0, #1
 801aab2:	d102      	bne.n	801aaba <_read_r+0x1e>
 801aab4:	682b      	ldr	r3, [r5, #0]
 801aab6:	b103      	cbz	r3, 801aaba <_read_r+0x1e>
 801aab8:	6023      	str	r3, [r4, #0]
 801aaba:	bd38      	pop	{r3, r4, r5, pc}
 801aabc:	20001b04 	.word	0x20001b04

0801aac0 <_kill_r>:
 801aac0:	b538      	push	{r3, r4, r5, lr}
 801aac2:	4d07      	ldr	r5, [pc, #28]	@ (801aae0 <_kill_r+0x20>)
 801aac4:	2300      	movs	r3, #0
 801aac6:	4604      	mov	r4, r0
 801aac8:	4608      	mov	r0, r1
 801aaca:	4611      	mov	r1, r2
 801aacc:	602b      	str	r3, [r5, #0]
 801aace:	f7ec fc1d 	bl	800730c <_kill>
 801aad2:	1c43      	adds	r3, r0, #1
 801aad4:	d102      	bne.n	801aadc <_kill_r+0x1c>
 801aad6:	682b      	ldr	r3, [r5, #0]
 801aad8:	b103      	cbz	r3, 801aadc <_kill_r+0x1c>
 801aada:	6023      	str	r3, [r4, #0]
 801aadc:	bd38      	pop	{r3, r4, r5, pc}
 801aade:	bf00      	nop
 801aae0:	20001b04 	.word	0x20001b04

0801aae4 <_getpid_r>:
 801aae4:	f7ec bc0a 	b.w	80072fc <_getpid>

0801aae8 <_sbrk_r>:
 801aae8:	b538      	push	{r3, r4, r5, lr}
 801aaea:	4d06      	ldr	r5, [pc, #24]	@ (801ab04 <_sbrk_r+0x1c>)
 801aaec:	2300      	movs	r3, #0
 801aaee:	4604      	mov	r4, r0
 801aaf0:	4608      	mov	r0, r1
 801aaf2:	602b      	str	r3, [r5, #0]
 801aaf4:	f7ec fc92 	bl	800741c <_sbrk>
 801aaf8:	1c43      	adds	r3, r0, #1
 801aafa:	d102      	bne.n	801ab02 <_sbrk_r+0x1a>
 801aafc:	682b      	ldr	r3, [r5, #0]
 801aafe:	b103      	cbz	r3, 801ab02 <_sbrk_r+0x1a>
 801ab00:	6023      	str	r3, [r4, #0]
 801ab02:	bd38      	pop	{r3, r4, r5, pc}
 801ab04:	20001b04 	.word	0x20001b04

0801ab08 <_write_r>:
 801ab08:	b538      	push	{r3, r4, r5, lr}
 801ab0a:	4d07      	ldr	r5, [pc, #28]	@ (801ab28 <_write_r+0x20>)
 801ab0c:	4604      	mov	r4, r0
 801ab0e:	4608      	mov	r0, r1
 801ab10:	4611      	mov	r1, r2
 801ab12:	2200      	movs	r2, #0
 801ab14:	602a      	str	r2, [r5, #0]
 801ab16:	461a      	mov	r2, r3
 801ab18:	f7ec fc30 	bl	800737c <_write>
 801ab1c:	1c43      	adds	r3, r0, #1
 801ab1e:	d102      	bne.n	801ab26 <_write_r+0x1e>
 801ab20:	682b      	ldr	r3, [r5, #0]
 801ab22:	b103      	cbz	r3, 801ab26 <_write_r+0x1e>
 801ab24:	6023      	str	r3, [r4, #0]
 801ab26:	bd38      	pop	{r3, r4, r5, pc}
 801ab28:	20001b04 	.word	0x20001b04

0801ab2c <__errno>:
 801ab2c:	4b01      	ldr	r3, [pc, #4]	@ (801ab34 <__errno+0x8>)
 801ab2e:	6818      	ldr	r0, [r3, #0]
 801ab30:	4770      	bx	lr
 801ab32:	bf00      	nop
 801ab34:	20000130 	.word	0x20000130

0801ab38 <__libc_init_array>:
 801ab38:	b570      	push	{r4, r5, r6, lr}
 801ab3a:	4d0d      	ldr	r5, [pc, #52]	@ (801ab70 <__libc_init_array+0x38>)
 801ab3c:	4c0d      	ldr	r4, [pc, #52]	@ (801ab74 <__libc_init_array+0x3c>)
 801ab3e:	1b64      	subs	r4, r4, r5
 801ab40:	10a4      	asrs	r4, r4, #2
 801ab42:	2600      	movs	r6, #0
 801ab44:	42a6      	cmp	r6, r4
 801ab46:	d109      	bne.n	801ab5c <__libc_init_array+0x24>
 801ab48:	4d0b      	ldr	r5, [pc, #44]	@ (801ab78 <__libc_init_array+0x40>)
 801ab4a:	4c0c      	ldr	r4, [pc, #48]	@ (801ab7c <__libc_init_array+0x44>)
 801ab4c:	f001 ff48 	bl	801c9e0 <_init>
 801ab50:	1b64      	subs	r4, r4, r5
 801ab52:	10a4      	asrs	r4, r4, #2
 801ab54:	2600      	movs	r6, #0
 801ab56:	42a6      	cmp	r6, r4
 801ab58:	d105      	bne.n	801ab66 <__libc_init_array+0x2e>
 801ab5a:	bd70      	pop	{r4, r5, r6, pc}
 801ab5c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab60:	4798      	blx	r3
 801ab62:	3601      	adds	r6, #1
 801ab64:	e7ee      	b.n	801ab44 <__libc_init_array+0xc>
 801ab66:	f855 3b04 	ldr.w	r3, [r5], #4
 801ab6a:	4798      	blx	r3
 801ab6c:	3601      	adds	r6, #1
 801ab6e:	e7f2      	b.n	801ab56 <__libc_init_array+0x1e>
 801ab70:	0801e434 	.word	0x0801e434
 801ab74:	0801e434 	.word	0x0801e434
 801ab78:	0801e434 	.word	0x0801e434
 801ab7c:	0801e43c 	.word	0x0801e43c

0801ab80 <__retarget_lock_init_recursive>:
 801ab80:	4770      	bx	lr

0801ab82 <__retarget_lock_acquire_recursive>:
 801ab82:	4770      	bx	lr

0801ab84 <__retarget_lock_release_recursive>:
 801ab84:	4770      	bx	lr

0801ab86 <strcpy>:
 801ab86:	4603      	mov	r3, r0
 801ab88:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ab8c:	f803 2b01 	strb.w	r2, [r3], #1
 801ab90:	2a00      	cmp	r2, #0
 801ab92:	d1f9      	bne.n	801ab88 <strcpy+0x2>
 801ab94:	4770      	bx	lr

0801ab96 <memcpy>:
 801ab96:	440a      	add	r2, r1
 801ab98:	4291      	cmp	r1, r2
 801ab9a:	f100 33ff 	add.w	r3, r0, #4294967295
 801ab9e:	d100      	bne.n	801aba2 <memcpy+0xc>
 801aba0:	4770      	bx	lr
 801aba2:	b510      	push	{r4, lr}
 801aba4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801abac:	4291      	cmp	r1, r2
 801abae:	d1f9      	bne.n	801aba4 <memcpy+0xe>
 801abb0:	bd10      	pop	{r4, pc}

0801abb2 <quorem>:
 801abb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abb6:	6903      	ldr	r3, [r0, #16]
 801abb8:	690c      	ldr	r4, [r1, #16]
 801abba:	42a3      	cmp	r3, r4
 801abbc:	4607      	mov	r7, r0
 801abbe:	db7e      	blt.n	801acbe <quorem+0x10c>
 801abc0:	3c01      	subs	r4, #1
 801abc2:	f101 0814 	add.w	r8, r1, #20
 801abc6:	00a3      	lsls	r3, r4, #2
 801abc8:	f100 0514 	add.w	r5, r0, #20
 801abcc:	9300      	str	r3, [sp, #0]
 801abce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801abd2:	9301      	str	r3, [sp, #4]
 801abd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801abd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801abdc:	3301      	adds	r3, #1
 801abde:	429a      	cmp	r2, r3
 801abe0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801abe4:	fbb2 f6f3 	udiv	r6, r2, r3
 801abe8:	d32e      	bcc.n	801ac48 <quorem+0x96>
 801abea:	f04f 0a00 	mov.w	sl, #0
 801abee:	46c4      	mov	ip, r8
 801abf0:	46ae      	mov	lr, r5
 801abf2:	46d3      	mov	fp, sl
 801abf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 801abf8:	b298      	uxth	r0, r3
 801abfa:	fb06 a000 	mla	r0, r6, r0, sl
 801abfe:	0c02      	lsrs	r2, r0, #16
 801ac00:	0c1b      	lsrs	r3, r3, #16
 801ac02:	fb06 2303 	mla	r3, r6, r3, r2
 801ac06:	f8de 2000 	ldr.w	r2, [lr]
 801ac0a:	b280      	uxth	r0, r0
 801ac0c:	b292      	uxth	r2, r2
 801ac0e:	1a12      	subs	r2, r2, r0
 801ac10:	445a      	add	r2, fp
 801ac12:	f8de 0000 	ldr.w	r0, [lr]
 801ac16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ac1a:	b29b      	uxth	r3, r3
 801ac1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ac20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ac24:	b292      	uxth	r2, r2
 801ac26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ac2a:	45e1      	cmp	r9, ip
 801ac2c:	f84e 2b04 	str.w	r2, [lr], #4
 801ac30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ac34:	d2de      	bcs.n	801abf4 <quorem+0x42>
 801ac36:	9b00      	ldr	r3, [sp, #0]
 801ac38:	58eb      	ldr	r3, [r5, r3]
 801ac3a:	b92b      	cbnz	r3, 801ac48 <quorem+0x96>
 801ac3c:	9b01      	ldr	r3, [sp, #4]
 801ac3e:	3b04      	subs	r3, #4
 801ac40:	429d      	cmp	r5, r3
 801ac42:	461a      	mov	r2, r3
 801ac44:	d32f      	bcc.n	801aca6 <quorem+0xf4>
 801ac46:	613c      	str	r4, [r7, #16]
 801ac48:	4638      	mov	r0, r7
 801ac4a:	f001 f8c9 	bl	801bde0 <__mcmp>
 801ac4e:	2800      	cmp	r0, #0
 801ac50:	db25      	blt.n	801ac9e <quorem+0xec>
 801ac52:	4629      	mov	r1, r5
 801ac54:	2000      	movs	r0, #0
 801ac56:	f858 2b04 	ldr.w	r2, [r8], #4
 801ac5a:	f8d1 c000 	ldr.w	ip, [r1]
 801ac5e:	fa1f fe82 	uxth.w	lr, r2
 801ac62:	fa1f f38c 	uxth.w	r3, ip
 801ac66:	eba3 030e 	sub.w	r3, r3, lr
 801ac6a:	4403      	add	r3, r0
 801ac6c:	0c12      	lsrs	r2, r2, #16
 801ac6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ac72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac7c:	45c1      	cmp	r9, r8
 801ac7e:	f841 3b04 	str.w	r3, [r1], #4
 801ac82:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ac86:	d2e6      	bcs.n	801ac56 <quorem+0xa4>
 801ac88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ac8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ac90:	b922      	cbnz	r2, 801ac9c <quorem+0xea>
 801ac92:	3b04      	subs	r3, #4
 801ac94:	429d      	cmp	r5, r3
 801ac96:	461a      	mov	r2, r3
 801ac98:	d30b      	bcc.n	801acb2 <quorem+0x100>
 801ac9a:	613c      	str	r4, [r7, #16]
 801ac9c:	3601      	adds	r6, #1
 801ac9e:	4630      	mov	r0, r6
 801aca0:	b003      	add	sp, #12
 801aca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aca6:	6812      	ldr	r2, [r2, #0]
 801aca8:	3b04      	subs	r3, #4
 801acaa:	2a00      	cmp	r2, #0
 801acac:	d1cb      	bne.n	801ac46 <quorem+0x94>
 801acae:	3c01      	subs	r4, #1
 801acb0:	e7c6      	b.n	801ac40 <quorem+0x8e>
 801acb2:	6812      	ldr	r2, [r2, #0]
 801acb4:	3b04      	subs	r3, #4
 801acb6:	2a00      	cmp	r2, #0
 801acb8:	d1ef      	bne.n	801ac9a <quorem+0xe8>
 801acba:	3c01      	subs	r4, #1
 801acbc:	e7ea      	b.n	801ac94 <quorem+0xe2>
 801acbe:	2000      	movs	r0, #0
 801acc0:	e7ee      	b.n	801aca0 <quorem+0xee>
 801acc2:	0000      	movs	r0, r0
 801acc4:	0000      	movs	r0, r0
	...

0801acc8 <_dtoa_r>:
 801acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801accc:	69c7      	ldr	r7, [r0, #28]
 801acce:	b097      	sub	sp, #92	@ 0x5c
 801acd0:	ed8d 0b04 	vstr	d0, [sp, #16]
 801acd4:	ec55 4b10 	vmov	r4, r5, d0
 801acd8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801acda:	9107      	str	r1, [sp, #28]
 801acdc:	4681      	mov	r9, r0
 801acde:	920c      	str	r2, [sp, #48]	@ 0x30
 801ace0:	9311      	str	r3, [sp, #68]	@ 0x44
 801ace2:	b97f      	cbnz	r7, 801ad04 <_dtoa_r+0x3c>
 801ace4:	2010      	movs	r0, #16
 801ace6:	f7ff f803 	bl	8019cf0 <malloc>
 801acea:	4602      	mov	r2, r0
 801acec:	f8c9 001c 	str.w	r0, [r9, #28]
 801acf0:	b920      	cbnz	r0, 801acfc <_dtoa_r+0x34>
 801acf2:	4ba9      	ldr	r3, [pc, #676]	@ (801af98 <_dtoa_r+0x2d0>)
 801acf4:	21ef      	movs	r1, #239	@ 0xef
 801acf6:	48a9      	ldr	r0, [pc, #676]	@ (801af9c <_dtoa_r+0x2d4>)
 801acf8:	f001 fd54 	bl	801c7a4 <__assert_func>
 801acfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ad00:	6007      	str	r7, [r0, #0]
 801ad02:	60c7      	str	r7, [r0, #12]
 801ad04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ad08:	6819      	ldr	r1, [r3, #0]
 801ad0a:	b159      	cbz	r1, 801ad24 <_dtoa_r+0x5c>
 801ad0c:	685a      	ldr	r2, [r3, #4]
 801ad0e:	604a      	str	r2, [r1, #4]
 801ad10:	2301      	movs	r3, #1
 801ad12:	4093      	lsls	r3, r2
 801ad14:	608b      	str	r3, [r1, #8]
 801ad16:	4648      	mov	r0, r9
 801ad18:	f000 fe30 	bl	801b97c <_Bfree>
 801ad1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ad20:	2200      	movs	r2, #0
 801ad22:	601a      	str	r2, [r3, #0]
 801ad24:	1e2b      	subs	r3, r5, #0
 801ad26:	bfb9      	ittee	lt
 801ad28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ad2c:	9305      	strlt	r3, [sp, #20]
 801ad2e:	2300      	movge	r3, #0
 801ad30:	6033      	strge	r3, [r6, #0]
 801ad32:	9f05      	ldr	r7, [sp, #20]
 801ad34:	4b9a      	ldr	r3, [pc, #616]	@ (801afa0 <_dtoa_r+0x2d8>)
 801ad36:	bfbc      	itt	lt
 801ad38:	2201      	movlt	r2, #1
 801ad3a:	6032      	strlt	r2, [r6, #0]
 801ad3c:	43bb      	bics	r3, r7
 801ad3e:	d112      	bne.n	801ad66 <_dtoa_r+0x9e>
 801ad40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ad42:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ad46:	6013      	str	r3, [r2, #0]
 801ad48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ad4c:	4323      	orrs	r3, r4
 801ad4e:	f000 855a 	beq.w	801b806 <_dtoa_r+0xb3e>
 801ad52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ad54:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801afb4 <_dtoa_r+0x2ec>
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	f000 855c 	beq.w	801b816 <_dtoa_r+0xb4e>
 801ad5e:	f10a 0303 	add.w	r3, sl, #3
 801ad62:	f000 bd56 	b.w	801b812 <_dtoa_r+0xb4a>
 801ad66:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ad6a:	2200      	movs	r2, #0
 801ad6c:	ec51 0b17 	vmov	r0, r1, d7
 801ad70:	2300      	movs	r3, #0
 801ad72:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801ad76:	f7e5 fe8f 	bl	8000a98 <__aeabi_dcmpeq>
 801ad7a:	4680      	mov	r8, r0
 801ad7c:	b158      	cbz	r0, 801ad96 <_dtoa_r+0xce>
 801ad7e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ad80:	2301      	movs	r3, #1
 801ad82:	6013      	str	r3, [r2, #0]
 801ad84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ad86:	b113      	cbz	r3, 801ad8e <_dtoa_r+0xc6>
 801ad88:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ad8a:	4b86      	ldr	r3, [pc, #536]	@ (801afa4 <_dtoa_r+0x2dc>)
 801ad8c:	6013      	str	r3, [r2, #0]
 801ad8e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801afb8 <_dtoa_r+0x2f0>
 801ad92:	f000 bd40 	b.w	801b816 <_dtoa_r+0xb4e>
 801ad96:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801ad9a:	aa14      	add	r2, sp, #80	@ 0x50
 801ad9c:	a915      	add	r1, sp, #84	@ 0x54
 801ad9e:	4648      	mov	r0, r9
 801ada0:	f001 f8ce 	bl	801bf40 <__d2b>
 801ada4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ada8:	9002      	str	r0, [sp, #8]
 801adaa:	2e00      	cmp	r6, #0
 801adac:	d078      	beq.n	801aea0 <_dtoa_r+0x1d8>
 801adae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801adb0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801adb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801adb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801adbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801adc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801adc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801adc8:	4619      	mov	r1, r3
 801adca:	2200      	movs	r2, #0
 801adcc:	4b76      	ldr	r3, [pc, #472]	@ (801afa8 <_dtoa_r+0x2e0>)
 801adce:	f7e5 fa43 	bl	8000258 <__aeabi_dsub>
 801add2:	a36b      	add	r3, pc, #428	@ (adr r3, 801af80 <_dtoa_r+0x2b8>)
 801add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add8:	f7e5 fbf6 	bl	80005c8 <__aeabi_dmul>
 801addc:	a36a      	add	r3, pc, #424	@ (adr r3, 801af88 <_dtoa_r+0x2c0>)
 801adde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade2:	f7e5 fa3b 	bl	800025c <__adddf3>
 801ade6:	4604      	mov	r4, r0
 801ade8:	4630      	mov	r0, r6
 801adea:	460d      	mov	r5, r1
 801adec:	f7e5 fb82 	bl	80004f4 <__aeabi_i2d>
 801adf0:	a367      	add	r3, pc, #412	@ (adr r3, 801af90 <_dtoa_r+0x2c8>)
 801adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adf6:	f7e5 fbe7 	bl	80005c8 <__aeabi_dmul>
 801adfa:	4602      	mov	r2, r0
 801adfc:	460b      	mov	r3, r1
 801adfe:	4620      	mov	r0, r4
 801ae00:	4629      	mov	r1, r5
 801ae02:	f7e5 fa2b 	bl	800025c <__adddf3>
 801ae06:	4604      	mov	r4, r0
 801ae08:	460d      	mov	r5, r1
 801ae0a:	f7e5 fe8d 	bl	8000b28 <__aeabi_d2iz>
 801ae0e:	2200      	movs	r2, #0
 801ae10:	4607      	mov	r7, r0
 801ae12:	2300      	movs	r3, #0
 801ae14:	4620      	mov	r0, r4
 801ae16:	4629      	mov	r1, r5
 801ae18:	f7e5 fe48 	bl	8000aac <__aeabi_dcmplt>
 801ae1c:	b140      	cbz	r0, 801ae30 <_dtoa_r+0x168>
 801ae1e:	4638      	mov	r0, r7
 801ae20:	f7e5 fb68 	bl	80004f4 <__aeabi_i2d>
 801ae24:	4622      	mov	r2, r4
 801ae26:	462b      	mov	r3, r5
 801ae28:	f7e5 fe36 	bl	8000a98 <__aeabi_dcmpeq>
 801ae2c:	b900      	cbnz	r0, 801ae30 <_dtoa_r+0x168>
 801ae2e:	3f01      	subs	r7, #1
 801ae30:	2f16      	cmp	r7, #22
 801ae32:	d852      	bhi.n	801aeda <_dtoa_r+0x212>
 801ae34:	4b5d      	ldr	r3, [pc, #372]	@ (801afac <_dtoa_r+0x2e4>)
 801ae36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ae3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ae42:	f7e5 fe33 	bl	8000aac <__aeabi_dcmplt>
 801ae46:	2800      	cmp	r0, #0
 801ae48:	d049      	beq.n	801aede <_dtoa_r+0x216>
 801ae4a:	3f01      	subs	r7, #1
 801ae4c:	2300      	movs	r3, #0
 801ae4e:	9310      	str	r3, [sp, #64]	@ 0x40
 801ae50:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ae52:	1b9b      	subs	r3, r3, r6
 801ae54:	1e5a      	subs	r2, r3, #1
 801ae56:	bf45      	ittet	mi
 801ae58:	f1c3 0301 	rsbmi	r3, r3, #1
 801ae5c:	9300      	strmi	r3, [sp, #0]
 801ae5e:	2300      	movpl	r3, #0
 801ae60:	2300      	movmi	r3, #0
 801ae62:	9206      	str	r2, [sp, #24]
 801ae64:	bf54      	ite	pl
 801ae66:	9300      	strpl	r3, [sp, #0]
 801ae68:	9306      	strmi	r3, [sp, #24]
 801ae6a:	2f00      	cmp	r7, #0
 801ae6c:	db39      	blt.n	801aee2 <_dtoa_r+0x21a>
 801ae6e:	9b06      	ldr	r3, [sp, #24]
 801ae70:	970d      	str	r7, [sp, #52]	@ 0x34
 801ae72:	443b      	add	r3, r7
 801ae74:	9306      	str	r3, [sp, #24]
 801ae76:	2300      	movs	r3, #0
 801ae78:	9308      	str	r3, [sp, #32]
 801ae7a:	9b07      	ldr	r3, [sp, #28]
 801ae7c:	2b09      	cmp	r3, #9
 801ae7e:	d863      	bhi.n	801af48 <_dtoa_r+0x280>
 801ae80:	2b05      	cmp	r3, #5
 801ae82:	bfc4      	itt	gt
 801ae84:	3b04      	subgt	r3, #4
 801ae86:	9307      	strgt	r3, [sp, #28]
 801ae88:	9b07      	ldr	r3, [sp, #28]
 801ae8a:	f1a3 0302 	sub.w	r3, r3, #2
 801ae8e:	bfcc      	ite	gt
 801ae90:	2400      	movgt	r4, #0
 801ae92:	2401      	movle	r4, #1
 801ae94:	2b03      	cmp	r3, #3
 801ae96:	d863      	bhi.n	801af60 <_dtoa_r+0x298>
 801ae98:	e8df f003 	tbb	[pc, r3]
 801ae9c:	2b375452 	.word	0x2b375452
 801aea0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801aea4:	441e      	add	r6, r3
 801aea6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801aeaa:	2b20      	cmp	r3, #32
 801aeac:	bfc1      	itttt	gt
 801aeae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801aeb2:	409f      	lslgt	r7, r3
 801aeb4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801aeb8:	fa24 f303 	lsrgt.w	r3, r4, r3
 801aebc:	bfd6      	itet	le
 801aebe:	f1c3 0320 	rsble	r3, r3, #32
 801aec2:	ea47 0003 	orrgt.w	r0, r7, r3
 801aec6:	fa04 f003 	lslle.w	r0, r4, r3
 801aeca:	f7e5 fb03 	bl	80004d4 <__aeabi_ui2d>
 801aece:	2201      	movs	r2, #1
 801aed0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801aed4:	3e01      	subs	r6, #1
 801aed6:	9212      	str	r2, [sp, #72]	@ 0x48
 801aed8:	e776      	b.n	801adc8 <_dtoa_r+0x100>
 801aeda:	2301      	movs	r3, #1
 801aedc:	e7b7      	b.n	801ae4e <_dtoa_r+0x186>
 801aede:	9010      	str	r0, [sp, #64]	@ 0x40
 801aee0:	e7b6      	b.n	801ae50 <_dtoa_r+0x188>
 801aee2:	9b00      	ldr	r3, [sp, #0]
 801aee4:	1bdb      	subs	r3, r3, r7
 801aee6:	9300      	str	r3, [sp, #0]
 801aee8:	427b      	negs	r3, r7
 801aeea:	9308      	str	r3, [sp, #32]
 801aeec:	2300      	movs	r3, #0
 801aeee:	930d      	str	r3, [sp, #52]	@ 0x34
 801aef0:	e7c3      	b.n	801ae7a <_dtoa_r+0x1b2>
 801aef2:	2301      	movs	r3, #1
 801aef4:	9309      	str	r3, [sp, #36]	@ 0x24
 801aef6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aef8:	eb07 0b03 	add.w	fp, r7, r3
 801aefc:	f10b 0301 	add.w	r3, fp, #1
 801af00:	2b01      	cmp	r3, #1
 801af02:	9303      	str	r3, [sp, #12]
 801af04:	bfb8      	it	lt
 801af06:	2301      	movlt	r3, #1
 801af08:	e006      	b.n	801af18 <_dtoa_r+0x250>
 801af0a:	2301      	movs	r3, #1
 801af0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801af0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801af10:	2b00      	cmp	r3, #0
 801af12:	dd28      	ble.n	801af66 <_dtoa_r+0x29e>
 801af14:	469b      	mov	fp, r3
 801af16:	9303      	str	r3, [sp, #12]
 801af18:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801af1c:	2100      	movs	r1, #0
 801af1e:	2204      	movs	r2, #4
 801af20:	f102 0514 	add.w	r5, r2, #20
 801af24:	429d      	cmp	r5, r3
 801af26:	d926      	bls.n	801af76 <_dtoa_r+0x2ae>
 801af28:	6041      	str	r1, [r0, #4]
 801af2a:	4648      	mov	r0, r9
 801af2c:	f000 fce6 	bl	801b8fc <_Balloc>
 801af30:	4682      	mov	sl, r0
 801af32:	2800      	cmp	r0, #0
 801af34:	d142      	bne.n	801afbc <_dtoa_r+0x2f4>
 801af36:	4b1e      	ldr	r3, [pc, #120]	@ (801afb0 <_dtoa_r+0x2e8>)
 801af38:	4602      	mov	r2, r0
 801af3a:	f240 11af 	movw	r1, #431	@ 0x1af
 801af3e:	e6da      	b.n	801acf6 <_dtoa_r+0x2e>
 801af40:	2300      	movs	r3, #0
 801af42:	e7e3      	b.n	801af0c <_dtoa_r+0x244>
 801af44:	2300      	movs	r3, #0
 801af46:	e7d5      	b.n	801aef4 <_dtoa_r+0x22c>
 801af48:	2401      	movs	r4, #1
 801af4a:	2300      	movs	r3, #0
 801af4c:	9307      	str	r3, [sp, #28]
 801af4e:	9409      	str	r4, [sp, #36]	@ 0x24
 801af50:	f04f 3bff 	mov.w	fp, #4294967295
 801af54:	2200      	movs	r2, #0
 801af56:	f8cd b00c 	str.w	fp, [sp, #12]
 801af5a:	2312      	movs	r3, #18
 801af5c:	920c      	str	r2, [sp, #48]	@ 0x30
 801af5e:	e7db      	b.n	801af18 <_dtoa_r+0x250>
 801af60:	2301      	movs	r3, #1
 801af62:	9309      	str	r3, [sp, #36]	@ 0x24
 801af64:	e7f4      	b.n	801af50 <_dtoa_r+0x288>
 801af66:	f04f 0b01 	mov.w	fp, #1
 801af6a:	f8cd b00c 	str.w	fp, [sp, #12]
 801af6e:	465b      	mov	r3, fp
 801af70:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801af74:	e7d0      	b.n	801af18 <_dtoa_r+0x250>
 801af76:	3101      	adds	r1, #1
 801af78:	0052      	lsls	r2, r2, #1
 801af7a:	e7d1      	b.n	801af20 <_dtoa_r+0x258>
 801af7c:	f3af 8000 	nop.w
 801af80:	636f4361 	.word	0x636f4361
 801af84:	3fd287a7 	.word	0x3fd287a7
 801af88:	8b60c8b3 	.word	0x8b60c8b3
 801af8c:	3fc68a28 	.word	0x3fc68a28
 801af90:	509f79fb 	.word	0x509f79fb
 801af94:	3fd34413 	.word	0x3fd34413
 801af98:	0801e0f5 	.word	0x0801e0f5
 801af9c:	0801e10c 	.word	0x0801e10c
 801afa0:	7ff00000 	.word	0x7ff00000
 801afa4:	0801e0c5 	.word	0x0801e0c5
 801afa8:	3ff80000 	.word	0x3ff80000
 801afac:	0801e260 	.word	0x0801e260
 801afb0:	0801e164 	.word	0x0801e164
 801afb4:	0801e0f1 	.word	0x0801e0f1
 801afb8:	0801e0c4 	.word	0x0801e0c4
 801afbc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801afc0:	6018      	str	r0, [r3, #0]
 801afc2:	9b03      	ldr	r3, [sp, #12]
 801afc4:	2b0e      	cmp	r3, #14
 801afc6:	f200 80a1 	bhi.w	801b10c <_dtoa_r+0x444>
 801afca:	2c00      	cmp	r4, #0
 801afcc:	f000 809e 	beq.w	801b10c <_dtoa_r+0x444>
 801afd0:	2f00      	cmp	r7, #0
 801afd2:	dd33      	ble.n	801b03c <_dtoa_r+0x374>
 801afd4:	4b9c      	ldr	r3, [pc, #624]	@ (801b248 <_dtoa_r+0x580>)
 801afd6:	f007 020f 	and.w	r2, r7, #15
 801afda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801afde:	ed93 7b00 	vldr	d7, [r3]
 801afe2:	05f8      	lsls	r0, r7, #23
 801afe4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801afe8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801afec:	d516      	bpl.n	801b01c <_dtoa_r+0x354>
 801afee:	4b97      	ldr	r3, [pc, #604]	@ (801b24c <_dtoa_r+0x584>)
 801aff0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801aff4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801aff8:	f7e5 fc10 	bl	800081c <__aeabi_ddiv>
 801affc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b000:	f004 040f 	and.w	r4, r4, #15
 801b004:	2603      	movs	r6, #3
 801b006:	4d91      	ldr	r5, [pc, #580]	@ (801b24c <_dtoa_r+0x584>)
 801b008:	b954      	cbnz	r4, 801b020 <_dtoa_r+0x358>
 801b00a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b00e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b012:	f7e5 fc03 	bl	800081c <__aeabi_ddiv>
 801b016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b01a:	e028      	b.n	801b06e <_dtoa_r+0x3a6>
 801b01c:	2602      	movs	r6, #2
 801b01e:	e7f2      	b.n	801b006 <_dtoa_r+0x33e>
 801b020:	07e1      	lsls	r1, r4, #31
 801b022:	d508      	bpl.n	801b036 <_dtoa_r+0x36e>
 801b024:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b028:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b02c:	f7e5 facc 	bl	80005c8 <__aeabi_dmul>
 801b030:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b034:	3601      	adds	r6, #1
 801b036:	1064      	asrs	r4, r4, #1
 801b038:	3508      	adds	r5, #8
 801b03a:	e7e5      	b.n	801b008 <_dtoa_r+0x340>
 801b03c:	f000 80af 	beq.w	801b19e <_dtoa_r+0x4d6>
 801b040:	427c      	negs	r4, r7
 801b042:	4b81      	ldr	r3, [pc, #516]	@ (801b248 <_dtoa_r+0x580>)
 801b044:	4d81      	ldr	r5, [pc, #516]	@ (801b24c <_dtoa_r+0x584>)
 801b046:	f004 020f 	and.w	r2, r4, #15
 801b04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b052:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b056:	f7e5 fab7 	bl	80005c8 <__aeabi_dmul>
 801b05a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b05e:	1124      	asrs	r4, r4, #4
 801b060:	2300      	movs	r3, #0
 801b062:	2602      	movs	r6, #2
 801b064:	2c00      	cmp	r4, #0
 801b066:	f040 808f 	bne.w	801b188 <_dtoa_r+0x4c0>
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d1d3      	bne.n	801b016 <_dtoa_r+0x34e>
 801b06e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b070:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b074:	2b00      	cmp	r3, #0
 801b076:	f000 8094 	beq.w	801b1a2 <_dtoa_r+0x4da>
 801b07a:	4b75      	ldr	r3, [pc, #468]	@ (801b250 <_dtoa_r+0x588>)
 801b07c:	2200      	movs	r2, #0
 801b07e:	4620      	mov	r0, r4
 801b080:	4629      	mov	r1, r5
 801b082:	f7e5 fd13 	bl	8000aac <__aeabi_dcmplt>
 801b086:	2800      	cmp	r0, #0
 801b088:	f000 808b 	beq.w	801b1a2 <_dtoa_r+0x4da>
 801b08c:	9b03      	ldr	r3, [sp, #12]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	f000 8087 	beq.w	801b1a2 <_dtoa_r+0x4da>
 801b094:	f1bb 0f00 	cmp.w	fp, #0
 801b098:	dd34      	ble.n	801b104 <_dtoa_r+0x43c>
 801b09a:	4620      	mov	r0, r4
 801b09c:	4b6d      	ldr	r3, [pc, #436]	@ (801b254 <_dtoa_r+0x58c>)
 801b09e:	2200      	movs	r2, #0
 801b0a0:	4629      	mov	r1, r5
 801b0a2:	f7e5 fa91 	bl	80005c8 <__aeabi_dmul>
 801b0a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b0aa:	f107 38ff 	add.w	r8, r7, #4294967295
 801b0ae:	3601      	adds	r6, #1
 801b0b0:	465c      	mov	r4, fp
 801b0b2:	4630      	mov	r0, r6
 801b0b4:	f7e5 fa1e 	bl	80004f4 <__aeabi_i2d>
 801b0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b0bc:	f7e5 fa84 	bl	80005c8 <__aeabi_dmul>
 801b0c0:	4b65      	ldr	r3, [pc, #404]	@ (801b258 <_dtoa_r+0x590>)
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	f7e5 f8ca 	bl	800025c <__adddf3>
 801b0c8:	4605      	mov	r5, r0
 801b0ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b0ce:	2c00      	cmp	r4, #0
 801b0d0:	d16a      	bne.n	801b1a8 <_dtoa_r+0x4e0>
 801b0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b0d6:	4b61      	ldr	r3, [pc, #388]	@ (801b25c <_dtoa_r+0x594>)
 801b0d8:	2200      	movs	r2, #0
 801b0da:	f7e5 f8bd 	bl	8000258 <__aeabi_dsub>
 801b0de:	4602      	mov	r2, r0
 801b0e0:	460b      	mov	r3, r1
 801b0e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b0e6:	462a      	mov	r2, r5
 801b0e8:	4633      	mov	r3, r6
 801b0ea:	f7e5 fcfd 	bl	8000ae8 <__aeabi_dcmpgt>
 801b0ee:	2800      	cmp	r0, #0
 801b0f0:	f040 8298 	bne.w	801b624 <_dtoa_r+0x95c>
 801b0f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b0f8:	462a      	mov	r2, r5
 801b0fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b0fe:	f7e5 fcd5 	bl	8000aac <__aeabi_dcmplt>
 801b102:	bb38      	cbnz	r0, 801b154 <_dtoa_r+0x48c>
 801b104:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801b108:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801b10c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b10e:	2b00      	cmp	r3, #0
 801b110:	f2c0 8157 	blt.w	801b3c2 <_dtoa_r+0x6fa>
 801b114:	2f0e      	cmp	r7, #14
 801b116:	f300 8154 	bgt.w	801b3c2 <_dtoa_r+0x6fa>
 801b11a:	4b4b      	ldr	r3, [pc, #300]	@ (801b248 <_dtoa_r+0x580>)
 801b11c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b120:	ed93 7b00 	vldr	d7, [r3]
 801b124:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b126:	2b00      	cmp	r3, #0
 801b128:	ed8d 7b00 	vstr	d7, [sp]
 801b12c:	f280 80e5 	bge.w	801b2fa <_dtoa_r+0x632>
 801b130:	9b03      	ldr	r3, [sp, #12]
 801b132:	2b00      	cmp	r3, #0
 801b134:	f300 80e1 	bgt.w	801b2fa <_dtoa_r+0x632>
 801b138:	d10c      	bne.n	801b154 <_dtoa_r+0x48c>
 801b13a:	4b48      	ldr	r3, [pc, #288]	@ (801b25c <_dtoa_r+0x594>)
 801b13c:	2200      	movs	r2, #0
 801b13e:	ec51 0b17 	vmov	r0, r1, d7
 801b142:	f7e5 fa41 	bl	80005c8 <__aeabi_dmul>
 801b146:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b14a:	f7e5 fcc3 	bl	8000ad4 <__aeabi_dcmpge>
 801b14e:	2800      	cmp	r0, #0
 801b150:	f000 8266 	beq.w	801b620 <_dtoa_r+0x958>
 801b154:	2400      	movs	r4, #0
 801b156:	4625      	mov	r5, r4
 801b158:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b15a:	4656      	mov	r6, sl
 801b15c:	ea6f 0803 	mvn.w	r8, r3
 801b160:	2700      	movs	r7, #0
 801b162:	4621      	mov	r1, r4
 801b164:	4648      	mov	r0, r9
 801b166:	f000 fc09 	bl	801b97c <_Bfree>
 801b16a:	2d00      	cmp	r5, #0
 801b16c:	f000 80bd 	beq.w	801b2ea <_dtoa_r+0x622>
 801b170:	b12f      	cbz	r7, 801b17e <_dtoa_r+0x4b6>
 801b172:	42af      	cmp	r7, r5
 801b174:	d003      	beq.n	801b17e <_dtoa_r+0x4b6>
 801b176:	4639      	mov	r1, r7
 801b178:	4648      	mov	r0, r9
 801b17a:	f000 fbff 	bl	801b97c <_Bfree>
 801b17e:	4629      	mov	r1, r5
 801b180:	4648      	mov	r0, r9
 801b182:	f000 fbfb 	bl	801b97c <_Bfree>
 801b186:	e0b0      	b.n	801b2ea <_dtoa_r+0x622>
 801b188:	07e2      	lsls	r2, r4, #31
 801b18a:	d505      	bpl.n	801b198 <_dtoa_r+0x4d0>
 801b18c:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b190:	f7e5 fa1a 	bl	80005c8 <__aeabi_dmul>
 801b194:	3601      	adds	r6, #1
 801b196:	2301      	movs	r3, #1
 801b198:	1064      	asrs	r4, r4, #1
 801b19a:	3508      	adds	r5, #8
 801b19c:	e762      	b.n	801b064 <_dtoa_r+0x39c>
 801b19e:	2602      	movs	r6, #2
 801b1a0:	e765      	b.n	801b06e <_dtoa_r+0x3a6>
 801b1a2:	9c03      	ldr	r4, [sp, #12]
 801b1a4:	46b8      	mov	r8, r7
 801b1a6:	e784      	b.n	801b0b2 <_dtoa_r+0x3ea>
 801b1a8:	4b27      	ldr	r3, [pc, #156]	@ (801b248 <_dtoa_r+0x580>)
 801b1aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b1ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b1b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b1b4:	4454      	add	r4, sl
 801b1b6:	2900      	cmp	r1, #0
 801b1b8:	d054      	beq.n	801b264 <_dtoa_r+0x59c>
 801b1ba:	4929      	ldr	r1, [pc, #164]	@ (801b260 <_dtoa_r+0x598>)
 801b1bc:	2000      	movs	r0, #0
 801b1be:	f7e5 fb2d 	bl	800081c <__aeabi_ddiv>
 801b1c2:	4633      	mov	r3, r6
 801b1c4:	462a      	mov	r2, r5
 801b1c6:	f7e5 f847 	bl	8000258 <__aeabi_dsub>
 801b1ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b1ce:	4656      	mov	r6, sl
 801b1d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1d4:	f7e5 fca8 	bl	8000b28 <__aeabi_d2iz>
 801b1d8:	4605      	mov	r5, r0
 801b1da:	f7e5 f98b 	bl	80004f4 <__aeabi_i2d>
 801b1de:	4602      	mov	r2, r0
 801b1e0:	460b      	mov	r3, r1
 801b1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1e6:	f7e5 f837 	bl	8000258 <__aeabi_dsub>
 801b1ea:	3530      	adds	r5, #48	@ 0x30
 801b1ec:	4602      	mov	r2, r0
 801b1ee:	460b      	mov	r3, r1
 801b1f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b1f4:	f806 5b01 	strb.w	r5, [r6], #1
 801b1f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b1fc:	f7e5 fc56 	bl	8000aac <__aeabi_dcmplt>
 801b200:	2800      	cmp	r0, #0
 801b202:	d172      	bne.n	801b2ea <_dtoa_r+0x622>
 801b204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b208:	4911      	ldr	r1, [pc, #68]	@ (801b250 <_dtoa_r+0x588>)
 801b20a:	2000      	movs	r0, #0
 801b20c:	f7e5 f824 	bl	8000258 <__aeabi_dsub>
 801b210:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b214:	f7e5 fc4a 	bl	8000aac <__aeabi_dcmplt>
 801b218:	2800      	cmp	r0, #0
 801b21a:	f040 80b4 	bne.w	801b386 <_dtoa_r+0x6be>
 801b21e:	42a6      	cmp	r6, r4
 801b220:	f43f af70 	beq.w	801b104 <_dtoa_r+0x43c>
 801b224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b228:	4b0a      	ldr	r3, [pc, #40]	@ (801b254 <_dtoa_r+0x58c>)
 801b22a:	2200      	movs	r2, #0
 801b22c:	f7e5 f9cc 	bl	80005c8 <__aeabi_dmul>
 801b230:	4b08      	ldr	r3, [pc, #32]	@ (801b254 <_dtoa_r+0x58c>)
 801b232:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b236:	2200      	movs	r2, #0
 801b238:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b23c:	f7e5 f9c4 	bl	80005c8 <__aeabi_dmul>
 801b240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b244:	e7c4      	b.n	801b1d0 <_dtoa_r+0x508>
 801b246:	bf00      	nop
 801b248:	0801e260 	.word	0x0801e260
 801b24c:	0801e238 	.word	0x0801e238
 801b250:	3ff00000 	.word	0x3ff00000
 801b254:	40240000 	.word	0x40240000
 801b258:	401c0000 	.word	0x401c0000
 801b25c:	40140000 	.word	0x40140000
 801b260:	3fe00000 	.word	0x3fe00000
 801b264:	4631      	mov	r1, r6
 801b266:	4628      	mov	r0, r5
 801b268:	f7e5 f9ae 	bl	80005c8 <__aeabi_dmul>
 801b26c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b270:	9413      	str	r4, [sp, #76]	@ 0x4c
 801b272:	4656      	mov	r6, sl
 801b274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b278:	f7e5 fc56 	bl	8000b28 <__aeabi_d2iz>
 801b27c:	4605      	mov	r5, r0
 801b27e:	f7e5 f939 	bl	80004f4 <__aeabi_i2d>
 801b282:	4602      	mov	r2, r0
 801b284:	460b      	mov	r3, r1
 801b286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b28a:	f7e4 ffe5 	bl	8000258 <__aeabi_dsub>
 801b28e:	3530      	adds	r5, #48	@ 0x30
 801b290:	f806 5b01 	strb.w	r5, [r6], #1
 801b294:	4602      	mov	r2, r0
 801b296:	460b      	mov	r3, r1
 801b298:	42a6      	cmp	r6, r4
 801b29a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b29e:	f04f 0200 	mov.w	r2, #0
 801b2a2:	d124      	bne.n	801b2ee <_dtoa_r+0x626>
 801b2a4:	4baf      	ldr	r3, [pc, #700]	@ (801b564 <_dtoa_r+0x89c>)
 801b2a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b2aa:	f7e4 ffd7 	bl	800025c <__adddf3>
 801b2ae:	4602      	mov	r2, r0
 801b2b0:	460b      	mov	r3, r1
 801b2b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b2b6:	f7e5 fc17 	bl	8000ae8 <__aeabi_dcmpgt>
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d163      	bne.n	801b386 <_dtoa_r+0x6be>
 801b2be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b2c2:	49a8      	ldr	r1, [pc, #672]	@ (801b564 <_dtoa_r+0x89c>)
 801b2c4:	2000      	movs	r0, #0
 801b2c6:	f7e4 ffc7 	bl	8000258 <__aeabi_dsub>
 801b2ca:	4602      	mov	r2, r0
 801b2cc:	460b      	mov	r3, r1
 801b2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b2d2:	f7e5 fbeb 	bl	8000aac <__aeabi_dcmplt>
 801b2d6:	2800      	cmp	r0, #0
 801b2d8:	f43f af14 	beq.w	801b104 <_dtoa_r+0x43c>
 801b2dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b2de:	1e73      	subs	r3, r6, #1
 801b2e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b2e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b2e6:	2b30      	cmp	r3, #48	@ 0x30
 801b2e8:	d0f8      	beq.n	801b2dc <_dtoa_r+0x614>
 801b2ea:	4647      	mov	r7, r8
 801b2ec:	e03b      	b.n	801b366 <_dtoa_r+0x69e>
 801b2ee:	4b9e      	ldr	r3, [pc, #632]	@ (801b568 <_dtoa_r+0x8a0>)
 801b2f0:	f7e5 f96a 	bl	80005c8 <__aeabi_dmul>
 801b2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b2f8:	e7bc      	b.n	801b274 <_dtoa_r+0x5ac>
 801b2fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b2fe:	4656      	mov	r6, sl
 801b300:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b304:	4620      	mov	r0, r4
 801b306:	4629      	mov	r1, r5
 801b308:	f7e5 fa88 	bl	800081c <__aeabi_ddiv>
 801b30c:	f7e5 fc0c 	bl	8000b28 <__aeabi_d2iz>
 801b310:	4680      	mov	r8, r0
 801b312:	f7e5 f8ef 	bl	80004f4 <__aeabi_i2d>
 801b316:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b31a:	f7e5 f955 	bl	80005c8 <__aeabi_dmul>
 801b31e:	4602      	mov	r2, r0
 801b320:	460b      	mov	r3, r1
 801b322:	4620      	mov	r0, r4
 801b324:	4629      	mov	r1, r5
 801b326:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b32a:	f7e4 ff95 	bl	8000258 <__aeabi_dsub>
 801b32e:	f806 4b01 	strb.w	r4, [r6], #1
 801b332:	9d03      	ldr	r5, [sp, #12]
 801b334:	eba6 040a 	sub.w	r4, r6, sl
 801b338:	42a5      	cmp	r5, r4
 801b33a:	4602      	mov	r2, r0
 801b33c:	460b      	mov	r3, r1
 801b33e:	d133      	bne.n	801b3a8 <_dtoa_r+0x6e0>
 801b340:	f7e4 ff8c 	bl	800025c <__adddf3>
 801b344:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b348:	4604      	mov	r4, r0
 801b34a:	460d      	mov	r5, r1
 801b34c:	f7e5 fbcc 	bl	8000ae8 <__aeabi_dcmpgt>
 801b350:	b9c0      	cbnz	r0, 801b384 <_dtoa_r+0x6bc>
 801b352:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b356:	4620      	mov	r0, r4
 801b358:	4629      	mov	r1, r5
 801b35a:	f7e5 fb9d 	bl	8000a98 <__aeabi_dcmpeq>
 801b35e:	b110      	cbz	r0, 801b366 <_dtoa_r+0x69e>
 801b360:	f018 0f01 	tst.w	r8, #1
 801b364:	d10e      	bne.n	801b384 <_dtoa_r+0x6bc>
 801b366:	9902      	ldr	r1, [sp, #8]
 801b368:	4648      	mov	r0, r9
 801b36a:	f000 fb07 	bl	801b97c <_Bfree>
 801b36e:	2300      	movs	r3, #0
 801b370:	7033      	strb	r3, [r6, #0]
 801b372:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b374:	3701      	adds	r7, #1
 801b376:	601f      	str	r7, [r3, #0]
 801b378:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	f000 824b 	beq.w	801b816 <_dtoa_r+0xb4e>
 801b380:	601e      	str	r6, [r3, #0]
 801b382:	e248      	b.n	801b816 <_dtoa_r+0xb4e>
 801b384:	46b8      	mov	r8, r7
 801b386:	4633      	mov	r3, r6
 801b388:	461e      	mov	r6, r3
 801b38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b38e:	2a39      	cmp	r2, #57	@ 0x39
 801b390:	d106      	bne.n	801b3a0 <_dtoa_r+0x6d8>
 801b392:	459a      	cmp	sl, r3
 801b394:	d1f8      	bne.n	801b388 <_dtoa_r+0x6c0>
 801b396:	2230      	movs	r2, #48	@ 0x30
 801b398:	f108 0801 	add.w	r8, r8, #1
 801b39c:	f88a 2000 	strb.w	r2, [sl]
 801b3a0:	781a      	ldrb	r2, [r3, #0]
 801b3a2:	3201      	adds	r2, #1
 801b3a4:	701a      	strb	r2, [r3, #0]
 801b3a6:	e7a0      	b.n	801b2ea <_dtoa_r+0x622>
 801b3a8:	4b6f      	ldr	r3, [pc, #444]	@ (801b568 <_dtoa_r+0x8a0>)
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	f7e5 f90c 	bl	80005c8 <__aeabi_dmul>
 801b3b0:	2200      	movs	r2, #0
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	4604      	mov	r4, r0
 801b3b6:	460d      	mov	r5, r1
 801b3b8:	f7e5 fb6e 	bl	8000a98 <__aeabi_dcmpeq>
 801b3bc:	2800      	cmp	r0, #0
 801b3be:	d09f      	beq.n	801b300 <_dtoa_r+0x638>
 801b3c0:	e7d1      	b.n	801b366 <_dtoa_r+0x69e>
 801b3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b3c4:	2a00      	cmp	r2, #0
 801b3c6:	f000 80ea 	beq.w	801b59e <_dtoa_r+0x8d6>
 801b3ca:	9a07      	ldr	r2, [sp, #28]
 801b3cc:	2a01      	cmp	r2, #1
 801b3ce:	f300 80cd 	bgt.w	801b56c <_dtoa_r+0x8a4>
 801b3d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b3d4:	2a00      	cmp	r2, #0
 801b3d6:	f000 80c1 	beq.w	801b55c <_dtoa_r+0x894>
 801b3da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b3de:	9c08      	ldr	r4, [sp, #32]
 801b3e0:	9e00      	ldr	r6, [sp, #0]
 801b3e2:	9a00      	ldr	r2, [sp, #0]
 801b3e4:	441a      	add	r2, r3
 801b3e6:	9200      	str	r2, [sp, #0]
 801b3e8:	9a06      	ldr	r2, [sp, #24]
 801b3ea:	2101      	movs	r1, #1
 801b3ec:	441a      	add	r2, r3
 801b3ee:	4648      	mov	r0, r9
 801b3f0:	9206      	str	r2, [sp, #24]
 801b3f2:	f000 fb77 	bl	801bae4 <__i2b>
 801b3f6:	4605      	mov	r5, r0
 801b3f8:	b166      	cbz	r6, 801b414 <_dtoa_r+0x74c>
 801b3fa:	9b06      	ldr	r3, [sp, #24]
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	dd09      	ble.n	801b414 <_dtoa_r+0x74c>
 801b400:	42b3      	cmp	r3, r6
 801b402:	9a00      	ldr	r2, [sp, #0]
 801b404:	bfa8      	it	ge
 801b406:	4633      	movge	r3, r6
 801b408:	1ad2      	subs	r2, r2, r3
 801b40a:	9200      	str	r2, [sp, #0]
 801b40c:	9a06      	ldr	r2, [sp, #24]
 801b40e:	1af6      	subs	r6, r6, r3
 801b410:	1ad3      	subs	r3, r2, r3
 801b412:	9306      	str	r3, [sp, #24]
 801b414:	9b08      	ldr	r3, [sp, #32]
 801b416:	b30b      	cbz	r3, 801b45c <_dtoa_r+0x794>
 801b418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	f000 80c6 	beq.w	801b5ac <_dtoa_r+0x8e4>
 801b420:	2c00      	cmp	r4, #0
 801b422:	f000 80c0 	beq.w	801b5a6 <_dtoa_r+0x8de>
 801b426:	4629      	mov	r1, r5
 801b428:	4622      	mov	r2, r4
 801b42a:	4648      	mov	r0, r9
 801b42c:	f000 fc12 	bl	801bc54 <__pow5mult>
 801b430:	9a02      	ldr	r2, [sp, #8]
 801b432:	4601      	mov	r1, r0
 801b434:	4605      	mov	r5, r0
 801b436:	4648      	mov	r0, r9
 801b438:	f000 fb6a 	bl	801bb10 <__multiply>
 801b43c:	9902      	ldr	r1, [sp, #8]
 801b43e:	4680      	mov	r8, r0
 801b440:	4648      	mov	r0, r9
 801b442:	f000 fa9b 	bl	801b97c <_Bfree>
 801b446:	9b08      	ldr	r3, [sp, #32]
 801b448:	1b1b      	subs	r3, r3, r4
 801b44a:	9308      	str	r3, [sp, #32]
 801b44c:	f000 80b1 	beq.w	801b5b2 <_dtoa_r+0x8ea>
 801b450:	9a08      	ldr	r2, [sp, #32]
 801b452:	4641      	mov	r1, r8
 801b454:	4648      	mov	r0, r9
 801b456:	f000 fbfd 	bl	801bc54 <__pow5mult>
 801b45a:	9002      	str	r0, [sp, #8]
 801b45c:	2101      	movs	r1, #1
 801b45e:	4648      	mov	r0, r9
 801b460:	f000 fb40 	bl	801bae4 <__i2b>
 801b464:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b466:	4604      	mov	r4, r0
 801b468:	2b00      	cmp	r3, #0
 801b46a:	f000 81d8 	beq.w	801b81e <_dtoa_r+0xb56>
 801b46e:	461a      	mov	r2, r3
 801b470:	4601      	mov	r1, r0
 801b472:	4648      	mov	r0, r9
 801b474:	f000 fbee 	bl	801bc54 <__pow5mult>
 801b478:	9b07      	ldr	r3, [sp, #28]
 801b47a:	2b01      	cmp	r3, #1
 801b47c:	4604      	mov	r4, r0
 801b47e:	f300 809f 	bgt.w	801b5c0 <_dtoa_r+0x8f8>
 801b482:	9b04      	ldr	r3, [sp, #16]
 801b484:	2b00      	cmp	r3, #0
 801b486:	f040 8097 	bne.w	801b5b8 <_dtoa_r+0x8f0>
 801b48a:	9b05      	ldr	r3, [sp, #20]
 801b48c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b490:	2b00      	cmp	r3, #0
 801b492:	f040 8093 	bne.w	801b5bc <_dtoa_r+0x8f4>
 801b496:	9b05      	ldr	r3, [sp, #20]
 801b498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b49c:	0d1b      	lsrs	r3, r3, #20
 801b49e:	051b      	lsls	r3, r3, #20
 801b4a0:	b133      	cbz	r3, 801b4b0 <_dtoa_r+0x7e8>
 801b4a2:	9b00      	ldr	r3, [sp, #0]
 801b4a4:	3301      	adds	r3, #1
 801b4a6:	9300      	str	r3, [sp, #0]
 801b4a8:	9b06      	ldr	r3, [sp, #24]
 801b4aa:	3301      	adds	r3, #1
 801b4ac:	9306      	str	r3, [sp, #24]
 801b4ae:	2301      	movs	r3, #1
 801b4b0:	9308      	str	r3, [sp, #32]
 801b4b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b4b4:	2b00      	cmp	r3, #0
 801b4b6:	f000 81b8 	beq.w	801b82a <_dtoa_r+0xb62>
 801b4ba:	6923      	ldr	r3, [r4, #16]
 801b4bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b4c0:	6918      	ldr	r0, [r3, #16]
 801b4c2:	f000 fac3 	bl	801ba4c <__hi0bits>
 801b4c6:	f1c0 0020 	rsb	r0, r0, #32
 801b4ca:	9b06      	ldr	r3, [sp, #24]
 801b4cc:	4418      	add	r0, r3
 801b4ce:	f010 001f 	ands.w	r0, r0, #31
 801b4d2:	f000 8082 	beq.w	801b5da <_dtoa_r+0x912>
 801b4d6:	f1c0 0320 	rsb	r3, r0, #32
 801b4da:	2b04      	cmp	r3, #4
 801b4dc:	dd73      	ble.n	801b5c6 <_dtoa_r+0x8fe>
 801b4de:	9b00      	ldr	r3, [sp, #0]
 801b4e0:	f1c0 001c 	rsb	r0, r0, #28
 801b4e4:	4403      	add	r3, r0
 801b4e6:	9300      	str	r3, [sp, #0]
 801b4e8:	9b06      	ldr	r3, [sp, #24]
 801b4ea:	4403      	add	r3, r0
 801b4ec:	4406      	add	r6, r0
 801b4ee:	9306      	str	r3, [sp, #24]
 801b4f0:	9b00      	ldr	r3, [sp, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	dd05      	ble.n	801b502 <_dtoa_r+0x83a>
 801b4f6:	9902      	ldr	r1, [sp, #8]
 801b4f8:	461a      	mov	r2, r3
 801b4fa:	4648      	mov	r0, r9
 801b4fc:	f000 fc04 	bl	801bd08 <__lshift>
 801b500:	9002      	str	r0, [sp, #8]
 801b502:	9b06      	ldr	r3, [sp, #24]
 801b504:	2b00      	cmp	r3, #0
 801b506:	dd05      	ble.n	801b514 <_dtoa_r+0x84c>
 801b508:	4621      	mov	r1, r4
 801b50a:	461a      	mov	r2, r3
 801b50c:	4648      	mov	r0, r9
 801b50e:	f000 fbfb 	bl	801bd08 <__lshift>
 801b512:	4604      	mov	r4, r0
 801b514:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b516:	2b00      	cmp	r3, #0
 801b518:	d061      	beq.n	801b5de <_dtoa_r+0x916>
 801b51a:	9802      	ldr	r0, [sp, #8]
 801b51c:	4621      	mov	r1, r4
 801b51e:	f000 fc5f 	bl	801bde0 <__mcmp>
 801b522:	2800      	cmp	r0, #0
 801b524:	da5b      	bge.n	801b5de <_dtoa_r+0x916>
 801b526:	2300      	movs	r3, #0
 801b528:	9902      	ldr	r1, [sp, #8]
 801b52a:	220a      	movs	r2, #10
 801b52c:	4648      	mov	r0, r9
 801b52e:	f000 fa47 	bl	801b9c0 <__multadd>
 801b532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b534:	9002      	str	r0, [sp, #8]
 801b536:	f107 38ff 	add.w	r8, r7, #4294967295
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	f000 8177 	beq.w	801b82e <_dtoa_r+0xb66>
 801b540:	4629      	mov	r1, r5
 801b542:	2300      	movs	r3, #0
 801b544:	220a      	movs	r2, #10
 801b546:	4648      	mov	r0, r9
 801b548:	f000 fa3a 	bl	801b9c0 <__multadd>
 801b54c:	f1bb 0f00 	cmp.w	fp, #0
 801b550:	4605      	mov	r5, r0
 801b552:	dc6f      	bgt.n	801b634 <_dtoa_r+0x96c>
 801b554:	9b07      	ldr	r3, [sp, #28]
 801b556:	2b02      	cmp	r3, #2
 801b558:	dc49      	bgt.n	801b5ee <_dtoa_r+0x926>
 801b55a:	e06b      	b.n	801b634 <_dtoa_r+0x96c>
 801b55c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b55e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b562:	e73c      	b.n	801b3de <_dtoa_r+0x716>
 801b564:	3fe00000 	.word	0x3fe00000
 801b568:	40240000 	.word	0x40240000
 801b56c:	9b03      	ldr	r3, [sp, #12]
 801b56e:	1e5c      	subs	r4, r3, #1
 801b570:	9b08      	ldr	r3, [sp, #32]
 801b572:	42a3      	cmp	r3, r4
 801b574:	db09      	blt.n	801b58a <_dtoa_r+0x8c2>
 801b576:	1b1c      	subs	r4, r3, r4
 801b578:	9b03      	ldr	r3, [sp, #12]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	f6bf af30 	bge.w	801b3e0 <_dtoa_r+0x718>
 801b580:	9b00      	ldr	r3, [sp, #0]
 801b582:	9a03      	ldr	r2, [sp, #12]
 801b584:	1a9e      	subs	r6, r3, r2
 801b586:	2300      	movs	r3, #0
 801b588:	e72b      	b.n	801b3e2 <_dtoa_r+0x71a>
 801b58a:	9b08      	ldr	r3, [sp, #32]
 801b58c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b58e:	9408      	str	r4, [sp, #32]
 801b590:	1ae3      	subs	r3, r4, r3
 801b592:	441a      	add	r2, r3
 801b594:	9e00      	ldr	r6, [sp, #0]
 801b596:	9b03      	ldr	r3, [sp, #12]
 801b598:	920d      	str	r2, [sp, #52]	@ 0x34
 801b59a:	2400      	movs	r4, #0
 801b59c:	e721      	b.n	801b3e2 <_dtoa_r+0x71a>
 801b59e:	9c08      	ldr	r4, [sp, #32]
 801b5a0:	9e00      	ldr	r6, [sp, #0]
 801b5a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b5a4:	e728      	b.n	801b3f8 <_dtoa_r+0x730>
 801b5a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b5aa:	e751      	b.n	801b450 <_dtoa_r+0x788>
 801b5ac:	9a08      	ldr	r2, [sp, #32]
 801b5ae:	9902      	ldr	r1, [sp, #8]
 801b5b0:	e750      	b.n	801b454 <_dtoa_r+0x78c>
 801b5b2:	f8cd 8008 	str.w	r8, [sp, #8]
 801b5b6:	e751      	b.n	801b45c <_dtoa_r+0x794>
 801b5b8:	2300      	movs	r3, #0
 801b5ba:	e779      	b.n	801b4b0 <_dtoa_r+0x7e8>
 801b5bc:	9b04      	ldr	r3, [sp, #16]
 801b5be:	e777      	b.n	801b4b0 <_dtoa_r+0x7e8>
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	9308      	str	r3, [sp, #32]
 801b5c4:	e779      	b.n	801b4ba <_dtoa_r+0x7f2>
 801b5c6:	d093      	beq.n	801b4f0 <_dtoa_r+0x828>
 801b5c8:	9a00      	ldr	r2, [sp, #0]
 801b5ca:	331c      	adds	r3, #28
 801b5cc:	441a      	add	r2, r3
 801b5ce:	9200      	str	r2, [sp, #0]
 801b5d0:	9a06      	ldr	r2, [sp, #24]
 801b5d2:	441a      	add	r2, r3
 801b5d4:	441e      	add	r6, r3
 801b5d6:	9206      	str	r2, [sp, #24]
 801b5d8:	e78a      	b.n	801b4f0 <_dtoa_r+0x828>
 801b5da:	4603      	mov	r3, r0
 801b5dc:	e7f4      	b.n	801b5c8 <_dtoa_r+0x900>
 801b5de:	9b03      	ldr	r3, [sp, #12]
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	46b8      	mov	r8, r7
 801b5e4:	dc20      	bgt.n	801b628 <_dtoa_r+0x960>
 801b5e6:	469b      	mov	fp, r3
 801b5e8:	9b07      	ldr	r3, [sp, #28]
 801b5ea:	2b02      	cmp	r3, #2
 801b5ec:	dd1e      	ble.n	801b62c <_dtoa_r+0x964>
 801b5ee:	f1bb 0f00 	cmp.w	fp, #0
 801b5f2:	f47f adb1 	bne.w	801b158 <_dtoa_r+0x490>
 801b5f6:	4621      	mov	r1, r4
 801b5f8:	465b      	mov	r3, fp
 801b5fa:	2205      	movs	r2, #5
 801b5fc:	4648      	mov	r0, r9
 801b5fe:	f000 f9df 	bl	801b9c0 <__multadd>
 801b602:	4601      	mov	r1, r0
 801b604:	4604      	mov	r4, r0
 801b606:	9802      	ldr	r0, [sp, #8]
 801b608:	f000 fbea 	bl	801bde0 <__mcmp>
 801b60c:	2800      	cmp	r0, #0
 801b60e:	f77f ada3 	ble.w	801b158 <_dtoa_r+0x490>
 801b612:	4656      	mov	r6, sl
 801b614:	2331      	movs	r3, #49	@ 0x31
 801b616:	f806 3b01 	strb.w	r3, [r6], #1
 801b61a:	f108 0801 	add.w	r8, r8, #1
 801b61e:	e59f      	b.n	801b160 <_dtoa_r+0x498>
 801b620:	9c03      	ldr	r4, [sp, #12]
 801b622:	46b8      	mov	r8, r7
 801b624:	4625      	mov	r5, r4
 801b626:	e7f4      	b.n	801b612 <_dtoa_r+0x94a>
 801b628:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b62c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b62e:	2b00      	cmp	r3, #0
 801b630:	f000 8101 	beq.w	801b836 <_dtoa_r+0xb6e>
 801b634:	2e00      	cmp	r6, #0
 801b636:	dd05      	ble.n	801b644 <_dtoa_r+0x97c>
 801b638:	4629      	mov	r1, r5
 801b63a:	4632      	mov	r2, r6
 801b63c:	4648      	mov	r0, r9
 801b63e:	f000 fb63 	bl	801bd08 <__lshift>
 801b642:	4605      	mov	r5, r0
 801b644:	9b08      	ldr	r3, [sp, #32]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d05c      	beq.n	801b704 <_dtoa_r+0xa3c>
 801b64a:	6869      	ldr	r1, [r5, #4]
 801b64c:	4648      	mov	r0, r9
 801b64e:	f000 f955 	bl	801b8fc <_Balloc>
 801b652:	4606      	mov	r6, r0
 801b654:	b928      	cbnz	r0, 801b662 <_dtoa_r+0x99a>
 801b656:	4b82      	ldr	r3, [pc, #520]	@ (801b860 <_dtoa_r+0xb98>)
 801b658:	4602      	mov	r2, r0
 801b65a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b65e:	f7ff bb4a 	b.w	801acf6 <_dtoa_r+0x2e>
 801b662:	692a      	ldr	r2, [r5, #16]
 801b664:	3202      	adds	r2, #2
 801b666:	0092      	lsls	r2, r2, #2
 801b668:	f105 010c 	add.w	r1, r5, #12
 801b66c:	300c      	adds	r0, #12
 801b66e:	f7ff fa92 	bl	801ab96 <memcpy>
 801b672:	2201      	movs	r2, #1
 801b674:	4631      	mov	r1, r6
 801b676:	4648      	mov	r0, r9
 801b678:	f000 fb46 	bl	801bd08 <__lshift>
 801b67c:	f10a 0301 	add.w	r3, sl, #1
 801b680:	9300      	str	r3, [sp, #0]
 801b682:	eb0a 030b 	add.w	r3, sl, fp
 801b686:	9308      	str	r3, [sp, #32]
 801b688:	9b04      	ldr	r3, [sp, #16]
 801b68a:	f003 0301 	and.w	r3, r3, #1
 801b68e:	462f      	mov	r7, r5
 801b690:	9306      	str	r3, [sp, #24]
 801b692:	4605      	mov	r5, r0
 801b694:	9b00      	ldr	r3, [sp, #0]
 801b696:	9802      	ldr	r0, [sp, #8]
 801b698:	4621      	mov	r1, r4
 801b69a:	f103 3bff 	add.w	fp, r3, #4294967295
 801b69e:	f7ff fa88 	bl	801abb2 <quorem>
 801b6a2:	4603      	mov	r3, r0
 801b6a4:	3330      	adds	r3, #48	@ 0x30
 801b6a6:	9003      	str	r0, [sp, #12]
 801b6a8:	4639      	mov	r1, r7
 801b6aa:	9802      	ldr	r0, [sp, #8]
 801b6ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6ae:	f000 fb97 	bl	801bde0 <__mcmp>
 801b6b2:	462a      	mov	r2, r5
 801b6b4:	9004      	str	r0, [sp, #16]
 801b6b6:	4621      	mov	r1, r4
 801b6b8:	4648      	mov	r0, r9
 801b6ba:	f000 fbad 	bl	801be18 <__mdiff>
 801b6be:	68c2      	ldr	r2, [r0, #12]
 801b6c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6c2:	4606      	mov	r6, r0
 801b6c4:	bb02      	cbnz	r2, 801b708 <_dtoa_r+0xa40>
 801b6c6:	4601      	mov	r1, r0
 801b6c8:	9802      	ldr	r0, [sp, #8]
 801b6ca:	f000 fb89 	bl	801bde0 <__mcmp>
 801b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6d0:	4602      	mov	r2, r0
 801b6d2:	4631      	mov	r1, r6
 801b6d4:	4648      	mov	r0, r9
 801b6d6:	920c      	str	r2, [sp, #48]	@ 0x30
 801b6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b6da:	f000 f94f 	bl	801b97c <_Bfree>
 801b6de:	9b07      	ldr	r3, [sp, #28]
 801b6e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b6e2:	9e00      	ldr	r6, [sp, #0]
 801b6e4:	ea42 0103 	orr.w	r1, r2, r3
 801b6e8:	9b06      	ldr	r3, [sp, #24]
 801b6ea:	4319      	orrs	r1, r3
 801b6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6ee:	d10d      	bne.n	801b70c <_dtoa_r+0xa44>
 801b6f0:	2b39      	cmp	r3, #57	@ 0x39
 801b6f2:	d027      	beq.n	801b744 <_dtoa_r+0xa7c>
 801b6f4:	9a04      	ldr	r2, [sp, #16]
 801b6f6:	2a00      	cmp	r2, #0
 801b6f8:	dd01      	ble.n	801b6fe <_dtoa_r+0xa36>
 801b6fa:	9b03      	ldr	r3, [sp, #12]
 801b6fc:	3331      	adds	r3, #49	@ 0x31
 801b6fe:	f88b 3000 	strb.w	r3, [fp]
 801b702:	e52e      	b.n	801b162 <_dtoa_r+0x49a>
 801b704:	4628      	mov	r0, r5
 801b706:	e7b9      	b.n	801b67c <_dtoa_r+0x9b4>
 801b708:	2201      	movs	r2, #1
 801b70a:	e7e2      	b.n	801b6d2 <_dtoa_r+0xa0a>
 801b70c:	9904      	ldr	r1, [sp, #16]
 801b70e:	2900      	cmp	r1, #0
 801b710:	db04      	blt.n	801b71c <_dtoa_r+0xa54>
 801b712:	9807      	ldr	r0, [sp, #28]
 801b714:	4301      	orrs	r1, r0
 801b716:	9806      	ldr	r0, [sp, #24]
 801b718:	4301      	orrs	r1, r0
 801b71a:	d120      	bne.n	801b75e <_dtoa_r+0xa96>
 801b71c:	2a00      	cmp	r2, #0
 801b71e:	ddee      	ble.n	801b6fe <_dtoa_r+0xa36>
 801b720:	9902      	ldr	r1, [sp, #8]
 801b722:	9300      	str	r3, [sp, #0]
 801b724:	2201      	movs	r2, #1
 801b726:	4648      	mov	r0, r9
 801b728:	f000 faee 	bl	801bd08 <__lshift>
 801b72c:	4621      	mov	r1, r4
 801b72e:	9002      	str	r0, [sp, #8]
 801b730:	f000 fb56 	bl	801bde0 <__mcmp>
 801b734:	2800      	cmp	r0, #0
 801b736:	9b00      	ldr	r3, [sp, #0]
 801b738:	dc02      	bgt.n	801b740 <_dtoa_r+0xa78>
 801b73a:	d1e0      	bne.n	801b6fe <_dtoa_r+0xa36>
 801b73c:	07da      	lsls	r2, r3, #31
 801b73e:	d5de      	bpl.n	801b6fe <_dtoa_r+0xa36>
 801b740:	2b39      	cmp	r3, #57	@ 0x39
 801b742:	d1da      	bne.n	801b6fa <_dtoa_r+0xa32>
 801b744:	2339      	movs	r3, #57	@ 0x39
 801b746:	f88b 3000 	strb.w	r3, [fp]
 801b74a:	4633      	mov	r3, r6
 801b74c:	461e      	mov	r6, r3
 801b74e:	3b01      	subs	r3, #1
 801b750:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b754:	2a39      	cmp	r2, #57	@ 0x39
 801b756:	d04e      	beq.n	801b7f6 <_dtoa_r+0xb2e>
 801b758:	3201      	adds	r2, #1
 801b75a:	701a      	strb	r2, [r3, #0]
 801b75c:	e501      	b.n	801b162 <_dtoa_r+0x49a>
 801b75e:	2a00      	cmp	r2, #0
 801b760:	dd03      	ble.n	801b76a <_dtoa_r+0xaa2>
 801b762:	2b39      	cmp	r3, #57	@ 0x39
 801b764:	d0ee      	beq.n	801b744 <_dtoa_r+0xa7c>
 801b766:	3301      	adds	r3, #1
 801b768:	e7c9      	b.n	801b6fe <_dtoa_r+0xa36>
 801b76a:	9a00      	ldr	r2, [sp, #0]
 801b76c:	9908      	ldr	r1, [sp, #32]
 801b76e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b772:	428a      	cmp	r2, r1
 801b774:	d028      	beq.n	801b7c8 <_dtoa_r+0xb00>
 801b776:	9902      	ldr	r1, [sp, #8]
 801b778:	2300      	movs	r3, #0
 801b77a:	220a      	movs	r2, #10
 801b77c:	4648      	mov	r0, r9
 801b77e:	f000 f91f 	bl	801b9c0 <__multadd>
 801b782:	42af      	cmp	r7, r5
 801b784:	9002      	str	r0, [sp, #8]
 801b786:	f04f 0300 	mov.w	r3, #0
 801b78a:	f04f 020a 	mov.w	r2, #10
 801b78e:	4639      	mov	r1, r7
 801b790:	4648      	mov	r0, r9
 801b792:	d107      	bne.n	801b7a4 <_dtoa_r+0xadc>
 801b794:	f000 f914 	bl	801b9c0 <__multadd>
 801b798:	4607      	mov	r7, r0
 801b79a:	4605      	mov	r5, r0
 801b79c:	9b00      	ldr	r3, [sp, #0]
 801b79e:	3301      	adds	r3, #1
 801b7a0:	9300      	str	r3, [sp, #0]
 801b7a2:	e777      	b.n	801b694 <_dtoa_r+0x9cc>
 801b7a4:	f000 f90c 	bl	801b9c0 <__multadd>
 801b7a8:	4629      	mov	r1, r5
 801b7aa:	4607      	mov	r7, r0
 801b7ac:	2300      	movs	r3, #0
 801b7ae:	220a      	movs	r2, #10
 801b7b0:	4648      	mov	r0, r9
 801b7b2:	f000 f905 	bl	801b9c0 <__multadd>
 801b7b6:	4605      	mov	r5, r0
 801b7b8:	e7f0      	b.n	801b79c <_dtoa_r+0xad4>
 801b7ba:	f1bb 0f00 	cmp.w	fp, #0
 801b7be:	bfcc      	ite	gt
 801b7c0:	465e      	movgt	r6, fp
 801b7c2:	2601      	movle	r6, #1
 801b7c4:	4456      	add	r6, sl
 801b7c6:	2700      	movs	r7, #0
 801b7c8:	9902      	ldr	r1, [sp, #8]
 801b7ca:	9300      	str	r3, [sp, #0]
 801b7cc:	2201      	movs	r2, #1
 801b7ce:	4648      	mov	r0, r9
 801b7d0:	f000 fa9a 	bl	801bd08 <__lshift>
 801b7d4:	4621      	mov	r1, r4
 801b7d6:	9002      	str	r0, [sp, #8]
 801b7d8:	f000 fb02 	bl	801bde0 <__mcmp>
 801b7dc:	2800      	cmp	r0, #0
 801b7de:	dcb4      	bgt.n	801b74a <_dtoa_r+0xa82>
 801b7e0:	d102      	bne.n	801b7e8 <_dtoa_r+0xb20>
 801b7e2:	9b00      	ldr	r3, [sp, #0]
 801b7e4:	07db      	lsls	r3, r3, #31
 801b7e6:	d4b0      	bmi.n	801b74a <_dtoa_r+0xa82>
 801b7e8:	4633      	mov	r3, r6
 801b7ea:	461e      	mov	r6, r3
 801b7ec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b7f0:	2a30      	cmp	r2, #48	@ 0x30
 801b7f2:	d0fa      	beq.n	801b7ea <_dtoa_r+0xb22>
 801b7f4:	e4b5      	b.n	801b162 <_dtoa_r+0x49a>
 801b7f6:	459a      	cmp	sl, r3
 801b7f8:	d1a8      	bne.n	801b74c <_dtoa_r+0xa84>
 801b7fa:	2331      	movs	r3, #49	@ 0x31
 801b7fc:	f108 0801 	add.w	r8, r8, #1
 801b800:	f88a 3000 	strb.w	r3, [sl]
 801b804:	e4ad      	b.n	801b162 <_dtoa_r+0x49a>
 801b806:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b808:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801b864 <_dtoa_r+0xb9c>
 801b80c:	b11b      	cbz	r3, 801b816 <_dtoa_r+0xb4e>
 801b80e:	f10a 0308 	add.w	r3, sl, #8
 801b812:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b814:	6013      	str	r3, [r2, #0]
 801b816:	4650      	mov	r0, sl
 801b818:	b017      	add	sp, #92	@ 0x5c
 801b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b81e:	9b07      	ldr	r3, [sp, #28]
 801b820:	2b01      	cmp	r3, #1
 801b822:	f77f ae2e 	ble.w	801b482 <_dtoa_r+0x7ba>
 801b826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b828:	9308      	str	r3, [sp, #32]
 801b82a:	2001      	movs	r0, #1
 801b82c:	e64d      	b.n	801b4ca <_dtoa_r+0x802>
 801b82e:	f1bb 0f00 	cmp.w	fp, #0
 801b832:	f77f aed9 	ble.w	801b5e8 <_dtoa_r+0x920>
 801b836:	4656      	mov	r6, sl
 801b838:	9802      	ldr	r0, [sp, #8]
 801b83a:	4621      	mov	r1, r4
 801b83c:	f7ff f9b9 	bl	801abb2 <quorem>
 801b840:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801b844:	f806 3b01 	strb.w	r3, [r6], #1
 801b848:	eba6 020a 	sub.w	r2, r6, sl
 801b84c:	4593      	cmp	fp, r2
 801b84e:	ddb4      	ble.n	801b7ba <_dtoa_r+0xaf2>
 801b850:	9902      	ldr	r1, [sp, #8]
 801b852:	2300      	movs	r3, #0
 801b854:	220a      	movs	r2, #10
 801b856:	4648      	mov	r0, r9
 801b858:	f000 f8b2 	bl	801b9c0 <__multadd>
 801b85c:	9002      	str	r0, [sp, #8]
 801b85e:	e7eb      	b.n	801b838 <_dtoa_r+0xb70>
 801b860:	0801e164 	.word	0x0801e164
 801b864:	0801e0e8 	.word	0x0801e0e8

0801b868 <_free_r>:
 801b868:	b538      	push	{r3, r4, r5, lr}
 801b86a:	4605      	mov	r5, r0
 801b86c:	2900      	cmp	r1, #0
 801b86e:	d041      	beq.n	801b8f4 <_free_r+0x8c>
 801b870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b874:	1f0c      	subs	r4, r1, #4
 801b876:	2b00      	cmp	r3, #0
 801b878:	bfb8      	it	lt
 801b87a:	18e4      	addlt	r4, r4, r3
 801b87c:	f7fe faea 	bl	8019e54 <__malloc_lock>
 801b880:	4a1d      	ldr	r2, [pc, #116]	@ (801b8f8 <_free_r+0x90>)
 801b882:	6813      	ldr	r3, [r2, #0]
 801b884:	b933      	cbnz	r3, 801b894 <_free_r+0x2c>
 801b886:	6063      	str	r3, [r4, #4]
 801b888:	6014      	str	r4, [r2, #0]
 801b88a:	4628      	mov	r0, r5
 801b88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b890:	f7fe bae6 	b.w	8019e60 <__malloc_unlock>
 801b894:	42a3      	cmp	r3, r4
 801b896:	d908      	bls.n	801b8aa <_free_r+0x42>
 801b898:	6820      	ldr	r0, [r4, #0]
 801b89a:	1821      	adds	r1, r4, r0
 801b89c:	428b      	cmp	r3, r1
 801b89e:	bf01      	itttt	eq
 801b8a0:	6819      	ldreq	r1, [r3, #0]
 801b8a2:	685b      	ldreq	r3, [r3, #4]
 801b8a4:	1809      	addeq	r1, r1, r0
 801b8a6:	6021      	streq	r1, [r4, #0]
 801b8a8:	e7ed      	b.n	801b886 <_free_r+0x1e>
 801b8aa:	461a      	mov	r2, r3
 801b8ac:	685b      	ldr	r3, [r3, #4]
 801b8ae:	b10b      	cbz	r3, 801b8b4 <_free_r+0x4c>
 801b8b0:	42a3      	cmp	r3, r4
 801b8b2:	d9fa      	bls.n	801b8aa <_free_r+0x42>
 801b8b4:	6811      	ldr	r1, [r2, #0]
 801b8b6:	1850      	adds	r0, r2, r1
 801b8b8:	42a0      	cmp	r0, r4
 801b8ba:	d10b      	bne.n	801b8d4 <_free_r+0x6c>
 801b8bc:	6820      	ldr	r0, [r4, #0]
 801b8be:	4401      	add	r1, r0
 801b8c0:	1850      	adds	r0, r2, r1
 801b8c2:	4283      	cmp	r3, r0
 801b8c4:	6011      	str	r1, [r2, #0]
 801b8c6:	d1e0      	bne.n	801b88a <_free_r+0x22>
 801b8c8:	6818      	ldr	r0, [r3, #0]
 801b8ca:	685b      	ldr	r3, [r3, #4]
 801b8cc:	6053      	str	r3, [r2, #4]
 801b8ce:	4408      	add	r0, r1
 801b8d0:	6010      	str	r0, [r2, #0]
 801b8d2:	e7da      	b.n	801b88a <_free_r+0x22>
 801b8d4:	d902      	bls.n	801b8dc <_free_r+0x74>
 801b8d6:	230c      	movs	r3, #12
 801b8d8:	602b      	str	r3, [r5, #0]
 801b8da:	e7d6      	b.n	801b88a <_free_r+0x22>
 801b8dc:	6820      	ldr	r0, [r4, #0]
 801b8de:	1821      	adds	r1, r4, r0
 801b8e0:	428b      	cmp	r3, r1
 801b8e2:	bf04      	itt	eq
 801b8e4:	6819      	ldreq	r1, [r3, #0]
 801b8e6:	685b      	ldreq	r3, [r3, #4]
 801b8e8:	6063      	str	r3, [r4, #4]
 801b8ea:	bf04      	itt	eq
 801b8ec:	1809      	addeq	r1, r1, r0
 801b8ee:	6021      	streq	r1, [r4, #0]
 801b8f0:	6054      	str	r4, [r2, #4]
 801b8f2:	e7ca      	b.n	801b88a <_free_r+0x22>
 801b8f4:	bd38      	pop	{r3, r4, r5, pc}
 801b8f6:	bf00      	nop
 801b8f8:	200019c4 	.word	0x200019c4

0801b8fc <_Balloc>:
 801b8fc:	b570      	push	{r4, r5, r6, lr}
 801b8fe:	69c6      	ldr	r6, [r0, #28]
 801b900:	4604      	mov	r4, r0
 801b902:	460d      	mov	r5, r1
 801b904:	b976      	cbnz	r6, 801b924 <_Balloc+0x28>
 801b906:	2010      	movs	r0, #16
 801b908:	f7fe f9f2 	bl	8019cf0 <malloc>
 801b90c:	4602      	mov	r2, r0
 801b90e:	61e0      	str	r0, [r4, #28]
 801b910:	b920      	cbnz	r0, 801b91c <_Balloc+0x20>
 801b912:	4b18      	ldr	r3, [pc, #96]	@ (801b974 <_Balloc+0x78>)
 801b914:	4818      	ldr	r0, [pc, #96]	@ (801b978 <_Balloc+0x7c>)
 801b916:	216b      	movs	r1, #107	@ 0x6b
 801b918:	f000 ff44 	bl	801c7a4 <__assert_func>
 801b91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b920:	6006      	str	r6, [r0, #0]
 801b922:	60c6      	str	r6, [r0, #12]
 801b924:	69e6      	ldr	r6, [r4, #28]
 801b926:	68f3      	ldr	r3, [r6, #12]
 801b928:	b183      	cbz	r3, 801b94c <_Balloc+0x50>
 801b92a:	69e3      	ldr	r3, [r4, #28]
 801b92c:	68db      	ldr	r3, [r3, #12]
 801b92e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b932:	b9b8      	cbnz	r0, 801b964 <_Balloc+0x68>
 801b934:	2101      	movs	r1, #1
 801b936:	fa01 f605 	lsl.w	r6, r1, r5
 801b93a:	1d72      	adds	r2, r6, #5
 801b93c:	0092      	lsls	r2, r2, #2
 801b93e:	4620      	mov	r0, r4
 801b940:	f000 ff4e 	bl	801c7e0 <_calloc_r>
 801b944:	b160      	cbz	r0, 801b960 <_Balloc+0x64>
 801b946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b94a:	e00e      	b.n	801b96a <_Balloc+0x6e>
 801b94c:	2221      	movs	r2, #33	@ 0x21
 801b94e:	2104      	movs	r1, #4
 801b950:	4620      	mov	r0, r4
 801b952:	f000 ff45 	bl	801c7e0 <_calloc_r>
 801b956:	69e3      	ldr	r3, [r4, #28]
 801b958:	60f0      	str	r0, [r6, #12]
 801b95a:	68db      	ldr	r3, [r3, #12]
 801b95c:	2b00      	cmp	r3, #0
 801b95e:	d1e4      	bne.n	801b92a <_Balloc+0x2e>
 801b960:	2000      	movs	r0, #0
 801b962:	bd70      	pop	{r4, r5, r6, pc}
 801b964:	6802      	ldr	r2, [r0, #0]
 801b966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b96a:	2300      	movs	r3, #0
 801b96c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b970:	e7f7      	b.n	801b962 <_Balloc+0x66>
 801b972:	bf00      	nop
 801b974:	0801e0f5 	.word	0x0801e0f5
 801b978:	0801e175 	.word	0x0801e175

0801b97c <_Bfree>:
 801b97c:	b570      	push	{r4, r5, r6, lr}
 801b97e:	69c6      	ldr	r6, [r0, #28]
 801b980:	4605      	mov	r5, r0
 801b982:	460c      	mov	r4, r1
 801b984:	b976      	cbnz	r6, 801b9a4 <_Bfree+0x28>
 801b986:	2010      	movs	r0, #16
 801b988:	f7fe f9b2 	bl	8019cf0 <malloc>
 801b98c:	4602      	mov	r2, r0
 801b98e:	61e8      	str	r0, [r5, #28]
 801b990:	b920      	cbnz	r0, 801b99c <_Bfree+0x20>
 801b992:	4b09      	ldr	r3, [pc, #36]	@ (801b9b8 <_Bfree+0x3c>)
 801b994:	4809      	ldr	r0, [pc, #36]	@ (801b9bc <_Bfree+0x40>)
 801b996:	218f      	movs	r1, #143	@ 0x8f
 801b998:	f000 ff04 	bl	801c7a4 <__assert_func>
 801b99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b9a0:	6006      	str	r6, [r0, #0]
 801b9a2:	60c6      	str	r6, [r0, #12]
 801b9a4:	b13c      	cbz	r4, 801b9b6 <_Bfree+0x3a>
 801b9a6:	69eb      	ldr	r3, [r5, #28]
 801b9a8:	6862      	ldr	r2, [r4, #4]
 801b9aa:	68db      	ldr	r3, [r3, #12]
 801b9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b9b0:	6021      	str	r1, [r4, #0]
 801b9b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b9b6:	bd70      	pop	{r4, r5, r6, pc}
 801b9b8:	0801e0f5 	.word	0x0801e0f5
 801b9bc:	0801e175 	.word	0x0801e175

0801b9c0 <__multadd>:
 801b9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9c4:	690d      	ldr	r5, [r1, #16]
 801b9c6:	4607      	mov	r7, r0
 801b9c8:	460c      	mov	r4, r1
 801b9ca:	461e      	mov	r6, r3
 801b9cc:	f101 0c14 	add.w	ip, r1, #20
 801b9d0:	2000      	movs	r0, #0
 801b9d2:	f8dc 3000 	ldr.w	r3, [ip]
 801b9d6:	b299      	uxth	r1, r3
 801b9d8:	fb02 6101 	mla	r1, r2, r1, r6
 801b9dc:	0c1e      	lsrs	r6, r3, #16
 801b9de:	0c0b      	lsrs	r3, r1, #16
 801b9e0:	fb02 3306 	mla	r3, r2, r6, r3
 801b9e4:	b289      	uxth	r1, r1
 801b9e6:	3001      	adds	r0, #1
 801b9e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b9ec:	4285      	cmp	r5, r0
 801b9ee:	f84c 1b04 	str.w	r1, [ip], #4
 801b9f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b9f6:	dcec      	bgt.n	801b9d2 <__multadd+0x12>
 801b9f8:	b30e      	cbz	r6, 801ba3e <__multadd+0x7e>
 801b9fa:	68a3      	ldr	r3, [r4, #8]
 801b9fc:	42ab      	cmp	r3, r5
 801b9fe:	dc19      	bgt.n	801ba34 <__multadd+0x74>
 801ba00:	6861      	ldr	r1, [r4, #4]
 801ba02:	4638      	mov	r0, r7
 801ba04:	3101      	adds	r1, #1
 801ba06:	f7ff ff79 	bl	801b8fc <_Balloc>
 801ba0a:	4680      	mov	r8, r0
 801ba0c:	b928      	cbnz	r0, 801ba1a <__multadd+0x5a>
 801ba0e:	4602      	mov	r2, r0
 801ba10:	4b0c      	ldr	r3, [pc, #48]	@ (801ba44 <__multadd+0x84>)
 801ba12:	480d      	ldr	r0, [pc, #52]	@ (801ba48 <__multadd+0x88>)
 801ba14:	21ba      	movs	r1, #186	@ 0xba
 801ba16:	f000 fec5 	bl	801c7a4 <__assert_func>
 801ba1a:	6922      	ldr	r2, [r4, #16]
 801ba1c:	3202      	adds	r2, #2
 801ba1e:	f104 010c 	add.w	r1, r4, #12
 801ba22:	0092      	lsls	r2, r2, #2
 801ba24:	300c      	adds	r0, #12
 801ba26:	f7ff f8b6 	bl	801ab96 <memcpy>
 801ba2a:	4621      	mov	r1, r4
 801ba2c:	4638      	mov	r0, r7
 801ba2e:	f7ff ffa5 	bl	801b97c <_Bfree>
 801ba32:	4644      	mov	r4, r8
 801ba34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ba38:	3501      	adds	r5, #1
 801ba3a:	615e      	str	r6, [r3, #20]
 801ba3c:	6125      	str	r5, [r4, #16]
 801ba3e:	4620      	mov	r0, r4
 801ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba44:	0801e164 	.word	0x0801e164
 801ba48:	0801e175 	.word	0x0801e175

0801ba4c <__hi0bits>:
 801ba4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ba50:	4603      	mov	r3, r0
 801ba52:	bf36      	itet	cc
 801ba54:	0403      	lslcc	r3, r0, #16
 801ba56:	2000      	movcs	r0, #0
 801ba58:	2010      	movcc	r0, #16
 801ba5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ba5e:	bf3c      	itt	cc
 801ba60:	021b      	lslcc	r3, r3, #8
 801ba62:	3008      	addcc	r0, #8
 801ba64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ba68:	bf3c      	itt	cc
 801ba6a:	011b      	lslcc	r3, r3, #4
 801ba6c:	3004      	addcc	r0, #4
 801ba6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ba72:	bf3c      	itt	cc
 801ba74:	009b      	lslcc	r3, r3, #2
 801ba76:	3002      	addcc	r0, #2
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	db05      	blt.n	801ba88 <__hi0bits+0x3c>
 801ba7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ba80:	f100 0001 	add.w	r0, r0, #1
 801ba84:	bf08      	it	eq
 801ba86:	2020      	moveq	r0, #32
 801ba88:	4770      	bx	lr

0801ba8a <__lo0bits>:
 801ba8a:	6803      	ldr	r3, [r0, #0]
 801ba8c:	4602      	mov	r2, r0
 801ba8e:	f013 0007 	ands.w	r0, r3, #7
 801ba92:	d00b      	beq.n	801baac <__lo0bits+0x22>
 801ba94:	07d9      	lsls	r1, r3, #31
 801ba96:	d421      	bmi.n	801badc <__lo0bits+0x52>
 801ba98:	0798      	lsls	r0, r3, #30
 801ba9a:	bf49      	itett	mi
 801ba9c:	085b      	lsrmi	r3, r3, #1
 801ba9e:	089b      	lsrpl	r3, r3, #2
 801baa0:	2001      	movmi	r0, #1
 801baa2:	6013      	strmi	r3, [r2, #0]
 801baa4:	bf5c      	itt	pl
 801baa6:	6013      	strpl	r3, [r2, #0]
 801baa8:	2002      	movpl	r0, #2
 801baaa:	4770      	bx	lr
 801baac:	b299      	uxth	r1, r3
 801baae:	b909      	cbnz	r1, 801bab4 <__lo0bits+0x2a>
 801bab0:	0c1b      	lsrs	r3, r3, #16
 801bab2:	2010      	movs	r0, #16
 801bab4:	b2d9      	uxtb	r1, r3
 801bab6:	b909      	cbnz	r1, 801babc <__lo0bits+0x32>
 801bab8:	3008      	adds	r0, #8
 801baba:	0a1b      	lsrs	r3, r3, #8
 801babc:	0719      	lsls	r1, r3, #28
 801babe:	bf04      	itt	eq
 801bac0:	091b      	lsreq	r3, r3, #4
 801bac2:	3004      	addeq	r0, #4
 801bac4:	0799      	lsls	r1, r3, #30
 801bac6:	bf04      	itt	eq
 801bac8:	089b      	lsreq	r3, r3, #2
 801baca:	3002      	addeq	r0, #2
 801bacc:	07d9      	lsls	r1, r3, #31
 801bace:	d403      	bmi.n	801bad8 <__lo0bits+0x4e>
 801bad0:	085b      	lsrs	r3, r3, #1
 801bad2:	f100 0001 	add.w	r0, r0, #1
 801bad6:	d003      	beq.n	801bae0 <__lo0bits+0x56>
 801bad8:	6013      	str	r3, [r2, #0]
 801bada:	4770      	bx	lr
 801badc:	2000      	movs	r0, #0
 801bade:	4770      	bx	lr
 801bae0:	2020      	movs	r0, #32
 801bae2:	4770      	bx	lr

0801bae4 <__i2b>:
 801bae4:	b510      	push	{r4, lr}
 801bae6:	460c      	mov	r4, r1
 801bae8:	2101      	movs	r1, #1
 801baea:	f7ff ff07 	bl	801b8fc <_Balloc>
 801baee:	4602      	mov	r2, r0
 801baf0:	b928      	cbnz	r0, 801bafe <__i2b+0x1a>
 801baf2:	4b05      	ldr	r3, [pc, #20]	@ (801bb08 <__i2b+0x24>)
 801baf4:	4805      	ldr	r0, [pc, #20]	@ (801bb0c <__i2b+0x28>)
 801baf6:	f240 1145 	movw	r1, #325	@ 0x145
 801bafa:	f000 fe53 	bl	801c7a4 <__assert_func>
 801bafe:	2301      	movs	r3, #1
 801bb00:	6144      	str	r4, [r0, #20]
 801bb02:	6103      	str	r3, [r0, #16]
 801bb04:	bd10      	pop	{r4, pc}
 801bb06:	bf00      	nop
 801bb08:	0801e164 	.word	0x0801e164
 801bb0c:	0801e175 	.word	0x0801e175

0801bb10 <__multiply>:
 801bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb14:	4617      	mov	r7, r2
 801bb16:	690a      	ldr	r2, [r1, #16]
 801bb18:	693b      	ldr	r3, [r7, #16]
 801bb1a:	429a      	cmp	r2, r3
 801bb1c:	bfa8      	it	ge
 801bb1e:	463b      	movge	r3, r7
 801bb20:	4689      	mov	r9, r1
 801bb22:	bfa4      	itt	ge
 801bb24:	460f      	movge	r7, r1
 801bb26:	4699      	movge	r9, r3
 801bb28:	693d      	ldr	r5, [r7, #16]
 801bb2a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bb2e:	68bb      	ldr	r3, [r7, #8]
 801bb30:	6879      	ldr	r1, [r7, #4]
 801bb32:	eb05 060a 	add.w	r6, r5, sl
 801bb36:	42b3      	cmp	r3, r6
 801bb38:	b085      	sub	sp, #20
 801bb3a:	bfb8      	it	lt
 801bb3c:	3101      	addlt	r1, #1
 801bb3e:	f7ff fedd 	bl	801b8fc <_Balloc>
 801bb42:	b930      	cbnz	r0, 801bb52 <__multiply+0x42>
 801bb44:	4602      	mov	r2, r0
 801bb46:	4b41      	ldr	r3, [pc, #260]	@ (801bc4c <__multiply+0x13c>)
 801bb48:	4841      	ldr	r0, [pc, #260]	@ (801bc50 <__multiply+0x140>)
 801bb4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801bb4e:	f000 fe29 	bl	801c7a4 <__assert_func>
 801bb52:	f100 0414 	add.w	r4, r0, #20
 801bb56:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801bb5a:	4623      	mov	r3, r4
 801bb5c:	2200      	movs	r2, #0
 801bb5e:	4573      	cmp	r3, lr
 801bb60:	d320      	bcc.n	801bba4 <__multiply+0x94>
 801bb62:	f107 0814 	add.w	r8, r7, #20
 801bb66:	f109 0114 	add.w	r1, r9, #20
 801bb6a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801bb6e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801bb72:	9302      	str	r3, [sp, #8]
 801bb74:	1beb      	subs	r3, r5, r7
 801bb76:	3b15      	subs	r3, #21
 801bb78:	f023 0303 	bic.w	r3, r3, #3
 801bb7c:	3304      	adds	r3, #4
 801bb7e:	3715      	adds	r7, #21
 801bb80:	42bd      	cmp	r5, r7
 801bb82:	bf38      	it	cc
 801bb84:	2304      	movcc	r3, #4
 801bb86:	9301      	str	r3, [sp, #4]
 801bb88:	9b02      	ldr	r3, [sp, #8]
 801bb8a:	9103      	str	r1, [sp, #12]
 801bb8c:	428b      	cmp	r3, r1
 801bb8e:	d80c      	bhi.n	801bbaa <__multiply+0x9a>
 801bb90:	2e00      	cmp	r6, #0
 801bb92:	dd03      	ble.n	801bb9c <__multiply+0x8c>
 801bb94:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d055      	beq.n	801bc48 <__multiply+0x138>
 801bb9c:	6106      	str	r6, [r0, #16]
 801bb9e:	b005      	add	sp, #20
 801bba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bba4:	f843 2b04 	str.w	r2, [r3], #4
 801bba8:	e7d9      	b.n	801bb5e <__multiply+0x4e>
 801bbaa:	f8b1 a000 	ldrh.w	sl, [r1]
 801bbae:	f1ba 0f00 	cmp.w	sl, #0
 801bbb2:	d01f      	beq.n	801bbf4 <__multiply+0xe4>
 801bbb4:	46c4      	mov	ip, r8
 801bbb6:	46a1      	mov	r9, r4
 801bbb8:	2700      	movs	r7, #0
 801bbba:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bbbe:	f8d9 3000 	ldr.w	r3, [r9]
 801bbc2:	fa1f fb82 	uxth.w	fp, r2
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	fb0a 330b 	mla	r3, sl, fp, r3
 801bbcc:	443b      	add	r3, r7
 801bbce:	f8d9 7000 	ldr.w	r7, [r9]
 801bbd2:	0c12      	lsrs	r2, r2, #16
 801bbd4:	0c3f      	lsrs	r7, r7, #16
 801bbd6:	fb0a 7202 	mla	r2, sl, r2, r7
 801bbda:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801bbde:	b29b      	uxth	r3, r3
 801bbe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bbe4:	4565      	cmp	r5, ip
 801bbe6:	f849 3b04 	str.w	r3, [r9], #4
 801bbea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801bbee:	d8e4      	bhi.n	801bbba <__multiply+0xaa>
 801bbf0:	9b01      	ldr	r3, [sp, #4]
 801bbf2:	50e7      	str	r7, [r4, r3]
 801bbf4:	9b03      	ldr	r3, [sp, #12]
 801bbf6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801bbfa:	3104      	adds	r1, #4
 801bbfc:	f1b9 0f00 	cmp.w	r9, #0
 801bc00:	d020      	beq.n	801bc44 <__multiply+0x134>
 801bc02:	6823      	ldr	r3, [r4, #0]
 801bc04:	4647      	mov	r7, r8
 801bc06:	46a4      	mov	ip, r4
 801bc08:	f04f 0a00 	mov.w	sl, #0
 801bc0c:	f8b7 b000 	ldrh.w	fp, [r7]
 801bc10:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801bc14:	fb09 220b 	mla	r2, r9, fp, r2
 801bc18:	4452      	add	r2, sl
 801bc1a:	b29b      	uxth	r3, r3
 801bc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bc20:	f84c 3b04 	str.w	r3, [ip], #4
 801bc24:	f857 3b04 	ldr.w	r3, [r7], #4
 801bc28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bc2c:	f8bc 3000 	ldrh.w	r3, [ip]
 801bc30:	fb09 330a 	mla	r3, r9, sl, r3
 801bc34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801bc38:	42bd      	cmp	r5, r7
 801bc3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bc3e:	d8e5      	bhi.n	801bc0c <__multiply+0xfc>
 801bc40:	9a01      	ldr	r2, [sp, #4]
 801bc42:	50a3      	str	r3, [r4, r2]
 801bc44:	3404      	adds	r4, #4
 801bc46:	e79f      	b.n	801bb88 <__multiply+0x78>
 801bc48:	3e01      	subs	r6, #1
 801bc4a:	e7a1      	b.n	801bb90 <__multiply+0x80>
 801bc4c:	0801e164 	.word	0x0801e164
 801bc50:	0801e175 	.word	0x0801e175

0801bc54 <__pow5mult>:
 801bc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc58:	4615      	mov	r5, r2
 801bc5a:	f012 0203 	ands.w	r2, r2, #3
 801bc5e:	4607      	mov	r7, r0
 801bc60:	460e      	mov	r6, r1
 801bc62:	d007      	beq.n	801bc74 <__pow5mult+0x20>
 801bc64:	4c25      	ldr	r4, [pc, #148]	@ (801bcfc <__pow5mult+0xa8>)
 801bc66:	3a01      	subs	r2, #1
 801bc68:	2300      	movs	r3, #0
 801bc6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bc6e:	f7ff fea7 	bl	801b9c0 <__multadd>
 801bc72:	4606      	mov	r6, r0
 801bc74:	10ad      	asrs	r5, r5, #2
 801bc76:	d03d      	beq.n	801bcf4 <__pow5mult+0xa0>
 801bc78:	69fc      	ldr	r4, [r7, #28]
 801bc7a:	b97c      	cbnz	r4, 801bc9c <__pow5mult+0x48>
 801bc7c:	2010      	movs	r0, #16
 801bc7e:	f7fe f837 	bl	8019cf0 <malloc>
 801bc82:	4602      	mov	r2, r0
 801bc84:	61f8      	str	r0, [r7, #28]
 801bc86:	b928      	cbnz	r0, 801bc94 <__pow5mult+0x40>
 801bc88:	4b1d      	ldr	r3, [pc, #116]	@ (801bd00 <__pow5mult+0xac>)
 801bc8a:	481e      	ldr	r0, [pc, #120]	@ (801bd04 <__pow5mult+0xb0>)
 801bc8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801bc90:	f000 fd88 	bl	801c7a4 <__assert_func>
 801bc94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bc98:	6004      	str	r4, [r0, #0]
 801bc9a:	60c4      	str	r4, [r0, #12]
 801bc9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bca0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bca4:	b94c      	cbnz	r4, 801bcba <__pow5mult+0x66>
 801bca6:	f240 2171 	movw	r1, #625	@ 0x271
 801bcaa:	4638      	mov	r0, r7
 801bcac:	f7ff ff1a 	bl	801bae4 <__i2b>
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	f8c8 0008 	str.w	r0, [r8, #8]
 801bcb6:	4604      	mov	r4, r0
 801bcb8:	6003      	str	r3, [r0, #0]
 801bcba:	f04f 0900 	mov.w	r9, #0
 801bcbe:	07eb      	lsls	r3, r5, #31
 801bcc0:	d50a      	bpl.n	801bcd8 <__pow5mult+0x84>
 801bcc2:	4631      	mov	r1, r6
 801bcc4:	4622      	mov	r2, r4
 801bcc6:	4638      	mov	r0, r7
 801bcc8:	f7ff ff22 	bl	801bb10 <__multiply>
 801bccc:	4631      	mov	r1, r6
 801bcce:	4680      	mov	r8, r0
 801bcd0:	4638      	mov	r0, r7
 801bcd2:	f7ff fe53 	bl	801b97c <_Bfree>
 801bcd6:	4646      	mov	r6, r8
 801bcd8:	106d      	asrs	r5, r5, #1
 801bcda:	d00b      	beq.n	801bcf4 <__pow5mult+0xa0>
 801bcdc:	6820      	ldr	r0, [r4, #0]
 801bcde:	b938      	cbnz	r0, 801bcf0 <__pow5mult+0x9c>
 801bce0:	4622      	mov	r2, r4
 801bce2:	4621      	mov	r1, r4
 801bce4:	4638      	mov	r0, r7
 801bce6:	f7ff ff13 	bl	801bb10 <__multiply>
 801bcea:	6020      	str	r0, [r4, #0]
 801bcec:	f8c0 9000 	str.w	r9, [r0]
 801bcf0:	4604      	mov	r4, r0
 801bcf2:	e7e4      	b.n	801bcbe <__pow5mult+0x6a>
 801bcf4:	4630      	mov	r0, r6
 801bcf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcfa:	bf00      	nop
 801bcfc:	0801e228 	.word	0x0801e228
 801bd00:	0801e0f5 	.word	0x0801e0f5
 801bd04:	0801e175 	.word	0x0801e175

0801bd08 <__lshift>:
 801bd08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd0c:	460c      	mov	r4, r1
 801bd0e:	6849      	ldr	r1, [r1, #4]
 801bd10:	6923      	ldr	r3, [r4, #16]
 801bd12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bd16:	68a3      	ldr	r3, [r4, #8]
 801bd18:	4607      	mov	r7, r0
 801bd1a:	4691      	mov	r9, r2
 801bd1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bd20:	f108 0601 	add.w	r6, r8, #1
 801bd24:	42b3      	cmp	r3, r6
 801bd26:	db0b      	blt.n	801bd40 <__lshift+0x38>
 801bd28:	4638      	mov	r0, r7
 801bd2a:	f7ff fde7 	bl	801b8fc <_Balloc>
 801bd2e:	4605      	mov	r5, r0
 801bd30:	b948      	cbnz	r0, 801bd46 <__lshift+0x3e>
 801bd32:	4602      	mov	r2, r0
 801bd34:	4b28      	ldr	r3, [pc, #160]	@ (801bdd8 <__lshift+0xd0>)
 801bd36:	4829      	ldr	r0, [pc, #164]	@ (801bddc <__lshift+0xd4>)
 801bd38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bd3c:	f000 fd32 	bl	801c7a4 <__assert_func>
 801bd40:	3101      	adds	r1, #1
 801bd42:	005b      	lsls	r3, r3, #1
 801bd44:	e7ee      	b.n	801bd24 <__lshift+0x1c>
 801bd46:	2300      	movs	r3, #0
 801bd48:	f100 0114 	add.w	r1, r0, #20
 801bd4c:	f100 0210 	add.w	r2, r0, #16
 801bd50:	4618      	mov	r0, r3
 801bd52:	4553      	cmp	r3, sl
 801bd54:	db33      	blt.n	801bdbe <__lshift+0xb6>
 801bd56:	6920      	ldr	r0, [r4, #16]
 801bd58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bd5c:	f104 0314 	add.w	r3, r4, #20
 801bd60:	f019 091f 	ands.w	r9, r9, #31
 801bd64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bd68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bd6c:	d02b      	beq.n	801bdc6 <__lshift+0xbe>
 801bd6e:	f1c9 0e20 	rsb	lr, r9, #32
 801bd72:	468a      	mov	sl, r1
 801bd74:	2200      	movs	r2, #0
 801bd76:	6818      	ldr	r0, [r3, #0]
 801bd78:	fa00 f009 	lsl.w	r0, r0, r9
 801bd7c:	4310      	orrs	r0, r2
 801bd7e:	f84a 0b04 	str.w	r0, [sl], #4
 801bd82:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd86:	459c      	cmp	ip, r3
 801bd88:	fa22 f20e 	lsr.w	r2, r2, lr
 801bd8c:	d8f3      	bhi.n	801bd76 <__lshift+0x6e>
 801bd8e:	ebac 0304 	sub.w	r3, ip, r4
 801bd92:	3b15      	subs	r3, #21
 801bd94:	f023 0303 	bic.w	r3, r3, #3
 801bd98:	3304      	adds	r3, #4
 801bd9a:	f104 0015 	add.w	r0, r4, #21
 801bd9e:	4560      	cmp	r0, ip
 801bda0:	bf88      	it	hi
 801bda2:	2304      	movhi	r3, #4
 801bda4:	50ca      	str	r2, [r1, r3]
 801bda6:	b10a      	cbz	r2, 801bdac <__lshift+0xa4>
 801bda8:	f108 0602 	add.w	r6, r8, #2
 801bdac:	3e01      	subs	r6, #1
 801bdae:	4638      	mov	r0, r7
 801bdb0:	612e      	str	r6, [r5, #16]
 801bdb2:	4621      	mov	r1, r4
 801bdb4:	f7ff fde2 	bl	801b97c <_Bfree>
 801bdb8:	4628      	mov	r0, r5
 801bdba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdbe:	f842 0f04 	str.w	r0, [r2, #4]!
 801bdc2:	3301      	adds	r3, #1
 801bdc4:	e7c5      	b.n	801bd52 <__lshift+0x4a>
 801bdc6:	3904      	subs	r1, #4
 801bdc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdcc:	f841 2f04 	str.w	r2, [r1, #4]!
 801bdd0:	459c      	cmp	ip, r3
 801bdd2:	d8f9      	bhi.n	801bdc8 <__lshift+0xc0>
 801bdd4:	e7ea      	b.n	801bdac <__lshift+0xa4>
 801bdd6:	bf00      	nop
 801bdd8:	0801e164 	.word	0x0801e164
 801bddc:	0801e175 	.word	0x0801e175

0801bde0 <__mcmp>:
 801bde0:	690a      	ldr	r2, [r1, #16]
 801bde2:	4603      	mov	r3, r0
 801bde4:	6900      	ldr	r0, [r0, #16]
 801bde6:	1a80      	subs	r0, r0, r2
 801bde8:	b530      	push	{r4, r5, lr}
 801bdea:	d10e      	bne.n	801be0a <__mcmp+0x2a>
 801bdec:	3314      	adds	r3, #20
 801bdee:	3114      	adds	r1, #20
 801bdf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bdf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bdf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bdfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801be00:	4295      	cmp	r5, r2
 801be02:	d003      	beq.n	801be0c <__mcmp+0x2c>
 801be04:	d205      	bcs.n	801be12 <__mcmp+0x32>
 801be06:	f04f 30ff 	mov.w	r0, #4294967295
 801be0a:	bd30      	pop	{r4, r5, pc}
 801be0c:	42a3      	cmp	r3, r4
 801be0e:	d3f3      	bcc.n	801bdf8 <__mcmp+0x18>
 801be10:	e7fb      	b.n	801be0a <__mcmp+0x2a>
 801be12:	2001      	movs	r0, #1
 801be14:	e7f9      	b.n	801be0a <__mcmp+0x2a>
	...

0801be18 <__mdiff>:
 801be18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be1c:	4689      	mov	r9, r1
 801be1e:	4606      	mov	r6, r0
 801be20:	4611      	mov	r1, r2
 801be22:	4648      	mov	r0, r9
 801be24:	4614      	mov	r4, r2
 801be26:	f7ff ffdb 	bl	801bde0 <__mcmp>
 801be2a:	1e05      	subs	r5, r0, #0
 801be2c:	d112      	bne.n	801be54 <__mdiff+0x3c>
 801be2e:	4629      	mov	r1, r5
 801be30:	4630      	mov	r0, r6
 801be32:	f7ff fd63 	bl	801b8fc <_Balloc>
 801be36:	4602      	mov	r2, r0
 801be38:	b928      	cbnz	r0, 801be46 <__mdiff+0x2e>
 801be3a:	4b3f      	ldr	r3, [pc, #252]	@ (801bf38 <__mdiff+0x120>)
 801be3c:	f240 2137 	movw	r1, #567	@ 0x237
 801be40:	483e      	ldr	r0, [pc, #248]	@ (801bf3c <__mdiff+0x124>)
 801be42:	f000 fcaf 	bl	801c7a4 <__assert_func>
 801be46:	2301      	movs	r3, #1
 801be48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801be4c:	4610      	mov	r0, r2
 801be4e:	b003      	add	sp, #12
 801be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be54:	bfbc      	itt	lt
 801be56:	464b      	movlt	r3, r9
 801be58:	46a1      	movlt	r9, r4
 801be5a:	4630      	mov	r0, r6
 801be5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801be60:	bfba      	itte	lt
 801be62:	461c      	movlt	r4, r3
 801be64:	2501      	movlt	r5, #1
 801be66:	2500      	movge	r5, #0
 801be68:	f7ff fd48 	bl	801b8fc <_Balloc>
 801be6c:	4602      	mov	r2, r0
 801be6e:	b918      	cbnz	r0, 801be78 <__mdiff+0x60>
 801be70:	4b31      	ldr	r3, [pc, #196]	@ (801bf38 <__mdiff+0x120>)
 801be72:	f240 2145 	movw	r1, #581	@ 0x245
 801be76:	e7e3      	b.n	801be40 <__mdiff+0x28>
 801be78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801be7c:	6926      	ldr	r6, [r4, #16]
 801be7e:	60c5      	str	r5, [r0, #12]
 801be80:	f109 0310 	add.w	r3, r9, #16
 801be84:	f109 0514 	add.w	r5, r9, #20
 801be88:	f104 0e14 	add.w	lr, r4, #20
 801be8c:	f100 0b14 	add.w	fp, r0, #20
 801be90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801be94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801be98:	9301      	str	r3, [sp, #4]
 801be9a:	46d9      	mov	r9, fp
 801be9c:	f04f 0c00 	mov.w	ip, #0
 801bea0:	9b01      	ldr	r3, [sp, #4]
 801bea2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bea6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801beaa:	9301      	str	r3, [sp, #4]
 801beac:	fa1f f38a 	uxth.w	r3, sl
 801beb0:	4619      	mov	r1, r3
 801beb2:	b283      	uxth	r3, r0
 801beb4:	1acb      	subs	r3, r1, r3
 801beb6:	0c00      	lsrs	r0, r0, #16
 801beb8:	4463      	add	r3, ip
 801beba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bebe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bec2:	b29b      	uxth	r3, r3
 801bec4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bec8:	4576      	cmp	r6, lr
 801beca:	f849 3b04 	str.w	r3, [r9], #4
 801bece:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bed2:	d8e5      	bhi.n	801bea0 <__mdiff+0x88>
 801bed4:	1b33      	subs	r3, r6, r4
 801bed6:	3b15      	subs	r3, #21
 801bed8:	f023 0303 	bic.w	r3, r3, #3
 801bedc:	3415      	adds	r4, #21
 801bede:	3304      	adds	r3, #4
 801bee0:	42a6      	cmp	r6, r4
 801bee2:	bf38      	it	cc
 801bee4:	2304      	movcc	r3, #4
 801bee6:	441d      	add	r5, r3
 801bee8:	445b      	add	r3, fp
 801beea:	461e      	mov	r6, r3
 801beec:	462c      	mov	r4, r5
 801beee:	4544      	cmp	r4, r8
 801bef0:	d30e      	bcc.n	801bf10 <__mdiff+0xf8>
 801bef2:	f108 0103 	add.w	r1, r8, #3
 801bef6:	1b49      	subs	r1, r1, r5
 801bef8:	f021 0103 	bic.w	r1, r1, #3
 801befc:	3d03      	subs	r5, #3
 801befe:	45a8      	cmp	r8, r5
 801bf00:	bf38      	it	cc
 801bf02:	2100      	movcc	r1, #0
 801bf04:	440b      	add	r3, r1
 801bf06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bf0a:	b191      	cbz	r1, 801bf32 <__mdiff+0x11a>
 801bf0c:	6117      	str	r7, [r2, #16]
 801bf0e:	e79d      	b.n	801be4c <__mdiff+0x34>
 801bf10:	f854 1b04 	ldr.w	r1, [r4], #4
 801bf14:	46e6      	mov	lr, ip
 801bf16:	0c08      	lsrs	r0, r1, #16
 801bf18:	fa1c fc81 	uxtah	ip, ip, r1
 801bf1c:	4471      	add	r1, lr
 801bf1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bf22:	b289      	uxth	r1, r1
 801bf24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bf28:	f846 1b04 	str.w	r1, [r6], #4
 801bf2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bf30:	e7dd      	b.n	801beee <__mdiff+0xd6>
 801bf32:	3f01      	subs	r7, #1
 801bf34:	e7e7      	b.n	801bf06 <__mdiff+0xee>
 801bf36:	bf00      	nop
 801bf38:	0801e164 	.word	0x0801e164
 801bf3c:	0801e175 	.word	0x0801e175

0801bf40 <__d2b>:
 801bf40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf44:	460f      	mov	r7, r1
 801bf46:	2101      	movs	r1, #1
 801bf48:	ec59 8b10 	vmov	r8, r9, d0
 801bf4c:	4616      	mov	r6, r2
 801bf4e:	f7ff fcd5 	bl	801b8fc <_Balloc>
 801bf52:	4604      	mov	r4, r0
 801bf54:	b930      	cbnz	r0, 801bf64 <__d2b+0x24>
 801bf56:	4602      	mov	r2, r0
 801bf58:	4b23      	ldr	r3, [pc, #140]	@ (801bfe8 <__d2b+0xa8>)
 801bf5a:	4824      	ldr	r0, [pc, #144]	@ (801bfec <__d2b+0xac>)
 801bf5c:	f240 310f 	movw	r1, #783	@ 0x30f
 801bf60:	f000 fc20 	bl	801c7a4 <__assert_func>
 801bf64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bf68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bf6c:	b10d      	cbz	r5, 801bf72 <__d2b+0x32>
 801bf6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bf72:	9301      	str	r3, [sp, #4]
 801bf74:	f1b8 0300 	subs.w	r3, r8, #0
 801bf78:	d023      	beq.n	801bfc2 <__d2b+0x82>
 801bf7a:	4668      	mov	r0, sp
 801bf7c:	9300      	str	r3, [sp, #0]
 801bf7e:	f7ff fd84 	bl	801ba8a <__lo0bits>
 801bf82:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bf86:	b1d0      	cbz	r0, 801bfbe <__d2b+0x7e>
 801bf88:	f1c0 0320 	rsb	r3, r0, #32
 801bf8c:	fa02 f303 	lsl.w	r3, r2, r3
 801bf90:	430b      	orrs	r3, r1
 801bf92:	40c2      	lsrs	r2, r0
 801bf94:	6163      	str	r3, [r4, #20]
 801bf96:	9201      	str	r2, [sp, #4]
 801bf98:	9b01      	ldr	r3, [sp, #4]
 801bf9a:	61a3      	str	r3, [r4, #24]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	bf0c      	ite	eq
 801bfa0:	2201      	moveq	r2, #1
 801bfa2:	2202      	movne	r2, #2
 801bfa4:	6122      	str	r2, [r4, #16]
 801bfa6:	b1a5      	cbz	r5, 801bfd2 <__d2b+0x92>
 801bfa8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bfac:	4405      	add	r5, r0
 801bfae:	603d      	str	r5, [r7, #0]
 801bfb0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bfb4:	6030      	str	r0, [r6, #0]
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	b003      	add	sp, #12
 801bfba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfbe:	6161      	str	r1, [r4, #20]
 801bfc0:	e7ea      	b.n	801bf98 <__d2b+0x58>
 801bfc2:	a801      	add	r0, sp, #4
 801bfc4:	f7ff fd61 	bl	801ba8a <__lo0bits>
 801bfc8:	9b01      	ldr	r3, [sp, #4]
 801bfca:	6163      	str	r3, [r4, #20]
 801bfcc:	3020      	adds	r0, #32
 801bfce:	2201      	movs	r2, #1
 801bfd0:	e7e8      	b.n	801bfa4 <__d2b+0x64>
 801bfd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bfd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bfda:	6038      	str	r0, [r7, #0]
 801bfdc:	6918      	ldr	r0, [r3, #16]
 801bfde:	f7ff fd35 	bl	801ba4c <__hi0bits>
 801bfe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bfe6:	e7e5      	b.n	801bfb4 <__d2b+0x74>
 801bfe8:	0801e164 	.word	0x0801e164
 801bfec:	0801e175 	.word	0x0801e175

0801bff0 <__ssputs_r>:
 801bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bff4:	688e      	ldr	r6, [r1, #8]
 801bff6:	461f      	mov	r7, r3
 801bff8:	42be      	cmp	r6, r7
 801bffa:	680b      	ldr	r3, [r1, #0]
 801bffc:	4682      	mov	sl, r0
 801bffe:	460c      	mov	r4, r1
 801c000:	4690      	mov	r8, r2
 801c002:	d82d      	bhi.n	801c060 <__ssputs_r+0x70>
 801c004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c008:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c00c:	d026      	beq.n	801c05c <__ssputs_r+0x6c>
 801c00e:	6965      	ldr	r5, [r4, #20]
 801c010:	6909      	ldr	r1, [r1, #16]
 801c012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c016:	eba3 0901 	sub.w	r9, r3, r1
 801c01a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c01e:	1c7b      	adds	r3, r7, #1
 801c020:	444b      	add	r3, r9
 801c022:	106d      	asrs	r5, r5, #1
 801c024:	429d      	cmp	r5, r3
 801c026:	bf38      	it	cc
 801c028:	461d      	movcc	r5, r3
 801c02a:	0553      	lsls	r3, r2, #21
 801c02c:	d527      	bpl.n	801c07e <__ssputs_r+0x8e>
 801c02e:	4629      	mov	r1, r5
 801c030:	f7fd fe90 	bl	8019d54 <_malloc_r>
 801c034:	4606      	mov	r6, r0
 801c036:	b360      	cbz	r0, 801c092 <__ssputs_r+0xa2>
 801c038:	6921      	ldr	r1, [r4, #16]
 801c03a:	464a      	mov	r2, r9
 801c03c:	f7fe fdab 	bl	801ab96 <memcpy>
 801c040:	89a3      	ldrh	r3, [r4, #12]
 801c042:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c04a:	81a3      	strh	r3, [r4, #12]
 801c04c:	6126      	str	r6, [r4, #16]
 801c04e:	6165      	str	r5, [r4, #20]
 801c050:	444e      	add	r6, r9
 801c052:	eba5 0509 	sub.w	r5, r5, r9
 801c056:	6026      	str	r6, [r4, #0]
 801c058:	60a5      	str	r5, [r4, #8]
 801c05a:	463e      	mov	r6, r7
 801c05c:	42be      	cmp	r6, r7
 801c05e:	d900      	bls.n	801c062 <__ssputs_r+0x72>
 801c060:	463e      	mov	r6, r7
 801c062:	6820      	ldr	r0, [r4, #0]
 801c064:	4632      	mov	r2, r6
 801c066:	4641      	mov	r1, r8
 801c068:	f7fe fc91 	bl	801a98e <memmove>
 801c06c:	68a3      	ldr	r3, [r4, #8]
 801c06e:	1b9b      	subs	r3, r3, r6
 801c070:	60a3      	str	r3, [r4, #8]
 801c072:	6823      	ldr	r3, [r4, #0]
 801c074:	4433      	add	r3, r6
 801c076:	6023      	str	r3, [r4, #0]
 801c078:	2000      	movs	r0, #0
 801c07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c07e:	462a      	mov	r2, r5
 801c080:	f000 fbd4 	bl	801c82c <_realloc_r>
 801c084:	4606      	mov	r6, r0
 801c086:	2800      	cmp	r0, #0
 801c088:	d1e0      	bne.n	801c04c <__ssputs_r+0x5c>
 801c08a:	6921      	ldr	r1, [r4, #16]
 801c08c:	4650      	mov	r0, sl
 801c08e:	f7ff fbeb 	bl	801b868 <_free_r>
 801c092:	230c      	movs	r3, #12
 801c094:	f8ca 3000 	str.w	r3, [sl]
 801c098:	89a3      	ldrh	r3, [r4, #12]
 801c09a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c09e:	81a3      	strh	r3, [r4, #12]
 801c0a0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a4:	e7e9      	b.n	801c07a <__ssputs_r+0x8a>
	...

0801c0a8 <_svfiprintf_r>:
 801c0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0ac:	4698      	mov	r8, r3
 801c0ae:	898b      	ldrh	r3, [r1, #12]
 801c0b0:	061b      	lsls	r3, r3, #24
 801c0b2:	b09d      	sub	sp, #116	@ 0x74
 801c0b4:	4607      	mov	r7, r0
 801c0b6:	460d      	mov	r5, r1
 801c0b8:	4614      	mov	r4, r2
 801c0ba:	d510      	bpl.n	801c0de <_svfiprintf_r+0x36>
 801c0bc:	690b      	ldr	r3, [r1, #16]
 801c0be:	b973      	cbnz	r3, 801c0de <_svfiprintf_r+0x36>
 801c0c0:	2140      	movs	r1, #64	@ 0x40
 801c0c2:	f7fd fe47 	bl	8019d54 <_malloc_r>
 801c0c6:	6028      	str	r0, [r5, #0]
 801c0c8:	6128      	str	r0, [r5, #16]
 801c0ca:	b930      	cbnz	r0, 801c0da <_svfiprintf_r+0x32>
 801c0cc:	230c      	movs	r3, #12
 801c0ce:	603b      	str	r3, [r7, #0]
 801c0d0:	f04f 30ff 	mov.w	r0, #4294967295
 801c0d4:	b01d      	add	sp, #116	@ 0x74
 801c0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c0da:	2340      	movs	r3, #64	@ 0x40
 801c0dc:	616b      	str	r3, [r5, #20]
 801c0de:	2300      	movs	r3, #0
 801c0e0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c0e2:	2320      	movs	r3, #32
 801c0e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 801c0ec:	2330      	movs	r3, #48	@ 0x30
 801c0ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c28c <_svfiprintf_r+0x1e4>
 801c0f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c0f6:	f04f 0901 	mov.w	r9, #1
 801c0fa:	4623      	mov	r3, r4
 801c0fc:	469a      	mov	sl, r3
 801c0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c102:	b10a      	cbz	r2, 801c108 <_svfiprintf_r+0x60>
 801c104:	2a25      	cmp	r2, #37	@ 0x25
 801c106:	d1f9      	bne.n	801c0fc <_svfiprintf_r+0x54>
 801c108:	ebba 0b04 	subs.w	fp, sl, r4
 801c10c:	d00b      	beq.n	801c126 <_svfiprintf_r+0x7e>
 801c10e:	465b      	mov	r3, fp
 801c110:	4622      	mov	r2, r4
 801c112:	4629      	mov	r1, r5
 801c114:	4638      	mov	r0, r7
 801c116:	f7ff ff6b 	bl	801bff0 <__ssputs_r>
 801c11a:	3001      	adds	r0, #1
 801c11c:	f000 80a7 	beq.w	801c26e <_svfiprintf_r+0x1c6>
 801c120:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c122:	445a      	add	r2, fp
 801c124:	9209      	str	r2, [sp, #36]	@ 0x24
 801c126:	f89a 3000 	ldrb.w	r3, [sl]
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f000 809f 	beq.w	801c26e <_svfiprintf_r+0x1c6>
 801c130:	2300      	movs	r3, #0
 801c132:	f04f 32ff 	mov.w	r2, #4294967295
 801c136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c13a:	f10a 0a01 	add.w	sl, sl, #1
 801c13e:	9304      	str	r3, [sp, #16]
 801c140:	9307      	str	r3, [sp, #28]
 801c142:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c146:	931a      	str	r3, [sp, #104]	@ 0x68
 801c148:	4654      	mov	r4, sl
 801c14a:	2205      	movs	r2, #5
 801c14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c150:	484e      	ldr	r0, [pc, #312]	@ (801c28c <_svfiprintf_r+0x1e4>)
 801c152:	f7e4 f825 	bl	80001a0 <memchr>
 801c156:	9a04      	ldr	r2, [sp, #16]
 801c158:	b9d8      	cbnz	r0, 801c192 <_svfiprintf_r+0xea>
 801c15a:	06d0      	lsls	r0, r2, #27
 801c15c:	bf44      	itt	mi
 801c15e:	2320      	movmi	r3, #32
 801c160:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c164:	0711      	lsls	r1, r2, #28
 801c166:	bf44      	itt	mi
 801c168:	232b      	movmi	r3, #43	@ 0x2b
 801c16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c16e:	f89a 3000 	ldrb.w	r3, [sl]
 801c172:	2b2a      	cmp	r3, #42	@ 0x2a
 801c174:	d015      	beq.n	801c1a2 <_svfiprintf_r+0xfa>
 801c176:	9a07      	ldr	r2, [sp, #28]
 801c178:	4654      	mov	r4, sl
 801c17a:	2000      	movs	r0, #0
 801c17c:	f04f 0c0a 	mov.w	ip, #10
 801c180:	4621      	mov	r1, r4
 801c182:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c186:	3b30      	subs	r3, #48	@ 0x30
 801c188:	2b09      	cmp	r3, #9
 801c18a:	d94b      	bls.n	801c224 <_svfiprintf_r+0x17c>
 801c18c:	b1b0      	cbz	r0, 801c1bc <_svfiprintf_r+0x114>
 801c18e:	9207      	str	r2, [sp, #28]
 801c190:	e014      	b.n	801c1bc <_svfiprintf_r+0x114>
 801c192:	eba0 0308 	sub.w	r3, r0, r8
 801c196:	fa09 f303 	lsl.w	r3, r9, r3
 801c19a:	4313      	orrs	r3, r2
 801c19c:	9304      	str	r3, [sp, #16]
 801c19e:	46a2      	mov	sl, r4
 801c1a0:	e7d2      	b.n	801c148 <_svfiprintf_r+0xa0>
 801c1a2:	9b03      	ldr	r3, [sp, #12]
 801c1a4:	1d19      	adds	r1, r3, #4
 801c1a6:	681b      	ldr	r3, [r3, #0]
 801c1a8:	9103      	str	r1, [sp, #12]
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	bfbb      	ittet	lt
 801c1ae:	425b      	neglt	r3, r3
 801c1b0:	f042 0202 	orrlt.w	r2, r2, #2
 801c1b4:	9307      	strge	r3, [sp, #28]
 801c1b6:	9307      	strlt	r3, [sp, #28]
 801c1b8:	bfb8      	it	lt
 801c1ba:	9204      	strlt	r2, [sp, #16]
 801c1bc:	7823      	ldrb	r3, [r4, #0]
 801c1be:	2b2e      	cmp	r3, #46	@ 0x2e
 801c1c0:	d10a      	bne.n	801c1d8 <_svfiprintf_r+0x130>
 801c1c2:	7863      	ldrb	r3, [r4, #1]
 801c1c4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1c6:	d132      	bne.n	801c22e <_svfiprintf_r+0x186>
 801c1c8:	9b03      	ldr	r3, [sp, #12]
 801c1ca:	1d1a      	adds	r2, r3, #4
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	9203      	str	r2, [sp, #12]
 801c1d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c1d4:	3402      	adds	r4, #2
 801c1d6:	9305      	str	r3, [sp, #20]
 801c1d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c29c <_svfiprintf_r+0x1f4>
 801c1dc:	7821      	ldrb	r1, [r4, #0]
 801c1de:	2203      	movs	r2, #3
 801c1e0:	4650      	mov	r0, sl
 801c1e2:	f7e3 ffdd 	bl	80001a0 <memchr>
 801c1e6:	b138      	cbz	r0, 801c1f8 <_svfiprintf_r+0x150>
 801c1e8:	9b04      	ldr	r3, [sp, #16]
 801c1ea:	eba0 000a 	sub.w	r0, r0, sl
 801c1ee:	2240      	movs	r2, #64	@ 0x40
 801c1f0:	4082      	lsls	r2, r0
 801c1f2:	4313      	orrs	r3, r2
 801c1f4:	3401      	adds	r4, #1
 801c1f6:	9304      	str	r3, [sp, #16]
 801c1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1fc:	4824      	ldr	r0, [pc, #144]	@ (801c290 <_svfiprintf_r+0x1e8>)
 801c1fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c202:	2206      	movs	r2, #6
 801c204:	f7e3 ffcc 	bl	80001a0 <memchr>
 801c208:	2800      	cmp	r0, #0
 801c20a:	d036      	beq.n	801c27a <_svfiprintf_r+0x1d2>
 801c20c:	4b21      	ldr	r3, [pc, #132]	@ (801c294 <_svfiprintf_r+0x1ec>)
 801c20e:	bb1b      	cbnz	r3, 801c258 <_svfiprintf_r+0x1b0>
 801c210:	9b03      	ldr	r3, [sp, #12]
 801c212:	3307      	adds	r3, #7
 801c214:	f023 0307 	bic.w	r3, r3, #7
 801c218:	3308      	adds	r3, #8
 801c21a:	9303      	str	r3, [sp, #12]
 801c21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c21e:	4433      	add	r3, r6
 801c220:	9309      	str	r3, [sp, #36]	@ 0x24
 801c222:	e76a      	b.n	801c0fa <_svfiprintf_r+0x52>
 801c224:	fb0c 3202 	mla	r2, ip, r2, r3
 801c228:	460c      	mov	r4, r1
 801c22a:	2001      	movs	r0, #1
 801c22c:	e7a8      	b.n	801c180 <_svfiprintf_r+0xd8>
 801c22e:	2300      	movs	r3, #0
 801c230:	3401      	adds	r4, #1
 801c232:	9305      	str	r3, [sp, #20]
 801c234:	4619      	mov	r1, r3
 801c236:	f04f 0c0a 	mov.w	ip, #10
 801c23a:	4620      	mov	r0, r4
 801c23c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c240:	3a30      	subs	r2, #48	@ 0x30
 801c242:	2a09      	cmp	r2, #9
 801c244:	d903      	bls.n	801c24e <_svfiprintf_r+0x1a6>
 801c246:	2b00      	cmp	r3, #0
 801c248:	d0c6      	beq.n	801c1d8 <_svfiprintf_r+0x130>
 801c24a:	9105      	str	r1, [sp, #20]
 801c24c:	e7c4      	b.n	801c1d8 <_svfiprintf_r+0x130>
 801c24e:	fb0c 2101 	mla	r1, ip, r1, r2
 801c252:	4604      	mov	r4, r0
 801c254:	2301      	movs	r3, #1
 801c256:	e7f0      	b.n	801c23a <_svfiprintf_r+0x192>
 801c258:	ab03      	add	r3, sp, #12
 801c25a:	9300      	str	r3, [sp, #0]
 801c25c:	462a      	mov	r2, r5
 801c25e:	4b0e      	ldr	r3, [pc, #56]	@ (801c298 <_svfiprintf_r+0x1f0>)
 801c260:	a904      	add	r1, sp, #16
 801c262:	4638      	mov	r0, r7
 801c264:	f7fd fea2 	bl	8019fac <_printf_float>
 801c268:	1c42      	adds	r2, r0, #1
 801c26a:	4606      	mov	r6, r0
 801c26c:	d1d6      	bne.n	801c21c <_svfiprintf_r+0x174>
 801c26e:	89ab      	ldrh	r3, [r5, #12]
 801c270:	065b      	lsls	r3, r3, #25
 801c272:	f53f af2d 	bmi.w	801c0d0 <_svfiprintf_r+0x28>
 801c276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c278:	e72c      	b.n	801c0d4 <_svfiprintf_r+0x2c>
 801c27a:	ab03      	add	r3, sp, #12
 801c27c:	9300      	str	r3, [sp, #0]
 801c27e:	462a      	mov	r2, r5
 801c280:	4b05      	ldr	r3, [pc, #20]	@ (801c298 <_svfiprintf_r+0x1f0>)
 801c282:	a904      	add	r1, sp, #16
 801c284:	4638      	mov	r0, r7
 801c286:	f7fe f929 	bl	801a4dc <_printf_i>
 801c28a:	e7ed      	b.n	801c268 <_svfiprintf_r+0x1c0>
 801c28c:	0801e1ce 	.word	0x0801e1ce
 801c290:	0801e1d8 	.word	0x0801e1d8
 801c294:	08019fad 	.word	0x08019fad
 801c298:	0801bff1 	.word	0x0801bff1
 801c29c:	0801e1d4 	.word	0x0801e1d4

0801c2a0 <__sfputc_r>:
 801c2a0:	6893      	ldr	r3, [r2, #8]
 801c2a2:	3b01      	subs	r3, #1
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	b410      	push	{r4}
 801c2a8:	6093      	str	r3, [r2, #8]
 801c2aa:	da08      	bge.n	801c2be <__sfputc_r+0x1e>
 801c2ac:	6994      	ldr	r4, [r2, #24]
 801c2ae:	42a3      	cmp	r3, r4
 801c2b0:	db01      	blt.n	801c2b6 <__sfputc_r+0x16>
 801c2b2:	290a      	cmp	r1, #10
 801c2b4:	d103      	bne.n	801c2be <__sfputc_r+0x1e>
 801c2b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2ba:	f000 b9df 	b.w	801c67c <__swbuf_r>
 801c2be:	6813      	ldr	r3, [r2, #0]
 801c2c0:	1c58      	adds	r0, r3, #1
 801c2c2:	6010      	str	r0, [r2, #0]
 801c2c4:	7019      	strb	r1, [r3, #0]
 801c2c6:	4608      	mov	r0, r1
 801c2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c2cc:	4770      	bx	lr

0801c2ce <__sfputs_r>:
 801c2ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2d0:	4606      	mov	r6, r0
 801c2d2:	460f      	mov	r7, r1
 801c2d4:	4614      	mov	r4, r2
 801c2d6:	18d5      	adds	r5, r2, r3
 801c2d8:	42ac      	cmp	r4, r5
 801c2da:	d101      	bne.n	801c2e0 <__sfputs_r+0x12>
 801c2dc:	2000      	movs	r0, #0
 801c2de:	e007      	b.n	801c2f0 <__sfputs_r+0x22>
 801c2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c2e4:	463a      	mov	r2, r7
 801c2e6:	4630      	mov	r0, r6
 801c2e8:	f7ff ffda 	bl	801c2a0 <__sfputc_r>
 801c2ec:	1c43      	adds	r3, r0, #1
 801c2ee:	d1f3      	bne.n	801c2d8 <__sfputs_r+0xa>
 801c2f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c2f4 <_vfiprintf_r>:
 801c2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c2f8:	460d      	mov	r5, r1
 801c2fa:	b09d      	sub	sp, #116	@ 0x74
 801c2fc:	4614      	mov	r4, r2
 801c2fe:	4698      	mov	r8, r3
 801c300:	4606      	mov	r6, r0
 801c302:	b118      	cbz	r0, 801c30c <_vfiprintf_r+0x18>
 801c304:	6a03      	ldr	r3, [r0, #32]
 801c306:	b90b      	cbnz	r3, 801c30c <_vfiprintf_r+0x18>
 801c308:	f7fe fa92 	bl	801a830 <__sinit>
 801c30c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c30e:	07d9      	lsls	r1, r3, #31
 801c310:	d405      	bmi.n	801c31e <_vfiprintf_r+0x2a>
 801c312:	89ab      	ldrh	r3, [r5, #12]
 801c314:	059a      	lsls	r2, r3, #22
 801c316:	d402      	bmi.n	801c31e <_vfiprintf_r+0x2a>
 801c318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c31a:	f7fe fc32 	bl	801ab82 <__retarget_lock_acquire_recursive>
 801c31e:	89ab      	ldrh	r3, [r5, #12]
 801c320:	071b      	lsls	r3, r3, #28
 801c322:	d501      	bpl.n	801c328 <_vfiprintf_r+0x34>
 801c324:	692b      	ldr	r3, [r5, #16]
 801c326:	b99b      	cbnz	r3, 801c350 <_vfiprintf_r+0x5c>
 801c328:	4629      	mov	r1, r5
 801c32a:	4630      	mov	r0, r6
 801c32c:	f000 f9e4 	bl	801c6f8 <__swsetup_r>
 801c330:	b170      	cbz	r0, 801c350 <_vfiprintf_r+0x5c>
 801c332:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c334:	07dc      	lsls	r4, r3, #31
 801c336:	d504      	bpl.n	801c342 <_vfiprintf_r+0x4e>
 801c338:	f04f 30ff 	mov.w	r0, #4294967295
 801c33c:	b01d      	add	sp, #116	@ 0x74
 801c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c342:	89ab      	ldrh	r3, [r5, #12]
 801c344:	0598      	lsls	r0, r3, #22
 801c346:	d4f7      	bmi.n	801c338 <_vfiprintf_r+0x44>
 801c348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c34a:	f7fe fc1b 	bl	801ab84 <__retarget_lock_release_recursive>
 801c34e:	e7f3      	b.n	801c338 <_vfiprintf_r+0x44>
 801c350:	2300      	movs	r3, #0
 801c352:	9309      	str	r3, [sp, #36]	@ 0x24
 801c354:	2320      	movs	r3, #32
 801c356:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c35a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c35e:	2330      	movs	r3, #48	@ 0x30
 801c360:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c510 <_vfiprintf_r+0x21c>
 801c364:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c368:	f04f 0901 	mov.w	r9, #1
 801c36c:	4623      	mov	r3, r4
 801c36e:	469a      	mov	sl, r3
 801c370:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c374:	b10a      	cbz	r2, 801c37a <_vfiprintf_r+0x86>
 801c376:	2a25      	cmp	r2, #37	@ 0x25
 801c378:	d1f9      	bne.n	801c36e <_vfiprintf_r+0x7a>
 801c37a:	ebba 0b04 	subs.w	fp, sl, r4
 801c37e:	d00b      	beq.n	801c398 <_vfiprintf_r+0xa4>
 801c380:	465b      	mov	r3, fp
 801c382:	4622      	mov	r2, r4
 801c384:	4629      	mov	r1, r5
 801c386:	4630      	mov	r0, r6
 801c388:	f7ff ffa1 	bl	801c2ce <__sfputs_r>
 801c38c:	3001      	adds	r0, #1
 801c38e:	f000 80a7 	beq.w	801c4e0 <_vfiprintf_r+0x1ec>
 801c392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c394:	445a      	add	r2, fp
 801c396:	9209      	str	r2, [sp, #36]	@ 0x24
 801c398:	f89a 3000 	ldrb.w	r3, [sl]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	f000 809f 	beq.w	801c4e0 <_vfiprintf_r+0x1ec>
 801c3a2:	2300      	movs	r3, #0
 801c3a4:	f04f 32ff 	mov.w	r2, #4294967295
 801c3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c3ac:	f10a 0a01 	add.w	sl, sl, #1
 801c3b0:	9304      	str	r3, [sp, #16]
 801c3b2:	9307      	str	r3, [sp, #28]
 801c3b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c3b8:	931a      	str	r3, [sp, #104]	@ 0x68
 801c3ba:	4654      	mov	r4, sl
 801c3bc:	2205      	movs	r2, #5
 801c3be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c3c2:	4853      	ldr	r0, [pc, #332]	@ (801c510 <_vfiprintf_r+0x21c>)
 801c3c4:	f7e3 feec 	bl	80001a0 <memchr>
 801c3c8:	9a04      	ldr	r2, [sp, #16]
 801c3ca:	b9d8      	cbnz	r0, 801c404 <_vfiprintf_r+0x110>
 801c3cc:	06d1      	lsls	r1, r2, #27
 801c3ce:	bf44      	itt	mi
 801c3d0:	2320      	movmi	r3, #32
 801c3d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c3d6:	0713      	lsls	r3, r2, #28
 801c3d8:	bf44      	itt	mi
 801c3da:	232b      	movmi	r3, #43	@ 0x2b
 801c3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c3e0:	f89a 3000 	ldrb.w	r3, [sl]
 801c3e4:	2b2a      	cmp	r3, #42	@ 0x2a
 801c3e6:	d015      	beq.n	801c414 <_vfiprintf_r+0x120>
 801c3e8:	9a07      	ldr	r2, [sp, #28]
 801c3ea:	4654      	mov	r4, sl
 801c3ec:	2000      	movs	r0, #0
 801c3ee:	f04f 0c0a 	mov.w	ip, #10
 801c3f2:	4621      	mov	r1, r4
 801c3f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c3f8:	3b30      	subs	r3, #48	@ 0x30
 801c3fa:	2b09      	cmp	r3, #9
 801c3fc:	d94b      	bls.n	801c496 <_vfiprintf_r+0x1a2>
 801c3fe:	b1b0      	cbz	r0, 801c42e <_vfiprintf_r+0x13a>
 801c400:	9207      	str	r2, [sp, #28]
 801c402:	e014      	b.n	801c42e <_vfiprintf_r+0x13a>
 801c404:	eba0 0308 	sub.w	r3, r0, r8
 801c408:	fa09 f303 	lsl.w	r3, r9, r3
 801c40c:	4313      	orrs	r3, r2
 801c40e:	9304      	str	r3, [sp, #16]
 801c410:	46a2      	mov	sl, r4
 801c412:	e7d2      	b.n	801c3ba <_vfiprintf_r+0xc6>
 801c414:	9b03      	ldr	r3, [sp, #12]
 801c416:	1d19      	adds	r1, r3, #4
 801c418:	681b      	ldr	r3, [r3, #0]
 801c41a:	9103      	str	r1, [sp, #12]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	bfbb      	ittet	lt
 801c420:	425b      	neglt	r3, r3
 801c422:	f042 0202 	orrlt.w	r2, r2, #2
 801c426:	9307      	strge	r3, [sp, #28]
 801c428:	9307      	strlt	r3, [sp, #28]
 801c42a:	bfb8      	it	lt
 801c42c:	9204      	strlt	r2, [sp, #16]
 801c42e:	7823      	ldrb	r3, [r4, #0]
 801c430:	2b2e      	cmp	r3, #46	@ 0x2e
 801c432:	d10a      	bne.n	801c44a <_vfiprintf_r+0x156>
 801c434:	7863      	ldrb	r3, [r4, #1]
 801c436:	2b2a      	cmp	r3, #42	@ 0x2a
 801c438:	d132      	bne.n	801c4a0 <_vfiprintf_r+0x1ac>
 801c43a:	9b03      	ldr	r3, [sp, #12]
 801c43c:	1d1a      	adds	r2, r3, #4
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	9203      	str	r2, [sp, #12]
 801c442:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c446:	3402      	adds	r4, #2
 801c448:	9305      	str	r3, [sp, #20]
 801c44a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c520 <_vfiprintf_r+0x22c>
 801c44e:	7821      	ldrb	r1, [r4, #0]
 801c450:	2203      	movs	r2, #3
 801c452:	4650      	mov	r0, sl
 801c454:	f7e3 fea4 	bl	80001a0 <memchr>
 801c458:	b138      	cbz	r0, 801c46a <_vfiprintf_r+0x176>
 801c45a:	9b04      	ldr	r3, [sp, #16]
 801c45c:	eba0 000a 	sub.w	r0, r0, sl
 801c460:	2240      	movs	r2, #64	@ 0x40
 801c462:	4082      	lsls	r2, r0
 801c464:	4313      	orrs	r3, r2
 801c466:	3401      	adds	r4, #1
 801c468:	9304      	str	r3, [sp, #16]
 801c46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c46e:	4829      	ldr	r0, [pc, #164]	@ (801c514 <_vfiprintf_r+0x220>)
 801c470:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c474:	2206      	movs	r2, #6
 801c476:	f7e3 fe93 	bl	80001a0 <memchr>
 801c47a:	2800      	cmp	r0, #0
 801c47c:	d03f      	beq.n	801c4fe <_vfiprintf_r+0x20a>
 801c47e:	4b26      	ldr	r3, [pc, #152]	@ (801c518 <_vfiprintf_r+0x224>)
 801c480:	bb1b      	cbnz	r3, 801c4ca <_vfiprintf_r+0x1d6>
 801c482:	9b03      	ldr	r3, [sp, #12]
 801c484:	3307      	adds	r3, #7
 801c486:	f023 0307 	bic.w	r3, r3, #7
 801c48a:	3308      	adds	r3, #8
 801c48c:	9303      	str	r3, [sp, #12]
 801c48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c490:	443b      	add	r3, r7
 801c492:	9309      	str	r3, [sp, #36]	@ 0x24
 801c494:	e76a      	b.n	801c36c <_vfiprintf_r+0x78>
 801c496:	fb0c 3202 	mla	r2, ip, r2, r3
 801c49a:	460c      	mov	r4, r1
 801c49c:	2001      	movs	r0, #1
 801c49e:	e7a8      	b.n	801c3f2 <_vfiprintf_r+0xfe>
 801c4a0:	2300      	movs	r3, #0
 801c4a2:	3401      	adds	r4, #1
 801c4a4:	9305      	str	r3, [sp, #20]
 801c4a6:	4619      	mov	r1, r3
 801c4a8:	f04f 0c0a 	mov.w	ip, #10
 801c4ac:	4620      	mov	r0, r4
 801c4ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c4b2:	3a30      	subs	r2, #48	@ 0x30
 801c4b4:	2a09      	cmp	r2, #9
 801c4b6:	d903      	bls.n	801c4c0 <_vfiprintf_r+0x1cc>
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d0c6      	beq.n	801c44a <_vfiprintf_r+0x156>
 801c4bc:	9105      	str	r1, [sp, #20]
 801c4be:	e7c4      	b.n	801c44a <_vfiprintf_r+0x156>
 801c4c0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c4c4:	4604      	mov	r4, r0
 801c4c6:	2301      	movs	r3, #1
 801c4c8:	e7f0      	b.n	801c4ac <_vfiprintf_r+0x1b8>
 801c4ca:	ab03      	add	r3, sp, #12
 801c4cc:	9300      	str	r3, [sp, #0]
 801c4ce:	462a      	mov	r2, r5
 801c4d0:	4b12      	ldr	r3, [pc, #72]	@ (801c51c <_vfiprintf_r+0x228>)
 801c4d2:	a904      	add	r1, sp, #16
 801c4d4:	4630      	mov	r0, r6
 801c4d6:	f7fd fd69 	bl	8019fac <_printf_float>
 801c4da:	4607      	mov	r7, r0
 801c4dc:	1c78      	adds	r0, r7, #1
 801c4de:	d1d6      	bne.n	801c48e <_vfiprintf_r+0x19a>
 801c4e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c4e2:	07d9      	lsls	r1, r3, #31
 801c4e4:	d405      	bmi.n	801c4f2 <_vfiprintf_r+0x1fe>
 801c4e6:	89ab      	ldrh	r3, [r5, #12]
 801c4e8:	059a      	lsls	r2, r3, #22
 801c4ea:	d402      	bmi.n	801c4f2 <_vfiprintf_r+0x1fe>
 801c4ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c4ee:	f7fe fb49 	bl	801ab84 <__retarget_lock_release_recursive>
 801c4f2:	89ab      	ldrh	r3, [r5, #12]
 801c4f4:	065b      	lsls	r3, r3, #25
 801c4f6:	f53f af1f 	bmi.w	801c338 <_vfiprintf_r+0x44>
 801c4fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c4fc:	e71e      	b.n	801c33c <_vfiprintf_r+0x48>
 801c4fe:	ab03      	add	r3, sp, #12
 801c500:	9300      	str	r3, [sp, #0]
 801c502:	462a      	mov	r2, r5
 801c504:	4b05      	ldr	r3, [pc, #20]	@ (801c51c <_vfiprintf_r+0x228>)
 801c506:	a904      	add	r1, sp, #16
 801c508:	4630      	mov	r0, r6
 801c50a:	f7fd ffe7 	bl	801a4dc <_printf_i>
 801c50e:	e7e4      	b.n	801c4da <_vfiprintf_r+0x1e6>
 801c510:	0801e1ce 	.word	0x0801e1ce
 801c514:	0801e1d8 	.word	0x0801e1d8
 801c518:	08019fad 	.word	0x08019fad
 801c51c:	0801c2cf 	.word	0x0801c2cf
 801c520:	0801e1d4 	.word	0x0801e1d4

0801c524 <__sflush_r>:
 801c524:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c52c:	0716      	lsls	r6, r2, #28
 801c52e:	4605      	mov	r5, r0
 801c530:	460c      	mov	r4, r1
 801c532:	d454      	bmi.n	801c5de <__sflush_r+0xba>
 801c534:	684b      	ldr	r3, [r1, #4]
 801c536:	2b00      	cmp	r3, #0
 801c538:	dc02      	bgt.n	801c540 <__sflush_r+0x1c>
 801c53a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	dd48      	ble.n	801c5d2 <__sflush_r+0xae>
 801c540:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c542:	2e00      	cmp	r6, #0
 801c544:	d045      	beq.n	801c5d2 <__sflush_r+0xae>
 801c546:	2300      	movs	r3, #0
 801c548:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c54c:	682f      	ldr	r7, [r5, #0]
 801c54e:	6a21      	ldr	r1, [r4, #32]
 801c550:	602b      	str	r3, [r5, #0]
 801c552:	d030      	beq.n	801c5b6 <__sflush_r+0x92>
 801c554:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c556:	89a3      	ldrh	r3, [r4, #12]
 801c558:	0759      	lsls	r1, r3, #29
 801c55a:	d505      	bpl.n	801c568 <__sflush_r+0x44>
 801c55c:	6863      	ldr	r3, [r4, #4]
 801c55e:	1ad2      	subs	r2, r2, r3
 801c560:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c562:	b10b      	cbz	r3, 801c568 <__sflush_r+0x44>
 801c564:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c566:	1ad2      	subs	r2, r2, r3
 801c568:	2300      	movs	r3, #0
 801c56a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c56c:	6a21      	ldr	r1, [r4, #32]
 801c56e:	4628      	mov	r0, r5
 801c570:	47b0      	blx	r6
 801c572:	1c43      	adds	r3, r0, #1
 801c574:	89a3      	ldrh	r3, [r4, #12]
 801c576:	d106      	bne.n	801c586 <__sflush_r+0x62>
 801c578:	6829      	ldr	r1, [r5, #0]
 801c57a:	291d      	cmp	r1, #29
 801c57c:	d82b      	bhi.n	801c5d6 <__sflush_r+0xb2>
 801c57e:	4a2a      	ldr	r2, [pc, #168]	@ (801c628 <__sflush_r+0x104>)
 801c580:	40ca      	lsrs	r2, r1
 801c582:	07d6      	lsls	r6, r2, #31
 801c584:	d527      	bpl.n	801c5d6 <__sflush_r+0xb2>
 801c586:	2200      	movs	r2, #0
 801c588:	6062      	str	r2, [r4, #4]
 801c58a:	04d9      	lsls	r1, r3, #19
 801c58c:	6922      	ldr	r2, [r4, #16]
 801c58e:	6022      	str	r2, [r4, #0]
 801c590:	d504      	bpl.n	801c59c <__sflush_r+0x78>
 801c592:	1c42      	adds	r2, r0, #1
 801c594:	d101      	bne.n	801c59a <__sflush_r+0x76>
 801c596:	682b      	ldr	r3, [r5, #0]
 801c598:	b903      	cbnz	r3, 801c59c <__sflush_r+0x78>
 801c59a:	6560      	str	r0, [r4, #84]	@ 0x54
 801c59c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c59e:	602f      	str	r7, [r5, #0]
 801c5a0:	b1b9      	cbz	r1, 801c5d2 <__sflush_r+0xae>
 801c5a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c5a6:	4299      	cmp	r1, r3
 801c5a8:	d002      	beq.n	801c5b0 <__sflush_r+0x8c>
 801c5aa:	4628      	mov	r0, r5
 801c5ac:	f7ff f95c 	bl	801b868 <_free_r>
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	6363      	str	r3, [r4, #52]	@ 0x34
 801c5b4:	e00d      	b.n	801c5d2 <__sflush_r+0xae>
 801c5b6:	2301      	movs	r3, #1
 801c5b8:	4628      	mov	r0, r5
 801c5ba:	47b0      	blx	r6
 801c5bc:	4602      	mov	r2, r0
 801c5be:	1c50      	adds	r0, r2, #1
 801c5c0:	d1c9      	bne.n	801c556 <__sflush_r+0x32>
 801c5c2:	682b      	ldr	r3, [r5, #0]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d0c6      	beq.n	801c556 <__sflush_r+0x32>
 801c5c8:	2b1d      	cmp	r3, #29
 801c5ca:	d001      	beq.n	801c5d0 <__sflush_r+0xac>
 801c5cc:	2b16      	cmp	r3, #22
 801c5ce:	d11e      	bne.n	801c60e <__sflush_r+0xea>
 801c5d0:	602f      	str	r7, [r5, #0]
 801c5d2:	2000      	movs	r0, #0
 801c5d4:	e022      	b.n	801c61c <__sflush_r+0xf8>
 801c5d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c5da:	b21b      	sxth	r3, r3
 801c5dc:	e01b      	b.n	801c616 <__sflush_r+0xf2>
 801c5de:	690f      	ldr	r7, [r1, #16]
 801c5e0:	2f00      	cmp	r7, #0
 801c5e2:	d0f6      	beq.n	801c5d2 <__sflush_r+0xae>
 801c5e4:	0793      	lsls	r3, r2, #30
 801c5e6:	680e      	ldr	r6, [r1, #0]
 801c5e8:	bf08      	it	eq
 801c5ea:	694b      	ldreq	r3, [r1, #20]
 801c5ec:	600f      	str	r7, [r1, #0]
 801c5ee:	bf18      	it	ne
 801c5f0:	2300      	movne	r3, #0
 801c5f2:	eba6 0807 	sub.w	r8, r6, r7
 801c5f6:	608b      	str	r3, [r1, #8]
 801c5f8:	f1b8 0f00 	cmp.w	r8, #0
 801c5fc:	dde9      	ble.n	801c5d2 <__sflush_r+0xae>
 801c5fe:	6a21      	ldr	r1, [r4, #32]
 801c600:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c602:	4643      	mov	r3, r8
 801c604:	463a      	mov	r2, r7
 801c606:	4628      	mov	r0, r5
 801c608:	47b0      	blx	r6
 801c60a:	2800      	cmp	r0, #0
 801c60c:	dc08      	bgt.n	801c620 <__sflush_r+0xfc>
 801c60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c616:	81a3      	strh	r3, [r4, #12]
 801c618:	f04f 30ff 	mov.w	r0, #4294967295
 801c61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c620:	4407      	add	r7, r0
 801c622:	eba8 0800 	sub.w	r8, r8, r0
 801c626:	e7e7      	b.n	801c5f8 <__sflush_r+0xd4>
 801c628:	20400001 	.word	0x20400001

0801c62c <_fflush_r>:
 801c62c:	b538      	push	{r3, r4, r5, lr}
 801c62e:	690b      	ldr	r3, [r1, #16]
 801c630:	4605      	mov	r5, r0
 801c632:	460c      	mov	r4, r1
 801c634:	b913      	cbnz	r3, 801c63c <_fflush_r+0x10>
 801c636:	2500      	movs	r5, #0
 801c638:	4628      	mov	r0, r5
 801c63a:	bd38      	pop	{r3, r4, r5, pc}
 801c63c:	b118      	cbz	r0, 801c646 <_fflush_r+0x1a>
 801c63e:	6a03      	ldr	r3, [r0, #32]
 801c640:	b90b      	cbnz	r3, 801c646 <_fflush_r+0x1a>
 801c642:	f7fe f8f5 	bl	801a830 <__sinit>
 801c646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d0f3      	beq.n	801c636 <_fflush_r+0xa>
 801c64e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c650:	07d0      	lsls	r0, r2, #31
 801c652:	d404      	bmi.n	801c65e <_fflush_r+0x32>
 801c654:	0599      	lsls	r1, r3, #22
 801c656:	d402      	bmi.n	801c65e <_fflush_r+0x32>
 801c658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c65a:	f7fe fa92 	bl	801ab82 <__retarget_lock_acquire_recursive>
 801c65e:	4628      	mov	r0, r5
 801c660:	4621      	mov	r1, r4
 801c662:	f7ff ff5f 	bl	801c524 <__sflush_r>
 801c666:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c668:	07da      	lsls	r2, r3, #31
 801c66a:	4605      	mov	r5, r0
 801c66c:	d4e4      	bmi.n	801c638 <_fflush_r+0xc>
 801c66e:	89a3      	ldrh	r3, [r4, #12]
 801c670:	059b      	lsls	r3, r3, #22
 801c672:	d4e1      	bmi.n	801c638 <_fflush_r+0xc>
 801c674:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c676:	f7fe fa85 	bl	801ab84 <__retarget_lock_release_recursive>
 801c67a:	e7dd      	b.n	801c638 <_fflush_r+0xc>

0801c67c <__swbuf_r>:
 801c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c67e:	460e      	mov	r6, r1
 801c680:	4614      	mov	r4, r2
 801c682:	4605      	mov	r5, r0
 801c684:	b118      	cbz	r0, 801c68e <__swbuf_r+0x12>
 801c686:	6a03      	ldr	r3, [r0, #32]
 801c688:	b90b      	cbnz	r3, 801c68e <__swbuf_r+0x12>
 801c68a:	f7fe f8d1 	bl	801a830 <__sinit>
 801c68e:	69a3      	ldr	r3, [r4, #24]
 801c690:	60a3      	str	r3, [r4, #8]
 801c692:	89a3      	ldrh	r3, [r4, #12]
 801c694:	071a      	lsls	r2, r3, #28
 801c696:	d501      	bpl.n	801c69c <__swbuf_r+0x20>
 801c698:	6923      	ldr	r3, [r4, #16]
 801c69a:	b943      	cbnz	r3, 801c6ae <__swbuf_r+0x32>
 801c69c:	4621      	mov	r1, r4
 801c69e:	4628      	mov	r0, r5
 801c6a0:	f000 f82a 	bl	801c6f8 <__swsetup_r>
 801c6a4:	b118      	cbz	r0, 801c6ae <__swbuf_r+0x32>
 801c6a6:	f04f 37ff 	mov.w	r7, #4294967295
 801c6aa:	4638      	mov	r0, r7
 801c6ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6ae:	6823      	ldr	r3, [r4, #0]
 801c6b0:	6922      	ldr	r2, [r4, #16]
 801c6b2:	1a98      	subs	r0, r3, r2
 801c6b4:	6963      	ldr	r3, [r4, #20]
 801c6b6:	b2f6      	uxtb	r6, r6
 801c6b8:	4283      	cmp	r3, r0
 801c6ba:	4637      	mov	r7, r6
 801c6bc:	dc05      	bgt.n	801c6ca <__swbuf_r+0x4e>
 801c6be:	4621      	mov	r1, r4
 801c6c0:	4628      	mov	r0, r5
 801c6c2:	f7ff ffb3 	bl	801c62c <_fflush_r>
 801c6c6:	2800      	cmp	r0, #0
 801c6c8:	d1ed      	bne.n	801c6a6 <__swbuf_r+0x2a>
 801c6ca:	68a3      	ldr	r3, [r4, #8]
 801c6cc:	3b01      	subs	r3, #1
 801c6ce:	60a3      	str	r3, [r4, #8]
 801c6d0:	6823      	ldr	r3, [r4, #0]
 801c6d2:	1c5a      	adds	r2, r3, #1
 801c6d4:	6022      	str	r2, [r4, #0]
 801c6d6:	701e      	strb	r6, [r3, #0]
 801c6d8:	6962      	ldr	r2, [r4, #20]
 801c6da:	1c43      	adds	r3, r0, #1
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	d004      	beq.n	801c6ea <__swbuf_r+0x6e>
 801c6e0:	89a3      	ldrh	r3, [r4, #12]
 801c6e2:	07db      	lsls	r3, r3, #31
 801c6e4:	d5e1      	bpl.n	801c6aa <__swbuf_r+0x2e>
 801c6e6:	2e0a      	cmp	r6, #10
 801c6e8:	d1df      	bne.n	801c6aa <__swbuf_r+0x2e>
 801c6ea:	4621      	mov	r1, r4
 801c6ec:	4628      	mov	r0, r5
 801c6ee:	f7ff ff9d 	bl	801c62c <_fflush_r>
 801c6f2:	2800      	cmp	r0, #0
 801c6f4:	d0d9      	beq.n	801c6aa <__swbuf_r+0x2e>
 801c6f6:	e7d6      	b.n	801c6a6 <__swbuf_r+0x2a>

0801c6f8 <__swsetup_r>:
 801c6f8:	b538      	push	{r3, r4, r5, lr}
 801c6fa:	4b29      	ldr	r3, [pc, #164]	@ (801c7a0 <__swsetup_r+0xa8>)
 801c6fc:	4605      	mov	r5, r0
 801c6fe:	6818      	ldr	r0, [r3, #0]
 801c700:	460c      	mov	r4, r1
 801c702:	b118      	cbz	r0, 801c70c <__swsetup_r+0x14>
 801c704:	6a03      	ldr	r3, [r0, #32]
 801c706:	b90b      	cbnz	r3, 801c70c <__swsetup_r+0x14>
 801c708:	f7fe f892 	bl	801a830 <__sinit>
 801c70c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c710:	0719      	lsls	r1, r3, #28
 801c712:	d422      	bmi.n	801c75a <__swsetup_r+0x62>
 801c714:	06da      	lsls	r2, r3, #27
 801c716:	d407      	bmi.n	801c728 <__swsetup_r+0x30>
 801c718:	2209      	movs	r2, #9
 801c71a:	602a      	str	r2, [r5, #0]
 801c71c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c720:	81a3      	strh	r3, [r4, #12]
 801c722:	f04f 30ff 	mov.w	r0, #4294967295
 801c726:	e033      	b.n	801c790 <__swsetup_r+0x98>
 801c728:	0758      	lsls	r0, r3, #29
 801c72a:	d512      	bpl.n	801c752 <__swsetup_r+0x5a>
 801c72c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c72e:	b141      	cbz	r1, 801c742 <__swsetup_r+0x4a>
 801c730:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c734:	4299      	cmp	r1, r3
 801c736:	d002      	beq.n	801c73e <__swsetup_r+0x46>
 801c738:	4628      	mov	r0, r5
 801c73a:	f7ff f895 	bl	801b868 <_free_r>
 801c73e:	2300      	movs	r3, #0
 801c740:	6363      	str	r3, [r4, #52]	@ 0x34
 801c742:	89a3      	ldrh	r3, [r4, #12]
 801c744:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801c748:	81a3      	strh	r3, [r4, #12]
 801c74a:	2300      	movs	r3, #0
 801c74c:	6063      	str	r3, [r4, #4]
 801c74e:	6923      	ldr	r3, [r4, #16]
 801c750:	6023      	str	r3, [r4, #0]
 801c752:	89a3      	ldrh	r3, [r4, #12]
 801c754:	f043 0308 	orr.w	r3, r3, #8
 801c758:	81a3      	strh	r3, [r4, #12]
 801c75a:	6923      	ldr	r3, [r4, #16]
 801c75c:	b94b      	cbnz	r3, 801c772 <__swsetup_r+0x7a>
 801c75e:	89a3      	ldrh	r3, [r4, #12]
 801c760:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801c764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c768:	d003      	beq.n	801c772 <__swsetup_r+0x7a>
 801c76a:	4621      	mov	r1, r4
 801c76c:	4628      	mov	r0, r5
 801c76e:	f000 f8d1 	bl	801c914 <__smakebuf_r>
 801c772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c776:	f013 0201 	ands.w	r2, r3, #1
 801c77a:	d00a      	beq.n	801c792 <__swsetup_r+0x9a>
 801c77c:	2200      	movs	r2, #0
 801c77e:	60a2      	str	r2, [r4, #8]
 801c780:	6962      	ldr	r2, [r4, #20]
 801c782:	4252      	negs	r2, r2
 801c784:	61a2      	str	r2, [r4, #24]
 801c786:	6922      	ldr	r2, [r4, #16]
 801c788:	b942      	cbnz	r2, 801c79c <__swsetup_r+0xa4>
 801c78a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801c78e:	d1c5      	bne.n	801c71c <__swsetup_r+0x24>
 801c790:	bd38      	pop	{r3, r4, r5, pc}
 801c792:	0799      	lsls	r1, r3, #30
 801c794:	bf58      	it	pl
 801c796:	6962      	ldrpl	r2, [r4, #20]
 801c798:	60a2      	str	r2, [r4, #8]
 801c79a:	e7f4      	b.n	801c786 <__swsetup_r+0x8e>
 801c79c:	2000      	movs	r0, #0
 801c79e:	e7f7      	b.n	801c790 <__swsetup_r+0x98>
 801c7a0:	20000130 	.word	0x20000130

0801c7a4 <__assert_func>:
 801c7a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c7a6:	4614      	mov	r4, r2
 801c7a8:	461a      	mov	r2, r3
 801c7aa:	4b09      	ldr	r3, [pc, #36]	@ (801c7d0 <__assert_func+0x2c>)
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	4605      	mov	r5, r0
 801c7b0:	68d8      	ldr	r0, [r3, #12]
 801c7b2:	b14c      	cbz	r4, 801c7c8 <__assert_func+0x24>
 801c7b4:	4b07      	ldr	r3, [pc, #28]	@ (801c7d4 <__assert_func+0x30>)
 801c7b6:	9100      	str	r1, [sp, #0]
 801c7b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c7bc:	4906      	ldr	r1, [pc, #24]	@ (801c7d8 <__assert_func+0x34>)
 801c7be:	462b      	mov	r3, r5
 801c7c0:	f000 f870 	bl	801c8a4 <fiprintf>
 801c7c4:	f7fd fa8c 	bl	8019ce0 <abort>
 801c7c8:	4b04      	ldr	r3, [pc, #16]	@ (801c7dc <__assert_func+0x38>)
 801c7ca:	461c      	mov	r4, r3
 801c7cc:	e7f3      	b.n	801c7b6 <__assert_func+0x12>
 801c7ce:	bf00      	nop
 801c7d0:	20000130 	.word	0x20000130
 801c7d4:	0801e1e9 	.word	0x0801e1e9
 801c7d8:	0801e1f6 	.word	0x0801e1f6
 801c7dc:	0801e224 	.word	0x0801e224

0801c7e0 <_calloc_r>:
 801c7e0:	b570      	push	{r4, r5, r6, lr}
 801c7e2:	fba1 5402 	umull	r5, r4, r1, r2
 801c7e6:	b934      	cbnz	r4, 801c7f6 <_calloc_r+0x16>
 801c7e8:	4629      	mov	r1, r5
 801c7ea:	f7fd fab3 	bl	8019d54 <_malloc_r>
 801c7ee:	4606      	mov	r6, r0
 801c7f0:	b928      	cbnz	r0, 801c7fe <_calloc_r+0x1e>
 801c7f2:	4630      	mov	r0, r6
 801c7f4:	bd70      	pop	{r4, r5, r6, pc}
 801c7f6:	220c      	movs	r2, #12
 801c7f8:	6002      	str	r2, [r0, #0]
 801c7fa:	2600      	movs	r6, #0
 801c7fc:	e7f9      	b.n	801c7f2 <_calloc_r+0x12>
 801c7fe:	462a      	mov	r2, r5
 801c800:	4621      	mov	r1, r4
 801c802:	f7fe f8de 	bl	801a9c2 <memset>
 801c806:	e7f4      	b.n	801c7f2 <_calloc_r+0x12>

0801c808 <__ascii_mbtowc>:
 801c808:	b082      	sub	sp, #8
 801c80a:	b901      	cbnz	r1, 801c80e <__ascii_mbtowc+0x6>
 801c80c:	a901      	add	r1, sp, #4
 801c80e:	b142      	cbz	r2, 801c822 <__ascii_mbtowc+0x1a>
 801c810:	b14b      	cbz	r3, 801c826 <__ascii_mbtowc+0x1e>
 801c812:	7813      	ldrb	r3, [r2, #0]
 801c814:	600b      	str	r3, [r1, #0]
 801c816:	7812      	ldrb	r2, [r2, #0]
 801c818:	1e10      	subs	r0, r2, #0
 801c81a:	bf18      	it	ne
 801c81c:	2001      	movne	r0, #1
 801c81e:	b002      	add	sp, #8
 801c820:	4770      	bx	lr
 801c822:	4610      	mov	r0, r2
 801c824:	e7fb      	b.n	801c81e <__ascii_mbtowc+0x16>
 801c826:	f06f 0001 	mvn.w	r0, #1
 801c82a:	e7f8      	b.n	801c81e <__ascii_mbtowc+0x16>

0801c82c <_realloc_r>:
 801c82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c830:	4607      	mov	r7, r0
 801c832:	4614      	mov	r4, r2
 801c834:	460d      	mov	r5, r1
 801c836:	b921      	cbnz	r1, 801c842 <_realloc_r+0x16>
 801c838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c83c:	4611      	mov	r1, r2
 801c83e:	f7fd ba89 	b.w	8019d54 <_malloc_r>
 801c842:	b92a      	cbnz	r2, 801c850 <_realloc_r+0x24>
 801c844:	f7ff f810 	bl	801b868 <_free_r>
 801c848:	4625      	mov	r5, r4
 801c84a:	4628      	mov	r0, r5
 801c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c850:	f000 f8be 	bl	801c9d0 <_malloc_usable_size_r>
 801c854:	4284      	cmp	r4, r0
 801c856:	4606      	mov	r6, r0
 801c858:	d802      	bhi.n	801c860 <_realloc_r+0x34>
 801c85a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c85e:	d8f4      	bhi.n	801c84a <_realloc_r+0x1e>
 801c860:	4621      	mov	r1, r4
 801c862:	4638      	mov	r0, r7
 801c864:	f7fd fa76 	bl	8019d54 <_malloc_r>
 801c868:	4680      	mov	r8, r0
 801c86a:	b908      	cbnz	r0, 801c870 <_realloc_r+0x44>
 801c86c:	4645      	mov	r5, r8
 801c86e:	e7ec      	b.n	801c84a <_realloc_r+0x1e>
 801c870:	42b4      	cmp	r4, r6
 801c872:	4622      	mov	r2, r4
 801c874:	4629      	mov	r1, r5
 801c876:	bf28      	it	cs
 801c878:	4632      	movcs	r2, r6
 801c87a:	f7fe f98c 	bl	801ab96 <memcpy>
 801c87e:	4629      	mov	r1, r5
 801c880:	4638      	mov	r0, r7
 801c882:	f7fe fff1 	bl	801b868 <_free_r>
 801c886:	e7f1      	b.n	801c86c <_realloc_r+0x40>

0801c888 <__ascii_wctomb>:
 801c888:	4603      	mov	r3, r0
 801c88a:	4608      	mov	r0, r1
 801c88c:	b141      	cbz	r1, 801c8a0 <__ascii_wctomb+0x18>
 801c88e:	2aff      	cmp	r2, #255	@ 0xff
 801c890:	d904      	bls.n	801c89c <__ascii_wctomb+0x14>
 801c892:	228a      	movs	r2, #138	@ 0x8a
 801c894:	601a      	str	r2, [r3, #0]
 801c896:	f04f 30ff 	mov.w	r0, #4294967295
 801c89a:	4770      	bx	lr
 801c89c:	700a      	strb	r2, [r1, #0]
 801c89e:	2001      	movs	r0, #1
 801c8a0:	4770      	bx	lr
	...

0801c8a4 <fiprintf>:
 801c8a4:	b40e      	push	{r1, r2, r3}
 801c8a6:	b503      	push	{r0, r1, lr}
 801c8a8:	4601      	mov	r1, r0
 801c8aa:	ab03      	add	r3, sp, #12
 801c8ac:	4805      	ldr	r0, [pc, #20]	@ (801c8c4 <fiprintf+0x20>)
 801c8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 801c8b2:	6800      	ldr	r0, [r0, #0]
 801c8b4:	9301      	str	r3, [sp, #4]
 801c8b6:	f7ff fd1d 	bl	801c2f4 <_vfiprintf_r>
 801c8ba:	b002      	add	sp, #8
 801c8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801c8c0:	b003      	add	sp, #12
 801c8c2:	4770      	bx	lr
 801c8c4:	20000130 	.word	0x20000130

0801c8c8 <__swhatbuf_r>:
 801c8c8:	b570      	push	{r4, r5, r6, lr}
 801c8ca:	460c      	mov	r4, r1
 801c8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8d0:	2900      	cmp	r1, #0
 801c8d2:	b096      	sub	sp, #88	@ 0x58
 801c8d4:	4615      	mov	r5, r2
 801c8d6:	461e      	mov	r6, r3
 801c8d8:	da0d      	bge.n	801c8f6 <__swhatbuf_r+0x2e>
 801c8da:	89a3      	ldrh	r3, [r4, #12]
 801c8dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c8e0:	f04f 0100 	mov.w	r1, #0
 801c8e4:	bf14      	ite	ne
 801c8e6:	2340      	movne	r3, #64	@ 0x40
 801c8e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c8ec:	2000      	movs	r0, #0
 801c8ee:	6031      	str	r1, [r6, #0]
 801c8f0:	602b      	str	r3, [r5, #0]
 801c8f2:	b016      	add	sp, #88	@ 0x58
 801c8f4:	bd70      	pop	{r4, r5, r6, pc}
 801c8f6:	466a      	mov	r2, sp
 801c8f8:	f000 f848 	bl	801c98c <_fstat_r>
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	dbec      	blt.n	801c8da <__swhatbuf_r+0x12>
 801c900:	9901      	ldr	r1, [sp, #4]
 801c902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c90a:	4259      	negs	r1, r3
 801c90c:	4159      	adcs	r1, r3
 801c90e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c912:	e7eb      	b.n	801c8ec <__swhatbuf_r+0x24>

0801c914 <__smakebuf_r>:
 801c914:	898b      	ldrh	r3, [r1, #12]
 801c916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c918:	079d      	lsls	r5, r3, #30
 801c91a:	4606      	mov	r6, r0
 801c91c:	460c      	mov	r4, r1
 801c91e:	d507      	bpl.n	801c930 <__smakebuf_r+0x1c>
 801c920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c924:	6023      	str	r3, [r4, #0]
 801c926:	6123      	str	r3, [r4, #16]
 801c928:	2301      	movs	r3, #1
 801c92a:	6163      	str	r3, [r4, #20]
 801c92c:	b003      	add	sp, #12
 801c92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c930:	ab01      	add	r3, sp, #4
 801c932:	466a      	mov	r2, sp
 801c934:	f7ff ffc8 	bl	801c8c8 <__swhatbuf_r>
 801c938:	9f00      	ldr	r7, [sp, #0]
 801c93a:	4605      	mov	r5, r0
 801c93c:	4639      	mov	r1, r7
 801c93e:	4630      	mov	r0, r6
 801c940:	f7fd fa08 	bl	8019d54 <_malloc_r>
 801c944:	b948      	cbnz	r0, 801c95a <__smakebuf_r+0x46>
 801c946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c94a:	059a      	lsls	r2, r3, #22
 801c94c:	d4ee      	bmi.n	801c92c <__smakebuf_r+0x18>
 801c94e:	f023 0303 	bic.w	r3, r3, #3
 801c952:	f043 0302 	orr.w	r3, r3, #2
 801c956:	81a3      	strh	r3, [r4, #12]
 801c958:	e7e2      	b.n	801c920 <__smakebuf_r+0xc>
 801c95a:	89a3      	ldrh	r3, [r4, #12]
 801c95c:	6020      	str	r0, [r4, #0]
 801c95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c962:	81a3      	strh	r3, [r4, #12]
 801c964:	9b01      	ldr	r3, [sp, #4]
 801c966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c96a:	b15b      	cbz	r3, 801c984 <__smakebuf_r+0x70>
 801c96c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c970:	4630      	mov	r0, r6
 801c972:	f000 f81d 	bl	801c9b0 <_isatty_r>
 801c976:	b128      	cbz	r0, 801c984 <__smakebuf_r+0x70>
 801c978:	89a3      	ldrh	r3, [r4, #12]
 801c97a:	f023 0303 	bic.w	r3, r3, #3
 801c97e:	f043 0301 	orr.w	r3, r3, #1
 801c982:	81a3      	strh	r3, [r4, #12]
 801c984:	89a3      	ldrh	r3, [r4, #12]
 801c986:	431d      	orrs	r5, r3
 801c988:	81a5      	strh	r5, [r4, #12]
 801c98a:	e7cf      	b.n	801c92c <__smakebuf_r+0x18>

0801c98c <_fstat_r>:
 801c98c:	b538      	push	{r3, r4, r5, lr}
 801c98e:	4d07      	ldr	r5, [pc, #28]	@ (801c9ac <_fstat_r+0x20>)
 801c990:	2300      	movs	r3, #0
 801c992:	4604      	mov	r4, r0
 801c994:	4608      	mov	r0, r1
 801c996:	4611      	mov	r1, r2
 801c998:	602b      	str	r3, [r5, #0]
 801c99a:	f7ea fd17 	bl	80073cc <_fstat>
 801c99e:	1c43      	adds	r3, r0, #1
 801c9a0:	d102      	bne.n	801c9a8 <_fstat_r+0x1c>
 801c9a2:	682b      	ldr	r3, [r5, #0]
 801c9a4:	b103      	cbz	r3, 801c9a8 <_fstat_r+0x1c>
 801c9a6:	6023      	str	r3, [r4, #0]
 801c9a8:	bd38      	pop	{r3, r4, r5, pc}
 801c9aa:	bf00      	nop
 801c9ac:	20001b04 	.word	0x20001b04

0801c9b0 <_isatty_r>:
 801c9b0:	b538      	push	{r3, r4, r5, lr}
 801c9b2:	4d06      	ldr	r5, [pc, #24]	@ (801c9cc <_isatty_r+0x1c>)
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	4604      	mov	r4, r0
 801c9b8:	4608      	mov	r0, r1
 801c9ba:	602b      	str	r3, [r5, #0]
 801c9bc:	f7ea fd16 	bl	80073ec <_isatty>
 801c9c0:	1c43      	adds	r3, r0, #1
 801c9c2:	d102      	bne.n	801c9ca <_isatty_r+0x1a>
 801c9c4:	682b      	ldr	r3, [r5, #0]
 801c9c6:	b103      	cbz	r3, 801c9ca <_isatty_r+0x1a>
 801c9c8:	6023      	str	r3, [r4, #0]
 801c9ca:	bd38      	pop	{r3, r4, r5, pc}
 801c9cc:	20001b04 	.word	0x20001b04

0801c9d0 <_malloc_usable_size_r>:
 801c9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c9d4:	1f18      	subs	r0, r3, #4
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	bfbc      	itt	lt
 801c9da:	580b      	ldrlt	r3, [r1, r0]
 801c9dc:	18c0      	addlt	r0, r0, r3
 801c9de:	4770      	bx	lr

0801c9e0 <_init>:
 801c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9e2:	bf00      	nop
 801c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9e6:	bc08      	pop	{r3}
 801c9e8:	469e      	mov	lr, r3
 801c9ea:	4770      	bx	lr

0801c9ec <_fini>:
 801c9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c9ee:	bf00      	nop
 801c9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c9f2:	bc08      	pop	{r3}
 801c9f4:	469e      	mov	lr, r3
 801c9f6:	4770      	bx	lr
